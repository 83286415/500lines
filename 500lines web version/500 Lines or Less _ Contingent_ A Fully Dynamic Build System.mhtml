From: <Saved by Blink>
Subject: 500 Lines or Less | Contingent: A Fully Dynamic Build System
Date: Tue, 11 Feb 2019 01:51:50 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----"

------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: text/html
Content-ID: <frame-60-09508e67-58da-4b61-91d0-a71eee3de80b@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/contingent-a-fully-dynamic-build-system.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | Contingent: A Fully Dynamic Build System</ti=
tle>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div id=3D"MathJax_Message" style=3D"display: none;"></div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>Contingent: A Fully Dynamic Build System</h1>
          <h2 class=3D"author">Brandon Rhodes and Daniel Rocco</h2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em>Brandon Rhodes started using Python in the late 1990s, and=
 for 17 years has maintained the PyEphem library for amateur astronomers. H=
e works at Dropbox, has taught Python programming courses for corporate cli=
ents, consulted on projects like the New England Wildflower Society's =E2=
=80=9CGo Botany=E2=80=9D Django site, and will be the chair of the PyCon co=
nference in 2016 and 2017. Brandon believes that well-written code is a for=
m of literature, that beautifully formatted code is a work of graphic desig=
n, and that correct code is one of the most transparent forms of thought.</=
em></p>

<p><em>Daniel Rocco loves Python, coffee, craft, stout, object and system d=
esign, bourbon, teaching, trees, and Latin guitar. Thrilled that he gets to=
 write Python for a living, he is always on the lookout for opportunities t=
o learn from others in the community, and to contribute by sharing knowledg=
e. He is a frequent speaker at PyAtl on introductory topics, testing, desig=
n, and shiny things; he loves seeing the spark of wonder and delight in peo=
ple's eyes when someone shares a novel, surprising, or beautiful idea. Dani=
el lives in Atlanta with a microbiologist and four aspiring rocketeers.</em=
></p>

<h2 id=3D"introduction">Introduction</h2>

<p>Build systems have long been a standard tool within computer programming=
.</p>

<p>The standard <code>make</code> build system, for which its author won th=
e ACM Software System Award, was first developed in&nbsp;1976. It not only =
lets you declare that an output file depends upon one (or more) inputs, but=
 lets you do this recursively. A&nbsp;program, for example, might depend up=
on an object file which itself depends upon the corresponding source code:<=
/p>

<pre><code>    prog: main.o
            cc -o prog main.o

    main.o: main.c
            cc -C -o main.o main.c</code></pre>

<p>Should <code>make</code> discover, upon its next invocation, that the <c=
ode>main.c</code> source code file now has a more recent modify time than <=
code>main.o</code>, then it will not only rebuild the <code>main.o</code> o=
bject file but will also rebuild <code>prog</code> itself.</p>

<p>Build systems are a common semester project assigned to undergraduate co=
mputer science students =E2=80=94 not only because build systems are used i=
n nearly all software projects, but because their construction involves fun=
damental data structures and algorithms involving directed graphs (which th=
is chapter will later discuss in more detail).</p>

<p>With decades of use and practice behind build systems, one might expect =
them to have become completely general-purpose and ready for even the most =
extravagant demands. But, in fact, one kind of common interaction between b=
uild artifacts =E2=80=94 the problem of dynamic cross-referencing =E2=80=94=
 is handled so poorly by most build systems that in this chapter we are ins=
pired to not only rehearse the classic solution and data structures used to=
 solve the <code>make</code> problem, but to extend that solution dramatica=
lly, to a far more demanding domain.</p>

<p>The problem, again, is cross-referencing. Where do cross-references tend=
 to emerge? In text documents, documentation, and printed books! </p>

<h2 id=3D"the-problem-building-document-systems">The Problem: Building Docu=
ment Systems</h2>

<p>Systems to rebuild formatted documents from source always seem to do too=
 much work, or too little.</p>

<p>They do too much work when they respond to a minor edit by making you wa=
it for unrelated chapters to be re-parsed and re-formatted. But they can al=
so rebuild too little, leaving you with an inconsistent final product.</p>

<p>Consider <a href=3D"http://sphinx-doc.org/">Sphinx</a>, the document bui=
lder that is used for both the official Python language documentation and m=
any other projects in the Python community. A&nbsp;Sphinx project=E2=80=99s=
 <code>index.rst</code> will usually include a table of contents:</p>

<pre><code>   Table of Contents
   =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

   .. toctree::

      install.rst
      tutorial.rst
      api.rst</code></pre>

<p>This list of chapter filenames tells Sphinx to include a link to each of=
 the three named chapters when it builds the <code>index.html</code> output=
 file. It will also include links to any sections within each chapter. Stri=
pped of its markup, the text that results from the above title and <code>to=
ctree</code> command might&nbsp;be:</p>

<pre><code>  Table of Contents

  =E2=80=A2 Installation

  =E2=80=A2 Newcomers Tutorial
      =E2=80=A2 Hello, World
      =E2=80=A2 Adding Logging

  =E2=80=A2 API Reference
      =E2=80=A2 Handy Functions
      =E2=80=A2 Obscure Classes</code></pre>

<p>This table of contents, as you can see, is a mash-up of information from=
 four different files. While its basic order and structure come from <code>=
index.rst</code>, the actual titles of each chapter and section are pulled =
from the three chapter source files themselves.</p>

<p>If you later reconsider the tutorial=E2=80=99s chapter title =E2=80=94 a=
fter all, the word =E2=80=9Cnewcomer=E2=80=9D sounds so quaint, as if your =
users are settlers who have just arrived in pioneer Wyoming =E2=80=94 then =
you would edit the first line of <code>tutorial.rst</code> and write someth=
ing better:</p>

<pre><code>  -Newcomers Tutorial
  +Beginners Tutorial
   =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

   Welcome to the tutorial!
   This text will take you through the basics of...</code></pre>

<p>When you are ready to rebuild, Sphinx will do exactly the right thing! I=
t will rebuild both the tutorial chapter itself, and the index. (Piping the=
 output into <code>cat</code> makes Sphinx announce each rebuilt file on a =
separate line, instead of using bare carriage returns to repeatedly overwri=
te a single line with these progress updates.)</p>

<pre><code>   $ make html | cat
   writing output... [ 50%] index
   writing output... [100%] tutorial</code></pre>

<p>Because Sphinx chose to rebuild both documents, not only will <code>tuto=
rial.html</code> now feature its new title up at the top, but the output <c=
ode>index.html</code> will display the updated chapter title in the table o=
f contents. Sphinx has rebuilt everything so that the output is consistent.=
</p>

<p>What if your edit to <code>tutorial.rst</code> is more minor?</p>

<pre><code>   Beginners Tutorial
   =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

  -Welcome to the tutorial!
  +Welcome to our project tutorial!
   This text will take you through the basics of...</code></pre>

<p>In this case there is no need to rebuild <code>index.html</code> because=
 this minor edit to the interior of a paragraph does not change any of the =
information in the table of contents. But it turns out that Sphinx is not q=
uite as clever as it might have at first appeared! It will go ahead and per=
form the redundant work of rebuilding <code>index.html</code> even though t=
he resulting contents will be exactly the same.</p>

<pre><code>   writing output... [ 50%] index
   writing output... [100%] tutorial</code></pre>

<p>You can run <code>diff</code> on the =E2=80=9Cbefore=E2=80=9D and =E2=80=
=9Cafter=E2=80=9D versions of <code>index.html</code> to confirm that your =
small edit has had no effect on the front page =E2=80=94 yet Sphinx made yo=
u wait while it was rebuilt anyway.</p>

<p>You might not even notice the extra rebuild effort for small documents t=
hat are easy to compile. But the delay to your workflow can become signific=
ant when you are making frequent tweaks and edits to documents that are lon=
g, complex, or that involve the generation of multimedia like plots or anim=
ations. While Sphinx is at least making an effort not to rebuild every chap=
ter when you make a single change =E2=80=94 it has not, for example, rebuil=
t <code>install.html</code> or <code>api.html</code> in response to your <c=
ode>tutorial.rst</code> edit =E2=80=94 it is doing more than is necessary.<=
/p>

<p>But it turns out that Sphinx does something even worse: it sometimes doe=
s too little, leaving you with inconsistent output that could be noticed by=
 users.</p>

<p>To see one of its simplest failures, first add a cross reference to the =
top of your API documentation:</p>

<pre><code>   API Reference
   =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D

  +Before reading this, try reading our :doc:`tutorial`!
  +
   The sections below list every function
   and every single class and method offered...</code></pre>

<p>With its usual caution as regards the table of contents, Sphinx will dut=
ifully rebuild both this API reference document as well as the <code>index.=
html</code> home page of your project:</p>

<pre><code>   writing output... [ 50%] api
   writing output... [100%] index</code></pre>

<p>In the <code>api.html</code> output file you can confirm that Sphinx has=
 included the attractive human-readable title of the tutorial chapter into =
the cross reference=E2=80=99s anchor tag:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html">   <span cla=
ss=3D"kw">&lt;p&gt;</span>Before reading this, try reading our
   <span class=3D"kw">&lt;a</span><span class=3D"ot"> class=3D</span><span =
class=3D"st">"reference internal"</span><span class=3D"ot"> href=3D</span><=
span class=3D"st">"tutorial.html"</span><span class=3D"kw">&gt;</span>
     <span class=3D"kw">&lt;em&gt;</span>Beginners Tutorial<span class=3D"k=
w">&lt;/em&gt;</span>
   <span class=3D"kw">&lt;/a&gt;</span>!<span class=3D"kw">&lt;/p&gt;</span=
></code></pre>

<p>What if you now make another edit to the title at the top of the <code>t=
utorial.rst</code> file? You will have invalidated <em>three</em> output fi=
les:</p>

<ol style=3D"list-style-type: decimal">
<li><p>The title at the top of <code>tutorial.html</code> is now out of dat=
e, so the file needs to be rebuilt.</p></li>
<li><p>The table of contents in <code>index.html</code> still has the old t=
itle, so that document needs to be rebuilt.</p></li>
<li><p>The embedded cross reference in the first paragraph of <code>api.htm=
l</code> still has the old chapter title, and also needs to be rebuilt.</p>=
</li>
</ol>

<p>What does Sphinx do?</p>

<pre><code>   writing output... [ 50%] index
   writing output... [100%] tutorial</code></pre>

<p>Whoops.</p>

<p>Only two files were rebuilt, not three. Sphinx has failed to correctly r=
ebuild your documentation.</p>

<p>If you now push your HTML to the web, users will see the old title in th=
e cross reference at the top of <code>api.html</code> but then a different =
title =E2=80=94 the new one =E2=80=94 once the link has carried them to <co=
de>tutorial.html</code> itself. This can happen for many kinds of cross ref=
erence that Sphinx supports: chapter titles, section titles, paragraphs, cl=
asses, methods, and functions.</p>

<h2 id=3D"build-systems-and-consistency">Build Systems and Consistency</h2>

<p>The problem outlined above is not specific to Sphinx. Not only does it h=
aunt other document systems, like LaTeX, but it can even plague projects th=
at are simply trying to direct compilation steps with the venerable <code>m=
ake</code> utility, if their assets happen to cross-reference in interestin=
g ways.</p>

<p>As the problem is ancient and universal, its solution is of equally long=
 lineage:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">   $ <span c=
lass=3D"kw">rm</span> -r _build/
   $ <span class=3D"kw">make</span> html</code></pre>

<p>If you remove all of the output, you are guaranteed a complete rebuild! =
Some projects even alias <code>rm</code> <code>-r</code> to a target named =
<code>clean</code> so that only a quick <code>make</code> <code>clean</code=
> is necessary to wipe the slate.</p>

<p>By eliminating every copy of every intermediate or output asset, a hefty=
 <code>rm</code> <code>-r</code> is able to force the build to start over a=
gain with nothing cached =E2=80=94 with no memory of its earlier state that=
 could possibly lead to a stale product.</p>

<p>But could we develop a better approach?</p>

<p>What if your build system were a persistent process that noticed every c=
hapter title, every section title, and every cross-referenced phrase as it =
passed from the source code of one document into the text of another? Its d=
ecisions about whether to rebuild other documents after a change to a singl=
e source file could be precise, instead of mere guesses, and correct, inste=
ad of leaving the output in an inconsistent state.</p>

<p>The result would be a system like the old static <code>make</code> tool,=
 but which learned the dependencies between files as they were built =E2=80=
=94 that added and removed dependencies dynamically as cross references wer=
e added, updated, and deleted.</p>

<p>In the sections that follow we will construct such a tool, named Conting=
ent, in Python. Contingent guarantees correctness in the presence of dynami=
c dependencies while performing the fewest possible rebuild steps. While it=
 can be applied to any problem domain, we will run it against a small versi=
on of the problem outlined above.</p>

<h2 id=3D"linking-tasks-to-make-a-graph">Linking Tasks to Make a Graph</h2>

<p>Any build system needs a way to link inputs and outputs. The three marku=
p texts in our discussion above, for example, each produce a corresponding =
HTML output file. The most natural way to express these relationships is as=
 a collection of boxes and arrows =E2=80=94 or, in mathematical terminology=
, <em>nodes</em> and <em>edges</em> =E2=80=94 to form a <em>graph</em> (<a =
href=3D"http://aosabook.org/en/500L/contingent-a-fully-dynamic-build-system=
.html#figure-4.1">Figure 4.1</a>).</p>

<div class=3D"center figure">
<a name=3D"figure-4.1"></a><img src=3D"http://aosabook.org/en/500L/continge=
nt-images/figure1.png" alt=3D"Figure 4.1 - Three files generated by parsing=
 three input texts." title=3D"Figure 4.1 - Three files generated by parsing=
 three input texts.">
</div>

<p class=3D"center figcaption">
<small>Figure 4.1 - Three files generated by parsing three input texts.</sm=
all>
</p>

<p>Each language in which a programmer might tackle writing a build system =
will offer various data structures with which such a graph of nodes and edg=
es might be represented.</p>

<p>How could we represent such a graph in Python?</p>

<p>The Python language gives priority to four generic data structures by gi=
ving them direct support in the language syntax. You can create new instanc=
es of these big-four data structures by simply typing their literal represe=
ntation into your source code, and their four type objects are available as=
 built-in symbols that can be used without being imported.</p>

<p>The <strong>tuple</strong> is a read-only sequence used to hold heteroge=
neous data =E2=80=94 each slot in a tuple typically means something differe=
nt. Here, a tuple holds together a hostname and port number, and would lose=
 its meaning if the elements were re-ordered:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">(<span c=
lass=3D"st">'dropbox.com'</span>, <span class=3D"dv">443</span>)</code></pr=
e>

<p>The <strong>list</strong> is a mutable sequence used to hold homogenous =
data =E2=80=94 each item usually has the same structure and meaning as its =
peers. Lists can be used either to preserve data=E2=80=99s original input o=
rder, or can be rearranged or sorted to establish a new and more useful ord=
er.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">[<span c=
lass=3D"st">'C'</span>, <span class=3D"st">'Awk'</span>, <span class=3D"st"=
>'TCL'</span>, <span class=3D"st">'Python'</span>, <span class=3D"st">'Java=
Script'</span>]</code></pre>

<p>The <strong>set</strong> does not preserve order. Sets remember only whe=
ther a given value has been added, not how many times, and are therefore th=
e go-to data structure for removing duplicates from a data stream. For exam=
ple, the following two sets will each have three elements:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">{<span c=
lass=3D"dv">3</span>, <span class=3D"dv">4</span>, <span class=3D"dv">5</sp=
an>}
{<span class=3D"dv">3</span>, <span class=3D"dv">4</span>, <span class=3D"d=
v">5</span>, <span class=3D"dv">4</span>, <span class=3D"dv">4</span>, <spa=
n class=3D"dv">3</span>, <span class=3D"dv">5</span>, <span class=3D"dv">4<=
/span>, <span class=3D"dv">5</span>, <span class=3D"dv">3</span>, <span cla=
ss=3D"dv">4</span>, <span class=3D"dv">5</span>}</code></pre>

<p>The <strong>dict</strong> is an associative data structure for storing v=
alues accessible by a key. Dicts let the programmer chose the key by which =
each value is indexed, instead of using automatic integer indexing as the t=
uple and list do. The lookup is backed by a hash table, which means that di=
ct key lookup runs at the same speed whether the dict has a dozen or a mill=
ion keys.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">{<span c=
lass=3D"st">'ssh'</span>: <span class=3D"dv">22</span>, <span class=3D"st">=
'telnet'</span>: <span class=3D"dv">23</span>, <span class=3D"st">'domain'<=
/span>: <span class=3D"dv">53</span>, <span class=3D"st">'http'</span>: <sp=
an class=3D"dv">80</span>}</code></pre>

<p>A key to Python=E2=80=99s flexibility is that these four data structures=
 are composable. The programmer can arbitrarily nest them inside each other=
 to produce more complex data stores whose rules and syntax remain the simp=
le ones of the underlying tuples, lists, sets, and dicts.</p>

<p>Given that each of our graph edges needs to know at least its origin nod=
e and its destination node, the simplest possible representation would be a=
 tuple. The top edge in <a href=3D"http://aosabook.org/en/500L/contingent-a=
-fully-dynamic-build-system.html#figure-4.1">Figure 4.1</a> might look like=
:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    (<sp=
an class=3D"st">'tutorial.rst'</span>, <span class=3D"st">'tutorial.html'</=
span>)</code></pre>

<p>How can we store several edges? While our initial impulse might be to si=
mply throw all of our edge tuples into a list, that would have disadvantage=
s. A&nbsp;list is careful to maintain order, but it is not meaningful to ta=
lk about an absolute order for the edges in a graph. And a list would be pe=
rfectly happy to hold several copies of exactly the same edge, even though =
we only want it to be possible to draw a single arrow between <code>tutoria=
l.rst</code> and <code>tutorial.html</code>. The correct choice is thus the=
 set, which would have us represent <a href=3D"http://aosabook.org/en/500L/=
contingent-a-fully-dynamic-build-system.html#figure-4.1">Figure 4.1</a> as:=
</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    {(<s=
pan class=3D"st">'tutorial.rst'</span>, <span class=3D"st">'tutorial.html'<=
/span>),
     (<span class=3D"st">'index.rst'</span>, <span class=3D"st">'index.html=
'</span>),
     (<span class=3D"st">'api.rst'</span>, <span class=3D"st">'api.html'</s=
pan>)}</code></pre>

<p>This would allow quick iteration across all of our edges, fast insert an=
d delete operations for a single edge, and a quick way to check whether a p=
articular edge was present.</p>

<p>Unfortunately, those are not the only operations we need.</p>

<p>A build system like Contingent needs to understand the relationship betw=
een a given node and all the nodes connected to it. For example, when <code=
>api.rst</code> changes, Contingent needs to know which assets, if any, are=
 affected by that change in order to minimize the work performed while also=
 ensuring a complete build. To answer this question =E2=80=94 =E2=80=9Cwhat=
 nodes are downstream from <code>api.rst</code>?=E2=80=9D =E2=80=94 we need=
 to examine the <em>outgoing</em> edges from <code>api.rst</code>.</p>

<p>But building the dependency graph requires that Contingent be concerned =
with a node's <em>inputs</em> as well. What inputs were used, for example, =
when the build system assembled the output document <code>tutorial.html</co=
de>? It is by watching the input to each node that Contingent can know that=
 <code>api.html</code> depends on <code>api.rst</code> but that <code>tutor=
ial.html</code> does not. As sources change and rebuilds occur, Contingent =
rebuilds the incoming edges of each changed node to remove potentially stal=
e edges and re-learn which resources a task uses this time around.</p>

<p>Our set-of-tuples does not make answering either of these questions easy=
. If we needed to know the relationship between <code>api.html</code> and t=
he rest of the graph, we would need to traverse the entire set looking for =
edges that start or end at the <code>api.html</code> node.</p>

<p>An associative data structure like Python's dict would make these chores=
 easier by allowing direct lookup of all the edges from a particular node:<=
/p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    {<sp=
an class=3D"st">'tutorial.rst'</span>: {(<span class=3D"st">'tutorial.rst'<=
/span>, <span class=3D"st">'tutorial.html'</span>)},
     <span class=3D"co">'tutorial.html'</span>: {(<span class=3D"st">'tutor=
ial.rst'</span>, <span class=3D"st">'tutorial.html'</span>)},
     <span class=3D"co">'index.rst'</span>: {(<span class=3D"st">'index.rst=
'</span>, <span class=3D"st">'index.html'</span>)},
     <span class=3D"co">'index.html'</span>: {(<span class=3D"st">'index.rs=
t'</span>, <span class=3D"st">'index.html'</span>)},
     <span class=3D"co">'api.rst'</span>: {(<span class=3D"st">'api.rst'</s=
pan>, <span class=3D"st">'api.html'</span>)},
     <span class=3D"co">'api.html'</span>: {(<span class=3D"st">'api.rst'</=
span>, <span class=3D"st">'api.html'</span>)}}</code></pre>

<p>Looking up the edges of a particular node would now be blazingly fast, a=
t the cost of having to store every edge twice: once in a set of incoming e=
dges, and once in a set of outgoing edges. But the edges in each set would =
have to be examined manually to see which are incoming and which are outgoi=
ng. It is also slightly redundant to keep naming the node over and over aga=
in in its set of edges.</p>

<p>The solution to both of these objections is to place incoming and outgoi=
ng edges in their own separate data structures, which will also absolve us =
of having to mention the node over and over again for every one of the edge=
s in which it is involved.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    inco=
ming =3D {
        <span class=3D"st">'tutorial.html'</span>: {<span class=3D"st">'tut=
orial.rst'</span>},
        <span class=3D"co">'index.html'</span>: {<span class=3D"st">'index.=
rst'</span>},
        <span class=3D"co">'api.html'</span>: {<span class=3D"st">'api.rst'=
</span>},
        }

    outgoing =3D {
        <span class=3D"st">'tutorial.rst'</span>: {<span class=3D"st">'tuto=
rial.html'</span>},
        <span class=3D"co">'index.rst'</span>: {<span class=3D"st">'index.h=
tml'</span>},
        <span class=3D"co">'api.rst'</span>: {<span class=3D"st">'api.html'=
</span>},
        }</code></pre>

<p>Notice that <code>outgoing</code> represents, directly in Python syntax,=
 exactly what we drew in <a href=3D"http://aosabook.org/en/500L/contingent-=
a-fully-dynamic-build-system.html#figure-4.1">Figure 4.1</a> earlier: the s=
ource documents on the left will be transformed by the build system into th=
e output documents on the right. For this simple example each source points=
 to only one output =E2=80=94 all the output sets have only one element =E2=
=80=94 but we will see examples shortly where a single input node has multi=
ple downstream consequences.</p>

<p>Every edge in this dictionary-of-sets data structure does get represente=
d twice, once as an outgoing edge from one node (<code>tutorial.rst</code> =
=E2=86=92 <code>tutorial.html</code>) and again as an incoming edge to the =
other (<code>tutorial.html</code> =E2=86=90 <code>tutorial.rst</code>). The=
se two representations capture precisely the same relationship, just from t=
he opposite perspectives of the two nodes at either end of the edge. But in=
 return for this redundancy, the data structure supports the fast lookup th=
at Contingent needs.</p>

<h2 id=3D"the-proper-use-of-classes">The Proper Use of Classes</h2>

<p>You may have been surprised by the absence of classes in the above discu=
ssion of Python data structures. After all, classes are a frequent mechanis=
m for structuring applications and a hardly less-frequent subject of heated=
 debate among their adherents and detractors. Classes were once thought imp=
ortant enough that entire educational curricula were designed around them, =
and the majority of popular programming languages include dedicated syntax =
for defining and using them.</p>

<p>But it turns out that classes are often orthogonal to the question of da=
ta structure design. Rather than offering us an entirely alternative data m=
odeling paradigm, classes simply repeat data structures that we have alread=
y seen:</p>

<ul>
<li>A class instance is <em>implemented</em> as a dict.</li>
<li>A class instance is <em>used</em> like a mutable tuple.</li>
</ul>

<p>The class offers key lookup through a prettier syntax, where you get to =
say <code>graph.incoming</code> instead of <code>graph["incoming"]</code>. =
But, in practice, class instances are almost never used as generic key-valu=
e stores. Instead, they are used to organize related but heterogeneous data=
 by attribute name, with implementation details encapsulated behind a consi=
stent and memorable interface.</p>

<p>So instead of putting a hostname and a port number together in a tuple a=
nd having to remember which came first and which came second, you create an=
 <code>Address</code> class whose instances each have a <code>host</code> a=
nd a <code>port</code> attribute. You can then pass <code>Address</code> ob=
jects around where otherwise you would have had anonymous tuples. Code beco=
mes easier to read and easier to write. But using a class instance does not=
 really change any of the questions we faced above when doing data design; =
it just provides a prettier and less anonymous container.</p>

<p>The true value of classes, then, is not that they change the science of =
data design. The value of classes is that they let you <em>hide</em> your d=
ata design from the rest of a program!</p>

<p>Successful application design hinges upon our ability to exploit the pow=
erful built-in data structures Python offers us while minimizing the volume=
 of details we are required to keep in our heads at any one time. Classes p=
rovide the mechanism for resolving this apparent quandary: used effectively=
, a class provides a facade around some small subset of the system's overal=
l design. When working within one subset =E2=80=94 a <code>Graph</code>, fo=
r example =E2=80=94 we can forget the implementation details of other subse=
ts as long as we can remember their interfaces. In this way, programmers of=
ten find themselves navigating among several levels of abstraction in the c=
ourse of writing a system, now working with the specific data model and imp=
lementation details for a particular subsystem, now connecting higher-level=
 concepts through their interfaces.</p>

<p>For example, from the outside, code can simply ask for a new <code>Graph=
</code> instance:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"ch">from</span> contingent <span class=3D"ch">import</s=
pan> graphlib
&gt;&gt;&gt; g =3D graphlib.Graph()</code></pre>

<p>without needing to understand the details of how <code>Graph</code> work=
s. Code that is simply using the graph sees only interface verbs =E2=80=94 =
the method calls =E2=80=94 when manipulating a graph, as when an edge is ad=
ded or some other operation performed:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; g.add_edge(<span class=3D"st">'index.rst'</span>, <span class=3D"st">'=
index.html'</span>)
&gt;&gt;&gt; g.add_edge(<span class=3D"st">'tutorial.rst'</span>, <span cla=
ss=3D"st">'tutorial.html'</span>)
&gt;&gt;&gt; g.add_edge(<span class=3D"st">'api.rst'</span>, <span class=3D=
"st">'api.html'</span>)</code></pre>

<p>Careful readers will have noticed that we added edges to our graph witho=
ut explicitly creating =E2=80=9Cnode=E2=80=9D and =E2=80=9Cedge=E2=80=9D ob=
jects, and that the nodes themselves in these early examples are simply str=
ings. Coming from other languages and traditions, one might have expected t=
o see user-defined classes and interfaces for everything in the system:</p>

<pre class=3D"sourceCode java"><code class=3D"sourceCode java">    Graph g =
=3D <span class=3D"kw">new</span> <span class=3D"fu">ConcreteGraph</span>()=
;
    Node indexRstNode =3D <span class=3D"kw">new</span> <span class=3D"fu">=
StringNode</span>(<span class=3D"st">"index.rst"</span>);
    Node indexHtmlNode =3D <span class=3D"kw">new</span> <span class=3D"fu"=
>StringNode</span>(<span class=3D"st">"index.html"</span>);
    Edge indexEdge =3D <span class=3D"kw">new</span> <span class=3D"fu">Dir=
ectedEdge</span>(indexRstNode, indexHtmlNode);
    g.<span class=3D"fu">addEdge</span>(indexEdge);</code></pre>

<p>The Python language and community explicitly and intentionally emphasize=
 using simple, generic data structures to solve problems, instead of creati=
ng custom classes for every minute detail of the problem we want to tackle.=
 This is one facet of the notion of =E2=80=9CPythonic=E2=80=9D solutions: P=
ythonic solutions try to minimize syntactic overhead and leverage Python's =
powerful built-in tools and extensive standard library.</p>

<p>With these considerations in mind, let=E2=80=99s return to the <code>Gra=
ph</code> class, examining its design and implementation to see the interpl=
ay between data structures and class interfaces. When a new <code>Graph</co=
de> instance is constructed, a pair of dictionaries has already been built =
to store edges using the logic we outlined in the previous section:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Graph:
    <span class=3D"co">"""A directed graph of the relationships among build=
 tasks."""</span>

    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>):
        <span class=3D"ot">self</span>._inputs_of =3D defaultdict(<span cla=
ss=3D"dt">set</span>)
        <span class=3D"ot">self</span>._consequences_of =3D defaultdict(<sp=
an class=3D"dt">set</span>)</code></pre>

<p>The leading underscore in front of the attribute names <code>_inputs_of<=
/code> and <code>_consequences_of</code> is a common convention in the Pyth=
on community to signal that an attribute is private. This convention is one=
 way the community suggests that programmers pass messages and warnings thr=
ough space and time to each other. Recognizing the need to signal differenc=
es between public and internal object attributes, the community adopted the=
 single leading underscore as a concise and fairly consistent indicator to =
other programmers, including our future selves, that the attribute is best =
treated as part of the invisible internal machinery of the class.</p>

<p>Why are we using a <code>defaultdict</code> instead of a standard dict? =
A common problem when composing dicts with other data structures is handlin=
g missing keys. With a normal dict, retrieving a key that does not exist ra=
ises a <code>KeyError</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; consequences_of =3D {}
&gt;&gt;&gt; consequences_of[<span class=3D"st">'index.rst'</span>].add(<sp=
an class=3D"st">'index.html'</span>)
Traceback (most recent call last):
     ...
<span class=3D"ot">KeyError</span>: <span class=3D"st">'index.rst'</span></=
code></pre>

<p>Using a normal dict requires special checks throughout the code to handl=
e this specific case, for example when adding a new edge:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Special case to handle =E2=80=9Cwe have not seen this task=
 yet=E2=80=9D:</span>

    <span class=3D"kw">if</span> input_task not in <span class=3D"ot">self<=
/span>._consequences_of:
        <span class=3D"ot">self</span>._consequences_of[input_task] =3D <sp=
an class=3D"dt">set</span>()

    <span class=3D"ot">self</span>._consequences_of[input_task].add(consequ=
ence_task)</code></pre>

<p>This need is so common that Python includes a special utility, the <code=
>defaultdict</code>, which lets you provide a function that returns a value=
 for absent keys. When we ask about an edge that the <code>Graph</code> has=
n't yet seen, we will get back an empty <code>set</code> instead of an exce=
ption:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"ch">from</span> collections <span class=3D"ch">import</=
span> defaultdict
&gt;&gt;&gt; consequences_of =3D defaultdict(<span class=3D"dt">set</span>)
&gt;&gt;&gt; consequences_of[<span class=3D"st">'api.rst'</span>]
<span class=3D"dt">set</span>()</code></pre>

<p>Structuring our implementation this way means that each key=E2=80=99s fi=
rst use can look identical to second and subsequent times that a particular=
 key is used:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; consequences_of[<span class=3D"st">'index.rst'</span>].add(<span class=
=3D"st">'index.html'</span>)
&gt;&gt;&gt; <span class=3D"st">'index.html'</span> in consequences_of[<spa=
n class=3D"st">'index.rst'</span>]
<span class=3D"ot">True</span></code></pre>

<p>Given these techniques, let=E2=80=99s examine the implementation of <cod=
e>add_edge</code>, which we earlier used to build the graph for <a href=3D"=
http://aosabook.org/en/500L/contingent-a-fully-dynamic-build-system.html#fi=
gure-4.1">Figure 4.1</a>.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> add_edge(<span class=3D"ot">self</span>, input_ta=
sk, consequence_task):
        <span class=3D"co">"""Add an edge: `consequence_task` uses the outp=
ut of `input_task`."""</span>
        <span class=3D"ot">self</span>._consequences_of[input_task].add(con=
sequence_task)
        <span class=3D"ot">self</span>._inputs_of[consequence_task].add(inp=
ut_task)</code></pre>

<p>This method hides the fact that two, not one, storage steps are required=
 for each new edge so that we know about it in both directions. And notice =
how <code>add_edge()</code> does not know or care whether either node has b=
een seen before. Because the inputs and consequences data structures are ea=
ch a <code>defaultdict(set)</code>, the <code>add_edge()</code> method rema=
ins blissfully ignorant as to the novelty of a node =E2=80=94 the <code>def=
aultdict</code> takes care of the difference by creating a new <code>set</c=
ode> object on the fly. As we saw above, <code>add_edge()</code> would be t=
hree times longer had we not used <code>defaultdict</code>. More importantl=
y, it would be more difficult to understand and reason about the resulting =
code. This implementation demonstrates a Pythonic approach to problems: sim=
ple, direct, and concise.</p>

<p>Callers should also be given a simple way to visit every edge without ha=
ving to learn how to traverse our data structure:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> edges(<span class=3D"ot">self</span>):
        <span class=3D"co">"""Return all edges as ``(input_task, consequenc=
e_task)`` tuples."""</span>
        <span class=3D"kw">return</span> [(a, b) <span class=3D"kw">for</sp=
an> a in <span class=3D"ot">self</span>.<span class=3D"dt">sorted</span>(<s=
pan class=3D"ot">self</span>._consequences_of)
                       <span class=3D"kw">for</span> b in <span class=3D"ot=
">self</span>.<span class=3D"dt">sorted</span>(<span class=3D"ot">self</spa=
n>._consequences_of[a])]</code></pre>

<p>The <code>Graph.sorted()</code> method makes an attempt to sort the node=
s in a natural sort order (such as alphabetical) that can provide a stable =
output order for the user.</p>

<p>By using this traversal method we can see that, following our three =E2=
=80=9Cadd=E2=80=9D method calls earlier, <code>g</code> now represents the =
same graph that we saw in <a href=3D"http://aosabook.org/en/500L/contingent=
-a-fully-dynamic-build-system.html#figure-4.1">Figure 4.1</a>.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"ch">from</span> pprint <span class=3D"ch">import</span>=
 pprint
&gt;&gt;&gt; pprint(g.edges())
[(<span class=3D"st">'api.rst'</span>, <span class=3D"st">'api.html'</span>=
),
 (<span class=3D"st">'index.rst'</span>, <span class=3D"st">'index.html'</s=
pan>),
 (<span class=3D"st">'tutorial.rst'</span>, <span class=3D"st">'tutorial.ht=
ml'</span>)]</code></pre>

<p>Since we now have a real live Python object, and not just a figure, we c=
an ask it interesting questions! For example, when Contingent is building a=
 blog from source files, it will need to know things like =E2=80=9CWhat dep=
ends on <code>api.rst</code>?=E2=80=9D when the content of <code>api.rst</c=
ode> changes:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; g.immediate_consequences_of(<span class=3D"st">'api.rst'</span>)
[<span class=3D"st">'api.html'</span>]</code></pre>

<p>This <code>Graph</code> is telling Contingent that, when <code>api.rst</=
code> changes, <code>api.html</code> is now stale and must be rebuilt.</p>

<p>How about <code>index.html</code>?</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; g.immediate_consequences_of(<span class=3D"st">'index.html'</span>)
[]</code></pre>

<p>An empty list has been returned, signalling that <code>index.html</code>=
 is at the right edge of the graph and so nothing further needs to be rebui=
lt if it changes. This query can be expressed very simply thanks to the wor=
k that has already gone in to laying out our data:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> immediate_consequences_of(<span class=3D"ot">self=
</span>, task):
        <span class=3D"co">"""Return the tasks that use `task` as an input.=
"""</span>
        <span class=3D"kw">return</span> <span class=3D"ot">self</span>.<sp=
an class=3D"dt">sorted</span>(<span class=3D"ot">self</span>._consequences_=
of[task])</code></pre>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"> &gt;&gt=
;&gt; <span class=3D"ch">from</span> contingent.rendering <span class=3D"ch=
">import</span> as_graphviz
 &gt;&gt;&gt; <span class=3D"dt">open</span>(<span class=3D"st">'figure1.do=
t'</span>, <span class=3D"st">'w'</span>).write(as_graphviz(g)) and <span c=
lass=3D"ot">None</span></code></pre>

<p><a href=3D"http://aosabook.org/en/500L/contingent-a-fully-dynamic-build-=
system.html#figure-4.1">Figure 4.1</a> ignored one of the most important re=
lationships that we discovered in the opening section of our chapter: the w=
ay that document titles appear in the table of contents. Let=E2=80=99s fill=
 in this detail. We will create a node for each title string that needs to =
be generated by parsing an input file and then passed to one of our other r=
outines:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; g.add_edge(<span class=3D"st">'api.rst'</span>, <span class=3D"st">'ap=
i-title'</span>)
&gt;&gt;&gt; g.add_edge(<span class=3D"st">'api-title'</span>, <span class=
=3D"st">'index.html'</span>)
&gt;&gt;&gt; g.add_edge(<span class=3D"st">'tutorial.rst'</span>, <span cla=
ss=3D"st">'tutorial-title'</span>)
&gt;&gt;&gt; g.add_edge(<span class=3D"st">'tutorial-title'</span>, <span c=
lass=3D"st">'index.html'</span>)</code></pre>

<p>The result is a graph (<a href=3D"http://aosabook.org/en/500L/contingent=
-a-fully-dynamic-build-system.html#figure-4.2">Figure 4.2</a>) that could p=
roperly handle rebuilding the table of contents that we discussed in the op=
ening of this chapter.</p>

<div class=3D"center figure">
<a name=3D"figure-4.2"></a><img src=3D"http://aosabook.org/en/500L/continge=
nt-images/figure2.png" alt=3D"Figure 4.2 - Being prepared to rebuild `index=
.html` whenever any title that it mentions gets changed." title=3D"Figure 4=
.2 - Being prepared to rebuild `index.html` whenever any title that it ment=
ions gets changed.">
</div>

<p class=3D"center figcaption">
<small>Figure 4.2 - Being prepared to rebuild <code>index.html</code> whene=
ver any title that it mentions gets changed.</small>
</p>

<p>This manual walk-through illustrates what we will eventually have Contin=
gent do for us: the graph <code>g</code> captures the inputs and consequenc=
es for the various artifacts in our project's documentation.</p>

<h2 id=3D"learning-connections">Learning Connections</h2>

<p>We now have a way for Contingent to keep track of tasks and the relation=
ships between them. If we look more closely at <a href=3D"http://aosabook.o=
rg/en/500L/contingent-a-fully-dynamic-build-system.html#figure-4.2">Figure =
4.2</a>, however, we see that it is actually a little hand-wavy and vague: =
<em>how</em> is <code>api.html</code> produced from <code>api.rst</code>? H=
ow do we know that <code>index.html</code> needs the title from the tutoria=
l? And how is this dependency resolved?</p>

<p>Our intuitive notion of these ideas served when we were constructing con=
sequences graphs by hand, but unfortunately computers are not terribly intu=
itive, so we will need to be more precise about what we want.</p>

<p>What are the steps required to produce output from sources? How are thes=
e steps defined and executed? And how can Contingent know the connections b=
etween them?</p>

<p>In Contingent, build tasks are modeled as functions plus arguments. The =
functions define actions that a particular project understands how to perfo=
rm. The arguments provide the specifics: <em>which</em> source document sho=
uld be read, <em>which</em> blog title is needed. As they are running, thes=
e functions may in turn invoke <em>other</em> task functions, passing whate=
ver arguments they need answers for.</p>

<p>To see how this works, we will actually now implement the documentation =
builder described at the beginning of the chapter. In order to prevent ours=
elves from wallowing around in a bog of details, for this illustration we w=
ill work with simplified input and output document formats. Our input docum=
ents will consist of a title on the first line, with the remainder of the t=
ext forming the body. Cross references will simply be source file names enc=
losed in backticks, which on output are replaced with the title from the co=
rresponding document in the output.</p>

<p>Here is the content of our example <code>index.txt</code>, <code>api.txt=
</code>, and <code>tutorial.txt</code>, illustrating titles, document bodie=
s, and cross-references from our little document format:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; index =3D <span class=3D"st">"""</span>
<span class=3D"st">... Table of Contents</span>
<span class=3D"st">... -----------------</span>
<span class=3D"st">... * `tutorial.txt`</span>
<span class=3D"st">... * `api.txt`</span>
<span class=3D"st">... """</span>

&gt;&gt;&gt; tutorial =3D <span class=3D"st">"""</span>
<span class=3D"st">... Beginners Tutorial</span>
<span class=3D"st">... ------------------</span>
<span class=3D"st">... Welcome to the tutorial!</span>
<span class=3D"st">... We hope you enjoy it.</span>
<span class=3D"st">... """</span>

&gt;&gt;&gt; api =3D <span class=3D"st">"""</span>
<span class=3D"st">... API Reference</span>
<span class=3D"st">... -------------</span>
<span class=3D"st">... You might want to read</span>
<span class=3D"st">... the `tutorial.txt` first.</span>
<span class=3D"st">... """</span></code></pre>

<p>Now that we have some source material to work with, what functions would=
 a Contingent-based blog builder need?</p>

<p>In the simple examples above, the HTML output files proceed directly fro=
m the source, but in a realistic system, turning source into markup involve=
s several steps: reading the raw text from disk, parsing the text to a conv=
enient internal representation, processing any directives the author may ha=
ve specified, resolving cross-references or other external dependencies (su=
ch as include files), and applying one or more view transformations to conv=
ert the internal representation to its output form.</p>

<p>Contingent manages tasks by grouping them into a <code>Project</code>, a=
 sort of build system busybody that injects itself into the middle of the b=
uild process, noting every time one task talks to another to construct a gr=
aph of the relationships between all the tasks.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"ch">from</span> contingent.projectlib <span class=3D"ch=
">import</span> Project, Task
&gt;&gt;&gt; project =3D Project()
&gt;&gt;&gt; task =3D project.task</code></pre>

<p>A build system for the example given at the beginning of the chapter mig=
ht involve a few tasks.</p>

<p>Our <code>read()</code> task will pretend to read the files from disk. S=
ince we really defined the source text in variables, all it needs to do is =
convert from a filename to the corresponding text.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">  &gt;&g=
t;&gt; filesystem =3D {<span class=3D"st">'index.txt'</span>: index,
  ...               <span class=3D"st">'tutorial.txt'</span>: tutorial,
  ...               <span class=3D"st">'api.txt'</span>: api}
  ...
  &gt;&gt;&gt; @task
  ... <span class=3D"kw">def</span> read(filename):
  ...     <span class=3D"kw">return</span> filesystem[filename]</code></pre=
>

<p>The <code>parse()</code> task interprets the raw text of the file conten=
ts according to the specification of our document format. Our format is ver=
y simple: the title of the document appears on the first line, and the rest=
 of the content is considered the document's body.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">  &gt;&g=
t;&gt; @task
  ... <span class=3D"kw">def</span> parse(filename):
  ...     lines =3D read(filename).strip().splitlines()
  ...     title =3D lines[<span class=3D"dv">0</span>]
  ...     body =3D <span class=3D"st">'</span><span class=3D"ch">\n</span><=
span class=3D"st">'</span>.join(lines[<span class=3D"dv">2</span>:])
  ...     <span class=3D"kw">return</span> title, body</code></pre>

<p>Because the format is so simple, the parser is a little silly, but it il=
lustrates the interpretive responsibilities that parsers are required to ca=
rry out. (Parsing in general is a very interesting subject and many books h=
ave been written either partially or completely about it.) In a system like=
 Sphinx, the parser must understand the many markup tokens, directives, and=
 commands defined by the system, transforming the input text into something=
 the rest of the system can work with.</p>

<p>Notice the connection point between <code>parse()</code> and <code>read(=
)</code> =E2=80=94 the first task in parsing is to pass the filename it has=
 been given to <code>read()</code>, which finds and returns the contents of=
 that file.</p>

<p>The <code>title_of()</code> task, given a source file name, returns the =
document's title:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">  &gt;&g=
t;&gt; @task
  ... <span class=3D"kw">def</span> title_of(filename):
  ...     title, body =3D parse(filename)
  ...     <span class=3D"kw">return</span> title</code></pre>

<p>This task nicely illustrates the separation of responsibilities between =
the parts of a document processing system. The <code>title_of()</code> func=
tion works directly from an in-memory representation of a document =E2=80=
=94 in this case, a tuple =E2=80=94 instead of taking it upon itself to re-=
parse the entire document again just to find the title. The <code>parse()</=
code> function alone produces the in-memory representation, in accordance w=
ith the contract of the system specification, and the rest of the blog buil=
der processing functions like <code>title_of()</code> simply use its output=
 as their authority.</p>

<p>If you are coming from an orthodox object-oriented tradition, this funct=
ion-oriented design may look a little weird. In an OO solution, <code>parse=
()</code> would return some sort of <code>Document</code> object that has <=
code>title_of()</code> as a method or property. In fact, Sphinx works exact=
ly this way: its <code>Parser</code> subsystem produces a =E2=80=9CDocutils=
 document tree=E2=80=9D object for the other parts of the system to use.</p=
>

<p>Contingent is not opinionated with regard to these differing design para=
digms and supports either approach equally well. For this chapter we are ke=
eping things simple.</p>

<p>The final task, <code>render()</code>, turns the in-memory representatio=
n of a document into an output form. It is, in effect, the inverse of <code=
>parse()</code>. Whereas <code>parse()</code> takes an input document confo=
rming to a specification and converts it to an in-memory representation, <c=
ode>render()</code> takes an in-memory representation and produces an outpu=
t document conforming to some specification.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">  &gt;&g=
t;&gt; <span class=3D"ch">import</span> re
  &gt;&gt;&gt;
  &gt;&gt;&gt; LINK =3D <span class=3D"st">'&lt;a href=3D"{}"&gt;{}&lt;/a&g=
t;'</span>
  &gt;&gt;&gt; PAGE =3D <span class=3D"st">'&lt;h1&gt;{}&lt;/h1&gt;</span><=
span class=3D"ch">\n</span><span class=3D"st">&lt;p&gt;</span><span class=
=3D"ch">\n</span><span class=3D"st">{}</span><span class=3D"ch">\n</span><s=
pan class=3D"st">&lt;p&gt;'</span>
  &gt;&gt;&gt;
  &gt;&gt;&gt; <span class=3D"kw">def</span> make_link(match):
  ...     filename =3D match.group(<span class=3D"dv">1</span>)
  ...     <span class=3D"kw">return</span> LINK.<span class=3D"dt">format</=
span>(filename, title_of(filename))
  ...
  &gt;&gt;&gt; @task
  ... <span class=3D"kw">def</span> render(filename):
  ...     title, body =3D parse(filename)
  ...     body =3D re.sub(<span class=3D"st">r'`([^`]+)`'</span>, make_link=
, body)
  ...     <span class=3D"kw">return</span> PAGE.<span class=3D"dt">format</=
span>(title, body)</code></pre>

<p>Here is an example run that will invoke every stage of the above logic =
=E2=80=94 rendering <code>tutorial.txt</code> to produce its output:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"dt">print</span>(render(<span class=3D"st">'tutorial.tx=
t'</span>))
&lt;h1&gt;Beginners Tutorial&lt;/h1&gt;
&lt;p&gt;
Welcome to the tutorial!
We hope you enjoy it.
&lt;p&gt;</code></pre>

<p><a href=3D"http://aosabook.org/en/500L/contingent-a-fully-dynamic-build-=
system.html#figure-4.3">Figure 4.3</a> illustrates the task graph that tran=
sitively connects all the tasks required to produce the output, from readin=
g the input file, to parsing and transforming the document, and rendering i=
t:</p>

<div class=3D"center figure">
<a name=3D"figure-4.3"></a><img src=3D"http://aosabook.org/en/500L/continge=
nt-images/figure3.png" alt=3D"Figure 4.3 - A task graph." title=3D"Figure 4=
.3 - A task graph.">
</div>

<p class=3D"center figcaption">
<small>Figure 4.3 - A task graph.</small>
</p>

<p>It turns out that <a href=3D"http://aosabook.org/en/500L/contingent-a-fu=
lly-dynamic-build-system.html#figure-4.3">Figure 4.3</a> was not hand-drawn=
 for this chapter, but has been generated directly from Contingent! Buildin=
g this graph is possible for the <code>Project</code> object because it mai=
ntains its own call stack, similar to the stack of live execution frames th=
at Python maintains to remember which function to continue running when the=
 current one returns.</p>

<p>Every time a new task is invoked, Contingent can assume that it has been=
 called =E2=80=94 and that its output will be used =E2=80=94 by the task cu=
rrently at the top of the stack. Maintaining the stack will require that se=
veral extra steps surround the invocation of a task&nbsp;<em>T</em>:</p>

<ol style=3D"list-style-type: decimal">
<li>Push <em>T</em> onto the stack.</li>
<li>Execute <em>T</em>, letting it call any other tasks it needs.</li>
<li>Pop <em>T</em> off the stack.</li>
<li>Return its result.</li>
</ol>

<p>To intercept task calls, the <code>Project</code> leverages a key Python=
 feature: <em>function decorators</em>. A&nbsp;decorator is allowed to proc=
ess or transform a function at the moment that it is being defined. The <co=
de>Project.task</code> decorator uses this opportunity to package every tas=
k inside another function, a <em>wrapper</em>, which allows a clean separat=
ion of responsibilities between the wrapper =E2=80=94 which will worry abou=
t graph and stack management on behalf of the Project =E2=80=94 and our tas=
k functions that focus on document processing. Here is what the <code>task<=
/code> decorator boilerplate looks like:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"ch">from</span> functools <span class=3D"ch">import</span> w=
raps

        <span class=3D"kw">def</span> task(function):
            <span class=3D"ot">@wraps</span>(function)
            <span class=3D"kw">def</span> wrapper(*args):
                <span class=3D"co"># wrapper body, that will call function(=
)</span>
            <span class=3D"kw">return</span> wrapper</code></pre>

<p>This is an entirely typical Python decorator declaration. It can then be=
 applied to a function by naming it after an <code>@</code> character atop =
the <code>def</code> that creates the function:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"ot">@task</span>
    <span class=3D"kw">def</span> title_of(filename):
        title, body =3D parse(filename)
        <span class=3D"kw">return</span> title</code></pre>

<p>When this definition is complete, the name <code>title_of</code> will re=
fer to the wrapped version of the function. The wrapper can access the orig=
inal version of the function via the name <code>function</code>, calling it=
 at the appropriate time. The body of the Contingent wrapper runs something=
 like this:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> task(function):
        <span class=3D"ot">@wraps</span>(function)
        <span class=3D"kw">def</span> wrapper(*args):
            task =3D Task(wrapper, args)
            <span class=3D"kw">if</span> <span class=3D"ot">self</span>.tas=
k_stack:
                <span class=3D"ot">self</span>._graph.add_edge(task, <span =
class=3D"ot">self</span>.task_stack[-<span class=3D"dv">1</span>])
            <span class=3D"ot">self</span>._graph.clear_inputs_of(task)
            <span class=3D"ot">self</span>._task_stack.append(task)
            <span class=3D"kw">try</span>:
                value =3D function(*args)
            <span class=3D"kw">finally</span>:
                <span class=3D"ot">self</span>._task_stack.pop()

            <span class=3D"kw">return</span> value
        <span class=3D"kw">return</span> wrapper</code></pre>

<p>This wrapper performs several crucial maintenance steps:</p>

<ol style=3D"list-style-type: decimal">
<li><p>Packages the task =E2=80=94 a function plus its arguments =E2=80=94 =
into a small object for convenience. The <code>wrapper</code> here names th=
e wrapped version of the task function.</p></li>
<li><p>If this task has been invoked by a current task that is already unde=
rway, add an edge capturing the fact that this task is an input to the alre=
ady-running task.</p></li>
<li><p>Forget whatever we might have learned last time about the task, sinc=
e it might make new decisions this time =E2=80=94 if the source text of the=
 API guide no longer mentions the Tutorial, for example, then its <code>ren=
der()</code> will no longer ask for the <code>title_of()</code> the Tutoria=
l document.</p></li>
<li><p>Push this task onto the top of the task stack in case it decides, in=
 its turn, to invoke further tasks in the course of doing its work.</p></li=
>
<li><p>Invoke the task inside of a <code>try...finally</code> block that en=
sures we correctly remove the finished task from the stack, even if it dies=
 by raising an exception.</p></li>
<li><p>Return the task=E2=80=99s return value, so that callers of this wrap=
per will not be able to tell that they have not simply invoked the plain ta=
sk function itself.</p></li>
</ol>

<p>Steps 4 and 5 maintain the task stack itself, which is then used by step=
 2 to perform the consequences tracking that is our whole reason for buildi=
ng a task stack in the first place.</p>

<p>Since each task gets surrounded by its own copy of the wrapper function,=
 the mere invocation and execution of the normal stack of tasks will produc=
e a graph of relationships as an invisible side effect. That is why we were=
 careful to use the wrapper around each processing step that we defined:</p=
>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"ot">@task</span>
    <span class=3D"kw">def</span> read(filename):
        <span class=3D"co"># body of read</span>

    <span class=3D"ot">@task</span>
    <span class=3D"kw">def</span> parse(filename):
        <span class=3D"co"># body of parse</span>

    <span class=3D"ot">@task</span>
    <span class=3D"kw">def</span> title_of(filename):
        <span class=3D"co"># body of title_of</span>

    <span class=3D"ot">@task</span>
    <span class=3D"kw">def</span> render(filename):
        <span class=3D"co"># body of render</span></code></pre>

<p>Thanks to these wrappers, when we called <code>parse('tutorial.txt')</co=
de> the decorator learned the connection between <code>parse</code> and <co=
de>read</code>. We can ask about the relationship by building another <code=
>Task</code> tuple and asking what the consequences would be if its output =
value changed:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; task =3D Task(read, (<span class=3D"st">'tutorial.txt'</span>,))
&gt;&gt;&gt; <span class=3D"dt">print</span>(task)
read(<span class=3D"st">'tutorial.txt'</span>)
&gt;&gt;&gt; project._graph.immediate_consequences_of(task)
[parse(<span class=3D"st">'tutorial.txt'</span>)]</code></pre>

<p>The consequence of re-reading the <code>tutorial.txt</code> file and fin=
ding that its contents have changed is that we need to re-execute the <code=
>parse()</code> routine for that document. What happens if we render the en=
tire set of documents? Will Contingent be able to learn the entire build pr=
ocess?</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">for</span> filename in <span class=3D"st">'index.tx=
t'</span>, <span class=3D"st">'tutorial.txt'</span>, <span class=3D"st">'ap=
i.txt'</span>:
...     <span class=3D"dt">print</span>(render(filename))
...     <span class=3D"dt">print</span>(<span class=3D"st">'=3D'</span> * <=
span class=3D"dv">30</span>)
...
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;
* &lt;a href=3D<span class=3D"st">"tutorial.txt"</span>&gt;Beginners Tutori=
al&lt;/a&gt;
* &lt;a href=3D<span class=3D"st">"api.txt"</span>&gt;API Reference&lt;/a&g=
t;
&lt;p&gt;
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D
&lt;h1&gt;Beginners Tutorial&lt;/h1&gt;
&lt;p&gt;
Welcome to the tutorial!
We hope you enjoy it.
&lt;p&gt;
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D
&lt;h1&gt;API Reference&lt;/h1&gt;
&lt;p&gt;
You might want to read
the &lt;a href=3D<span class=3D"st">"tutorial.txt"</span>&gt;Beginners Tuto=
rial&lt;/a&gt; first.
&lt;p&gt;
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D</code></pre>

<p>It worked! From the output, we can see that our transform substituted th=
e document titles for the directives in our source documents, indicating th=
at Contingent was able to discover the connections between the various task=
s needed to build our documents.</p>

<div class=3D"center figure">
<a name=3D"figure-4.4"></a><img src=3D"http://aosabook.org/en/500L/continge=
nt-images/figure4.png" alt=3D"Figure 4.4 - The complete set of relationship=
s between our input files and our HTML outputs." title=3D"Figure 4.4 - The =
complete set of relationships between our input files and our HTML outputs.=
">
</div>

<p class=3D"center figcaption">
<small>Figure 4.4 - The complete set of relationships between our input fil=
es and our HTML outputs.</small>
</p>

<p>By watching one task invoke another through the <code>task</code> wrappe=
r machinery, <code>Project</code> has automatically learned the graph of in=
puts and consequences. Since it has a complete consequences graph at its di=
sposal, Contingent knows all the things to rebuild if the inputs to any tas=
ks change.</p>

<h2 id=3D"chasing-consequences">Chasing Consequences</h2>

<p>Once the initial build has run to completion, Contingent needs to monito=
r the input files for changes. When the user finishes a new edit and runs =
=E2=80=9CSave=E2=80=9D, both the <code>read()</code> method and its consequ=
ences need to be invoked.</p>

<p>This will require us to walk the graph in the opposite order from the on=
e in which it was created. It was built, you will recall, by calling <code>=
render()</code> for the API Reference and having that call <code>parse()</c=
ode> which finally invoked the <code>read()</code> task. Now we go in the o=
ther direction: we know that <code>read()</code> will now return new conten=
t, and we need to figure out what consequences lie downstream.</p>

<p>The process of compiling consequences is a recursive one, as each conseq=
uence can itself have further tasks that depended on it. We could perform t=
his recursion manually through repeated calls to the graph. (Note that we a=
re here taking advantage of the fact that the Python prompt saves the last =
value displayed under the name <code>_</code> for use in the subsequent exp=
ression.)</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; task =3D Task(read, (<span class=3D"st">'api.txt'</span>,))
&gt;&gt;&gt; project._graph.immediate_consequences_of(task)
[parse(<span class=3D"st">'api.txt'</span>)]
&gt;&gt;&gt; t1, =3D _
&gt;&gt;&gt; project._graph.immediate_consequences_of(t1)
[render(<span class=3D"st">'api.txt'</span>), title_of(<span class=3D"st">'=
api.txt'</span>)]
&gt;&gt;&gt; t2, t3 =3D _
&gt;&gt;&gt; project._graph.immediate_consequences_of(t2)
[]
&gt;&gt;&gt; project._graph.immediate_consequences_of(t3)
[render(<span class=3D"st">'index.txt'</span>)]
&gt;&gt;&gt; t4, =3D _
&gt;&gt;&gt; project._graph.immediate_consequences_of(t4)
[]</code></pre>

<p>This recursive task of looking repeatedly for immediate consequences and=
 only stopping when we arrive at tasks with no further consequences is a ba=
sic enough graph operation that it is supported directly by a method on the=
 <code>Graph</code> class:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"co"># Secretly adjust pprint to a narrower-than-usual w=
idth:</span>
&gt;&gt;&gt; _pprint =3D pprint
&gt;&gt;&gt; pprint =3D <span class=3D"kw">lambda</span> x: _pprint(x, widt=
h=3D<span class=3D"dv">40</span>)
&gt;&gt;&gt; pprint(project._graph.recursive_consequences_of([task]))
[parse(<span class=3D"st">'api.txt'</span>),
 render(<span class=3D"st">'api.txt'</span>),
 title_of(<span class=3D"st">'api.txt'</span>),
 render(<span class=3D"st">'index.txt'</span>)]</code></pre>

<p>In fact, <code>recursive_consequences_of()</code> tries to be a bit clev=
er. If a particular task appears repeatedly as a downstream consequence of =
several other tasks, then it is careful to only mention it once in the outp=
ut list, and to move it close to the end so that it appears only after the =
tasks that are its inputs. This intelligence is powered by the classic dept=
h-first implementation of a topological sort, an algorithm which winds up b=
eing fairly easy to write in Python through a hidden recursive helper funct=
ion. Check out the <code>graphlib.py</code> source code for the details.</p=
>

<p>If, upon detecting a change, we are careful to re-run every task in the =
recursive consequences, then Contingent will be able to avoid rebuilding to=
o little. Our second challenge, however, was to avoid rebuilding too much. =
Refer again to <a href=3D"http://aosabook.org/en/500L/contingent-a-fully-dy=
namic-build-system.html#figure-4.4">Figure 4.4</a>. We want to avoid rebuil=
ding all three documents every time that <code>tutorial.txt</code> is chang=
ed, since most edits will probably not affect its title but only its body. =
How can this be accomplished?</p>

<p>The solution is to make graph recomputation dependent on caching. When s=
tepping forward through the recursive consequences of a change, we will onl=
y invoke tasks whose inputs are different than last time.</p>

<p>This optimization will involve a final data structure. We will give the =
<code>Project</code> a <code>_todo</code> set with which to remember every =
task for which at least one input value has changed, and which therefore re=
quires re-execution. Because only tasks in <code>_todo</code> are out-of-da=
te, the build process can skip running any tasks unless they appear there.<=
/p>

<p>Again, Python=E2=80=99s convenient and unified design makes these featur=
es very easy to code. Because task objects are hashable, <code>_todo</code>=
 can simply be a set that remembers task items by identity =E2=80=94 guaran=
teeing that a task never appears twice =E2=80=94 and the <code>_cache</code=
> of return values from previous runs can be a dict with tasks as keys.</p>

<p>More precisely, the rebuild step must keep looping as long as <code>_tod=
o</code> is non-empty. During each loop, it should:</p>

<ul>
<li><p>Call <code>recursive_consequences_of()</code> and pass in every task=
 listed in <code>_todo</code>. The return value will be a list of not only =
the <code>_todo</code> tasks themselves, but also every task downstream of =
them =E2=80=94 every task, in other words, that could possibly need re-exec=
ution if the outputs come out different this time.</p></li>
<li><p>For each task in the list, check whether it is listed in <code>_todo=
</code>. If not, then we can skip running it, because none of the tasks tha=
t we have re-invoked upstream of it has produced a new return value that wo=
uld require the task=E2=80=99s recomputation.</p></li>
<li><p>But for any task that is indeed listed in <code>_todo</code> by the =
time we reach it, we need to ask it to re-run and re-compute its return val=
ue. If the task wrapper function detects that this return value does not ma=
tch the old cached value, then its downstream tasks will be automatically a=
dded to <code>_todo</code> before we reach them in the list of recursive co=
nsequences.</p></li>
</ul>

<p>By the time we reach the end of the list, every task that could possibly=
 need to be re-run should in fact have been re-run. But just in case, we wi=
ll check <code>_todo</code> and try again if it is not yet empty. Even for =
very rapidly changing dependency trees, this should quickly settle out. Onl=
y a cycle =E2=80=94 where, for example, task <em>A</em> needs the output of=
 task <em>B</em> which itself needs the output of task <em>A</em> =E2=80=94=
 could keep the builder in an infinite loop, and only if their return value=
s never stabilize. Fortunately, real-world build tasks are typically withou=
t cycles.</p>

<p>Let us trace the behavior of this system through an example.</p>

<p>Suppose you edit <code>tutorial.txt</code> and change both the title and=
 the body content. We can simulate this by modifying the value in our <code=
>filesystem</code> dict:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; filesystem[<span class=3D"st">'tutorial.txt'</span>] =3D <span class=
=3D"st">"""</span>
<span class=3D"st">... The Coder Tutorial</span>
<span class=3D"st">... ------------------</span>
<span class=3D"st">... This is a new and improved</span>
<span class=3D"st">... introductory paragraph.</span>
<span class=3D"st">... """</span></code></pre>

<p>Now that the contents have changed, we can ask the Project to re-run the=
 <code>read()</code> task by using its <code>cache_off()</code> context man=
ager that temporarily disables its willingness to return its old cached res=
ult for a given task and argument:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">with</span> project.cache_off():
...     text =3D read(<span class=3D"st">'tutorial.txt'</span>)</code></pre=
>

<p>The new tutorial text has now been read into the cache. How many downstr=
eam tasks will need to be re-executed?</p>

<p>To help us answer this question, the <code>Project</code> class supports=
 a simple tracing facility that will tell us which tasks are executed in th=
e course of a rebuild. Since the above change to <code>tutorial.txt</code> =
affects both its body and its title, everything downstream will need to be =
re-computed:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; project.start_tracing()
&gt;&gt;&gt; project.rebuild()
&gt;&gt;&gt; <span class=3D"dt">print</span>(project.stop_tracing())
calling parse(<span class=3D"st">'tutorial.txt'</span>)
calling render(<span class=3D"st">'tutorial.txt'</span>)
calling title_of(<span class=3D"st">'tutorial.txt'</span>)
calling render(<span class=3D"st">'api.txt'</span>)
calling render(<span class=3D"st">'index.txt'</span>)</code></pre>

<p>Looking back at <a href=3D"http://aosabook.org/en/500L/contingent-a-full=
y-dynamic-build-system.html#figure-4.4">Figure 4.4</a>, you can see that, a=
s expected, this is every task that is an immediate or downstream consequen=
ce of <code>read('tutorial.txt')</code>.</p>

<p>But what if we edit it again, but this time leave the title the same?</p=
>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; filesystem[<span class=3D"st">'tutorial.txt'</span>] =3D <span class=
=3D"st">"""</span>
<span class=3D"st">... The Coder Tutorial</span>
<span class=3D"st">... ------------------</span>
<span class=3D"st">... Welcome to the coder tutorial!</span>
<span class=3D"st">... It should be read top to bottom.</span>
<span class=3D"st">... """</span>
&gt;&gt;&gt; <span class=3D"kw">with</span> project.cache_off():
...     text =3D read(<span class=3D"st">'tutorial.txt'</span>)</code></pre=
>

<p>This small, limited change should have no effect on the other documents.=
</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; project.start_tracing()
&gt;&gt;&gt; project.rebuild()
&gt;&gt;&gt; <span class=3D"dt">print</span>(project.stop_tracing())
calling parse(<span class=3D"st">'tutorial.txt'</span>)
calling render(<span class=3D"st">'tutorial.txt'</span>)
calling title_of(<span class=3D"st">'tutorial.txt'</span>)</code></pre>

<p>Success! Only one document got rebuilt. The fact that <code>title_of()</=
code>, given a new input document, nevertheless returned the same value, me=
ans that all further downstream tasks were insulated from the change and di=
d not get re-invoked.</p>

<h2 id=3D"conclusion">Conclusion</h2>

<p>There exist languages and programming methodologies under which Continge=
nt would be a suffocating forest of tiny classes, with verbose names given =
to every concept in the problem domain.</p>

<p>When programming Contingent in Python, however, we skipped the creation =
of a dozen possible classes like <code>TaskArgument</code> and <code>Cached=
Result</code> and <code>ConsequenceList</code>. We instead drew upon Python=
=E2=80=99s strong tradition of solving generic problems with generic data s=
tructures, resulting in code that repeatedly uses a small set of ideas from=
 the core data structures tuple, list, set, and dict.</p>

<p>But does this not cause a problem?</p>

<p>Generic data structures are also, by their nature, anonymous. Our <code>=
project._cache</code> is a set. So is every collection of upstream and down=
stream nodes inside the <code>Graph</code>. Are we in danger of seeing gene=
ric <code>set</code> error messages and not knowing whether to look in the =
project or the graph implementation for the error?</p>

<p>In fact, we are not in danger!</p>

<p>Thanks to the careful discipline of encapsulation =E2=80=94 of only allo=
wing <code>Graph</code> code to touch the graph=E2=80=99s sets, and <code>P=
roject</code> code to touch the project=E2=80=99s set =E2=80=94 there will =
never be ambiguity if a set operation returns an error during a later phase=
 of the project. The name of the innermost executing method at the moment o=
f the error will necessarily direct us to exactly the class, and set, invol=
ved in the mistake. There is no need to create a subclass of <code>set</cod=
e> for every possible application of the data type, so long as we put that =
conventional underscore in front of data structure attributes and then are =
careful not to touch them from code outside of the class.</p>

<p>Contingent demonstrates how crucial the Facade pattern, from the epochal=
 <em>Design Patterns</em> book, is for a well-designed Python program. Not =
every data structure and fragment of data in a Python program gets to be it=
s own class. Instead, classes are used sparingly, at conceptual pivots in t=
he code where a big idea =E2=80=94 like the idea of a dependency graph =E2=
=80=94 can be wrapped up into a Facade that hides the details of the simple=
 generic data structures that lie beneath it.</p>

<p>Code outside of the Facade names the big concepts that it needs and the =
operations that it wants to perform. Inside of the Facade, the programmer m=
anipulates the small and convenient moving parts of the Python programming =
language to make the operations happen.</p>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div id=3D"qb-sougou-search" style=
=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D"last-b=
tn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-86-d8f49dbc-6d12-4c70-99=
55-e03c926e6fc0@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/contingent-images/figure1.png

iVBORw0KGgoAAAANSUhEUgAAARcAAADLCAYAAABEWNc0AAAABmJLR0QA/wD/AP+gvaeTAAAgAElE
QVR4nO3dd1QU19/H8TddYBUUFaQaRcASxV5joo+JJZZYEo09UWIXexeVWIglxq6oP0uiMZYYe4kx
sSuWoFiCohIVBWKjShOePzasIiAs7Lhgvq9zPGd3Zm6Z3fWzd+4sMwZpaWlpCCGEbm0x1HcPhBBv
JwkXIYQiJFyEEIowfnVB5MVxRN3dBGmp+uiPyIGpqjyODbdiZGqj765oJTY+kUWbDhH5OFrfXRE6
ZmpiTI/WDahS3iHD8kwjFwmWgi0p9ibPHgXouxtau3kvUoLlLZWUnMKFa39nWp5p5JIeLMZmNpgV
c1O8YyJ3UhIfkRh9Xf2kEIb/yyclncrYUExlocfeCF25cuMukPH9TZc5XNJXWDhh5dxZuV4JrSQ8
CXwRLoVc5QqOuJa103c3hA6kh0tWZEJXCKEICRchhCIkXIQQipBwEUIoQsJFCKEICRchhCIkXIQQ
ipBwEUIoQsJFCKEICRchhCIkXIQQipBwEUIoQmfhcvHybb2UzY7KoSMqh45vrJy2lNjnt9XVoEt6
KZsdV1sbXG21v55ObsppU7eu9y2v+5UdnYRLly+/oWHzUW+8bGH1X9znvOrfqzttmzV542ULusKw
b9leckEbuw/k/eJF+Sn7OrFh2xSpVxeU2ue30aH9+/RS9nVCIh4pUq82lNo3XZI5FyGEIvIdLi/P
T7w8X5Hd3MWr22S1HCAqOo4xU/6HR+1+FHf5jIp1+jFu6lqiY+KzrO/kmWs4Ve5Fq0+nZNv+L3tO
0erTKdh79NDUOdrnf8TFJWi9z1m1CeD33RZqNx2GbYWu2Lp1o2mb8Xz/0+EcX6/C5OHDh5QsWZKP
P/6YjRs3EhcXp0g7Lx//vzwfkN3cwKvbZLUcIDoqiumTJvBe9ap4ONrRuEY1ZvhMIiY6Osv6zp4+
RS13V7p3aJdt+/t37aR7h3ZUr/COps6vJ40nPo+vTVxsLKMGD6BqOWfqVfFgxuSJJCQk5Op1SUlO
ZobPJGq5u1K3sjuL5s3R7PfIgf3xdC1Lg6qV8BkzirjY2Dz1Lzd0clika9Ex8fxfuwn8df2eZtnd
sIcsXrmL349d4rcdM1CpzDOUGe+7lqjoOBzss56QmjV/CzPmbsqw7G7YQ5at3sPTqFhWLhiqdT9f
bXPG3E3Mmr8lwzYBF64TcOE60dHxDPJqrXUbBdGTJ0949OgR+/fvZ9++fZiamtKuXTu6d+9O8+bN
MTU11XcXsxUTHc1nrVsScj1Ys+x+2D3WrFjGyaNH2Lx7H5YqVYYys6ZMJjo6Cjt7+yzrXDRvDgtm
+2VYdj/sHutW+hP19ClzFy/Tup9DvL7k6OHfAIiPi2ON/3JS01KZPH1WjmWnjh/Lpu/XaZ4vmO2H
g6MTG9etIfD8OQBiY2LYuG4NBoaGTPObrXX/ciPfI5eX5zZiw7ZpNdeRXdn5S3/hr+v3cHYsxd4t
04i4voHdP03F0b4kV/76m3lLtmeqq0J5eyJDfsw2JJas3K2ue6YXETc28uj2JvZt9QVg78Fzue7z
69pcsmoPAFvXT+DhrU1EXN/Ad7O+AmDp6j2v3efCKDU1lbS0NBITE9m+fTvt2rWjaNGidOrUiV27
dpGcnJyv+l+e2wiJeKTVXEd2Zf0XLyTkejAOjk788PMOLt26w/qt2ylj70DwtassX/hdprreca1A
UOi9bENirf9yAKb5zSbo9l2u3r3Phu07ATh88ECu+/yyx48esv/YSQJDQvm8Z28ADu7Z89p9S3fx
zwvs/v0oQbfvMmj4SAB8xowkJSVZvTz0HkNHjQHgtwPKzd0UyDmXnfvOADBvRl8aN6iCpWURPmj0
LvNm9AVgx97Tmcp4929HETOTbOu8d3UdsWHbqOlZgc3bjzJu6lq8x60AyHSolVuvtqmyLALAohW7
WLluP5EPn9K3Z3Niw7Zx5bT2316FSXJyMmlpaSQlJbFjxw7atm2LjY0NPXr04NChQ1lewFkfDu5V
/wed4vcN9Ro2wsLSkgbvNWbqv9/eB/fuzlSm78BBmJmZZVvn+eCbhEQ8omr1muz8eSszfCbjM0b9
n/rVQ63c8p09D1c3d1RFizJ09FgA/vknMldlfWbMwqNSZcwtLOgzYBAACQkJ+M6ep15ubq5ZHvHg
QZ76lxsF8rDo7zsRANSv7ZFheaN6lf5dn/lFrvDKPVNeFR75hG5eczhzLjjTurx+8F9tc6ZPLwaM
WMKRE0EcORHENL8NjBrakSFebbD8N3jy66cDsVhd24+ZdZhO6suLyMjXf8hTUlIAiImJYdOmTfzw
ww/YlbGnbJV6eDZq8Sa6mK17d9S3wKhZu26G5bXr1Qfg7t93MpUp51rhtXVGRkQwuE9vLpzNfBYw
r58tj0qVNI9LlS4NQEouR4JVqlbTPC5mZZVlnemHfkqGvuLhkpqahqGhAQDPEpJyVSa7/X3+XH1L
DVOzzN1+3agFYOSkVZw5F0xZ59K0bVmPKpVcqOVZgRrvD/23zTQMDAxy1b/s2uzUrhHNPvBk574A
1m08xJnzwUyfs4nF/rv5emJ3vuj2oVb1Z8Vn6RPS0hbnu543JT1owh/cJ/zBz6isbKBFQ53UnZqa
iqGhevCdPtmZk+w+W6mpzwEwNcs8X/S6UQuA74SxXDgbgKOzC80/bo1HpcpUrV6D5o3q/dum9p8t
U9PXt/k65hZZ37YlP3XmhWLhYmhoQGpqGlHRcRS3Vqfk5SxunJQVF+fSXA8J42TAX7T6sJZm+Ykz
1wBwtC+pdX8O/REIwK+/zKCMbQkArgW/uC1CYlJKjgGVG9ZWKnp2aUrPLk05HxjCjr2n+XbJdsZN
W6uTcAne4USZmstQ2X+c77ry6saNG7i55XxPK1NTU5KSknj33Xdp0aYDjw1sKGqt/Xv3KkNDQ1JT
U4mOjsLaujgAwVev5Kqsk4szN2/c4HzAaZp+9GIUdfa0+lC7jP3rR8BZOfq7+mzg5l17KW2nvmXK
jeC/NOuTkpJyDKi3kU7mXIyM1NW8fHandElrANZs+JW4+ESuBd9l5MSVuSrbpkUdAEZNWsXRk5eJ
i0vgyIkgRk9eDUDr5nW07qN5EfU30h/HgkhITCYw6BZfDn4xefc0Kv+n5Go3HYbKoSOr1h8gNvYZ
lSu6UNnDGYCili/ObmW1z2+L9DNFTk5OjB8/nsuXL3Pp0iW69vwyT8FiZGQEkOHsTslSpQD46fv1
PIuP50bwX0wdPyZXZT9sqQ7laePHcfrEceLj4jh1/Bi+E8YB0KxFS637WKSI+r09eewoiYmJXLl0
iRED+mnWRz19qnWdOclq3woanYRLKRv1cV2tJt5UqtsfgA5tGwDgM/MHbCt0pXbTYZoRQ05lRwxq
j2s5e+7c+4dWn07B1q0bH382lXv3H+JewZGRg9pr3cf0QPLyXkjJcl1o1GI0QVdDNesvveZvfXL7
e5QRA9X9GjbeHzv37pQs14U+QxYA0KBuRc12We1zYWZsrB4AlyhRgv79+3Pu3Dnu3LnD1KlTqVy5
cr7qtimpDqQW7zXg/ZqeALRq+wkAc6b78u47TrRs3JDStplvspZV2a8GD+Wd8uUJu3eX7h3aUbWc
Mz06fsKD+2GUr+BG/6HDtO5jeiCNGjyAys72tPuwCdeuXNasv3Y5KNuyef17nqz2raDRSbj4Te3N
Oy62mBgbaSaIpoztRt+ezSlRvCgqlTmtm9dhydyBuSprVcySwztn0u+LltjblcDUxJiyzqXx7t+O
P3b5ZfqNS27M8ulNj85NsSlRDGsrFXVrurN++UgmjPgMgBVr8n9K7vNO77N26XDq1HDD2kpFETMT
Knk4M9a7E0vmvNj3rPa5sDIzM+OTTz7h559/5v79+yxYsICaNWvqrP4JvtNxcimLsYmJ5rUaOWES
3Xp/iXXxEliqVDRr0ZJZ8xfkqmwxKyu27NlPjz59sS1TBhMTUxydXeg7cDDb9h3M9BuXXPVx2td0
+rwrxUvYYGVtTfVatVnov1pzuvf7/63KxyuQTZtZ7FtBY5D2Ss9u7FIP44sU96REud766JPIQsKT
QB7fWgug9zmXZ8+eMXz4cBo0aED79u0pWrRojmUCg++wbtcJAFo0ria3c31LLF6v/h2Pp7szvdpk
mKjfUiBPRYuCzdzcnOXLl+u7G6KAK5A/ohNCFH4SLkIIRUi4CCEUIeEihFCEhIsQQhESLkIIRUi4
CCEUIeEihFCEhIsQQhESLkIIRUi4CCEUIeEihFCEhIsQQhESLkIIRUi4CCEUIeEihFBEtheLSngS
yP3z2l9PVIic7D96EY5e1Hc3hMIyjVwMjbW/hqh4swxNCt97VMQ0/7dtEQVXVu9vppGLbfX5xEf+
/kY6JLRnXMQWi5KN9N0NrbmVtaNFg3eJin2m764IHTM0NKBp7YqZlme6QLcQQujAFpnQFUIoQsJF
CKEICRchhCIkXIQQipBwEUIoQsJFCKEICRchhCIkXIQQipBwEUIoQsJFCKEICRchhCIkXIQQipBw
EUIoQsJFCKEICRchhCIkXIQQipBwEUIoQsJFCKEICRchhCIkXIQQisj2vkXpnic94t6JTiTF3nwT
/REvMTSywK7GIiztPtR3VxSz+WAAp4NuIdeJLxxKlyjGkC7NUFmY5bhtjiOXZ4/OSLDoSerzeGLu
79B3NxQlwVK4RD6O5lZYZK62zXHkwktvvFkxN4zNbPLcMZF7cf+cAiAtLVXPPVFWerAUU1ngVEY+
WwVVdGw8dx88AiA1NXdfBjmHy0ssSzagSHFP7XsmtJYeLv8VpUsWo0n9SvruhshGSGi4JlxySyZ0
hRCKkHARQihCwkUIoQgJFyGEIiRchBCKkHARQihCwkUIoQgJFyGEIiRchBCKkHARQihCwkUIoQgJ
FyGEIhQLF5VDR1QOHQt8nW/Cxcu39d2Ft4qrrQ2utrr9C2ol6tRlm1eDLumt7bySkYvCunz5DQ2b
j9J3N0Qh1r9Xd9o2a6LvbmhNq0suaCM2bJtSVRcquw8E6LsLb52QCO3+9L+wO7R/n767kCcychFC
KOKNzbmkP7/y19+06TKN0q5dca7Sm2Hj/ImLT8xQ9tHjaLzHrsC1el/s3Lvj5b2QuLiELNuJi0vA
Z+YPVKk/gBJlO1Opbn+mfbORhMRkzTZfDJqPyqEjP249kqHs5u3HUDl0pEe/eTnux8kz13Cq3ItW
n07RrPP7bgu1mw7DtkJXbN260bTNeL7/6XCGstm9Hm+j2rVrU7t2bRYuXEh4eLhi7bw6X5D+PPja
VXp92oF3yzpSy6MCPmNG8Sw+PkPZJ48fMXn0SBpUrUS18i6MGjyA+Li4LNuJj4tjznRfPqhdg4qO
ZXi/pifzZk4nMfHF53V4/69wtbXhly2bM5Td+fNWXG1tGOL1ZY77Excby6jBA6hazpl6VTyYMXki
CQkJmn3Lar/TH6ckJzPDZxK13F2pW9mdRfPmABAdFcXIgf3xdC1Lg6qV8BkzirjY2Bz7okuKHRZl
p2WnKTx+EgNA/LNEVn1/AFMzY2ZPU78JcXEJNG07gZu3H2jK/Lj1CE+fZv4AJCQm0/JTHy5cfHGN
3zv3/mHOwm2c+/MGOzb6YGhowHezvuLkmWuMnLSKRvUr4+RQkrthDxk23h97uxIsmt0vx36P911L
VHQcDvbqN3fG3E3Mmr8lwzYBF64TcOE60dHxDPJqrf2LU8jdvHmTJ0+e8OeffzJ8+HAaNWpE7969
ad++PdbW1oq33619O54+eQzAs2fP2LhuDaampkyaPhNQh8WnH7cg9NYtTZlftmwm+mlUproSExPp
1qEtQYGBmmVh9+6ybMF8Lv15gTU/bcXQ0JBp38zh7JlTTJswljoNGmDv4Mj9sHtMGTsa2zJlmD7n
2xz7PcTrS44e/k3TxzX+y0lNS2Xy9Fk5lp06fiybvl+neb5gth8Ojk5sXLeGwPPnAIiNiWHjujUY
GBoyzW92jnXqyhs/LHJ9pwxnD3/HvavrGD1U/U2+5ZfjmvULVuzk5u0HlHUuzYFtXxNxfQM7Nvpw
8fKtTHUtXLGTCxdvUr1qef7Y40dkyEaO759DnRpu/H7sEus3qd8wq2KW+C8YQkzsM7y8F5KS8hwv
74XExD5jxXdDsLZS5djvCuXtiQz5kZULhgKwZNUeALaun8DDW5uIuL6B72Z9BcDS1ep1L887xYZt
+8/MQz1//pzU1FSOHTuGl5cXNjY21K9fH39/f6KjoxVrt2y5cuw7eoLzwTcZ4D0cgF3bX7zmq5Yt
IfTWLRydXfjxl11cunWHtT9t5crlzGdiVi9bQlBgIFWqVWPb/l8JCr3Hjl9/x7NmLU4cPcLWHzcA
UMzKijmLlhIbE8OowQN5npLCqMEDiY2JYfbCJVjlIlQfP3rI/mMnCQwJ5fOevQE4uEf9GXp5fikk
4lGm+aaLf15g9+9HCbp9l0HDRwLgM2YkKSnJ6uWh9xg6agwAvx14s3M3bzxcvp3pRUV3J6ytVAz5
qg2gPgxKt3PvaQDmzfCiYb1KWFoW4f/er8Yc3z6Z6vp55wkA/rd4GLU8K2Bhbobnu+VYvdgbgE0/
H9Vs+37Ddxns1Zrjp67wUftJHD91hQF9WtHkvaq56rd3/3YUMTPRPFdZFgFg0YpdrFy3n8iHT+nb
szmxYdu4cnqZNi/JWystLU0TNGfPnmXAgAGULFmSVq1asX79euJfOWTJr2l+c6jg7oGVtTV9BgwE
4Mnjx5r1B/fsBmDqrG+oXb8BFpaWNPqgSZYjhL07fgHg26X+VKteA3NzcypXrcq3S5cD8MvWF6PW
+o3e44t+Awg4eYLObT8m4OQJevX9ioaN389Vv31nz8PVzR1V0aIMHT0WgH/+yd0V9n1mzMKjUmXM
LSzoM2AQAAkJCfjOnqdebm6uWR7x4MHrqtK5N35YVMnDWfO4uLV6xPDy1cRv/60+Vq9Xyz1DuYb1
Ml+8Of3QqXrjIVm2deXa3xmeTx3fjcNHLxFw4Toebo74TuiR635XKO+Q4flMn14MGLGEIyeCOHIi
iGl+Gxg1tCNDvNpg+W/w5NepiwlEnL6K1Xl/ndSntJSUlGzXPX/+HIDU1FQOHjzIvn37GDp0KC6V
auPZqAWUtct3+24VPTSPrayLa9pL93eo+vdGNWrXyVCuTv36meoKvaU+1P6oYd0s27p+9WqG56Mm
TuLEkT8IPH8OVzd3Rk+ekmW5rHhUevHZLlW6NAApycnZbZ5BlarVNI+LWVllWaelSv3/7E3fwuWN
h4upyYsmDQwMst3u1dsXmJma5LjNq6Jjsv9mfF3bWXl51ALQqV0jmn3gyc59AazbeIgz54OZPmcT
i/138/XE7nzRLf83Mtvyaxy7jx4BjuS4bUFgamqaq+3SgyYqKopLpw6RkpxEnTo18t2+icmL9l/7
2Xrldi2mpplv8JXTZysmJvvDO20/W1m1n1vmFhY6r1NXCtyp6PLv2ANw/HTGb4Yz54MzbevsVAqA
i8cXa+Y0Xv4XdSfjhOvUWRu48tff1PR05VrwXabM+iFffbW2UtGzS1N+2zmTI3u+YcSg9jyNimXc
tLX5qjfdt6NsuH9uAGlpaYXin6WlZY77lB5ApUqVYuzYsfQYNZuPOvfXyeuVk7LlygNw9lTG27b8
ee5spm0dnZ0AOHTqrGau4+V/wfczHrbMnTGd4GtXqepZnRvBfzF3uq9Ce1F4FLhw6dSuIQAjJ67k
tyMXiYtP5OSZa4yYuDLTtm1bqoesXwyaz9k/b5CYlExE5FMmfr0elUNHOvaYodn2yIkgFq/cTf06
FTm0YyYN61Vi6ao9HDkRlKd+1m46DJVDR1atP0Bs7DMqV3Sh8r+HfEUtzTXbGRmpX+K/rt/LUztv
AxMTEwwMDLCysqJfv34cO3aM8PBw/Pz8sLF1fGP9aP1JewCmjh/D8T9+51l8PGdPn2Lq+DGZtv2o
lfps3/ABXly8cJ6kpET+iYzEb9oUXG1t6Nuti2bbU8ePsWbFMmrVrcfm3fuoXb8Ba1eu4NTxYzrp
t5GREQAh1zN/wRZkb/ywKCeDvFqzbecJLl6+TbuuL9K/a6cPuBWa8bcTIwd3YNf+AC5cvEmT1uMy
rLMqZonvxO4AREXH0W/YYlSqIqxaOBQTYyP8vxtCvQ9H8JX3IgIOz8eqmPpbN/23KDmd2RkxsD1e
3gsZNt6fYeMzzok0qFtR87iUjRXhkU+o1cQbZ8dSXD2zXMtXpHAyMjIiNTUVMzMzOnToQJcuXfjo
o48wM9PfcP2Lfv3Zs+MXrgZdonfnTprl7T/rzN+3M/79V78h3vy6bw9BgYF0bPlRhnXFrKwYPckH
UP+eZMyQQViqVMxdsgxjExPmLFpC6yaNGT1kIHv/OK6ZC0n/jYq2vzC2KVmSyIgIWrzXAAdHJ46c
D8y5UAFQ4EYuZqYm7N/6NQP7fkwZ2xJYWpjRuUNjvvP7KtO2xYpacHjnTAZ5tcbZsRQmxkaUsS1B
p3aN+G3HTCp7uAAwbLw/9+4/ZN70vrg4qSfMXJxKM296X8IePMoUDrnxeaf3Wbt0OHVquGFtpaKI
mQmVPJwZ692JJXMGarbzm9qbd1xsMTE2euvviZw+12BgYED9+vVZvnw5YWFhbNiwgTZt2ug1WEA9
D7Fx+056e/WjtJ0d5hYWtOv4Kb6zM/+IsmixYmzevZ8vvuqPg6MTxiYmlLazo/UnHdi8ex/uFdUT
plPGjubB/TCmzPwGRyf1yNXRyZkpM78h/P59powdne9+T/CdjpNLWYxNTArVZ8ggLYfext7fw4Pz
AwAoUa633M71Dbl/fhgAKvvWlKm5VM+9yR1fX19UKhWdO3fGwcEh5wLA8Lk/AuBa1o4WjavlsLXQ
l5DQcPYfvQhArzYN8XR3zqEEWwrcYZEovHx8fPTdBVGAFLjDIiHE20HCRQihCAkXIYQiJFyEEIqQ
cBFCKELCRQihCAkXIYQiJFyEEIqQcBFCKELCRQihCAkXIYQiJFyEEIqQcBFCKELCRQihCAkXIYQi
JFyEEIrQ6mJRj2+tVagb4r8uJDScxaHK3V9avHk5jlwMjXO+XYRQjqFxzreaLcyyuh+VKNhevYdX
dnIcuViUeg8b9+GkJETku1NCSwbGFC//Zu7poy/dWtXj2q03e5tRkXdWKnPcXHJ3d8wcL9AthBB5
sEUmdIUQipBwEUIoQsJFCKEICRchhCIkXIQQipBwEUIoQsJFCKEICRchhCIkXIQQipBwEUIoQsJF
CKEICRchhCIkXIQQipBwEUIoQsJFCKEICRchhCIkXIQQipBwEUIoQsJFCKEICRchhCK0um/R6zxP
esS9E51Iir2pqyrfWoZGFtjVWISl3Yf67kqhsflgAKeDbiHXk1dG6RLFGNKlGSoLM53VqbORy7NH
ZyRYcin1eTwx93fouxuFigSLsiIfR3MrLFKndeps5MJLb7xZMTeMzWx0VvXbJO6fUwCkpaXquSeF
S3qwFFNZ4FRGPlu6Eh0bz90HjwBITdVteOsuXF5iWbIBRYp7KlF1oZceLiJvSpcsRpP6lfTdjbdG
SGi4Jlx0TSZ0hRCKkHARQihCwkUIoQgJFyGEIiRchBCKkHARQihCwkUIoQgJFyGEIiRchBCKkHAR
QihCwkUIoQgJFyGEIt7KcFE5dETl0FHxdi5evq14G6JgcbW1wdX29X+VnZtt0l0NuqSLbuWpbaW9
leHyJnT58hsaNh+l726IQqx/r+60bdZE391QjCKXXNC32LBtirex+0CA4m2IgickQneXJzi0f5/O
6iqIZOQihFBEgQiXX/acotWnU7D36EFxl8+oWKcfo33+R1xcgmab9HmUxKRkhoxZThmP7pTz7MPA
kUv452FUhvpyM+eSvs3JM9dwqtyLVp9O0azz+24LtZsOw7ZCV2zdutG0zXi+/+lwhrLatCUy6tmz
J25ubkyfPp2bN5W9NOr+XTvp3qEd1Su8g4ejHY1rVOPrSeOJj4vTbJM+T5GUlMjEkcPxdC1LvSoe
jB8+lEcPH2aoT5s5jbjYWEYNHkDVcs7Uq+LBjMkTSUhI0NSTVZ3pj1OSk5nhM4la7q7UrezOonlz
AIiOimLkwP54upalQdVK+IwZRVxsbL5eI6Xo/bBo1vwtzJi7KcOyu2EPWbZ6D0+jYlm5YGiGdWMm
/481G34FICbmGes3Heb46aucPDAXlcpc6/bH+64lKjoOB3v1mztj7iZmzd+SYZuAC9cJuHCd6Oh4
Bnm11roNkdHNmze5ceMGU6dOZfLkyVSrVo3evXvTuXNnypQpo7N2Fs2bw4LZfhmW3Q+7x7qV/kQ9
fcrcxcsyrPt64gR++mE9ALExMWzZuIGAUyfZeegPLFUqrdsf4vUlRw//BkB8XBxr/JeTmpbK5Omz
ciw7dfxYNn2/TvN8wWw/HByd2LhuDYHnz2n6uHHdGgwMDZnmN1vr/ilN7yOXJSt3AzB/phcRNzby
6PYm9m31BWDvwXOZtt+5/ww/rh5LePAP7N0yDUf7ktwKDWeh/648tV+hvD2RIT9qQmzJqj0AbF0/
gYe3NhFxfQPfzfoKgKWr1etentOJDdv2RuZ43kbPnz8H4NKlS4wZMwZ7e3uqVavGggULCA8Pz3f9
a/2XAzDNbzZBt+9y9e59NmzfCcDhgwcybX9w726Wrf2eizf/5oefd1DG3oG/b99m9fKleWr/8aOH
7D92ksCQUD7v2Vvdxh71Z+jluZuQiEeZ5nIu/nmB3b8fJej2XQYNHwmAz5iRpKQkq5eH3mPoqDEA
/HagYM7d6D1c7l1dR2zYNmp6VmDz9qOMm7oW73ErAIiOic+0vd+U3rRpUQeVypzGDaowb0ZfAHbs
OZ2n9r37t6OImYnmucqyCACLVuxi5br9RD58St+ezYkN28aV08uyq0bkQ1paGsnJyQAEBQUxcuRI
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
N/9MiGczmgAAAAAASUVORK5CYII=
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/contingent-images/figure2.png

iVBORw0KGgoAAAANSUhEUgAAAbYAAAEwCAIAAABUgsPiAAAABmJLR0QA/wD/AP+gvaeTAAAgAElE
QVR4nO3dd1hTVxsA8Df3ZkLYeytusAgiLrAqat1aa61fXdWq1FW17lVcuGurtlalTnDV0TrA0Tqq
ggoVBakDFRdLlkBIIDvfH9emEUgIISEQ3t/Tp09y77kn70Xycu45595DUygUgBBCqCqEsQNACKH6
C1MkQgiphSkSIYTUohs7AISQQWTkvt114i9BucjYgRgZnSSG9AjoFtBSt8OxFYmQaUp9mon5EQCk
MvmdBy90PhxbkQiZJuVklRZNXJiMRvpNf/oyRyyR1mbaTiP9wSHUeHQOaG5lYWbsKIwj802hWCKt
TQ14oY0QQmphikQIIbUwRSKEkFqYIhFCSC1MkQghpBamSIQQUgtTJEIIqYUpEiGE1MIUiRBCamGK
RAghtTBFIoSQWpgiEUJILUyRCCHdNXeya+5kV9NdlIep9w3xufqFKRIhZARTvhgzpHdPY0dRPXwY
GkJId89yC3U78NKF8/qNxECwFYkQQmphikSosbtw9syYT4YGtGja2t35w/btVi9bXCYQULuoLj+x
WLR07jf+zZt0btt68TczCwsKlMdW2yco4PPnzZjq5+3ZuW3rNd8uFQqF1FEVDqdeSCWSNeHLOrRq
3sm31Y+bNwEAr6Rk7rQp/s2bdPXzCV8wT8DnG+iHoA5eaCPUqP24edPWjeuVb7OzMg/8EllSXPzd
TzuUG1cvXfLrwSgA4JeWHj98KPHWzTOX/jLncrWp/+vJX16/chkAygSCfZE75Qr5txHr1BVesXjh
0egD1OutG9e7uXscPrAvOekO9dGHD+yjEcTK9Rt1OlEdYSsSoUZtf+ROAFi5fmPqi4yHGdmHfj8D
AFf+uKha5o9zMTv2R6ekvzr422kXV7dXL17s2fmzlvW/LSy4cONm8rOXn48bDwB/xMaCSg/ms9xC
1d7MlHt3Y65eT32RMf2buQAQvmCuVCqJuXo99WXmzHkLAODyxbruwcQUiVCjlpSW/iy30C8g8Mxv
J9aEfxu+YC4AlPJ4qmWWrIro03+AOZfbOThkxfqNAHAx5qyW9a/auLl5y1ZcC4uZ8xcCQH5+nobC
4WvWtfbx5ZiZTZw6HQCEQuGqjZtb+/hyOBxqS25Ojk5nqTu80EaogTl27JhUKu3Vq5eTk1Pta8vL
zZ0xcfzdvxNVNyreXzPww56hytdBnbsAwOuX2i672trHh3rh4OgIAFKJREPhtn7tqBeWVlYVDqeu
6xW1WcxQJ7qmSIWsMO0HsSBdr8HUIwRpZtvyG4aZu7EDQaii+fPnv379mkajtWzZsn///r169ere
vbuFhYVuta1asvDu34nunl59Bw5q7ePrF9C+b0hnAFAoFDQajSpDpzOU5eVyGQDQGYwqa6uMyWRp
HwzHrOJKjTU63BB0TJFl+TfePt2m31DqHRrp1K5OO4YR0oatre3r168VCkVaWlp6evqWLVsIgggI
CBg4cGCvXr06d+7MZDK1r+361SsAcOzsOUdnZwB4mvaY2i4Wi1msd+np7t+J3Xv1pl4n3LwJAN7N
muvxjOozHfsi5VKBfuOoh+TSup5egJA2nJ2dla+lUikAyOXypKSkDRs2dO/e3czMLCAgYNGiRcl3
EmSy6peQZrM5AHDzxnWRSPTg/v05U7+itpcUFyvLLF+0IPFmfHlZWdy1v1YtXQQAg4d/WsuzIEkS
AJ49SatlPYZW275IW+/xbBt/vYRSf2QnzTZ2CAip5eTkRJKkTCarsF0kEgGATCZLTU1NTU2VyWTm
ltYTFm3RXFvvfv2PHYqeN2PqvBlTVbc/+ifV8d++Tidn51HDhih3BXQIGjP+yyproyY5anPLjZ29
fV5ubr9uXd3cPa4lJVdb3lhwuAahekculxcWFhb8Ky8vLz8/X/n22bNndDq9copUJZPJbO3sPwju
r9qNWKUlK1fL5bLLFy/K5TLv5i0mhE159iRt23cbo/fuVl5c74o6uGj2zPhrf9nZOwz+ZPj0OfO0
74tU+7mrIjavXZOTnVX3IzA1gikSoTpVXl5eWFiYn5+fl5enzHoV3hYUFKgmDisrK0dHR3t7e3t7
e1dXV5lMlpmZWWXldDpdKpV269Ztzpw5NEv3y38/rjYeroXF+i0/VthITdBRsrax3XngYJWHV2gw
qr6t3JZU3TLo408GffyJloW1qdxAMEUipB9isTgzMzM7O7voXzk5ORXeFhUVKcvTaDRnZ2ebf7m6
uvr5+am+dXFxsbGx4XA4FT5o7969V69erbCRTqcTBPHFF19MmzbN398fAGJvpBj6lBsDTJEIVUOh
UFDZrcqsp3xL3X1ModPpDg4OyjTn7e2tmvUotra2bDZbh3gcHByUV9kEQQCAhYXF7Nmzp0yZojqS
g/QCUyRq1CQSSX5+vobEV1RU9PbtW2okhGJlZeXm5kalORcXl8DAQNXER+XByk0/PbK3t4d/r6ld
XFxmz549efJkq3/nWiP9whSJTFZRUZEy06lLgqpNP5IkHR0dlWmOavpVbv0ZNP1pw8PDgyRJf3//
efPmDR8+nE434Le4zrr86i1Mkajhkclkubm5mi97K6Q/JpPp7u6uzHTe3t4VEp+rq6uNjY0RT0p7
7u7uRUVFOt9Og2oEUySqX0QiUVZWlubWn2ruqzDo4evrq0x8qknQ6E0//cL8WGcwRaI6IpfL37x5
U6NBDwaDQU1z0TDoYWdnp7xPDiG9wxSJ9KDaQY8K810AwNramrq2rTzooWG+C0J1DFMkqobmiX4N
d9ADIW1gimy8pFJpXl5ejQY9WCyWm5ubukGPOpjvglAdwxRpmng8XkZGhubWn2ruIwjCyclJmekC
AwMr3+aBTT/UCNX3FMl1Gw4A/KyTeqkt5Z8X7do21UtVxmKIQY8GNN8FoTpW31OkHv3vyw0xFxP1
lW0NoaY3+QKAau+et7d3cHBw5dYfNv0Q0ll9T5F6zGgxFxOrL2QYqjf5ajnoQd3kq3nQQ+ebfBFC
WqrvKbL+owY9NI94VEh/lpaW7u7uVc52xkEPhOqVukiRp2JvRe6/kJz6vLxc5OxkM6hfpxULR5mb
s+HfrsbCF0fnLdtz4kwch83q16v9ysVjHOzf3ZOvoS+S2vXHbxEjv1z/gU+Tc8dXAsD6LcdPnol/
nZEHNJpvK88JY/qMHRmqLKy5wspKSkoyMzN1HvRQNv1w0AOhBsrgKXLdD8fXfHdU+TYjq2DHntji
Ev4vW2cqNy74du++Q38CQGlpedTRK3G3H968+B2Xq1UeWbxqfwlP4OZqBwBrvju67ofjyl2Jd58k
3n3C45VNnzyopmHv+b10z+n9b4t3yeVy5UZLS0snJyfqyaYtW7bs2rUr9dbOzs7e3t7BwcHR0RHv
DEPIlBg8RW7/JQYAflg7edSInnQ6kZj0pP+n4ef+uKNa5syFhCN7FvYM+eDu/fSwWT8+f/lmW+TZ
JXM+06b+Fs1cL/4WwWYxAGD77lgAOBG1pEeIn0wqO3Ly2uzFkT/viZ0+eRA/62SN2o+BPixLhw+a
+k9V5kR7e/saLSyHUD0R/fsNY4fQgBk8RWY+PAAAd1PSj/1+/f6Dl9fiUwGAV1qmWmb98vGD+3UE
gA+7tt28ZtLICetPx97WMkXOmjKUyo8AwDVn80rLftx19ml69qC+QZPG9Z00rq9uYfu3Yob0bOsS
+LluhyNkdCxmbZeXMRkspu6JzuAp8k1e0ejJmxLuvLcUZIUFfXr3+G8NxZDOPgDw4tUbLetv0cxN
+Xpt+BdT52y/Fp96LT515fpD82YO/3ryYKrTE6HGpmu75qUCoUSqaRWwxoBGgy5+uq/6bfAUOXfZ
7oQ7aU08HYf079zWx6uDf4v23WcCgEKhoNFoVBkG478wZDI5ANDppJb1K5uQAPDp0JDePfzPnE88
cPhSQlJaxKajP0XGrF46ZsLoPno7H4QaCDM2c1hoe2NH0eARhv6AS38lA8Cfp9asDf9i1Kc9qAwI
ACLxf4ug31ZZpy3u1gMAaKnSNqwRayvuuP+FXj6z9lrshjnThxWX8Bet3K9z8AihRs7gKZLDZgLA
XzdShSJJcurzL2e8W/i8uISvLDNn6S9xtx4IykRXrqfM+3YPAHw2rJsOnxUUOpvrNnx31EU+v9y3
jZdva08AsDB/NzJOkgQAPH5S9eqaCCFUmcEvtAf17bj/8KXJs7ZNnrVNdfv9f144h767L9jZybbf
p+HKXZ0CW00e36/K2jSPSs+ZNmzyrG2zF0fOXhyp3Ni1UxvqhYOd1Zu8og49Z3m6OzxM2FmLc0II
NRYGb0WuCx8/dmSona2ltRW3U2CrqJ1zqaHqXfvOK8sc27doUN+OZhyWl4fj/JnDY46tYGjdF6nq
80+77//5m47tW1pbcdkshk9rz4WzPt2+aRq1d/2K8U29nBh0ssJgEUIIqUPTLV/ws2NzkqYCgK33
eLaNf7Xl1dHvg3z0JTtpNgBwXQe5BP5s7FgQQsZk8FYkQgg1XPgYi6qdjy8T0x8ONHvUunVr5eQk
hFBjg63IqqU+Fa/edtvHx8fJyenjjz/+/vvvExISpFJp9UcihEyIkfsi6ydlX6TCZVl8fPylS5fi
4uIePXpEkmS7du2Cg4NDQkJ69uxpb29v7EgRQoaFF9qauLq6jhgxYsSIEQCQm5ubmJgYHx8fFxe3
c+dOsVhMPeU7JCSkd+/e3t7exg4WIaR/mCK15eTkNHjw4MGDBwOAQCC4d+8elS7nz5/P4/FcXFxC
QkKojBkQEEAQ2IPxHgUo5HKpXC5RKORV7KbRCBqdJOg0mi6TvRAyHEyRujA3Nw8JCQkJCVm4cKFU
Kk1JSYmLi4uPj4+IiCgoKLCwsOjUqROVLkNCQhrh2glSmUgqE8rkIqlMJJOJZAqJXK5VNy6NRhA0
Okmy6CSLTrBIksUgOTQa/r1BRoN9kVWozbzI58+fU+kyLi7u4cOHDAbDz8+vd+/eVMY03YUGFRJp
uVjKl0jLJNIyuUKPT5eh0UkWg27GpJszGVyChn/UUZ3CXzg98/b29vb2HjduHADk5OTExcXFxcVd
unRp06ZNNBqtVatW1PV49+7dvby8jB1sbSkUcpGEJ5LwxBK+XtPiex8ilQmlMmG56C0AMOhmLIYF
i2FFJ1mG+TiE3oMp0oBcXFyUoz2lpaUJCQlUAzMqKkooFKp2X7Zv375hzb4USwVCUZFQUlJ136LB
UK1Ufnkug27GZlpzmNbYfYkMClNkHbGwsOjdu3fv3r0BQLX7ctWqVW/fvnV0dOzYsSOVMTt27Fhv
V4BQKOTl4rdlwkKZXGzcSN7lyrIcFtPKnO2IjUpkINgXWYW6vEdbJpM9fvyY6ru8fv36q1evzM3N
/f39qXT54YcfWllZGToGLQnFxfzyXKMnx6rQOCxrLtuJIHApAqRn2Io0MpIkfX19fX19w8LCACA7
O5tKl5cuXdq4caPqZPUePXo4ODjo8BEymay4uNjOzk7nIMUSfml5jlQmrL6ocSjKRUVCcYkZy86c
7Ygj4EiP8JepfqEmq2/duvXOnTvFxcXnz5/v3bt3UlLS2LFjHR0dmzVrNm7cuMjIyAcPHmhfZ1RU
lKura0REhEQiqWk8crmkmP+yiP+iHufHdxQKuUCYX8BLE4lLjB0LMh3Yiqy/LC0tld2XZWVld+/e
pRqYCxcuLC4udnFxCQwMpO7t0TxZ/erVq1KpdOXKlVFRUVFRUZ07d9YyALGEX1KWoeWUxnpCLpcW
C15zpLYWHNeGNQKG6ifsi6xCPX9epLL78tKlS3/99Vd+fj6Xy+3cubO6yequrq45OTkAQJKkTCYb
PXr01q1bq73u5pe/EQjzDXgaBkYn2dZcL5KopwNfqKGobYpkmjclmPVlPEFfhEXJUI9TZAWqk9Ur
PGujV69efD6/wgRMBoNhaWn5/fffU5M3q8Qry6LmITZoBMGw4TbFwW5UG7qmyJxzOXem6D2aesXC
bYhz+5+MHUXNpKenx8XF3bhxIz4+/vHjxwwGw8vL6/nz53L5e7MXqSvQvn37RkZGenh4VKiEJ8gs
FxfVXdCGRNDoNhZN6WSjuwcU6YuOKVImLsyM/1TMT9d7QPUEybRxaveduXMDXoA7Ly8vPj5+/fr1
9+7dq3Kghk6nM5nMtWvXfv3118quzNLynDJhQd1GalgEwbCzaIbzgZBudEyRqKFo1arVkydPNBQg
CCIwMHD//v0+Pj7lore8sqw6i63O0Em2rUUznAyEdIAp0pQVFxfb2tpq80/MYDC+/+G7z0aHmurv
gxnLzsLM1dhRoIYH/66asps3b1ZIeTQajclkMplM1UlCHA7Hw8Mj9Z+7hsiPzrZ+zrZ+Ggqk3n+s
rrCGXTVVJiqUSMt0Phw1Wjgv0pQpZ5iTJGlra+vh4eHh4eHp6eni4uLm5ubm5ubq6uru7m5hYSEU
l5QIXtd9hOPHzLpw7uqbt/drtEs3peU5thbN9FUbaiTwQtuUlZaWpqenOzk5OTk5aX4Q+tvSdKM0
sqiGYZV5sMIuDSW1Z2PhzaSb16YG1NhgK9KUWVhY+PtXP7FfKitvJBeh5aK3mCJRjWBfJAKhmKe5
QMyZP4cPndSySVcPp/aBfn2XLd4gELxLqVQXoVgknjd7ZQuvrh+06vnN18sL8v+bdq6hD1G5XVlG
9YXmwwWCsoiVWzoG9PdwDuzQrt+6iG0ikajaMxVJeAB42YRqAFuRCMRSgYa9mzfu3LT+v7uMsjJz
du86VFLM+3HHGuXGZYs3HIw6CQClpfwjh36/fSvpz79+5XIN1V4TiUSfDJmYcu9dT2tmRvbW73ff
S/rn6MmdmvsTFAq5RFrOoJsZKDBkerAViUAqK9ewN3LnQQBYv2np88yE1zl3fjuzBwD+uPCXaplz
sZf3RW959vrWydO7Xd2cXzx/vXN7VLWfq+xYfPP2foVORg27AGDHT1Ep9x74+fucv3T4RVbin1d/
Dezgd/3a7SOHTlX7oRKNJ4tQBZgiGzuFQq55cYW053Fv3t4PaN/2txPnwpdtWjA3AgB4PL5qmZUR
8/sPDOVyzYO7dVy3cQkAxJ69ZLiYz5y6CAA7ItcHtG/L4bA/aNdm+651AHDiWEy1xzasBxcho8ML
7cau2mW5cnPzJ30x9+/EZNWNFSZC9AwNVr7u3DUQAF6+yKhQT4UuxdqMTT9PfwUAwR2HVNj+6OHT
ao9VGGoZMmSaMEU2dtXelrd0wbq/E5M9vdwGDurdxrdl+8C2IZ2GAoBCoVA+kJHO+O8XSS6TAQCD
YcBfLbmamWqlvNJqj8XbEFGNYIps7AgaCUDTMM579cpNADhzPsrZ2QEA0h6/e3aJWCxmsd49Z+xO
YnJo7xDq9c34OwDQrHmTCvXocRK4h4dr+rOXN/+O8W7mWdNjcSVuVCP4FxUBndT03Fk2hwUAN67d
FolEqSmPpoUtorYXF/83VWjR/DW34u+UlZVf++vWskXrAeCTTwdq89EkSQDAk7QqHhmlYdeAQb0A
YGrYwrtJqWKROC+vYFX49862fqNHTtfiE/HxkagG8O4aBKVl2WWiQnV7585acSj6t8rbDx/7ObR3
CNXD2LFTQGLCPeWuDkHtfo/ZR11ra74rpl2bXrm5+QDg7uF6J+WCamENu3g8/oA+o589faFalZWV
xanY/W18Wmg8V5qjtQ9eayPt4e8KAiaDq2Hvioh5/xv9sa2dtZW1ZYegdpF7N81bOBUA9vxyRFnm
wKGt/Qb05HDYHp6us+ZMOnF6t5Z9kSvXzPdq4s5g0Cv/qdawy9KSG3sxOmzqGHcPVwaD7uzs8PEn
/c5eiKouPwKDzsH8iGoEW5EIABQFJU90WyBbL7dO1xkrc0+2ya0jggwK/6IiAKBxWLbGjsHgCILB
ZloaOwrUwGCKRAAAZmx7kjDxcQwLjjMALhuLagZTJAIAoAHNwszZ2FEYEJNuzmZaGzsK1PBgXyT6
T4kgU2gqax+qotFIO4tmON0H6QBbkeg/VuZupvc4RRrQrLlemB+RbjBFIlU0K3NPugllE4lY8vp5
ienlfVRnMEWi9xAE3cbCm06yjR2IXtDuJKQHdQgJCgrasWNHcXGxseNBDQ+mSFQRQaPbWDRl0jXN
J6//aDTC2tzj4yEjHj161KtXr5UrV9rb2/fp0+f48eMSicTY0aEGA4drkDoKfnmuQJhv7DB0QSdZ
VuZeqj0GMpns6tWrkZGRp06dsre3HzFixKRJkz744AMjBokaBEyRSBOJtKykLFMmq35ZmHqDZs52
4HIc1U2BzMnJOXbs2J49e1JTUwMDA8PCwkaNGsXlNuwmMzIcTJGoGgqFvLQ8p1xUVP8XxqKTLAsz
bQflk5KSIiMjDx8+LJPJBg0aFBYW1qtXL+UTMBGiYIpEWpHJJfzyN0JxPR3xIAkml+Osw/3X5eXl
MTExkZGRly9fbtmy5YQJE7744gtnZ1OeRY9qBFMkqgGJtEwgzBdJqllUti6RBNOMbcdh2tbyET5p
aWlHjhzZt29fVlZWz549w8LCPv74YwaDoa84UQOFKRLVmEwmKhMVCsXF1a57Y1BMujmHZctmWunx
zmvVUR07O7vPPvts4sSJfn5VrwOOGgNMkUhHClCIJaXloiKxlK95DUX9opNsNtOKzbQmCU0PS6+l
N2/e/Prrr3v37r1//z41qvP5559bWFgY7hNR/YQpEtWWQqGQSAUiSalYypfKhIb4CIJGMujmLIYF
k2FBEnV68UuN6hw5ckQikQwePBhHdRobTJFInxQKuURaJpGVSWVCqUwkk4kUOo2DkwSDJFh0ksWg
mzFIjtHvsBYKhWfPnqVGdVq0aPH5559PmDDBy8vLuFGhOoApEhmUQiaXyOQSuVwil0tlColCIQeF
QgHKC3MajUYA0EiCTtDoBMEgCTpJsOrt8glPnz49dOjQ/v37MzIyQkNDw8LChg4dymQa8JIfGRem
SIRqTC6XX7lyJTIy8vTp0+bm5iNGjJg6daq/v7+x40L6hykSId0VFRUdP358x44dycnJgYGBY8eO
HTt2rK2t6a9y0XhgikRID5KSkqKiog4dOiQQCHBUx5RgikRIb1RHddzd3UeNGjVlypQmTZoYOy6k
O0yRCOlfRkbG4cOHd+7c+fr169DQ0LFjx44YMYLD4Rg7LlRjmCIRMhRqVCcqKurEiRMsFuuzzz6b
MmVKQECAseNCNYApEiGDKy4uPnbs2K5du+7evevj4zNu3LiJEyfa29sbOy5UPUyRCNWdBw8eREdH
79mzp7S0dMiQIWPHjh0wYABJkurKT5061dHRccWKFTjyYyyYIhGqayKR6MyZM1FRUefPn3dxcRk9
enRYWJi3t3eFYq9evWratKlCoRg2bNjBgwfNzMyMEm0jV0/vYUDIhLFYrBEjRpw9e/bly5czZsw4
fvx4ixYtQkJCIiMjy8rKlMX27t1Lp9MBICYmpkOHDq9evTJeyI0XtiIRMjK5XH7z5s3o6OiDBw8y
GIyRI0eGhYX5+/u7ubnl5uZSZeh0urW19blz54KCgowbbWOjKUWKSh5IBC/rMJgGg0bnmDl8SKPR
jR0IMim5ubnR0dF79+599OhR3759L168qLqXJEmSJPft2zdq1CjlxqevcwXlDWhloXqHTidbejox
GWq/y2pTpIj36PX1AWDUZ6bWZ7Ytv7Fr9Y2xo0Cm6datW0uWLImPj6+wni01aBMeHr5ixQoAuPPw
5aFzt4wSoSnp4NNk9IAu6vaq7YuU8J9jftRAzH9q7BCQyWrRokVcXFzl9b4VCoVCoVi1atXIkSOF
QmFuYYlRwjMxuYWaFhqp/lLRwqUvk9tMf/E0eIVPfzZ2CMjEHT16VMNehUJx8uTJV69ezVy6ntrS
O/gDczMjP1KzIboUnyooq6abovoUyeC4sCxb6ikkhFD19uzZI5NpuoaTyWRJSUnzp33Rd8wcKztH
F0drKwucElRjdPUzUpVw0g9C9Ut+fn5KSorqIAGdTmcwGEwmk6VCoVBkZ74+sm0Z722+EaM1eTgm
i1D94uDgcPfu3YKCArlcXlJSAgClpaVSqVQkEpWVlSkUiuLiYgDg8/npGW+y8opIOn6LDQh/uAjV
O1o+wDz2RsqlhIeGDqaRwwtthBBSC1MkQgiphSkSIYTUwhSJEEJqYYpECCG1MEUihJBamCIRQkgt
TJEIIaQWpkiEEFJLDymS6zac6zbcWIfrUco/L4wdAkL619zJrrmTnbEO17nah6n3DVe59rAV+c7/
vtwQ3HeesaNACAEATPlizJDePY0dBYBe7tHmZ52sfSVGF3Mx0dghIGQQz3ILjR1CjV26cN7YIbyD
rUiE6h0ej3f16lWpVGrsQJC++yKp1w8evxr8v5WOzUd5th0/e1Gk6nN9C9/yZi3c1TxgknOrMZNn
bRMIhBVqEwiE4WsPtu0y1bbJSJ9OU1ZuOCwUvXs8/YTpP3Ddhh85cU1Z+NjvN7huw8d+tVldVDcT
Hnn4fjFgxHJq4/otx4NCZzu1GOXUcnTo4MXRv15RFq58LggZy4EDB0JDQx0dHadPnx4fH1/LZUpV
O+ao12mPHn4x4pMPmrh3aN0ifMG8cpWVaYveFn47f25XP592zbzmzZhaJhBUqK1MINgUsapHUPs2
7i7dA/03r40Qid59wb+ZEtbcye7U8WPKwmd+O9Hcye7ryV+qi03A58+bMdXP27Nz29Zrvl0qFAqp
ICtETr2QSiRrwpd1aNW8k2+rHzdvAgBeScncaVP8mzfp6ucTvmCegM+vzQ+qSgZ5GFr/T5e/LSoF
gLJy0e7oi0wWfePKLwFAIBCGDlmS/iKHKnbkxLXi4vf+AYQiSf8R4XdT0qm3rzPzN207eefe09OH
wwmCtmVd2M2ER3OX7Q7p4uvhZp+RVTB7caSrs+2PG79SF8niVftLeAI3VzsAWPPd0XU/HFfuSrz7
JPHuEx6vbPrkQfr+ASBUK1KplE6nFxUV7dq16+eff3Z2dh4/fvznn3/u5zjlJtwAACAASURBVOen
l/pHDxtaXPQWAMrLyw8f2MdkMpdFrAWAMoFgxMB+L58/p4qdOn6MV/ze8jgikWj0J0NSk5Opt1mZ
GTu2/nD/3t19v54gCGLlhk1/J9xauWRhx65dXd3cs7Myly+c7+TiErHpe3WRfD35y+tXLlMfvS9y
p1wh/zZinbrCKxYvPBp9gHq9deN6N3ePwwf2JSfdAQB+aenhA/toBLFy/cba/GQqM8iFdvOmLn9f
2ZL58MD8mcMB4PipOGr71l1n0l/kNPF0vHhyde6TQ6cPh6f881z1wG27ztxNSQ/wa/ZX7Pq8Z4fj
Lmzq2L7l1Rv3o45eBgArS/PIrV+X8ssnz9omlcomz9pWyi/fteVrayuuukhaNHPNe3bkl60zAWD7
7lgAOBG1pOD50dwnh7asCwOAn/fEgkp3Kj/rpGl0raKGjiAIAKCWZ3jz5s3mzZvbtWvn6uo6a9as
e/fu1bLyJt7e56/HJ6WlT531DQCc/f3d7/zuHdtfPn/u7ul15NTZ+89f7//1xIN/3htW3rNje2py
ctt27U5e+DP1ZebpP6/6B3aIv37txJFDAGBpZbXpx5/5paXzZkyTSaXzZkzjl5Zu3LbdytpaXSRv
Cwsu3LiZ/Ozl5+PGA8AfsbGg0nn6LLdQtSM15d7dmKvXU19kTP9mLgCEL5grlUpirl5PfZk5c94C
ALh8Uf89mAZJkd+vndymlYe1FffrsMEAUPj23QJjZ87dBoDNayYHd/YxN2f36t5u06qJqgf+diYe
APb+NLuDfwszDsv/A+89P80CgKO/XacKdA/+YMbkQXG3Hnw0bFncrQdTJw7o2U3T39VZU4ayWQzq
NdecDQA/7jr7y4ELeQXFk8b15WedfHB7h37PHSFDoFZDzMnJ2bFjR/v27Vu1arVixYqcrAzdalu5
flOLVq2trK0nTp0GAEVv31Lb/4iNAYAV6zYEdelqZm4e0qNnhTbdudOnAOD7nyPbBbTncDi+fn7f
/7wTAE6deHd91iWk24SvpibejB85ZGDizfgvJoUFf9hdQySrNm5u3rIV18Ji5vyFAJCfn6ehcPia
da19fDlmZhOnTgcAoVC4auPm1j6+HA6H2pKbk6PbD0QDg1xo+7T2pF7YWHMBQC5/15Py4tUbAOjc
oZWyZHBnH9UDqWvwgA+/rlDhg0evlK9XLB595fr9xLtPWrd0X7VkrOZIWjRzU75eG/7F1Dnbr8Wn
XotPXbn+0LyZw7+ePNjcnF3DkwMAOHyefznpLMsS14lFBkGtx1AlKlc+ffo0IiJCLpd7NG87cOys
mtbfsk1r6oWVtQ0AyOVy6u2rly8AoH1QR2XJjl3eW2D65fN0APgouFOFCp88/O/h5/OWLou/9ldy
0p3mLVvN/3a55kha+7zLAA6OjgAgrbQurqq2fu2oF5ZWVhUON+dyAaCWnbZVMkiKZDLeVUutjF6B
MmMCAIvJULdLFa+0rPLGKiuvQNmEBIBPh4b07uF/5nzigcOXEpLSIjYd/SkyZvXSMRNG96m2norV
MmnWliy2jU1ND0RIG2KxWOuyuiQFBoNJvaj6G6qQK18zme+tPavuG1paWsVS1Np8QyvUrxnHrOIq
jzU6XDd1unZNs6au9x+8iLv9cHC/d3+mEpLSVAt4ejg8Tc9OifupWVMXdZWsWHfoweNXgf7Nk5Kf
LV93cMOKCdoHYG3FHfe/0HH/C01Kfnb63O3vt/++aOV+HVLkJ73Mx439yCUQF9RGBvHDDz/cvn27
yl10Ol2hUPTu3XvUqFFsB+9bD3S81q5SE+9mj/5J/fvWrT79B1Bb7t35W7WAu6fH82fPLt36u4m3
t7pKvlsTkfbooZ9/wP3ke99FrFq6eo0eI6x7dTov8tOhwQAwd+kvl6+lCMpENxMezVn6i2qBIf07
AcCE6T/8fe+pSCzJzSteujqK6zZ8+Nh3P+Vr8ak//RLTpWObS6fXBnf2+Xl37LX4VC0/PSh0Ntdt
+O6oi3x+uW8bL9/WngBgYc6h9pIkAQCPn2Tq6VwR0ic6nU6j0Tp06PDdd9+9fv36woUL48aNM+da
6PdTBn08DABWLF4Q99fV8rKyv2/fWrF4gWqBjwYMAoBvpk5OuZskFovy8/LWr1ze3Mlu0uj/UQVu
xd3Yt2tHh06dj8WcD+rSdf8vu27F3dAhEpIkAeDZk7RqSxpanbYip08edPJMfMo/L4aOWkVtGfVp
j+cv3ygLzJ3xydkLiXdT0nsOWqTcaGVpvmrpGAAo4Qm+mv0Tl8vevW0mg05Gbvm6c585YbN+TLzy
g5WlOfw7vVHdkPScacMmz9o2e3Hk7MWRyo1dO7WhXjjYWb3JK+rQc5anu8PDhJ16PnOEaojqH2Qy
mWKx2NXVddy4cXqc9KPOhK+mxJ4+9TD1/viRn1Jbhn028tWL/55d8NXXs/48H5uanDy8/0fKjZZW
VvOXhQMAr6RkwdfTzbnc77bvoDMYm37cPqjnh/O/nnburziq95Ca5KjN3T529vZ5ubn9unV1c/e4
lpSs39OskTptRbKYjAsnVk+bNNDFydbcjDXykw+3rA9TLWBpYXblzNrpkwd5ujsw6KSLk+2nQ0Mu
n17r29oLAGYvjszMLtgcMcnLwxEAvDwcN0dMysopVE15Gnz+aff9P3/TsX1Laysum8Xwae25cNan
2zdNo/auXzG+qZcTg04aoscXoRohSVIqlVpbW0+aNCkuLi4zM3PdunWGzo8AwGSyDv9+Zvzkrxyd
nTlmZkOHj1i18b37MiwsLY/FXJgQNsXN3YPOYDg6Ow/6+JNjMedbtfEBgOUL5+dkZy1fu8HdwxMA
3D08l6/d8CY7e/nC+TWNZMmqCA+vJnQGw+jfR5q6CPjZsTlJUwHA1ns820arVX0bieyk2QDAdR2E
fZHIQIqLi+/du9etWzc6XdN1nnId7bHDullZVBzKQNWK/v1GSWmZh5PtnLF91ZWp0wtthJA2rK2t
e/asF8+5QfgYC4QQUgtTJEIIqYUpEiGE1MIUiRBCamGKRAghtTBFIoSQWpgiEUJILUyRCCGkFqZI
hBBSC1MkQgiphSkSIYTUwhSJEEJq4WMsEKpf5HJ5RkaGTCYTCoXl5eVyuZxayqa0tFQqlYpEorKy
MoVCUVxc/PhFTtbbct+OPYwdsinDFIlQ/RIVFTVhgtrlRgiCoJ7ILZPJ5HK5o3tTTJEGhSkSofql
c+fOGvbK5XLqgeQkSQZ17dZxQA3WbkI6qD5FivkvDR8GQuid1q1bd+3aNSEhQSaTaSi2dOnSoF7D
Lic+AoBXWQVmbGZdBWg6JBJptWWqT5H8vL9A0/LfCCE9++qrr27dulXlLupCOzo6euTIkbE3UqiN
1xMf1WF0jYvaFMngNgUaCQpNf8caMya3hbFDQCbLw8ODw+GUlVVcPp5Op1tYWMTGxnbp0gUAHG0t
jRGdqXGy0/RjVLt2DQCIeI9logIDhNTg0QiSbRtEo2FPLtKnN2/eREdH79279/Hjx0FBQcnJyRKJ
RLmXTqd7eXn98ccf3iprWL/IypdIsR1TCzRaExc7JkPtd1lTikQI1YGysrKDBw9GRUXdunXLy8vr
q6++Gj16dE5OTseOHZVlSJIMDQ09efKkhYWe185GmmGKRMho4uLioqOjf/31V4lEMnz48HHjxoWG
hhLEuxs6fHx8Hj9+rFAoaDTalClTtm3bpnlBRGQIeHcNQnUtPz9/w4YNvr6+3bp1u3PnzsaNG7Oy
sqKionr37q3MjwAwceJEAKDRaKtXr96+fTvmR6PAViRCdUQqlf7+++9RUVF//PGHpaXlxIkTx44d
6+vrq658fn5+SEjI6tWrP/vss7qME6nCFImQwT179mz37t3R0dG5ubn9+/cfN27ckCFDWCyWseNC
1cMUiZCh8Pn8w4cPR0ZGJiUleXt7h4WFjR492t3d3dhxoRrAFImQnikUisuXL0dFRZ0+fVoqlY4Z
M2bs2LFdu3ZV7WdEDQWmSIT0Jjc3d//+/fv373/8+HFgYGBYWNhnn31mbW1t7LiQ7nCMDKHakkgk
p06dioyMvHr1qo2NzcSJE0+cOKFhHAY1IJgiEdJdamrq7t27jx07lp+f379//yNHjuA4jInBC22E
aqy0tPTIkSOq4zBjxoxxc3MzdlxI/zBFIv1TKOQyuUShkMoVMrlCppDL5Aqp/N9HoigqPhuFRqMR
AEADgiBIGo0kaCRBoxME9X9GnYevFjUOExkZefbsWYIgcBymMcAUiWpDIZNLpDKRTCaSykVyuUQm
l8jkkkpJsDZoJMEgCAZJMEiCQSfZJMGikywqq9aZV69e7du378iRI0+ePKHGYUaOHGllZVWXMSCj
wBSJakChkEtlQomsXCItk8qEMplIAcb5/SEIBp1kMUgzBp1DJzmkYRqbYrH49OnTkZGRV65csbW1
rfZ+GGR6MEWiaigUcrFUIJbwxVK+VCYCI+VEzQiCziDNmAwuk86lk3oYLUlOTt6xY8fx48d5PB7e
D9OYYYpEVZPKhCIJTyQplUjL62daVIcgGCw6l8W0ZNK5Nb0eLywsPHjwYHR0NI7DIAqmSPQeqUwo
FJeIJCVSmcjYsdQWjUawGBYshhWLYaE5V+I4DFIHUyQCAJArpOWiIqG4yAQyY2U0Go3FsOQwbZkM
boVdL1682LVr16FDhzIzM4ODg8eNG4fjMEgVpsjGTioTlgkLhJIShUJu7FgMjk6yzdj2bKY1KODs
2bN79+49d+4cm80eOXLkl19+SS0Ig5AqTJGNl0jCEwjzJdKKa0iZPIJG57Bse/cc4unpNXbs2I8+
+gjHYZA6mCIbI6lMVFqeI5aUGjsQYxIJpQ62XhyWrbEDQfUapsjGRaGQ84W5ZcLChjVIbTgMkmNh
5sqgmxk7EFRPYYpsRMSS0pKyTLlcauxA6h0209rSzK2O79hBDQKmyEZCIRDm88vzsPGoDoPkWHE9
SAI7JdF7MEWaPoVCXix4JZbwjR1IfUejEVbmniwGLlSN/oMp0sTJFdJi/qtGOGytGxrQLM092Eyc
F4newc4XU6ZQyIpKX1SZH1PvP9a+nhoVrszZ1s/Z1k8vJVUjqVBYwy7tKUBRIngtFBfrcCwySZgi
TZiiRJAhlQkr7xg/ZlafHtouzVyjwgalIRL9Bskry8J2N6Lgwgwmq0xYKFIz8/HCuava11OjwlV6
8/Z+LWuoMhLVamsfpCqFQl4iyLCzbEmj0fRYLWqIsBVpmuRyCV+Ya+woGjCZXCwQ5hk7CmR8mCJN
k0CYr+6ea2UnnbLDrnLPnequClsAoKSk9NslG9p/8JGHU/tAv77Ll27i8fgVjk24dbd1s27Dh06q
XH/MmT+HD53UsklX6vBlizcIBNVf1WoIu8og3/tpCMoiVm7pGNDfwzmwQ7t+6yK2iUTVP62jTFQg
V+Ac0sYOL7RNkEIhLxcXGahyHo8/uN+4J2np1NuszJxdO6KvX7t99kIUl2uuLLZ82Xe8klJXV6cK
h2/euHPT+p+Vb7Myc3bvOlRSzPtxxxoDBSwSiT4ZMjHl3gPqbWZG9tbvd99L+ufoyZ2an3WmUMiF
4mIzlr2BAkMNArYiTZBYytfw2B5lF96bt/er7SWsXHj7tr1P0tLdPVxPnt6dnnH7+O+/uLo5P3r4
9Mcte1QPbN6iyYushMqJL3LnQQBYv2np88yE1zl3fjuzBwD+uPBXtSelIWzNZ7Tjp6iUew/8/H3O
Xzr8Iivxz6u/Bnbwu37t9pFDp6r9UKG4pNoyyLRhijRBBh2NPRdzBQDWbVwc3K2jublZt+6d1m1c
AgCxZy+rFps644sqH5+T9jzuzdv7Ae3b/nbiXPiyTQvmRgCA6nW63p05dREAdkSuD2jflsNhf9Cu
zfZd6wDgxLGYao9tcE9cR3qHF9omSCaXGK7y16+yAKBjpwDlls5dAwHg9ess1WLNWzSp8vDc3PxJ
X8z9OzFZdWPl+xcqdCnWZkz8eforAAjuOKTC9kcPn2pxtEImlxpo7TDUIGCKNEG6rdEql8upvjmh
UNNQRuUlD+UyGQCwmEzVjeqewLh0wbq/E5M9vdwGDurdxrdl+8C2IZ2GAoBCoTDQDBu5mvvHSnla
PQtOoZABYIpsvDBFmiCihq0egiDkcjmvpNTaxgoAHj54oqGwp6fbs6cvEm7f+6hfd2rL7Vt3AcDV
reLITJWuXrkJAGfORzk7OwBA2uN3wz5isVg1q+prKiUAeHi4pj97efPvGO9mnjocjk3IRg77Ik1Q
td9qkiQAQDkq7eBgBwAHo06WlZWnPU5fvGCthsL9B4YCwJKF6+JvJAoEZXHXE5cuWg8A/Qb01CY2
NocFADeu3RaJRKkpj6aFLaK2Fxfzqj+v9yPRcteAQb0AYGrYwrtJqWKROC+vYFX49862fqNHTq/2
E2k0kkYjqy2GTBg+xsIESWXCQp6mjrZ2bXrl5uYDgLuH652UC98u2fDLzkPKvX3797h4/i/4tylX
oXBJSemA3qPS01+pVtiipff5S4eoST9UN6JqM1B1y9xZKw5F/1Y5pMPHfg7tHVL5WA1hqxbWsIvH
4w/oM/rZ0xeqVVlZWZyK3d/Gp4WGnxIAsJnWVuYemssg04atSBNEJ9l0kq2hwMo1872auDMYdOoP
5OJlM8d/+ZmNrTWXa95vQM/vt67UUNjKyiLmYvSXkz93cXFkMBmeXm7TZow/9+dB1UmRGqyImPe/
0R/b2llbWVt2CGoXuXfTvIVTAWDPL0eqPbZCJFrusrTkxl6MDps6xt3DlcGgOzs7fPxJv7MXoqrN
jwDAZlprc1LIhGEr0jSViwp5ZdnGjqJho5MsW8sWNMDbtBs1bEWaJg7LDtdjqSVLMzfMjwhTpMmy
MHPFb7jOOEwbBl2rrgNk2jBFmiwGybHEoQadMOnmluZuxo4C1Qs4L7KhevHixeXLl52dnd3c3Fxc
XJycnCpPvWYzraQyB4Ew3ygRNlAkwbAy9wBsgCMAwBTZcJ0+ffqbb75RviVJ0t7e3sPDw9PT093d
3c3NzdXV1d3d3dnZ2c7RSk7DxzFohUFyrLlNCAK/F+id90a081IWlWQcBfUPiUFVYnKbuQefIJl2
dfmh8fHxISEhlbfTaDQGgwEAUqlULn/3T9nno14Hj26pfO8gUsWkc625njhXHKl6ry8S86NuxPz0
8sLEOv7QDh06MN+/LZqiUCjEYrFYLKbyI0EQDg4OX8+YZWvZQvNkycaMBjQLMxcbi6aYH1EF719Q
KOQAQGfZsSxbGiechkYqKhTxngBA3f9pYbFYQUFBN2/eVDezlcFgyGSy+fPnh4eHm5mZAYCtRbPS
8pxy0du6jbS+IwmmlbkHzpFCVaqiz4Vu5mHlObLuQ2mIhEXJ71JkHeLxePHx8fHx8QUFBUwms8o1
BkiS9Pb23rdvX5cuXZQbaTTC0szNjGXPL89Rt/JXo0LQ6FyOE4dlg4MzSB3slm4YsrOzb9y4ER8f
f+PGjdTUVJlM5uHh0axZs7S0tAolqY7I1atXz5kzh3pdAZ1kWXObCMUlAmGuVFb9Ei4miUajcZi2
5hxHgoZfAaQJ/n7UUxKJJCEhIT4+Pi4u7s6dO2/evGEymUFBQX379l21alWnTp0cHR15PJ6NjY1y
TIZGo9FotC5duuzZs6d58+aa62czrdhMK7GEzxfmNqo1owkayWHZmbHtCex2RFrAFFmPlJeXx8fH
X7p0KS4uLiUlhc/nW1lZdevWbfbs2cHBwQEBAebm793vYWlp2apVq0ePHgEAk8lks9k//vjj2LFj
tX82LZPBtWVwRZLSctFbkaTUtBchIAkmh2XDYdliyxFpD39XjKygoODq1atxcXHx8fEpKSlSqdTB
waFHjx7jxo0LDg5u3bo1SWpq7PTo0SMtLU2hUPTo0WPXrl1NmjTRIQYWw4LFsJDLpeXiIqG4yMSu
vmk0gsWw5LBsmXhDIao5TJFG8ODBA+oKOj4+/vnz5zQarU2bNiEhITNnzgwJCfH29ta+qoEDB549
e3bdunVjxoypZVQEQTdnO5izHWRysUjCE4pLGvQFOEGjU50JDLoZjsYgnWGKrAtyufzevXtUToyL
i8vJyWEwGB07dhwxYkRwcHBQUJCzs7NuNQ8cODAjI0O/0ZIE04xlb8ayl8pEYmmpWMIXSwUaVp2t
V+gkm0nnMhlcJt2cRsNHEKDawhRpKEKhMC4ujkqLCQkJpaWlHA4nODg4LCwsJCSkc+fOXC7X2DFW
g06y6CTLjGUPoJBIy8VSvkRaLpWVG3SFxZqi0Qg6yWaQHAbdjMngYj8j0i/8fdKnt2/fXr58WbVj
0d7evmfPnqtXrw4JCWnXrh2d3kB/4DQG3Uw5uVoul0pkZVKZUCoTyWQiqVxUl21MkmCSJItOsOgk
i0E3o5MsvI5GhtNAv7H1S3yy8F7snsSUiKSkJIlE4uTkFBwcPGbMmJCQEH9//wabFtUiCDqLsGQx
LJVbZHKJTC6SySVyueS//yukCrlMtxvDaTSSoJEEQScJJkkwCIJBvvuPhZfPqC6Z2rfXKH67LMgs
Su3WY8CcOXNCQkJcXFyMHVFdo/JXlbsUCrlcIVMopHKFTHO2pNEIGo0kCJKgkdgwRPUEpkg92DDb
1qPjFq7rQGMHUh/RaARJIwBwNWrUIOE1ix7QSWzyIGSadEyRKf+8qL6QToUr47oN57oN129JbdQy
bISQCdAlRf7vyw3BfecZonD90UDDRgjply59kTEXa/D42BoVrhI/62Qta9BB7cNGCJkA7ItECCG1
apwilZ19yo6/yj2AqrsqbAGAEp5gwfK9rYO+svH6rE3Hrxat2M8rLatw7M2ERx6+XwwYsbxy/adi
bw0Ysdy19Vjq8PnhewUCoTZhV6gWANZvOR4UOtupxSinlqNDBy+O/vWKunNECDVOdT3ph1da1mvo
ksdPMqm3GVkFP/1y9uqN+5dPr+FyOcpii1ftL+EJ3FwrLpi17ofja747qnybkVWwY09scQn/l60z
tfl01WrXfHd03Q/HlbsS7z5JvPuExyubPnmQzmeHEDIxNW5FKnsG+Vknq+0lrFz4h59PPX6S6enu
cO74ytwnh2J+XeHuav/g8avN239XPbBFM9e8Z0cqJ77tv8QAwA9rJ+c+PVz44uj5E6sA4Nwfd7QM
XrXa7btjAeBE1JKC50dznxzasi4MAH7eE1vTc0QImbC67os8cz4BADavmfRh17bm5uweIR9sXjMJ
AE6fu61abNaUoWxWFZONMx8e4GedDPRvcez364tW7J+1aBcAqF6na6ZaLdecDQA/7jr7y4ELeQXF
k8b15WedfHB7Ry1ODiFkaur6QvvV61wA6BLUWrklpLMPALx6nadarEUztyoPf5NXNHrypoQ77y3Y
om4JwMpUq10b/sXUOduvxadei09duf7QvJnDv5482Nwcl1FFCP1HbylSLlcQBA0AyoViDcUqZzOZ
TA4ATNZ7kVTZhASAuct2J9xJa+LpOKR/57Y+Xh38W7TvPhMAFAqFNqsRqFb76dCQ3j38z5xPPHD4
UkJSWsSmoz9FxqxeOmbC6D7V1oOQUbzIyo+791SudZsA6aCll3MXv2bKt3pIkQRBk8sVJTyBjTUX
AP559EpDYS9PxyfPsm4mPh7QpwO1JT7hEQC4u9pr81mX/koGgD9PrXFxsgWAR2nvniYrEkvVZVUN
rK244/4XOu5/oUnJz06fu/399t8XrdyPKRLVWycvJ2XlFRk7ChOXkva6bXM3C7N3F5S69EWSJAEA
ylFpR3trANh36E9BmehRWsbcpb9oKDy4X0cAmLds9/Wb/wgEwmvxqfO/3QMAg/p21OajOWwmAPx1
I1UokiSnPv9yxhZqe3EJv6ZnERQ6m+s2fHfURT6/3LeNl29rTwCwMOdUGTZC9YFIXI8eZmyqFAAi
sVT5VpdWpIOd1Zu8og49Z3m6OzxM2PnJkK4/744NX3swfO1BABj4URBAurrCc6YPO30u4dnzbOXk
RABo1cJ97vRh2nz0oL4d9x++NHnWtsmztqluv//PC+dQmwqFqSmN6oak50wbNnnWttmLI2cvjlRu
7NqpTZVha47qQbo4h/60ifS1vb29mZmZNieCkM4c7Sw/G9jF2FGYoFv3niSlVnwygy4pcv2K8Ss3
HM7MKqDGSZYvHC0WS387e1MskfYI/uCnTVNj/SaoK2xlaX7lzNo1m389ez6hoJDn6mI7dECXRbNH
qE6K1GBd+HiZTH7uzzsymbxVc7fpkwc9fpKx9vtju/ad/yi0fY3O4vNPuzMY5M+7Y5+kZwuFIu+m
LoP7dpw99eMqw9ZsxY6ilCffAHxDvWWz2a6uri4uLjb/qvDWw8PD0tJSc50IofqAppoCnp71BAC2
jb+t93ijRdSgCIuS3z7fzy+TE+7Ly4i2Bf/Ky8tTvs7Pz8/LyystLVUeRZKkvb29vb29nZ2dg4OD
o6Oj/b9U37JYLCOeGqqH1uw+W1DMx1akgShbkUsnDba3fre0FD5SVw+4ZoRLU1euazW/teXl5UVF
RTk5OdnZ2UX/ysnJycjIuH//vvKt6iE2NjYaWqOurq7u7u5MJtOQJ4dQo4Ypsu5wOBwOh+Pq6hoY
GKiujFAofPv2rTJdVkimSUlJRUVF+fn5Uul/3clsNrvK7Kn61sXFRZtJUQihCjBF1i9UP6arq6vm
YuXl5ZUTKPX2+fPnRUVFmZmZPB5PtVobFVXmU0dHR9NbiQyhWsKvRIPE4XC8vb29vb01lKGu66ts
jT548CAuLq6oqCg3N1cu/29912oHmtzc3KytrQ1/fgjVF5giTZbyut7X11dDsaKioipbo1SDNCYm
JjMzUyz+744p1Qapunzq5OREkqThTxEhg8MU2dhR2U1zGXUDTdnZ2VT3aFFR0Zs3b1RnR1RokFZO
pm5ubjhkj+o/TJGoejUdaKqcTx8+fJidnV3lQJPmsSZnZ2eCwGfj8SErgAAAB8lJREFUI6PBFIn0
Q/uBpgoJtMJAU3Z2dnFxseohqjOfqkymDg4ODAau040MAlMkqlPaNEiVA02VW6PPnz+nBpry8vJk
MpnyEG1mPlWbvo1IJBJdu3atZ8+emOvrG0yRqN5RplHNxSrMfKow0JSTk5OVlSUSiZTltRloMtbM
p/Pnzw8bNszR0fGbb74JCwuztbWt+xhQlTBFooaqljOflANNNZ355O7ubmVlpd9zycvLI0kyLy/v
22+/XbFixYQJE+bMmdOiRQv9fgrSAaZIZMp0mPlU5UBTQUGBRPLfg8jUNUh1HmjKy8uj0+kymUwq
lUql0j179uzcubNTp05Lly4dNGiQDndGPUy97/OBnyEKV9bcyQ4AnuUW1qZktZXUJkjtI6wMUyRC
epv5pPMt9gUF7z1TikrHSUlJQ4cO9fDwmDNnzuTJk7V/zt6UL8ZcunBey4xQo8LGYsQgMUUipBVt
BpoKCwsLVOTm5ipfP378+Pr16wUFBQKBQFmewWBQT3WqMB2KQm3JyMiYO3fu8uXLp0yZorBrBbTq
l1e6dOG89udVo8JVqoPMVfsgdYYpEiG9sbOzs7Oza9WqlYYy5eXlykfkKRNodHS0an+oKoVCIZPJ
SkpKNm7cSJBkQLf+n4z9yjDhoyrgpFyE6hSHw/Hw8Gjfvn2/fv3GjBkze/bsiIgICwsLDYcQBEGn
0xUKBZ3OEJUJNJSEf/vdqBfUa+UL1TLKXRW2AACvpCRi2ZJuAX6t3Z0/bN9uTfiyUpVHolAl/759
q0Or5mM+GVq5/gtnz4z5ZGhAi6bU4auXLS4TVBOzkoDPnzdjqp+3Z+e2rdd8u1QoFGo4I6lEsiZ8
WYdWzTv5tvpx8yYq8rnTpvg3b9LVzyd8wTwBv8brtVSGrUiEjK+goKDCFoIgSJKUSCSWlpYfffRR
nz59evfufeTKg4JiPXztNSjl8T4b1P/Zk3frMGdnZe7btePm9WvHYs6bc7nKYuuWf8vjlThXmpj1
4+ZNWzeuV77Nzso88EtkSXHxdz9ptUL915O/vH7lMgCUCQT7InfKFfJvI9apK7xi8cKj0Qeo11s3
rndz9zh8YF9y0h0A4JeWHj6wj0YQK9dv1Oq01asiRQqLkrOTZteyXoSQ9oqK3q1ryGazhUIhnU7v
1KlTnz59QkNDO3Xq9N9Tk688qLaqZ7mF2g/gVi4c+dO2Z0/S3Nw9Nmz7yc8/IPlu0sKZM9IePdy5
bcvcJcuUBzZt3uLImdjKd9nvj9wJACvXb/xk5Ocknbx3587oYUOu/HGx2kgobwsLLty46eziumHV
iiNR+/+Ijf02Yp26M0q5dzfm6nWvJk13btuy/YfN4QvmNm/VKubqda+m3r/8tG3bdxsvXzxf+xT5
3oU2QeeqK4c0Ixj4o0M6kkgkEomEIIh27drNnj374sWLJSUlcXFxy5cv79atWx0/Vf6Pc7EAsHz9
hs7BIWbm5l27fbhi/UYA+ONcjGqxSdOmV/kUkqS09Ge5hX4BgWd+O7Em/NvwBXMBQPU6XbNVGzc3
b9mKa2Exc/5CAMjPz9NQOHzNutY+vhwzs4lTpwOAUChctXFzax9fDodDbcl9f4KBbt5rRToF/FCW
d7X2lTY2dLaTmX2IsaNADRWDwXjw4IGrq6veZ6TrIPP1KwAIDOqk3BLUuQsAZLx6rVrMu3nV09rz
cnNnTBx/9+9E1Y3arJFHae3jQ71wcHQEAKlE06K4bf3aUS8s//25KQ+n+gS0/1wN3kuRXOe+XOe+
ta8UIVQjbdq0MfRHyOVyaio7NQaiTuWsIpfLAIDJeq8xq+5BdquWLLz7d6K7p1ffgYNa+/j6BbTv
G9IZABQKhTYT4JnMGjwfj1NpomiNDtcSDtcgZOIIgpDL5TxeibW1DQCkPdTUoenh5Zn+9GlS4u3Q
j/pRW/6+fRsAXFzdtPms61evAMCxs+ccnZ0B4GnaY2q7WCxuoI8HxUk/CJka6pHvylFpewcHAPg1
Oqq8rOxp2uMVixdoKNyn/0AAWLl40e34uDKB4FbcjVVLFgFA7379tfloNpsDADdvXBeJRA/u358z
9d0UzpL3H3BXyzOqS5giETI1dvb2ANCvW9fugf4AMGDIxwCwKWLVB009+n8Y7OjkrKFw2IyZTZs1
y8rMGPPJUD9vz7HDP87JzmrWouWUmVrNcqEy6bwZU309XYf26fnowT/U9kf/pFYuXHnCppZnVJcw
RSJkapasivDwakJnMKjxirlLlo0e/6W1ja05l9u7X/91P2zVUNjSyup47IWxEyc5ubgwGEx3T69J
02acPP+H6qRITR+9cvWnn4+ysbWzsrYO6BC0LXLPzHkLACB67249nlFdotX9RyKEdLNm99mCYr6j
neVnA7sYOxYTdOvek6TUFwCwdNJge+t3fxKwFYkQQmphikQIIbUwRSKEkFqYIhFCSC1MkQghpBam
SIQQUgtTJEIIqYUpEiGE1MIUiRBCamGKRAghtTBFIoSQWpgiEUJILUyRCCGkFqZIhBBSC1MkQgip
hSkSIYTUwuW9EGpgePzyC9dTjB2FCSosKq28EVMkQg0Gtc6qUCR59vKNsWMxZarL2eKFNkINRkff
pgRR/WrUSGd0kmjdxMXG0ly5BdeuQQghtbAViRBCamGKRAghtTBFIoSQWv8HTVsyFfeWLdoAAAAA
SUVORK5CYII=
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/contingent-images/figure3.png

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
RK5CYII=
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/contingent-images/figure4.png

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
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL----
Content-Type: text/html
Content-ID: <frame-86-d8f49dbc-6d12-4c70-9955-e03c926e6fc0@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--lWqxJttPF67219idY5SDnLuWhRtTnJR9ApTTgUyULL------
