From: <Saved by Blink>
Subject: 500 Lines or Less | Dagoba: an in-memory graph database
Date: Tue, 11 Feb 2019 01:52:19 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----"

------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: text/html
Content-ID: <frame-60-6d9ba853-7683-4d61-894b-9d1635a05174@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | Dagoba: an in-memory graph database</title>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style><style type=3D"text/css">.MathJax_Display {text-align: center; marg=
in: 1em 0em; position: relative; display: block!important; text-indent: 0; =
max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%=
}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px so=
lid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border=
: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px=
 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: =
2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(O=
ffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true'); padding: 3px 4px; z-=
index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto;=
 display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-he=
ight: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text=
-align: left; text-transform: none; letter-spacing: normal; word-spacing: n=
ormal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr;=
 max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0;=
 padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax.MathJax_FullWidth {text-align: center; display: table-cell!importa=
nt; width: 10000em!important}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; =
max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-al=
ign: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!imp=
ortant; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; ma=
rgin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: no=
ne; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height:=
 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; hei=
ght: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width:=
 1px; height: 60em; min-height: 0; max-height: none}
.MathJax_LineBox {display: table!important}
.MathJax_LineBox span {display: table-cell!important; width: 10000em!import=
ant; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filt=
er: alpha(opacity=3D0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transpare=
nt}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Main; src: url('https://cdnjs.cloudflare.c=
om/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.wof=
f?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/m=
athjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?V=3D2.7.1') fo=
rmat('opentype')}
@font-face {font-family: MathJax_Main-bold; src: url('https://cdnjs.cloudfl=
are.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?V=3D2.7.1') for=
mat('opentype')}
@font-face {font-family: MathJax_Main-italic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Ital=
ic.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/=
libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?V=3D2.7.1=
') format('opentype')}
@font-face {font-family: MathJax_Math-italic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Ital=
ic.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/=
libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?V=3D2.7.1=
') format('opentype')}
@font-face {font-family: MathJax_Caligraphic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Caligraph=
ic-Regular.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.c=
om/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regul=
ar.otf?V=3D2.7.1') format('opentype')}
@font-face {font-family: MathJax_Size1; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size2; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size3; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size4; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?V=3D2.7.1')=
 format('opentype')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; colo=
r: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div style=3D"visibility: hidden; overflow: hidden; position: absol=
ute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin:=
 0px; text-align: left; text-indent: 0px; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal;"><div id=3D"MathJax=
_Hidden"></div></div><div id=3D"MathJax_Message" style=3D"display: none;"><=
/div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>Dagoba: an in-memory graph database</h1>
          <h2 class=3D"author">Dann Toliver</h2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em><a href=3D"https://twitter.com/dann">Dann</a> enjoys build=
ing things, like programming languages, databases, distributed systems, com=
munities of smart friendly humans, and pony castles with his two year old.<=
/em></p>

<h2 id=3D"prologue">Prologue</h2>

<blockquote>
<p>"When we try to pick out anything by itself we find that it is bound fas=
t by a thousand invisible cords that cannot be broken, to everything in the=
 universe." =E2=80=94John Muir</p>
</blockquote>

<blockquote>
<p>"What went forth to the ends of the world to traverse not itself, God, t=
he sun, Shakespeare, a commercial traveller, having itself traversed in rea=
lity itself becomes that self." =E2=80=94James Joyce</p>
</blockquote>

<p>A long time ago, when the world was still young, all data walked happily=
 in single file. If you wanted your data to jump over a fence, you just set=
 the fence down in its path and each datum jumped it in turn. Punch cards i=
n, punch cards out. Life was easy and programming was a breeze.</p>

<p>Then came the random access revolution, and data grazed freely across th=
e hillside. Herding data became a serious concern: if you can access any pi=
ece of data at any time, how do you know which one to pick next? Techniques=
 were developed for corralling the data by forming links between items<a hr=
ef=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#f=
n1" class=3D"footnoteRef" id=3D"fnref1"><sup>1</sup></a>, marshaling groups=
 of units into formation through their linking assemblage. Questioning data=
 meant picking a sheep and pulling along everything connected to it.</p>

<p>Later programmers departed from this tradition, imposing a set of rules =
on how data would be aggregated<a href=3D"http://aosabook.org/en/500L/dagob=
a-an-in-memory-graph-database.html#fn2" class=3D"footnoteRef" id=3D"fnref2"=
><sup>2</sup></a>. Rather than tying disparate data directly together they =
would cluster by content, decomposing data into bite-sized pieces, collecte=
d in pens and collared with name tags. Questions were posed declaratively, =
resulting in accumulating pieces of partially decomposed data (a state the =
relationalists refer to as "normal") into a frankencollection returned to t=
he programmer.</p>

<p>For much of recorded history this relational model reigned supreme. Its =
dominance went unchallenged through two major language wars and countless s=
kirmishes. It offered everything you could ask for in a model, for the smal=
l price of inefficiency, clumsiness and lack of scalability. For eons that =
was a price programmers were willing to pay. Then the internet happened.</p=
>

<p>The distributed revolution changed everything, again. Data broke free of=
 spacial constraints and roamed from machine to machine. CAP-wielding theor=
ists busted the relational monopoly, opening the door to new herding techni=
ques=E2=80=94some of which hark back to the earliest attempts to domesticat=
e random-access data. We're going to look at one of these, a style known as=
 the graph database.</p>

<h2 id=3D"take-one">Take One</h2>

<p>Within this chapter we're going to build a graph database<a href=3D"http=
://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn3" class=
=3D"footnoteRef" id=3D"fnref3"><sup>3</sup></a>. As we build it we're going=
 to explore the problem space, generate multiple solutions for our design d=
ecisions, compare those solutions to understand the tradeoffs between them,=
 and finally choose the right solution for our system. A higher-than-usual =
precedence is put on code compactness, but the process will otherwise mirro=
r that used by software professionals since time immemorial. The purpose of=
 this chapter is to teach this process. And to build a graph database<a hre=
f=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn=
4" class=3D"footnoteRef" id=3D"fnref4"><sup>4</sup></a>.</p>

<p>Using a graph database will allow us to solve some interesting problems =
in an elegant fashion. Graphs are a very natural data structure for explori=
ng connections between things. A graph in this sense is a set of vertices a=
nd a set of edges; in other words, it's a bunch of dots connected by lines.=
 And a database? A "data base" is like a fort for data. You put data in it =
and get data back out of it.</p>

<p>So what kinds of problems can we solve with a graph database? Well, supp=
ose that you enjoy tracking ancestral trees: parents, grandparents, cousins=
 twice removed, that kind of thing. You'd like to develop a system that all=
ows you to make natural and elegant queries like "Who are Thor's second cou=
sins once removed?" or "What is Freyja's connection to the Valkyries?"</p>

<p>A reasonable schema for this data structure would be to have a table of =
entities and a table of relationships. A query for Thor's parents might loo=
k like</p>

<pre class=3D"sourceCode sql"><code class=3D"sourceCode sql"><span class=3D=
"kw">SELECT</span> e.* <span class=3D"kw">FROM</span> entities <span class=
=3D"kw">as</span> e, relationships <span class=3D"kw">as</span> r
<span class=3D"kw">WHERE</span> r.out =3D <span class=3D"ot">"Thor"</span> =
<span class=3D"kw">AND</span> r.type =3D <span class=3D"ot">"parent"</span>=
 <span class=3D"kw">AND</span> r.in =3D e.id</code></pre>

<p>But how do we extend that to grandparents? We need to do a subquery, or =
use some other type of vendor-specific extension to SQL. And by the time we=
 get to second cousins once removed we're going to have <em>a lot</em> of S=
QL.</p>

<p>What would we like to write? Something both concise and flexible; someth=
ing that models our query in a natural way and extends to other queries lik=
e it. <code>second_cousins('Thor')</code> is concise, but it doesn't give u=
s any flexibility. The SQL above is flexible, but lacks concision.</p>

<p>Something like <code>Thor.parents.parents.parents.children.children.chil=
dren</code> strikes a reasonably good balance. The primitives give us flexi=
bility to ask many similar questions, but the query is concise and natural.=
 This particular phrasing gives us too many results, as it includes first c=
ousins and siblings, but we're going for gestalt here.</p>

<p>What's the simplest thing we can build that gives us this kind of interf=
ace? We could make a list of vertices and a list of edges, just like the re=
lational schema, and then build some helper functions. It might look someth=
ing like this:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
V =3D [ <span class=3D"dv">1</span>, <span class=3D"dv">2</span>, <span cla=
ss=3D"dv">3</span>, <span class=3D"dv">4</span>, <span class=3D"dv">5</span=
>, <span class=3D"dv">6</span>, <span class=3D"dv">7</span>, <span class=3D=
"dv">8</span>, <span class=3D"dv">9</span>, <span class=3D"dv">10</span>, <=
span class=3D"dv">11</span>, <span class=3D"dv">12</span>, <span class=3D"d=
v">13</span>, <span class=3D"dv">14</span>, <span class=3D"dv">15</span> ]
E =3D [ [<span class=3D"dv">1</span>,<span class=3D"dv">2</span>], [<span c=
lass=3D"dv">1</span>,<span class=3D"dv">3</span>],  [<span class=3D"dv">2</=
span>,<span class=3D"dv">4</span>],  [<span class=3D"dv">2</span>,<span cla=
ss=3D"dv">5</span>],  [<span class=3D"dv">3</span>,<span class=3D"dv">6</sp=
an>],  [<span class=3D"dv">3</span>,<span class=3D"dv">7</span>],  [<span c=
lass=3D"dv">4</span>,<span class=3D"dv">8</span>]
    , [<span class=3D"dv">4</span>,<span class=3D"dv">9</span>], [<span cla=
ss=3D"dv">5</span>,<span class=3D"dv">10</span>], [<span class=3D"dv">5</sp=
an>,<span class=3D"dv">11</span>], [<span class=3D"dv">6</span>,<span class=
=3D"dv">12</span>], [<span class=3D"dv">6</span>,<span class=3D"dv">13</spa=
n>], [<span class=3D"dv">7</span>,<span class=3D"dv">14</span>], [<span cla=
ss=3D"dv">7</span>,<span class=3D"dv">15</span>] ]

parents =3D <span class=3D"kw">function</span>(vertices) {
  <span class=3D"kw">var</span> accumulator =3D []
  <span class=3D"kw">for</span>(<span class=3D"kw">var</span> i=3D<span cla=
ss=3D"dv">0</span>; i &lt; <span class=3D"ot">E</span>.<span class=3D"fu">l=
ength</span>; i++) {
    <span class=3D"kw">var</span> edge =3D E[i]
    <span class=3D"kw">if</span>(<span class=3D"ot">vertices</span>.<span c=
lass=3D"fu">indexOf</span>(edge[<span class=3D"dv">1</span>]) !=3D=3D -<spa=
n class=3D"dv">1</span>)
      <span class=3D"ot">accumulator</span>.<span class=3D"fu">push</span>(=
edge[<span class=3D"dv">0</span>])
  }
  <span class=3D"kw">return</span> accumulator
}</code></pre>

<p>The essence of the above function is to iterate over a list, evaluating =
some code for each item and building up an accumulator of results. That's n=
ot quite as clear as it could be, though, because the looping construct int=
roduces some unnecessary complexity.</p>

<p>It'd be nice if there was a more specific looping construct designed for=
 this purpose. As it happens, the <code>reduce</code> function does exactly=
 that: given a list and a function, it evaluates the function for each elem=
ent of the list, while threading the accumulator through each evaluation pa=
ss.</p>

<p>Written in this more functional style our queries are shorter and cleare=
r:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
parents  =3D (vertices) =3D&gt; <span class=3D"ot">E</span>.<span class=3D"=
fu">reduce</span>( (acc, [parent, child])
         =3D&gt; <span class=3D"ot">vertices</span>.<span class=3D"fu">incl=
udes</span>(child)  ? <span class=3D"ot">acc</span>.<span class=3D"fu">conc=
at</span>(parent) : acc , [] )
children =3D (vertices) =3D&gt; <span class=3D"ot">E</span>.<span class=3D"=
fu">reduce</span>( (acc, [parent, child])
         =3D&gt; <span class=3D"ot">vertices</span>.<span class=3D"fu">incl=
udes</span>(parent) ? <span class=3D"ot">acc</span>.<span class=3D"fu">conc=
at</span>(child)  : acc , [] )</code></pre>

<p>Given a list of vertices we reduce over the edges, adding an edge's pare=
nt to the accumulator if the edge's child is in our input list. The <code>c=
hildren</code> function is identical, but examines the edge's parent to det=
ermine whether to add the edge's child.</p>

<p>Those functions are valid JavaScript, but use a few features which brows=
ers haven't implemented as of this writing. This translated version will wo=
rk today:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
parents  =3D <span class=3D"kw">function</span>(x) { <span class=3D"kw">ret=
urn</span> <span class=3D"ot">E</span>.<span class=3D"fu">reduce</span>(
  <span class=3D"kw">function</span>(acc, e) { <span class=3D"kw">return</s=
pan> ~<span class=3D"ot">x</span>.<span class=3D"fu">indexOf</span>(e[<span=
 class=3D"dv">1</span>]) ? <span class=3D"ot">acc</span>.<span class=3D"fu"=
>concat</span>(e[<span class=3D"dv">0</span>]) : acc }, [] )}
children =3D <span class=3D"kw">function</span>(x) { <span class=3D"kw">ret=
urn</span> <span class=3D"ot">E</span>.<span class=3D"fu">reduce</span>(
  <span class=3D"kw">function</span>(acc, e) { <span class=3D"kw">return</s=
pan> ~<span class=3D"ot">x</span>.<span class=3D"fu">indexOf</span>(e[<span=
 class=3D"dv">0</span>]) ? <span class=3D"ot">acc</span>.<span class=3D"fu"=
>concat</span>(e[<span class=3D"dv">1</span>]) : acc }, [] )}</code></pre>

<p>Now we can say something like:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    <span class=3D"fu">children</span>(<span class=3D"fu">children</span>(<=
span class=3D"fu">children</span>(<span class=3D"fu">parents</span>(<span c=
lass=3D"fu">parents</span>(<span class=3D"fu">parents</span>([<span class=
=3D"dv">8</span>]))))))</code></pre>

<p>It reads backwards and gets us lost in silly parens, but is otherwise pr=
etty close to what we wanted. Take a minute to look at the code. Can you se=
e any ways to improve it?</p>

<p>We're treating the edges as a global variable, which means we can only e=
ver have one database at a time using these helper functions. That's pretty=
 limiting.</p>

<p>We're also not using the vertices at all. What does that tell us? It imp=
lies that everything we need is in the edges array, which in this case is t=
rue: the vertex values are scalars, so they exist independently in the edge=
s array. If we want to answer questions like "What is Freyja's connection t=
o the Valkyries?" we'll need to add more data to the vertices, which means =
making them compound values, which means the edges array should reference v=
ertices instead of copying their value.</p>

<p>The same holds true for our edges: they contain an "in" vertex and an "o=
ut" vertex<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-=
database.html#fn5" class=3D"footnoteRef" id=3D"fnref5"><sup>5</sup></a>, bu=
t no elegant way to incorporate additional information. We'll need that to =
answer questions like "How many stepparents did Loki have?" or "How many ch=
ildren did Odin have before Thor was born?"</p>

<p>You don't have to squint very hard to tell that the code for our two sel=
ectors looks very similar, which suggests there may be a deeper abstraction=
 from which they spring.</p>

<p>Do you see any other issues?</p>

<h2 id=3D"build-a-better-graph">Build a Better Graph</h2>

<p>Let's solve a few of the problems we've discovered. Having our vertices =
and edges be global constructs limits us to one graph at a time, but we'd l=
ike to have more. To solve this we'll need some structure. Let's start with=
 a namespace.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
Dagoba =3D {}                                     <span class=3D"co">// the=
 namespace</span></code></pre>

<p>We'll use an object as our namespace. An object in JavaScript is mostly =
just an unordered set of key/value pairs. We only have four basic data stru=
ctures to choose from in JavaScript, so we'll be using this one a lot. (A f=
un question to ask people at parties is "What are the four basic data struc=
tures in JavaScript?")</p>

<p>Now we need some graphs. We can build these using a classic OOP pattern,=
 but JavaScript offers us prototypal inheritance, which means we can build =
up a prototype object=E2=80=94we'll call it <code>Dagoba.G</code>=E2=80=94a=
nd then instantiate copies of that using a factory function. An advantage o=
f this approach is that we can return different types of objects from the f=
actory, instead of binding the creation process to a single class construct=
or. So we get some extra flexibility for free.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">G</span> =3D {}        =
                           <span class=3D"co">// the prototype</span>

<span class=3D"ot">Dagoba</span>.<span class=3D"fu">graph</span> =3D <span =
class=3D"kw">function</span>(V, E) {                 <span class=3D"co">// =
the factory</span>
  <span class=3D"kw">var</span> graph =3D <span class=3D"ot">Object</span>.=
<span class=3D"fu">create</span>( <span class=3D"ot">Dagoba</span>.<span cl=
ass=3D"fu">G</span> )

  <span class=3D"ot">graph</span>.<span class=3D"fu">edges</span>       =3D=
 []                        <span class=3D"co">// fresh copies so they're no=
t shared</span>
  <span class=3D"ot">graph</span>.<span class=3D"fu">vertices</span>    =3D=
 []
  <span class=3D"ot">graph</span>.<span class=3D"fu">vertexIndex</span> =3D=
 {}                        <span class=3D"co">// a lookup optimization</spa=
n>

  <span class=3D"ot">graph</span>.<span class=3D"fu">autoid</span> =3D <spa=
n class=3D"dv">1</span>                              <span class=3D"co">// =
an auto-incrementing ID counter</span>

  <span class=3D"kw">if</span>(<span class=3D"ot">Array</span>.<span class=
=3D"fu">isArray</span>(V)) <span class=3D"ot">graph</span>.<span class=3D"f=
u">addVertices</span>(V)     <span class=3D"co">// arrays only, because you=
 wouldn't</span>
  <span class=3D"kw">if</span>(<span class=3D"ot">Array</span>.<span class=
=3D"fu">isArray</span>(E)) <span class=3D"ot">graph</span>.<span class=3D"f=
u">addEdges</span>(E)        <span class=3D"co">//   call this with singula=
r V and E</span>

  <span class=3D"kw">return</span> graph
}</code></pre>

<p>We'll accept two optional arguments: a list of vertices and a list of ed=
ges. JavaScript is rather lax about parameters, so all named parameters are=
 optional and default to <code>undefined</code> if not supplied<a href=3D"h=
ttp://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn6" cla=
ss=3D"footnoteRef" id=3D"fnref6"><sup>6</sup></a>. We will often have the v=
ertices and edges before building the graph and use the V and E parameters,=
 but it's also common to not have those at creation time and to build the g=
raph up programmatically<a href=3D"http://aosabook.org/en/500L/dagoba-an-in=
-memory-graph-database.html#fn7" class=3D"footnoteRef" id=3D"fnref7"><sup>7=
</sup></a>.</p>

<p>Then we create a new object that has all of our prototype's strengths an=
d none of its weaknesses. We build a brand new array (one of the other basi=
c JS data structures) for our edges, another for the vertices, a new object=
 called <code>vertexIndex</code> and an ID counter=E2=80=94more on those la=
tter two later. (Think: Why can't we just put these in the prototype?)</p>

<p>Then we call <code>addVertices</code> and <code>addEdges</code> from ins=
ide our factory, so let's define those now.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">addVertices</span> =3D <span class=3D"kw">function</span>(vs) { <span =
class=3D"ot">vs</span>.<span class=3D"fu">forEach</span>(<span class=3D"kw"=
>this</span>.<span class=3D"ot">addVertex</span>.<span class=3D"fu">bind</s=
pan>(<span class=3D"kw">this</span>)) }
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">addEdges</span>    =3D <span class=3D"kw">function</span>(es) { <span =
class=3D"ot">es</span>.<span class=3D"fu">forEach</span>(<span class=3D"kw"=
>this</span>.<span class=3D"ot">addEdge</span>  .<span class=3D"fu">bind</s=
pan>(<span class=3D"kw">this</span>)) }</code></pre>

<p>Okay, that was too easy=E2=80=94we're just passing off the work to <code=
>addVertex</code> and <code>addEdge</code>. We should define those now too.=
</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">addVertex</span> =3D <span class=3D"kw">function</span>(vertex) {     =
    <span class=3D"co">// accepts a vertex-like object</span>
  <span class=3D"kw">if</span>(!<span class=3D"ot">vertex</span>.<span clas=
s=3D"fu">_id</span>)
    <span class=3D"ot">vertex</span>.<span class=3D"fu">_id</span> =3D <spa=
n class=3D"kw">this</span>.<span class=3D"fu">autoid</span>++
  <span class=3D"kw">else</span> <span class=3D"kw">if</span>(<span class=
=3D"kw">this</span>.<span class=3D"fu">findVertexById</span>(<span class=3D=
"ot">vertex</span>.<span class=3D"fu">_id</span>))
    <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span=
 class=3D"fu">error</span>(<span class=3D"st">'A vertex with that ID alread=
y exists'</span>)

  <span class=3D"kw">this</span>.<span class=3D"ot">vertices</span>.<span c=
lass=3D"fu">push</span>(vertex)
  <span class=3D"kw">this</span>.<span class=3D"fu">vertexIndex</span>[<spa=
n class=3D"ot">vertex</span>.<span class=3D"fu">_id</span>] =3D vertex     =
    <span class=3D"co">// a fancy index thing</span>
  <span class=3D"ot">vertex</span>.<span class=3D"fu">_out</span> =3D []; <=
span class=3D"ot">vertex</span>.<span class=3D"fu">_in</span> =3D []       =
      <span class=3D"co">// placeholders for edge pointers</span>
  <span class=3D"kw">return</span> <span class=3D"ot">vertex</span>.<span c=
lass=3D"fu">_id</span>
}</code></pre>

<p>If the vertex doesn't already have an <code>_id</code> property we assig=
n it one using our autoid.<a href=3D"http://aosabook.org/en/500L/dagoba-an-=
in-memory-graph-database.html#fn8" class=3D"footnoteRef" id=3D"fnref8"><sup=
>8</sup></a> If the <code>_id</code> already exists on a vertex in our grap=
h then we reject the new vertex. Wait, when would that happen? And what exa=
ctly is a vertex?</p>

<p>In a traditional object-oriented system we would expect to find a vertex=
 class, which all vertices would be an instance of. We're going to take a d=
ifferent approach and consider as a vertex any object containing the three =
properties <code>_id</code>, <code>_in</code> and <code>_out</code>. Why is=
 that? Ultimately, it comes down to giving Dagoba control over which data i=
s shared with the host application.</p>

<p>If we create some <code>Dagoba.Vertex</code> instance inside the <code>a=
ddVertex</code> function, our internal data will never be shared with the h=
ost application. If we accept a <code>Dagoba.Vertex</code> instance as the =
argument to our <code>addVertex</code> function, the host application could=
 retain a pointer to that vertex object and manipulate it at runtime, break=
ing our invariants.</p>

<p>So if we create a vertex instance object, we're forced to decide up fron=
t whether we will always copy the provided data into a new object=E2=80=94p=
otentially doubling our space usage=E2=80=94or allow the host application u=
nfettered access to the database objects. There's a tension here between pe=
rformance and protection, and the right balance depends on your specific us=
e case.</p>

<p>Duck typing on the vertex's properties allows us to make that decision a=
t run time, by either deep copying<a href=3D"http://aosabook.org/en/500L/da=
goba-an-in-memory-graph-database.html#fn9" class=3D"footnoteRef" id=3D"fnre=
f9"><sup>9</sup></a> the incoming data or using it directly as a vertex<a h=
ref=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#=
fn10" class=3D"footnoteRef" id=3D"fnref10"><sup>10</sup></a>. We don't alwa=
ys want to put the responsibility for balancing safety and performance in t=
he hands of the user, but because these two sets of use cases diverge so wi=
dely the extra flexibility is important.</p>

<p>Now that we've got our new vertex we'll add it to our graph's list of ve=
rtices, add it to the <code>vertexIndex</code> for efficient lookup by <cod=
e>_id</code>, and add two additional properties to it: <code>_out</code> an=
d <code>_in</code>, which will both become lists of edges<a href=3D"http://=
aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn11" class=3D=
"footnoteRef" id=3D"fnref11"><sup>11</sup></a>.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">addEdge</span> =3D <span class=3D"kw">function</span>(edge) {         =
    <span class=3D"co">// accepts an edge-like object</span>
  <span class=3D"ot">edge</span>.<span class=3D"fu">_in</span>  =3D <span c=
lass=3D"kw">this</span>.<span class=3D"fu">findVertexById</span>(<span clas=
s=3D"ot">edge</span>.<span class=3D"fu">_in</span>)
  <span class=3D"ot">edge</span>.<span class=3D"fu">_out</span> =3D <span c=
lass=3D"kw">this</span>.<span class=3D"fu">findVertexById</span>(<span clas=
s=3D"ot">edge</span>.<span class=3D"fu">_out</span>)

  <span class=3D"kw">if</span>(!(<span class=3D"ot">edge</span>.<span class=
=3D"fu">_in</span> &amp;&amp; <span class=3D"ot">edge</span>.<span class=3D=
"fu">_out</span>))
    <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span=
 class=3D"fu">error</span>(<span class=3D"st">"That edge's "</span> + (<spa=
n class=3D"ot">edge</span>.<span class=3D"fu">_in</span> ? <span class=3D"s=
t">'out'</span> : <span class=3D"st">'in'</span>)
                                       + <span class=3D"st">" vertex wasn't=
 found"</span>)

  <span class=3D"ot">edge</span>.<span class=3D"ot">_out</span>.<span class=
=3D"ot">_out</span>.<span class=3D"fu">push</span>(edge)                   =
  <span class=3D"co">// edge's out vertex's out edges</span>
  <span class=3D"ot">edge</span>.<span class=3D"ot">_in</span>.<span class=
=3D"ot">_in</span>.<span class=3D"fu">push</span>(edge)                    =
   <span class=3D"co">// vice versa</span>

  <span class=3D"kw">this</span>.<span class=3D"ot">edges</span>.<span clas=
s=3D"fu">push</span>(edge)
}</code></pre>

<p>First we find both vertices which the edge connects, then reject the edg=
e if it's missing either vertex. We'll use a helper function to log an erro=
r on rejection. All errors flow through this helper function, so we can ove=
rride its behavior on a per-application basis. We could later extend this t=
o allow <code>onError</code> handlers to be registered, so the host applica=
tion could link in its own callbacks without overwriting the helper. We mig=
ht allow such handlers to be registered per-graph, per-application, or both=
, depending on the level of flexibility required.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">error</span> =3D <span =
class=3D"kw">function</span>(msg) {
  <span class=3D"ot">console</span>.<span class=3D"fu">log</span>(msg)
  <span class=3D"kw">return</span> <span class=3D"kw">false</span>
}</code></pre>

<p>Then we'll add our new edge to both vertices' edge lists: the edge's out=
 vertex's list of out-side edges, and the in vertex's list of in-side edges=
.</p>

<p>And that's all the graph structure we need for now!</p>

<h2 id=3D"enter-the-query">Enter the Query</h2>

<p>There are really only two parts to this system: the part that holds the =
graph and the part that answers questions about the graph. The part that ho=
lds the graph is pretty simple, as we've seen. The query part is a little t=
rickier.</p>

<p>We'll start just like before, with a prototype and a query factory.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">Q</span> =3D {}

<span class=3D"ot">Dagoba</span>.<span class=3D"fu">query</span> =3D <span =
class=3D"kw">function</span>(graph) {                <span class=3D"co">// =
factory</span>
  <span class=3D"kw">var</span> query =3D <span class=3D"ot">Object</span>.=
<span class=3D"fu">create</span>( <span class=3D"ot">Dagoba</span>.<span cl=
ass=3D"fu">Q</span> )

  <span class=3D"ot">query</span>.   <span class=3D"fu">graph</span> =3D gr=
aph                        <span class=3D"co">// the graph itself</span>
  <span class=3D"ot">query</span>.   <span class=3D"fu">state</span> =3D []=
                           <span class=3D"co">// state for each step</span>
  <span class=3D"ot">query</span>. <span class=3D"fu">program</span> =3D []=
                           <span class=3D"co">// list of steps to take</spa=
n>
  <span class=3D"ot">query</span>.<span class=3D"fu">gremlins</span> =3D []=
                           <span class=3D"co">// gremlins for each step</sp=
an>

  <span class=3D"kw">return</span> query
}</code></pre>

<p>Now's a good time to introduce some friends.</p>

<p>A <em>program</em> is a series of <em>steps</em>. Each step is like a pi=
pe in a pipeline=E2=80=94a piece of data comes in one end, is transformed i=
n some fashion, and goes out the other end. Our pipeline doesn't quite work=
 like that, but it's a good first approximation.</p>

<p>Each step in our program can have <em>state</em>, and <code>query.state<=
/code> is a list of per-step states that index correlates with the list of =
steps in <code>query.program</code>.</p>

<p>A <em>gremlin</em> is a creature that travels through the graph doing ou=
r bidding. A gremlin might be a surprising thing to find in a database, but=
 they trace their heritage back to Tinkerpop's <a href=3D"http://euranova.e=
u/upl_docs/publications/an-empirical-comparison-of-graph-databases.pdf">Blu=
eprints</a>, and the <a href=3D"http://edbt.org/Proceedings/2013-Genova/pap=
ers/workshops/a29-holzschuher.pdf">Gremlin and Pacer query languages</a>. T=
hey remember where they've been and allow us to find answers to interesting=
 questions.</p>

<p>Remember that question we wanted to answer about Thor's second cousins o=
nce removed? We decided <code>Thor.parents.parents.parents.children.childre=
n.children</code> was a pretty good way of expressing that. Each <code>pare=
nts</code> or <code>children</code> instance is a step in our program. Each=
 of those steps contains a reference to its <em>pipetype</em>, which is the=
 function that performs that step's operation.</p>

<p>That query in our actual system might look like:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    <span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"=
st">'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">out</=
span>().<span class=3D"fu">out</span>().<span class=3D"fu">in</span>().<spa=
n class=3D"fu">in</span>().<span class=3D"fu">in</span>()</code></pre>

<p>Each of the steps is a function call, and so they can take <em>arguments=
</em>. The interpreter passes the step's arguments to the step's pipetype f=
unction, so in the query <code>g.v('Thor').out(2, 3)</code> the <code>out</=
code> pipetype function would receive <code>[2, 3]</code> as its first para=
meter.</p>

<p>We'll need a way to add steps to our query. Here's a helper function for=
 that:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">Q</span>.<span class=3D=
"fu">add</span> =3D <span class=3D"kw">function</span>(pipetype, args) { <s=
pan class=3D"co">// add a new step to the query</span>
  <span class=3D"kw">var</span> step =3D [pipetype, args]
  <span class=3D"kw">this</span>.<span class=3D"ot">program</span>.<span cl=
ass=3D"fu">push</span>(step)                 <span class=3D"co">// step is =
a pair of pipetype and its args</span>
  <span class=3D"kw">return</span> <span class=3D"kw">this</span>
}</code></pre>

<p>Each step is a composite entity, combining the pipetype function with th=
e arguments to apply to that function. We could combine the two into a part=
ially applied function at this stage, instead of using a tuple <a href=3D"h=
ttp://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn12" cl=
ass=3D"footnoteRef" id=3D"fnref12"><sup>12</sup></a>, but then we'd lose so=
me introspective power that will prove helpful later.</p>

<p>We'll use a small set of query initializers that generate a new query fr=
om a graph. Here's one that starts most of our examples: the <code>v</code>=
 method. It builds a new query, then uses our <code>add</code> helper to po=
pulate the initial query program. This makes use of the <code>vertex</code>=
 pipetype, which we'll look at soon.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">v</span> =3D <span class=3D"kw">function</span>() {                   =
    <span class=3D"co">// query initializer: g.v() -&gt; query</span>
  <span class=3D"kw">var</span> query =3D <span class=3D"ot">Dagoba</span>.=
<span class=3D"fu">query</span>(<span class=3D"kw">this</span>)
  <span class=3D"ot">query</span>.<span class=3D"fu">add</span>(<span class=
=3D"st">'vertex'</span>, [].<span class=3D"ot">slice</span>.<span class=3D"=
fu">call</span>(arguments)) <span class=3D"co">// add a step to our program=
</span>
  <span class=3D"kw">return</span> query
}</code></pre>

<p>Note that <code>[].slice.call(arguments)</code> is JS parlance for "plea=
se pass me an array of this function's arguments". You would be forgiven fo=
r supposing that <code>arguments</code> is already an array, since it behav=
es like one in many situations, but it is lacking much of the functionality=
 we utilize in modern JavaScript arrays.</p>

<h2 id=3D"the-problem-with-being-eager">The Problem with Being Eager</h2>

<p>Before we look at the pipetypes themselves we're going to take a diversi=
on into the exciting world of execution strategy. There are two main school=
s of thought: the Call By Value clan, also known as eager beavers, are stri=
ct in their insistence that all arguments be evaluated before the function =
is applied. Their opposing faction, the Call By Needians, are content to pr=
ocrastinate until the last possible moment before doing anything=E2=80=94th=
ey are, in a word, lazy.</p>

<p>JavaScript, being a strict language, will process each of our steps as t=
hey are called. We would then expect the evaluation of <code>g.v('Thor').ou=
t().in()</code> to first find the Thor vertex, then find all vertices conne=
cted to it by outgoing edges, and from each of those vertices finally retur=
n all vertices they are connected to by inbound edges.</p>

<p>In a non-strict language we would get the same result=E2=80=94the execut=
ion strategy doesn't make much difference here. But what if we added a few =
additional calls? Given how well-connected Thor is, our <code>g.v('Thor').o=
ut().out().out().in().in().in()</code> query may produce many results=E2=80=
=94in fact, because we're not limiting our vertex list to unique results, i=
t may produce many more results than we have vertices in our total graph.</=
p>

<p>We're probably only interested in getting a few unique results out, so w=
e'll change the query a bit: <code>g.v('Thor').out().out().out().in().in().=
in().unique().take(10)</code>. Now our query produces at most 10 results. W=
hat happens if we evaluate this eagerly, though? We're still going to have =
to build up septillions of results before returning only the first 10.</p>

<p>All graph databases have to support a mechanism for doing as little work=
 as possible, and most choose some form of non-strict evaluation to do so. =
Since we're building our own interpreter, the lazy evaluation of our progra=
m is possible, but we may have to contend with some consequences.</p>

<h2 id=3D"ramifications-of-evaluation-strategy-on-our-mental-model">Ramific=
ations of Evaluation Strategy on our Mental Model</h2>

<p>Up until now our mental model for evaluation has been very simple:</p>

<ul>
<li>request a set of vertices</li>
<li>pass the returned set as input to a pipe</li>
<li>repeat as necessary</li>
</ul>

<p>We would like to retain that model for our users, because it's easier to=
 reason about, but as we've seen we can no longer use that model for the im=
plementation. Having users think in a model that differs from the actual im=
plementation is a source of much pain. A leaky abstraction is a small-scale=
 version of this; in the large it can lead to frustration, cognitive disson=
ance and ragequits.</p>

<p>Our case is nearly optimal for this deception, though: the answer to any=
 query will be the same, regardless of execution model. The only difference=
 is the performance. The tradeoff is between having all users learn a more =
complicated model prior to using the system, or forcing a subset of users t=
o transfer from the simple model to the complicated model in order to bette=
r reason about query performance.</p>

<p>Some factors to consider when wrestling with this decision are:</p>

<ul>
<li>the relative cognitive difficulty of learning the simple model versus t=
he more complex model;</li>
<li>the additional cognitive load imposed by first using the simple model a=
nd then advancing to the complex one versus skipping the simple and learnin=
g only the complex;</li>
<li>the subset of users required to make the transition, in terms of their =
proportional size, cognitive availability, available time, and so on.</li>
</ul>

<p>In our case this tradeoff makes sense. For most uses queries will return=
 results fast enough that users needn't be concerned with optimizing their =
query structure or learning the deeper model. Those who will are the users =
writing advanced queries over large datasets, and they are also likely the =
users most well-equipped to transition to a new model. Additionally, our ho=
pe is that there is only a small increase in difficulty imposed by using th=
e simple model before learning the more complex one.</p>

<p>We'll go into more detail on this new model soon, but in the meantime he=
re are some highlights to keep in mind during the next section:</p>

<ul>
<li>Each pipe returns one result at a time, not a set of results. Each pipe=
 may be activated many times while evaluating a query.</li>
<li>A read/write head controls which pipe is activated next. The head start=
s at the end of the pipeline, and its movement is directed by the result of=
 the currently active pipe.</li>
<li>That result might be one of the aforementioned gremlins. Each gremlin r=
epresents a potential query result, and they carry state with them through =
the pipes. Gremlins cause the head to move to the right.</li>
<li>A pipe can return a result of 'pull', which signals the head that it ne=
eds input and moves it to the right.</li>
<li>A result of 'done' tells the head that nothing prior needs to be activa=
ted again, and moves the head left.</li>
</ul>

<h2 id=3D"pipetypes">Pipetypes</h2>

<p>Pipetypes make up the core of our system. Once we understand how each on=
e works, we'll have a better basis for understanding how they're invoked an=
d sequenced together in the interpreter.</p>

<p>We'll start by making a place to put our pipetypes, and a way to add new=
 ones.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">Pipetypes</span> =3D {}

<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span> =3D =
<span class=3D"kw">function</span>(name, fun) {              <span class=3D=
"co">// adds a chainable method</span>
  <span class=3D"ot">Dagoba</span>.<span class=3D"fu">Pipetypes</span>[name=
] =3D fun
  <span class=3D"ot">Dagoba</span>.<span class=3D"fu">Q</span>[name] =3D <s=
pan class=3D"kw">function</span>() {
    <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span c=
lass=3D"fu">add</span>(name, [].<span class=3D"ot">slice</span>.<span class=
=3D"fu">apply</span>(arguments)) }  <span class=3D"co">// capture pipetype =
and args</span>
}</code></pre>

<p>The pipetype's function is added to the list of pipetypes, and then a ne=
w method is added to the query object. Every pipetype must have a correspon=
ding query method. That method adds a new step to the query program, along =
with its arguments.</p>

<p>When we evaluate <code>g.v('Thor').out('parent').in('parent')</code> the=
 <code>v</code> call returns a query object, the <code>out</code> call adds=
 a new step and returns the query object, and the <code>in</code> call does=
 the same. This is what enables our method-chaining API.</p>

<p>Note that adding a new pipetype with the same name replaces the existing=
 one, which allows runtime modification of existing pipetypes. What's the c=
ost of this decision? What are the alternatives?</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">getPipetype</span> =3D =
<span class=3D"kw">function</span>(name) {
  <span class=3D"kw">var</span> pipetype =3D <span class=3D"ot">Dagoba</spa=
n>.<span class=3D"fu">Pipetypes</span>[name]                 <span class=3D=
"co">// a pipetype is a function</span>

  <span class=3D"kw">if</span>(!pipetype)
    <span class=3D"ot">Dagoba</span>.<span class=3D"fu">error</span>(<span =
class=3D"st">'Unrecognized pipetype: '</span> + name)

  <span class=3D"kw">return</span> pipetype || <span class=3D"ot">Dagoba</s=
pan>.<span class=3D"fu">fauxPipetype</span>
}</code></pre>

<p>If we can't find a pipetype, we generate an error and return the default=
 pipetype, which acts like an empty conduit: if a message comes in one side=
, it gets passed out the other.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">fauxPipetype</span> =3D=
 <span class=3D"kw">function</span>(_, _, maybe_gremlin) {   <span class=3D=
"co">// pass the result upstream</span>
  <span class=3D"kw">return</span> maybe_gremlin || <span class=3D"st">'pul=
l'</span>                        <span class=3D"co">// or send a pull downs=
tream</span>
}</code></pre>

<p>See those underscores? We use those to label params that won't be used i=
n our function. Most other pipetypes will use all three parameters, and hav=
e all three parameter names. This allows us to distinguish at a glance whic=
h parameters a particular pipetype relies on.</p>

<p>This underscore technique is also important because it makes the comment=
s line up nicely. No, seriously. If programs <a href=3D"https://mitpress.mi=
t.edu/sicp/front/node3.html">"must be written for people to read, and only =
incidentally for machines to execute"</a>, then it immediately follows that=
 our predominant concern should be making code pretty.</p>

<h4 id=3D"vertex">Vertex</h4>

<p>Most pipetypes we meet will take a gremlin and produce more gremlins, bu=
t this particular pipetype generates gremlins from just a string. Given an =
vertex ID it returns a single new gremlin. Given a query it will find all m=
atching vertices, and yield one new gremlin at a time until it has worked t=
hrough them.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'vertex'</span>, <span class=3D"kw">function</span>(graph, a=
rgs, gremlin, state) {
  <span class=3D"kw">if</span>(!<span class=3D"ot">state</span>.<span class=
=3D"fu">vertices</span>)
    <span class=3D"ot">state</span>.<span class=3D"fu">vertices</span> =3D =
<span class=3D"ot">graph</span>.<span class=3D"fu">findVertices</span>(args=
)       <span class=3D"co">// state initialization</span>

  <span class=3D"kw">if</span>(!<span class=3D"ot">state</span>.<span class=
=3D"ot">vertices</span>.<span class=3D"fu">length</span>)                  =
      <span class=3D"co">// all done</span>
    <span class=3D"kw">return</span> <span class=3D"st">'done'</span>

  <span class=3D"kw">var</span> vertex =3D <span class=3D"ot">state</span>.=
<span class=3D"ot">vertices</span>.<span class=3D"fu">pop</span>()         =
        <span class=3D"co">// OPT: requires vertex cloning</span>
  <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span c=
lass=3D"fu">makeGremlin</span>(vertex, <span class=3D"ot">gremlin</span>.<s=
pan class=3D"fu">state</span>)  <span class=3D"co">// gremlins from as/back=
 queries</span>
})</code></pre>

<p>We first check to see if we've already gathered matching vertices, other=
wise we try to find some. If there are any vertices, we'll pop one off and =
return a new gremlin sitting on that vertex. Each gremlin can carry around =
its own state, like a journal of where it's been and what interesting thing=
s it has seen on its journey through the graph. If we receive a gremlin as =
input to this step we'll copy its journal for the exiting gremlin.</p>

<p>Note that we're directly mutating the state argument here, and not passi=
ng it back. An alternative would be to return an object instead of a gremli=
n or signal, and pass state back that way. That complicates our return valu=
e, and creates some additional garbage <a href=3D"http://aosabook.org/en/50=
0L/dagoba-an-in-memory-graph-database.html#fn13" class=3D"footnoteRef" id=
=3D"fnref13"><sup>13</sup></a>. If JS allowed multiple return values it wou=
ld make this option more elegant.</p>

<p>We would still need to find a way to deal with the mutations, though, as=
 the call site maintains a reference to the original variable. What if we h=
ad some way to determine whether a particular reference is "unique"=E2=80=
=94that it is the only reference to that object?</p>

<p>If we know a reference is unique then we can get the benefits of immutab=
ility while avoiding expensive copy-on-write schemes or complicated persist=
ent data structures. With only one reference we can't tell whether the obje=
ct has been mutated or a new object has been returned with the changes we r=
equested: "observed immutability" is maintained <a href=3D"http://aosabook.=
org/en/500L/dagoba-an-in-memory-graph-database.html#fn14" class=3D"footnote=
Ref" id=3D"fnref14"><sup>14</sup></a>.</p>

<p>There are a couple of common ways of determining this: in a statically t=
yped system we might make use of uniqueness types <a href=3D"http://aosaboo=
k.org/en/500L/dagoba-an-in-memory-graph-database.html#fn15" class=3D"footno=
teRef" id=3D"fnref15"><sup>15</sup></a> to guarantee at compile time that e=
ach object has only one reference. If we had a reference counter <a href=3D=
"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn16" =
class=3D"footnoteRef" id=3D"fnref16"><sup>16</sup></a>=E2=80=94even just a =
cheap two-bit sticky counter=E2=80=94we could know at runtime that an objec=
t only has one reference and use that knowledge to our advantage.</p>

<p>JavaScript doesn't have either of these facilities, but we can get almos=
t the same effect if we're really, really disciplined. Which we will be. Fo=
r now.</p>

<h4 id=3D"in-n-out">In-N-Out</h4>

<p>Walking the graph is as easy as ordering a burger. These two lines set u=
p the <code>in</code> and <code>out</code> pipetypes for us.</p>

<p></p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'out'</span>, <span class=3D"ot">Dagoba</span>.<span class=
=3D"fu">simpleTraversal</span>(<span class=3D"st">'out'</span>))
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'in'</span>,  <span class=3D"ot">Dagoba</span>.<span class=
=3D"fu">simpleTraversal</span>(<span class=3D"st">'in'</span>))</code></pre=
>

<p>The <code>simpleTraversal</code> function returns a pipetype handler tha=
t accepts a gremlin as its input, and spawns a new gremlin each time it's q=
ueried. Once those gremlins are gone, it sends back a 'pull' request to get=
 a new gremlin from its predecessor.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">simpleTraversal</span> =
=3D <span class=3D"kw">function</span>(dir) {
  <span class=3D"kw">var</span> find_method =3D dir =3D=3D <span class=3D"s=
t">'out'</span> ? <span class=3D"st">'findOutEdges'</span> : <span class=3D=
"st">'findInEdges'</span>
  <span class=3D"kw">var</span> edge_list   =3D dir =3D=3D <span class=3D"s=
t">'out'</span> ? <span class=3D"st">'_in'</span> : <span class=3D"st">'_ou=
t'</span>

  <span class=3D"kw">return</span> <span class=3D"kw">function</span>(graph=
, args, gremlin, state) {
    <span class=3D"kw">if</span>(!gremlin &amp;&amp; (!<span class=3D"ot">s=
tate</span>.<span class=3D"fu">edges</span> || !<span class=3D"ot">state</s=
pan>.<span class=3D"ot">edges</span>.<span class=3D"fu">length</span>))    =
 <span class=3D"co">// query initialization</span>
      <span class=3D"kw">return</span> <span class=3D"st">'pull'</span>

    <span class=3D"kw">if</span>(!<span class=3D"ot">state</span>.<span cla=
ss=3D"fu">edges</span> || !<span class=3D"ot">state</span>.<span class=3D"o=
t">edges</span>.<span class=3D"fu">length</span>) {                 <span c=
lass=3D"co">// state initialization</span>
      <span class=3D"ot">state</span>.<span class=3D"fu">gremlin</span> =3D=
 gremlin
      <span class=3D"ot">state</span>.<span class=3D"fu">edges</span> =3D g=
raph[find_method](<span class=3D"ot">gremlin</span>.<span class=3D"fu">vert=
ex</span>)        <span class=3D"co">// get matching edges</span>
                         .<span class=3D"fu">filter</span>(<span class=3D"o=
t">Dagoba</span>.<span class=3D"fu">filterEdges</span>(args[<span class=3D"=
dv">0</span>]))
    }

    <span class=3D"kw">if</span>(!<span class=3D"ot">state</span>.<span cla=
ss=3D"ot">edges</span>.<span class=3D"fu">length</span>)                   =
                <span class=3D"co">// nothing more to do</span>
      <span class=3D"kw">return</span> <span class=3D"st">'pull'</span>

    <span class=3D"kw">var</span> vertex =3D <span class=3D"ot">state</span=
>.<span class=3D"ot">edges</span>.<span class=3D"fu">pop</span>()[edge_list=
]                 <span class=3D"co">// use up an edge</span>
    <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span=
 class=3D"fu">gotoVertex</span>(<span class=3D"ot">state</span>.<span class=
=3D"fu">gremlin</span>, vertex)
  }
}</code></pre>

<p>The first couple of lines handle the differences between the in version =
and the out version. Then we're ready to return our pipetype function, whic=
h looks quite a bit like the vertex pipetype we just saw. That's a little s=
urprising, since this one takes in a gremlin whereas the vertex pipetype cr=
eates gremlins <em>ex nihilo</em>.</p>

<p>Yet we can see the same beats being hit here, with the addition of a que=
ry initialization step. If there's no gremlin and we're out of available ed=
ges then we pull. If we have a gremlin but haven't yet set state then we fi=
nd any edges going the appropriate direction and add them to our state. If =
there's a gremlin but its current vertex has no appropriate edges then we p=
ull. And finally we pop off an edge and return a freshly cloned gremlin on =
the vertex to which it points.</p>

<p>Glancing at this code we see <code>!state.edges.length</code> repeated i=
n each of the three clauses. It's tempting to refactor this to reduce the c=
omplexity of those conditionals. There are two issues keeping us from doing=
 so.</p>

<p>One is relatively minor: the third <code>!state.edges.length</code> mean=
s something different from the first two, since <code>state.edges</code> ha=
s been changed between the second and third conditional. This actually enco=
urages us to refactor, because having the same label mean two different thi=
ngs inside a single function usually isn't ideal.</p>

<p>The second is more serious. This isn't the only pipetype function we're =
writing, and we'll see these ideas of query initialization and/or state ini=
tialization repeated over and over. When writing code, there's always a bal=
ancing act between structured qualities and unstructured qualities. Too muc=
h structure and you pay a high cost in boilerplate and abstraction complexi=
ty. Too little structure and you'll have to keep all the plumbing minutia i=
n your head.</p>

<p>In this case, with a dozen or so pipetypes, the right choice seems to be=
 to style each of the pipetype functions as similarly as possible, and labe=
l the constituent pieces with comments. So we resist our impulse to refacto=
r this particular pipetype, because doing so would reduce uniformity, but w=
e also resist the urge to engineer a formal structural abstraction for quer=
y initialization, state initialization, and the like. If there were hundred=
s of pipetypes that latter choice would probably be the right one: the comp=
lexity cost of the abstraction is constant, while the benefit accrues linea=
rly with the number of units. When handling that many moving pieces, anythi=
ng you can do to enforce regularity among them is helpful.</p>

<h4 id=3D"property">Property</h4>

<p>Let's pause for a moment to consider an example query based on the three=
 pipetypes we've seen. We can ask for Thor's grandparents like this<a href=
=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn1=
7" class=3D"footnoteRef" id=3D"fnref17"><sup>17</sup></a>:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>(<span class=3D"st">'parent'</s=
pan>).<span class=3D"fu">out</span>(<span class=3D"st">'parent'</span>).<sp=
an class=3D"fu">run</span>()</code></pre>

<p>But what if we wanted their names? We could put a map on the end of that=
:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>(<span class=3D"st">'parent'</s=
pan>).<span class=3D"fu">out</span>(<span class=3D"st">'parent'</span>).<sp=
an class=3D"fu">run</span>()
 .<span class=3D"fu">map</span>(<span class=3D"kw">function</span>(vertex) =
{<span class=3D"kw">return</span> <span class=3D"ot">vertex</span>.<span cl=
ass=3D"fu">name</span>})</code></pre>

<p>But this is a common enough operation that we'd prefer to write somethin=
g more like:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>(<span class=3D"st">'parent'</s=
pan>).<span class=3D"fu">out</span>(<span class=3D"st">'parent'</span>).<sp=
an class=3D"fu">property</span>(<span class=3D"st">'name'</span>).<span cla=
ss=3D"fu">run</span>()</code></pre>

<p>Plus this way the property pipe is an integral part of the query, instea=
d of something appended after. This has some interesting benefits, as we'll=
 soon see.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'property'</span>, <span class=3D"kw">function</span>(graph,=
 args, gremlin, state) {
  <span class=3D"kw">if</span>(!gremlin) <span class=3D"kw">return</span> <=
span class=3D"st">'pull'</span>                                  <span clas=
s=3D"co">// query initialization</span>
  <span class=3D"ot">gremlin</span>.<span class=3D"fu">result</span> =3D <s=
pan class=3D"ot">gremlin</span>.<span class=3D"fu">vertex</span>[args[<span=
 class=3D"dv">0</span>]]
  <span class=3D"kw">return</span> <span class=3D"ot">gremlin</span>.<span =
class=3D"fu">result</span> =3D=3D <span class=3D"kw">null</span> ? <span cl=
ass=3D"kw">false</span> : gremlin             <span class=3D"co">// false f=
or bad props</span>
})</code></pre>

<p>Our query initialization here is trivial: if there's no gremlin, we pull=
. If there is a gremlin, we'll set its result to the property's value. Then=
 the gremlin can continue onward. If it makes it through the last pipe its =
result will be collected and returned from the query. Not all gremlins have=
 a <code>result</code> property. Those that don't return their most recentl=
y visited vertex.</p>

<p>Note that if the property doesn't exist we return <code>false</code> ins=
tead of the gremlin, so property pipes also act as a type of filter. Can yo=
u think of a use for this? What are the tradeoffs in this design decision?<=
/p>

<h4 id=3D"unique">Unique</h4>

<p>If we want to collect all Thor's grandparents' grandchildren=E2=80=94his=
 cousins, his siblings, and himself=E2=80=94we could do a query like this: =
<code>g.v('Thor').in().in().out().out().run()</code>. That would give us ma=
ny duplicates, however. In fact there would be at least four copies of Thor=
 himself. (Can you think of a time when there might be more?)</p>

<p>To resolve this we introduce a new pipetype called 'unique'. Our new que=
ry produces output in one-to-one correspondence with the grandchildren:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    <span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"=
st">'Thor'</span>).<span class=3D"fu">in</span>().<span class=3D"fu">in</sp=
an>().<span class=3D"fu">out</span>().<span class=3D"fu">out</span>().<span=
 class=3D"fu">unique</span>().<span class=3D"fu">run</span>()</code></pre>

<p>The pipetype implementation:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'unique'</span>, <span class=3D"kw">function</span>(graph, a=
rgs, gremlin, state) {
  <span class=3D"kw">if</span>(!gremlin) <span class=3D"kw">return</span> <=
span class=3D"st">'pull'</span>                                  <span clas=
s=3D"co">// query initialization</span>
  <span class=3D"kw">if</span>(state[<span class=3D"ot">gremlin</span>.<spa=
n class=3D"ot">vertex</span>.<span class=3D"fu">_id</span>]) <span class=3D=
"kw">return</span> <span class=3D"st">'pull'</span>                 <span c=
lass=3D"co">// reject repeats</span>
  state[<span class=3D"ot">gremlin</span>.<span class=3D"ot">vertex</span>.=
<span class=3D"fu">_id</span>] =3D <span class=3D"kw">true</span>
  <span class=3D"kw">return</span> gremlin
})</code></pre>

<p>A unique pipe is purely a filter: it either passes the gremlin through u=
nchanged or it tries to pull a new gremlin from the previous pipe.</p>

<p>We initialize by trying to collect a gremlin. If the gremlin's current v=
ertex is in our cache, then we've seen it before so we try to collect a new=
 one. Otherwise, we add the gremlin's current vertex to our cache and pass =
it along. Easy peasy.</p>

<h4 id=3D"filter">Filter</h4>

<p>We've seen two simplistic ways of filtering, but sometimes we need more =
elaborate constraints. What if we want to find all of Thor's siblings whose=
 weight is greater than their height <a href=3D"http://aosabook.org/en/500L=
/dagoba-an-in-memory-graph-database.html#fn18" class=3D"footnoteRef" id=3D"=
fnref18"><sup>18</sup></a>? This query would give us our answer:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">in</span>=
().<span class=3D"fu">unique</span>()
 .<span class=3D"fu">filter</span>(<span class=3D"kw">function</span>(asgar=
dian) { <span class=3D"kw">return</span> <span class=3D"ot">asgardian</span=
>.<span class=3D"fu">weight</span> &gt; <span class=3D"ot">asgardian</span>=
.<span class=3D"fu">height</span> })
 .<span class=3D"fu">run</span>()</code></pre>

<p>If we want to know which of Thor's siblings survive Ragnar=C3=B6k we can=
 pass filter an object:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">in</span>=
().<span class=3D"fu">unique</span>().<span class=3D"fu">filter</span>({<sp=
an class=3D"dt">survives</span>: <span class=3D"kw">true</span>}).<span cla=
ss=3D"fu">run</span>()</code></pre>

<p>Here's how it works:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'filter'</span>, <span class=3D"kw">function</span>(graph, a=
rgs, gremlin, state) {
  <span class=3D"kw">if</span>(!gremlin) <span class=3D"kw">return</span> <=
span class=3D"st">'pull'</span>                                  <span clas=
s=3D"co">// query initialization</span>

  <span class=3D"kw">if</span>(<span class=3D"kw">typeof</span> args[<span =
class=3D"dv">0</span>] =3D=3D <span class=3D"st">'object'</span>)          =
                    <span class=3D"co">// filter by object</span>
    <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span=
 class=3D"fu">objectFilter</span>(<span class=3D"ot">gremlin</span>.<span c=
lass=3D"fu">vertex</span>, args[<span class=3D"dv">0</span>])
         ? gremlin : <span class=3D"st">'pull'</span>

  <span class=3D"kw">if</span>(<span class=3D"kw">typeof</span> args[<span =
class=3D"dv">0</span>] !=3D <span class=3D"st">'function'</span>) {
    <span class=3D"ot">Dagoba</span>.<span class=3D"fu">error</span>(<span =
class=3D"st">'Filter is not a function: '</span> + args[<span class=3D"dv">=
0</span>])
    <span class=3D"kw">return</span> gremlin                               =
             <span class=3D"co">// keep things moving</span>
  }

  <span class=3D"kw">if</span>(!args[<span class=3D"dv">0</span>](<span cla=
ss=3D"ot">gremlin</span>.<span class=3D"fu">vertex</span>, gremlin)) <span =
class=3D"kw">return</span> <span class=3D"st">'pull'</span>         <span c=
lass=3D"co">// gremlin fails filter</span>
  <span class=3D"kw">return</span> gremlin
})</code></pre>

<p>If the filter's first argument is not an object or function then we trig=
ger an error, and pass the gremlin along. Pause for a minute, and consider =
the alternatives. Why would we decide to continue the query once an error i=
s encountered?</p>

<p>There are two reasons this error might arise. The first involves a progr=
ammer typing in a query, either in a REPL or directly in code. When run, th=
at query will produce results, and also generate a programmer-observable er=
ror. The programmer then corrects the error to further filter the set of re=
sults produced. Alternatively, the system could display only the error and =
produce no results, and fixing all errors would allow results to be display=
ed.</p>

<p>The second possibility is that the filter is being applied dynamically a=
t run time. This is a much more important case, because the person invoking=
 the query is not necessarily the author of the query code. Because this is=
 on the web, our default rule is to always show results, and to never break=
 things. It is usually preferable to soldier on in the face of trouble rath=
er than succumb to our wounds and present the user with a grisly error mess=
age.</p>

<p>For those occasions when showing too few results is better than showing =
too many, <code>Dagoba.error</code> can be overridden to throw an error, th=
ereby circumventing the natural control flow.</p>

<h4 id=3D"take">Take</h4>

<p>We don't always want all the results at once. Sometimes we only need a h=
andful of results; say we want a dozen of Thor's contemporaries, so we walk=
 all the way back to the primeval cow Au=C3=B0umbla:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">out</span=
>().<span class=3D"fu">out</span>().<span class=3D"fu">out</span>().<span c=
lass=3D"fu">in</span>().<span class=3D"fu">in</span>().<span class=3D"fu">i=
n</span>().<span class=3D"fu">in</span>().<span class=3D"fu">unique</span>(=
).<span class=3D"fu">take</span>(<span class=3D"dv">12</span>).<span class=
=3D"fu">run</span>()</code></pre>

<p>Without the <code>take</code> pipe that query could take quite a while t=
o run, but thanks to our lazy evaluation strategy the query with the <code>=
take</code> pipe is very efficient.</p>

<p>Sometimes we just want one at a time: we'll process the result, work wit=
h it, and then come back for another one. This pipetype allows us to do tha=
t as well.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
q =3D <span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=
=3D"st">'Au=C3=B0umbla'</span>).<span class=3D"fu">in</span>().<span class=
=3D"fu">in</span>().<span class=3D"fu">in</span>().<span class=3D"fu">prope=
rty</span>(<span class=3D"st">'name'</span>).<span class=3D"fu">take</span>=
(<span class=3D"dv">1</span>)

<span class=3D"ot">q</span>.<span class=3D"fu">run</span>() <span class=3D"=
co">// ['Odin']</span>
<span class=3D"ot">q</span>.<span class=3D"fu">run</span>() <span class=3D"=
co">// ['Vili']</span>
<span class=3D"ot">q</span>.<span class=3D"fu">run</span>() <span class=3D"=
co">// ['V=C3=A9']</span>
<span class=3D"ot">q</span>.<span class=3D"fu">run</span>() <span class=3D"=
co">// []</span></code></pre>

<p>Our query can function in an asynchronous environment, allowing us to co=
llect more results as needed. When we run out, an empty array is returned.<=
/p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'take'</span>, <span class=3D"kw">function</span>(graph, arg=
s, gremlin, state) {
  <span class=3D"ot">state</span>.<span class=3D"fu">taken</span> =3D <span=
 class=3D"ot">state</span>.<span class=3D"fu">taken</span> || <span class=
=3D"dv">0</span>                              <span class=3D"co">// state i=
nitialization</span>

  <span class=3D"kw">if</span>(<span class=3D"ot">state</span>.<span class=
=3D"fu">taken</span> =3D=3D args[<span class=3D"dv">0</span>]) {
    <span class=3D"ot">state</span>.<span class=3D"fu">taken</span> =3D <sp=
an class=3D"dv">0</span>
    <span class=3D"kw">return</span> <span class=3D"st">'done'</span>      =
                                       <span class=3D"co">// all done</span=
>
  }

  <span class=3D"kw">if</span>(!gremlin) <span class=3D"kw">return</span> <=
span class=3D"st">'pull'</span>                                  <span clas=
s=3D"co">// query initialization</span>
  <span class=3D"ot">state</span>.<span class=3D"fu">taken</span>++
  <span class=3D"kw">return</span> gremlin
})</code></pre>

<p>We initialize <code>state.taken</code> to zero if it doesn't already exi=
st. JavaScript has implicit coercion, but coerces <code>undefined</code> in=
to <code>NaN</code>, so we have to be explicit here <a href=3D"http://aosab=
ook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn19" class=3D"foot=
noteRef" id=3D"fnref19"><sup>19</sup></a>.</p>

<p>Then when <code>state.taken</code> reaches <code>args[0]</code> we retur=
n 'done', sealing off the pipes before us. We also reset the <code>state.ta=
ken</code> counter, allowing us to repeat the query later.</p>

<p>We do those two steps before query initialization to handle the cases of=
 <code>take(0)</code> and <code>take()</code> <a href=3D"http://aosabook.or=
g/en/500L/dagoba-an-in-memory-graph-database.html#fn20" class=3D"footnoteRe=
f" id=3D"fnref20"><sup>20</sup></a>. Then we increment our counter and retu=
rn the gremlin.</p>

<h4 id=3D"as">As</h4>

<p>These next four pipetypes work as a group to allow more advanced queries=
. This one just allows you to label the current vertex. We'll use that labe=
l with the next two pipetypes.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'as'</span>, <span class=3D"kw">function</span>(graph, args,=
 gremlin, state) {
  <span class=3D"kw">if</span>(!gremlin) <span class=3D"kw">return</span> <=
span class=3D"st">'pull'</span>                                  <span clas=
s=3D"co">// query initialization</span>
  <span class=3D"ot">gremlin</span>.<span class=3D"ot">state</span>.<span c=
lass=3D"fu">as</span> =3D <span class=3D"ot">gremlin</span>.<span class=3D"=
ot">state</span>.<span class=3D"fu">as</span> || {}                   <span=
 class=3D"co">// init the 'as' state</span>
  <span class=3D"ot">gremlin</span>.<span class=3D"ot">state</span>.<span c=
lass=3D"fu">as</span>[args[<span class=3D"dv">0</span>]] =3D <span class=3D=
"ot">gremlin</span>.<span class=3D"fu">vertex</span>                  <span=
 class=3D"co">// set label to vertex</span>
  <span class=3D"kw">return</span> gremlin
})</code></pre>

<p>After initializing the query, we ensure the gremlin's local state has an=
 <code>as</code> parameter. Then we set a property of that parameter to the=
 gremlin's current vertex.</p>

<h4 id=3D"merge">Merge</h4>

<p>Once we've labeled vertices we can extract them using merge. If we want =
Thor's parents, grandparents and great-grandparents we can do something lik=
e this:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">as</span>=
(<span class=3D"st">'parent'</span>).<span class=3D"fu">out</span>().<span =
class=3D"fu">as</span>(<span class=3D"st">'grandparent'</span>).<span class=
=3D"fu">out</span>().<span class=3D"fu">as</span>(<span class=3D"st">'great=
-grandparent'</span>)
           .<span class=3D"fu">merge</span>(<span class=3D"st">'parent'</sp=
an>, <span class=3D"st">'grandparent'</span>, <span class=3D"st">'great-gra=
ndparent'</span>).<span class=3D"fu">run</span>()</code></pre>

<p>Here's the merge pipetype:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'merge'</span>, <span class=3D"kw">function</span>(graph, ar=
gs, gremlin, state) {
  <span class=3D"kw">if</span>(!<span class=3D"ot">state</span>.<span class=
=3D"fu">vertices</span> &amp;&amp; !gremlin) <span class=3D"kw">return</spa=
n> <span class=3D"st">'pull'</span>               <span class=3D"co">// que=
ry initialization</span>

  <span class=3D"kw">if</span>(!<span class=3D"ot">state</span>.<span class=
=3D"fu">vertices</span> || !<span class=3D"ot">state</span>.<span class=3D"=
ot">vertices</span>.<span class=3D"fu">length</span>) {             <span c=
lass=3D"co">// state initialization</span>
    <span class=3D"kw">var</span> obj =3D (<span class=3D"ot">gremlin</span=
>.<span class=3D"fu">state</span>||{}).<span class=3D"fu">as</span> || {}
    <span class=3D"ot">state</span>.<span class=3D"fu">vertices</span> =3D =
<span class=3D"ot">args</span>.<span class=3D"fu">map</span>(<span class=3D=
"kw">function</span>(id) {<span class=3D"kw">return</span> obj[id]}).<span =
class=3D"fu">filter</span>(Boolean)
  }

  <span class=3D"kw">if</span>(!<span class=3D"ot">state</span>.<span class=
=3D"ot">vertices</span>.<span class=3D"fu">length</span>) <span class=3D"kw=
">return</span> <span class=3D"st">'pull'</span>                    <span c=
lass=3D"co">// done with this batch</span>

  <span class=3D"kw">var</span> vertex =3D <span class=3D"ot">state</span>.=
<span class=3D"ot">vertices</span>.<span class=3D"fu">pop</span>()
  <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span c=
lass=3D"fu">makeGremlin</span>(vertex, <span class=3D"ot">gremlin</span>.<s=
pan class=3D"fu">state</span>)
})</code></pre>

<p>We map over each argument, looking for it in the gremlin's list of label=
ed vertices. If we find it, we clone the gremlin to that vertex. Note that =
only gremlins that make it to this pipe are included in the merge=E2=80=94i=
f Thor's mother's parents aren't in the graph, she won't be in the result s=
et.</p>

<h4 id=3D"except">Except</h4>

<p>We've already seen cases where we would like to say "Give me all Thor's =
siblings who are not Thor". We can do that with a filter:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">in</span>=
().<span class=3D"fu">unique</span>()
           .<span class=3D"fu">filter</span>(<span class=3D"kw">function</s=
pan>(asgardian) {<span class=3D"kw">return</span> <span class=3D"ot">asgard=
ian</span>.<span class=3D"fu">_id</span> !=3D <span class=3D"st">'Thor'</sp=
an>}).<span class=3D"fu">run</span>()</code></pre>

<p>It's more straightforward with <code>as</code> and <code>except</code>:<=
/p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">as</span>(<span class=3D"st">'me'</span>)=
.<span class=3D"fu">out</span>().<span class=3D"fu">in</span>().<span class=
=3D"fu">except</span>(<span class=3D"st">'me'</span>).<span class=3D"fu">un=
ique</span>().<span class=3D"fu">run</span>()</code></pre>

<p>But there are also queries that would be difficult to try to filter. Wha=
t if we wanted Thor's uncles and aunts? How would we filter out his parents=
? It's easy with <code>as</code> and <code>except</code> <a href=3D"http://=
aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn21" class=3D=
"footnoteRef" id=3D"fnref21"><sup>21</sup></a>:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">as</span>=
(<span class=3D"st">'parent'</span>).<span class=3D"fu">out</span>().<span =
class=3D"fu">in</span>().<span class=3D"fu">except</span>(<span class=3D"st=
">'parent'</span>).<span class=3D"fu">unique</span>().<span class=3D"fu">ru=
n</span>()</code></pre>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'except'</span>, <span class=3D"kw">function</span>(graph, a=
rgs, gremlin, state) {
  <span class=3D"kw">if</span>(!gremlin) <span class=3D"kw">return</span> <=
span class=3D"st">'pull'</span>                                  <span clas=
s=3D"co">// query initialization</span>
  <span class=3D"kw">if</span>(<span class=3D"ot">gremlin</span>.<span clas=
s=3D"fu">vertex</span> =3D=3D <span class=3D"ot">gremlin</span>.<span class=
=3D"ot">state</span>.<span class=3D"fu">as</span>[args[<span class=3D"dv">0=
</span>]]) <span class=3D"kw">return</span> <span class=3D"st">'pull'</span=
>
  <span class=3D"kw">return</span> gremlin
})</code></pre>

<p>Here we're checking whether the current vertex is equal to the one we st=
ored previously. If it is, we skip it.</p>

<h4 id=3D"back">Back</h4>

<p>Some of the questions we might ask involve checking further into the gra=
ph, only to return later to our point of origin if the answer is in the aff=
irmative. Suppose we wanted to know which of Fj=C3=B6rgynn's daughters had =
children with one of Bestla's sons?</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Fj=C3=B6rgynn'</span>).<span class=3D"fu">in</span>().<span class=3D"fu">a=
s</span>(<span class=3D"st">'me'</span>)       <span class=3D"co">// first =
gremlin's state.as is Frigg</span>
 .<span class=3D"fu">in</span>()                              <span class=
=3D"co">// first gremlin's vertex is now Baldr</span>
 .<span class=3D"fu">out</span>().<span class=3D"fu">out</span>()          =
             <span class=3D"co">// clone that gremlin for each grandparent<=
/span>
 .<span class=3D"fu">filter</span>({<span class=3D"dt">_id</span>: <span cl=
ass=3D"st">'Bestla'</span>})           <span class=3D"co">// keep only the =
gremlin on grandparent Bestla</span>
 .<span class=3D"fu">back</span>(<span class=3D"st">'me'</span>).<span clas=
s=3D"fu">unique</span>().<span class=3D"fu">run</span>()         <span clas=
s=3D"co">// jump gremlin's vertex back to Frigg and exit</span></code></pre=
>

<p>Here's the definition for <code>back</code>:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(<spa=
n class=3D"st">'back'</span>, <span class=3D"kw">function</span>(graph, arg=
s, gremlin, state) {
  <span class=3D"kw">if</span>(!gremlin) <span class=3D"kw">return</span> <=
span class=3D"st">'pull'</span>                                  <span clas=
s=3D"co">// query initialization</span>
  <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span c=
lass=3D"fu">gotoVertex</span>(gremlin, <span class=3D"ot">gremlin</span>.<s=
pan class=3D"ot">state</span>.<span class=3D"fu">as</span>[args[<span class=
=3D"dv">0</span>]])
})</code></pre>

<p>We're using the <code>Dagoba.gotoVertex</code> helper function to do all=
 real work here. Let's take a look at that and some other helpers now.</p>

<h2 id=3D"helpers">Helpers</h2>

<p>The pipetypes above rely on a few helpers to do their jobs. Let's take a=
 quick look at those before diving in to the interpreter.</p>

<h4 id=3D"gremlins">Gremlins</h4>

<p>Gremlins are simple creatures: they have a current vertex, and some loca=
l state. So to make a new one we just need to make an object with those two=
 things.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">makeGremlin</span> =3D =
<span class=3D"kw">function</span>(vertex, state) {
  <span class=3D"kw">return</span> {<span class=3D"dt">vertex</span>: verte=
x, <span class=3D"dt">state</span>: state || {} }
}</code></pre>

<p>Any object that has a vertex property and a state property is a gremlin =
by this definition, so we could just inline the constructor, but wrapping i=
t in a function allows us to add new properties to all gremlins in a single=
 place.</p>

<p>We can also take an existing gremlin and send it to a new vertex, as we =
saw in the <code>back</code> pipetype and the <code>simpleTraversal</code> =
function.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">gotoVertex</span> =3D <=
span class=3D"kw">function</span>(gremlin, vertex) {               <span cl=
ass=3D"co">// clone the gremlin</span>
  <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span c=
lass=3D"fu">makeGremlin</span>(vertex, <span class=3D"ot">gremlin</span>.<s=
pan class=3D"fu">state</span>)
}</code></pre>

<p>Note that this function actually returns a brand new gremlin: a clone of=
 the old one, sent to our desired destination. That means a gremlin can sit=
 on a vertex while its clones are sent out to explore many other vertices. =
This is exactly what happens in <code>simpleTraversal</code>.</p>

<p>As an example of possible enhancements, we could add a bit of state to k=
eep track of every vertex the gremlin visits, and add new pipetypes to take=
 advantage of those paths.</p>

<h4 id=3D"finding">Finding</h4>

<p>The <code>vertex</code> pipetype uses the <code>findVertices</code> func=
tion to collect a set of initial vertices from which to begin our query.</p=
>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findVertices</span> =3D <span class=3D"kw">function</span>(args) {    =
                  <span class=3D"co">// vertex finder helper</span>
  <span class=3D"kw">if</span>(<span class=3D"kw">typeof</span> args[<span =
class=3D"dv">0</span>] =3D=3D <span class=3D"st">'object'</span>)
    <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span c=
lass=3D"fu">searchVertices</span>(args[<span class=3D"dv">0</span>])
  <span class=3D"kw">else</span> <span class=3D"kw">if</span>(<span class=
=3D"ot">args</span>.<span class=3D"fu">length</span> =3D=3D <span class=3D"=
dv">0</span>)
    <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span c=
lass=3D"ot">vertices</span>.<span class=3D"fu">slice</span>()              =
                <span class=3D"co">// OPT: slice is costly</span>
  <span class=3D"kw">else</span>
    <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span c=
lass=3D"fu">findVerticesByIds</span>(args)
}</code></pre>

<p>This function receives its arguments as a list. If the first one is an o=
bject it passes it to <code>searchVertices</code>, allowing queries like:</=
p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
  <span class=3D"ot">g</span>.<span class=3D"fu">v</span>({<span class=3D"d=
t">_id</span>:<span class=3D"st">'Thor'</span>}).<span class=3D"fu">run</sp=
an>()
  <span class=3D"ot">g</span>.<span class=3D"fu">v</span>({<span class=3D"d=
t">species</span>: <span class=3D"st">'Aesir'</span>}).<span class=3D"fu">r=
un</span>()</code></pre>

<p>Otherwise, if there are arguments it gets passed to <code>findVerticesBy=
Ids</code>, which handles queries like <code>g.v('Thor', 'Odin').run()</cod=
e>.</p>

<p>If there are no arguments at all, then our query looks like <code>g.v().=
run()</code>. This isn't something you'll want to do frequently with large =
graphs, especially since we're slicing the vertex list before returning it.=
 We slice because some call sites manipulate the returned list directly by =
popping items off as they work through them. We could optimize this use cas=
e by cloning at the call site, or by avoiding those manipulations. (We coul=
d keep a counter in state instead of popping.)</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findVerticesByIds</span> =3D <span class=3D"kw">function</span>(ids) {
  <span class=3D"kw">if</span>(<span class=3D"ot">ids</span>.<span class=3D=
"fu">length</span> =3D=3D <span class=3D"dv">1</span>) {
    <span class=3D"kw">var</span> maybe_vertex =3D <span class=3D"kw">this<=
/span>.<span class=3D"fu">findVertexById</span>(ids[<span class=3D"dv">0</s=
pan>])            <span class=3D"co">// maybe it's a vertex</span>
    <span class=3D"kw">return</span> maybe_vertex ? [maybe_vertex] : []    =
             <span class=3D"co">// or maybe it isn't</span>
  }

  <span class=3D"kw">return</span> <span class=3D"ot">ids</span>.<span clas=
s=3D"fu">map</span>( <span class=3D"kw">this</span>.<span class=3D"ot">find=
VertexById</span>.<span class=3D"fu">bind</span>(<span class=3D"kw">this</s=
pan>) ).<span class=3D"fu">filter</span>(Boolean)
}

<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findVertexById</span> =3D <span class=3D"kw">function</span>(vertex_id=
) {
  <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span cla=
ss=3D"fu">vertexIndex</span>[vertex_id]
}</code></pre>

<p>Note the use of <code>vertexIndex</code> here. Without that index we'd h=
ave to go through each vertex in our list one at a time to decide if it mat=
ched the ID=E2=80=94turning a constant time operation into a linear time on=
e, and any <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"co=
lor: inherit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-=
Element-1-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://w=
ww.w3.org/1998/Math/MathML&quot;><mi>O</mi><mo stretchy=3D&quot;false&quot;=
>(</mo><mi>n</mi><mo stretchy=3D&quot;false&quot;>)</mo></math>" role=3D"pr=
esentation" style=3D"position: relative;"><nobr aria-hidden=3D"true"><span =
class=3D"math" id=3D"MathJax-Span-1" style=3D"width: 2.567em; display: inli=
ne-block;"><span style=3D"display: inline-block; position: relative; width:=
 2.119em; height: 0px; font-size: 120%;"><span style=3D"position: absolute;=
 clip: rect(1.221em 1002.05em 2.631em -999.997em); top: -2.176em; left: 0em=
;"><span class=3D"mrow" id=3D"MathJax-Span-2"><span class=3D"mi" id=3D"Math=
Jax-Span-3" style=3D"font-family: MathJax_Math-italic;">O</span><span class=
=3D"mo" id=3D"MathJax-Span-4" style=3D"font-family: MathJax_Main;">(</span>=
<span class=3D"mi" id=3D"MathJax-Span-5" style=3D"font-family: MathJax_Math=
-italic;">n</span><span class=3D"mo" id=3D"MathJax-Span-6" style=3D"font-fa=
mily: MathJax_Main;">)</span></span><span style=3D"display: inline-block; w=
idth: 0px; height: 2.183em;"></span></span></span><span style=3D"display: i=
nline-block; overflow: hidden; vertical-align: -0.381em; border-left: 0px s=
olid; width: 0px; height: 1.388em;"></span></span></nobr><span class=3D"MJX=
_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1=
998/Math/MathML"><mi>O</mi><mo stretchy=3D"false">(</mo><mi>n</mi><mo stret=
chy=3D"false">)</mo></math></span></span></span> operations that directly r=
ely on it into <span class=3D"math"><span class=3D"MathJax_Preview" style=
=3D"color: inherit; display: none;"></span><span class=3D"MathJax" id=3D"Ma=
thJax-Element-2-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;ht=
tp://www.w3.org/1998/Math/MathML&quot;><mi>O</mi><mo stretchy=3D&quot;false=
&quot;>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=3D&quot;false&qu=
ot;>)</mo></math>" role=3D"presentation" style=3D"position: relative;"><nob=
r aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-7" style=3D"=
width: 3.08em; display: inline-block;"><span style=3D"display: inline-block=
; position: relative; width: 2.567em; height: 0px; font-size: 120%;"><span =
style=3D"position: absolute; clip: rect(1.157em 1002.5em 2.631em -999.997em=
); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-8"><s=
pan class=3D"mi" id=3D"MathJax-Span-9" style=3D"font-family: MathJax_Math-i=
talic;">O</span><span class=3D"mo" id=3D"MathJax-Span-10" style=3D"font-fam=
ily: MathJax_Main;">(</span><span class=3D"msubsup" id=3D"MathJax-Span-11">=
<span style=3D"display: inline-block; position: relative; width: 1.029em; h=
eight: 0px;"><span style=3D"position: absolute; clip: rect(3.337em 1000.58e=
m 4.17em -999.997em); top: -3.971em; left: 0em;"><span class=3D"mi" id=3D"M=
athJax-Span-12" style=3D"font-family: MathJax_Math-italic;">n</span><span s=
tyle=3D"display: inline-block; width: 0px; height: 3.978em;"></span></span>=
<span style=3D"position: absolute; top: -4.356em; left: 0.58em;"><span clas=
s=3D"mn" id=3D"MathJax-Span-13" style=3D"font-size: 70.7%; font-family: Mat=
hJax_Main;">2</span><span style=3D"display: inline-block; width: 0px; heigh=
t: 3.978em;"></span></span></span></span><span class=3D"mo" id=3D"MathJax-S=
pan-14" style=3D"font-family: MathJax_Main;">)</span></span><span style=3D"=
display: inline-block; width: 0px; height: 2.183em;"></span></span></span><=
span style=3D"display: inline-block; overflow: hidden; vertical-align: -0.3=
81em; border-left: 0px solid; width: 0px; height: 1.465em;"></span></span><=
/nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmln=
s=3D"http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy=3D"false">(=
</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=3D"false">)</mo></math><=
/span></span></span> operations.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">searchVertices</span> =3D <span class=3D"kw">function</span>(filter) {=
        <span class=3D"co">// match on filter's properties</span>
  <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span cla=
ss=3D"ot">vertices</span>.<span class=3D"fu">filter</span>(<span class=3D"k=
w">function</span>(vertex) {
    <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span=
 class=3D"fu">objectFilter</span>(vertex, filter)
  })
}</code></pre>

<p>The <code>searchVertices</code> function uses the <code>objectFilter</co=
de> helper on every vertex in the graph. We'll look at <code>objectFilter</=
code> in the next section, but in the meantime, can you think of a way to s=
earch through the vertices lazily?</p>

<h4 id=3D"filtering">Filtering</h4>

<p>We saw that <code>simpleTraversal</code> uses a filtering function on th=
e edges it encounters. It's a simple function, but powerful enough for our =
purposes.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">filterEdges</span> =3D =
<span class=3D"kw">function</span>(filter) {
  <span class=3D"kw">return</span> <span class=3D"kw">function</span>(edge)=
 {
    <span class=3D"kw">if</span>(!filter)                                 <=
span class=3D"co">// no filter: everything is valid</span>
      <span class=3D"kw">return</span> <span class=3D"kw">true</span>

    <span class=3D"kw">if</span>(<span class=3D"kw">typeof</span> filter =
=3D=3D <span class=3D"st">'string'</span>)               <span class=3D"co"=
>// string filter: label must match</span>
      <span class=3D"kw">return</span> <span class=3D"ot">edge</span>.<span=
 class=3D"fu">_label</span> =3D=3D filter

    <span class=3D"kw">if</span>(<span class=3D"ot">Array</span>.<span clas=
s=3D"fu">isArray</span>(filter))                   <span class=3D"co">// ar=
ray filter: must contain label</span>
      <span class=3D"kw">return</span> !!~<span class=3D"ot">filter</span>.=
<span class=3D"fu">indexOf</span>(<span class=3D"ot">edge</span>.<span clas=
s=3D"fu">_label</span>)

    <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span=
 class=3D"fu">objectFilter</span>(edge, filter)    <span class=3D"co">// ob=
ject filter: check edge keys</span>
  }
}</code></pre>

<p>The first case is no filter at all: <code>g.v('Odin').in().run()</code> =
traverses all edges to Odin.</p>

<p>The second case filters on the edge's label: <code>g.v('Odin').in('paren=
t').run()</code> traverses those edges with a label of 'parent'.</p>

<p>The third case accepts an array of labels: <code>g.v('Odin').in(['parent=
', 'spouse']).run()</code> traverses both parent and spouse edges.</p>

<p>And the fourth case uses the objectFilter function we saw before:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">objectFilter</span> =3D=
 <span class=3D"kw">function</span>(thing, filter) {
  <span class=3D"kw">for</span>(<span class=3D"kw">var</span> key <span cla=
ss=3D"kw">in</span> filter)
    <span class=3D"kw">if</span>(thing[key] !=3D=3D filter[key])
      <span class=3D"kw">return</span> <span class=3D"kw">false</span>

  <span class=3D"kw">return</span> <span class=3D"kw">true</span>
}</code></pre>

<p>This allows us to query the edge using a filter object:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
`<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st"=
>'Odin'</span>).<span class=3D"fu">in</span>({<span class=3D"dt">_label</sp=
an>: <span class=3D"st">'spouse'</span>, <span class=3D"dt">order</span>: <=
span class=3D"dv">2</span>}).<span class=3D"fu">run</span>()`    <span clas=
s=3D"co">// finds Odin's second wife</span></code></pre>

<h2 id=3D"the-interpreters-nature">The Interpreter's Nature</h2>

<p>We've arrived at the top of the narrative mountain, ready to receive our=
 prize: the interpreter. The code is actually fairly compact, but the model=
 has a bit of subtlety.</p>

<p>We compared programs to pipelines earlier, and that's a good mental mode=
l for writing queries. As we saw, though, we need a different model for the=
 actual implementation. That model is more like a Turing machine than a pip=
eline: there's a read/write head that sits over a particular step. It "read=
s" the step, changes its "state", and then moves either right or left.</p>

<p>Reading the step means evaluating the pipetype function. As we saw above=
, each of those functions accepts as input the entire graph, its own argume=
nts, maybe a gremlin, and its own local state. As output it provides a grem=
lin, false, or a signal of 'pull' or 'done'. This output is what our quasi-=
Turing machine reads in order to change the machine's state.</p>

<p>That state comprises just two variables: one to record steps that are 'd=
one', and another to record the <code>results</code> of the query. Those ar=
e updated, and then either the machine head moves or the query finishes and=
 the result is returned.</p>

<p>We've now described all the state in our machine. We'll have a list of r=
esults that starts empty:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
  <span class=3D"kw">var</span> results =3D []</code></pre>

<p>An index of the last 'done' step that starts behind the first step:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
  <span class=3D"kw">var</span> done =3D -<span class=3D"dv">1</span></code=
></pre>

<p>We need a place to store the most recent step's output, which might be a=
 gremlin=E2=80=94or it might be nothing=E2=80=94so we'll call it <code>mayb=
e_gremlin</code>:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
  <span class=3D"kw">var</span> maybe_gremlin =3D <span class=3D"kw">false<=
/span></code></pre>

<p>And finally we'll need a program counter to indicate the position of the=
 read/write head.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
  <span class=3D"kw">var</span> pc =3D <span class=3D"kw">this</span>.<span=
 class=3D"ot">program</span>.<span class=3D"fu">length</span> - <span class=
=3D"dv">1</span></code></pre>

<p>Except... wait a second. How are we going to get lazy <a href=3D"http://=
aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn22" class=3D=
"footnoteRef" id=3D"fnref22"><sup>22</sup></a>? The traditional way of buil=
ding a lazy system out of an eager one is to store parameters to function c=
alls as "thunks" instead of evaluating them. You can think of a thunk as an=
 unevaluated expression. In JS, which has first-class functions and closure=
s, we can create a thunk by wrapping a function and its arguments in a new =
anonymous function which takes no arguments:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"kw">function</span> <span class=3D"fu">sum</span>() {
  <span class=3D"kw">return</span> [].<span class=3D"ot">slice</span>.<span=
 class=3D"fu">call</span>(arguments).<span class=3D"fu">reduce</span>(<span=
 class=3D"kw">function</span>(acc, n) { <span class=3D"kw">return</span> ac=
c + (n|<span class=3D"dv">0</span>) }, <span class=3D"dv">0</span>)
}

<span class=3D"kw">function</span> <span class=3D"fu">thunk_of_sum_1_2_3</s=
pan>() { <span class=3D"kw">return</span> <span class=3D"fu">sum</span>(<sp=
an class=3D"dv">1</span>, <span class=3D"dv">2</span>, <span class=3D"dv">3=
</span>) }

<span class=3D"kw">function</span> <span class=3D"fu">thunker</span>(fun, a=
rgs) {
  <span class=3D"kw">return</span> <span class=3D"kw">function</span>() {<s=
pan class=3D"kw">return</span> <span class=3D"ot">fun</span>.<span class=3D=
"fu">apply</span>(fun, args)}
}

<span class=3D"kw">function</span> <span class=3D"fu">thunk_wrapper</span>(=
fun) {
  <span class=3D"kw">return</span> <span class=3D"kw">function</span>() {
    <span class=3D"kw">return</span> <span class=3D"ot">thunker</span>.<spa=
n class=3D"fu">apply</span>(<span class=3D"kw">null</span>, [fun].<span cla=
ss=3D"fu">concat</span>([[].<span class=3D"ot">slice</span>.<span class=3D"=
fu">call</span>(arguments)]))
  }
}

<span class=3D"fu">sum</span>(<span class=3D"dv">1</span>, <span class=3D"d=
v">2</span>, <span class=3D"dv">3</span>)              <span class=3D"co">/=
/ -&gt; 6</span>
<span class=3D"fu">thunk_of_sum_1_2_3</span>()      <span class=3D"co">// -=
&gt; 6</span>
<span class=3D"fu">thunker</span>(sum, [<span class=3D"dv">1</span>, <span =
class=3D"dv">2</span>, <span class=3D"dv">3</span>])() <span class=3D"co">/=
/ -&gt; 6</span>

<span class=3D"kw">var</span> sum2 =3D <span class=3D"fu">thunk_wrapper</sp=
an>(sum)
<span class=3D"kw">var</span> thunk =3D <span class=3D"fu">sum2</span>(<spa=
n class=3D"dv">1</span>, <span class=3D"dv">2</span>, <span class=3D"dv">3<=
/span>)
<span class=3D"fu">thunk</span>()                   <span class=3D"co">// -=
&gt; 6</span></code></pre>

<p>None of the thunks are invoked until one is actually needed, which usual=
ly implies some type of output is required: in our case the result of a que=
ry. Each time the interpreter encounters a new function call, we wrap it in=
 a thunk. Recall our original formulation of a query: <code>children(childr=
en(children(parents(parents(parents([8]))))))</code>. Each of those layers =
would be a thunk, wrapped up like an onion.</p>

<p>There are a couple of tradeoffs with this approach: one is that spatial =
performance becomes more difficult to reason about, because of the potentia=
lly vast thunk graphs that can be created. Another is that our program is n=
ow expressed as a single thunk, and we can't do much with it at that point.=
</p>

<p>This second point isn't usually an issue, because of the phase separatio=
n between when our compiler runs its optimizations and when all the thunkin=
g occurs at runtime. In our case we don't have that advantage: because we'r=
e using method chaining to implement a fluent interface <a href=3D"http://a=
osabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn23" class=3D"=
footnoteRef" id=3D"fnref23"><sup>23</sup></a> if we also use thunks to achi=
eve laziness we would thunk each new method as it is called, which means by=
 the time we get to <code>run()</code> we have only a thunk as our input, a=
nd no way to optimize our query.</p>

<p>Interestingly, our fluent interface hides another difference between our=
 query language and regular programming languages. The query <code>g.v('Tho=
r').in().out().run()</code> could be rewritten as <code>run(out(in(v(g, 'Th=
or'))))</code> if we weren't using method chaining. In JS we would first pr=
ocess <code>g</code> and <code>'Thor'</code>, then <code>v</code>, then <co=
de>in</code>, <code>out</code> and <code>run</code>, working from the insid=
e out. In a language with non-strict semantics we would work from the outsi=
de in, processing each consecutive nested layer of arguments only as needed=
.</p>

<p>So if we start evaluating our query at the end of the statement, with <c=
ode>run</code>, and work our way back to <code>v('Thor')</code>, calculatin=
g results only as needed, then we've effectively achieved non-strictness. T=
he secret is in the linearity of our queries. Branches complicate the proce=
ss graph and also introduce opportunities for duplicate calls, which requir=
e memoization to avoid wasted work. The simplicity of our query language me=
ans we can implement an equally simple interpreter based on our linear read=
/write head model.</p>

<p>In addition to allowing runtime optimizations, this style has many other=
 benefits related to the ease of instrumentation: history, reversibility, s=
tepwise debugging, query statistics. All these are easy to add dynamically =
because we control the interpreter and have left it as a virtual machine ev=
aluator instead of reducing the program to a single thunk.</p>

<h2 id=3D"interpreter-unveiled">Interpreter, Unveiled</h2>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">Q</span>.<span class=3D=
"fu">run</span> =3D <span class=3D"kw">function</span>() {                 =
<span class=3D"co">// a machine for query processing</span>

  <span class=3D"kw">var</span> max =3D <span class=3D"kw">this</span>.<spa=
n class=3D"ot">program</span>.<span class=3D"fu">length</span> - <span clas=
s=3D"dv">1</span>         <span class=3D"co">// index of the last step in t=
he program</span>
  <span class=3D"kw">var</span> maybe_gremlin =3D <span class=3D"kw">false<=
/span>                 <span class=3D"co">// a gremlin, a signal string, or=
 false</span>
  <span class=3D"kw">var</span> results =3D []                          <sp=
an class=3D"co">// results for this particular run</span>
  <span class=3D"kw">var</span> done =3D -<span class=3D"dv">1</span>      =
                       <span class=3D"co">// behindwhich things have finish=
ed</span>
  <span class=3D"kw">var</span> pc =3D max                              <sp=
an class=3D"co">// our program counter</span>

  <span class=3D"kw">var</span> step, state, pipetype

  <span class=3D"kw">while</span>(done &lt; max) {
    <span class=3D"kw">var</span> ts =3D <span class=3D"kw">this</span>.<sp=
an class=3D"fu">state</span>
    step =3D <span class=3D"kw">this</span>.<span class=3D"fu">program</spa=
n>[pc]                 <span class=3D"co">// step is a pair of pipetype and=
 args</span>
    state =3D (ts[pc] =3D ts[pc] || {})         <span class=3D"co">// this =
step's state must be an object</span>
    pipetype =3D <span class=3D"ot">Dagoba</span>.<span class=3D"fu">getPip=
etype</span>(step[<span class=3D"dv">0</span>])  <span class=3D"co">// a pi=
petype is just a function</span></code></pre>

<p>Here <code>max</code> is just a constant, and <code>step</code>, <code>s=
tate</code>, and <code>pipetype</code> cache information about the current =
step. We've entered the driver loop, and we won't stop until the last step =
is done.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    maybe_gremlin =3D <span class=3D"fu">pipetype</span>(<span class=3D"kw"=
>this</span>.<span class=3D"fu">graph</span>, step[<span class=3D"dv">1</sp=
an>], maybe_gremlin, state)</code></pre>

<p>Calling the step's pipetype function with its arguments.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    <span class=3D"kw">if</span>(maybe_gremlin =3D=3D <span class=3D"st">'p=
ull'</span>) {           <span class=3D"co">// 'pull' means the pipe wants =
more input</span>
      maybe_gremlin =3D <span class=3D"kw">false</span>
      <span class=3D"kw">if</span>(pc<span class=3D"dv">-1</span> &gt; done=
) {
        pc--                                <span class=3D"co">// try the p=
revious pipe</span>
        <span class=3D"kw">continue</span>
      } <span class=3D"kw">else</span> {
        done =3D pc                           <span class=3D"co">// previou=
s pipe is done, so we are too</span>
      }
    }</code></pre>

<p>To handle the 'pull' case we first set <code>maybe_gremlin</code> <a hre=
f=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn=
24" class=3D"footnoteRef" id=3D"fnref24"><sup>24</sup></a> to false. We're =
overloading our 'maybe' here by using it as a channel to pass the 'pull' an=
d 'done' signals, but once one of those signals is sucked out we go back to=
 thinking of this as a proper 'maybe'.</p>

<p>If the step before us isn't 'done' <a href=3D"http://aosabook.org/en/500=
L/dagoba-an-in-memory-graph-database.html#fn25" class=3D"footnoteRef" id=3D=
"fnref25"><sup>25</sup></a> we'll move the head backward and try again. Oth=
erwise, we mark ourselves as 'done' and let the head naturally fall forward=
.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    <span class=3D"kw">if</span>(maybe_gremlin =3D=3D <span class=3D"st">'d=
one'</span>) {           <span class=3D"co">// 'done' tells us the pipe is =
finished</span>
      maybe_gremlin =3D <span class=3D"kw">false</span>
      done =3D pc
    }</code></pre>

<p>Handling the 'done' case is even easier: set <code>maybe_gremlin</code> =
to false and mark this step as 'done'.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    pc++                                    <span class=3D"co">// move on t=
o the next pipe</span>

    <span class=3D"kw">if</span>(pc &gt; max) {
      <span class=3D"kw">if</span>(maybe_gremlin)
        <span class=3D"ot">results</span>.<span class=3D"fu">push</span>(ma=
ybe_gremlin)         <span class=3D"co">// a gremlin popped out of the pipe=
line</span>
      maybe_gremlin =3D <span class=3D"kw">false</span>
      pc--                                  <span class=3D"co">// take a st=
ep back</span>
    }
  }</code></pre>

<p>We're done with the current step, and we've moved the head to the next o=
ne. If we're at the end of the program and <code>maybe_gremlin</code> conta=
ins a gremlin, we'll add it to the results, set <code>maybe_gremlin</code> =
to false and move the head back to the last step in the program.</p>

<p>This is also the initialization state, since <code>pc</code> starts as <=
code>max</code>. So we start here and work our way back, and end up here ag=
ain at least once for each final result the query returns.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
  results =3D <span class=3D"ot">results</span>.<span class=3D"fu">map</spa=
n>(<span class=3D"kw">function</span>(gremlin) { <span class=3D"co">// retu=
rn projected results, or vertices</span>
    <span class=3D"kw">return</span> <span class=3D"ot">gremlin</span>.<spa=
n class=3D"fu">result</span> !=3D <span class=3D"kw">null</span>
         ? <span class=3D"ot">gremlin</span>.<span class=3D"fu">result</spa=
n> : <span class=3D"ot">gremlin</span>.<span class=3D"fu">vertex</span> } )

  <span class=3D"kw">return</span> results
}</code></pre>

<p>We're out of the driver loop now: the query has ended, the results are i=
n, and we just need to process and return them. If any gremlin has its resu=
lt set we'll return that, otherwise we'll return the gremlin's final vertex=
. Are there other things we might want to return? What are the tradeoffs he=
re?</p>

<h2 id=3D"query-transformers">Query Transformers</h2>

<p>Now we have a nice compact interpreter for our query programs, but we're=
 still missing something. Every modern DBMS comes with a query optimizer as=
 an essential part of the system. For non-relational databases, optimizing =
our query plan rarely yields the exponential speedups seen in their relatio=
nal cousins <a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-grap=
h-database.html#fn26" class=3D"footnoteRef" id=3D"fnref26"><sup>26</sup></a=
>, but it's still an important aspect of database design.</p>

<p>What's the simplest thing we could do that could reasonably be called a =
query optimizer? Well, we could write little functions for transforming our=
 query programs before we run them. We'll pass a program in as input and ge=
t a different program back out as output.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">T</span> =3D []        =
                       <span class=3D"co">// transformers (more than meets =
the eye)</span>

<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addTransformer</span> =
=3D <span class=3D"kw">function</span>(fun, priority) {
  <span class=3D"kw">if</span>(<span class=3D"kw">typeof</span> fun !=3D <s=
pan class=3D"st">'function'</span>)
    <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span=
 class=3D"fu">error</span>(<span class=3D"st">'Invalid transformer function=
'</span>)

  <span class=3D"kw">for</span>(<span class=3D"kw">var</span> i =3D <span c=
lass=3D"dv">0</span>; i &lt; <span class=3D"ot">Dagoba</span>.<span class=
=3D"ot">T</span>.<span class=3D"fu">length</span>; i++)  <span class=3D"co"=
>// OPT: binary search</span>
    <span class=3D"kw">if</span>(priority &gt; <span class=3D"ot">Dagoba</s=
pan>.<span class=3D"fu">T</span>[i].<span class=3D"fu">priority</span>) <sp=
an class=3D"kw">break</span>

  <span class=3D"ot">Dagoba</span>.<span class=3D"ot">T</span>.<span class=
=3D"fu">splice</span>(i, <span class=3D"dv">0</span>, {<span class=3D"dt">p=
riority</span>: priority, <span class=3D"dt">fun</span>: fun})
}</code></pre>

<p>Now we can add query transformers to our system. A query transformer is =
a function that accepts a program and returns a program, plus a priority le=
vel. Higher priority transformers are placed closer to the front of the lis=
t. We're ensuring <code>fun</code> is a function, because we're going to ev=
aluate it later <a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-=
graph-database.html#fn27" class=3D"footnoteRef" id=3D"fnref27"><sup>27</sup=
></a>.</p>

<p>We'll assume there won't be an enormous number of transformer additions,=
 and walk the list linearly to add a new one. We'll leave a note in case th=
is assumption turns out to be false=E2=80=94a binary search is much more ti=
me-optimal for long lists, but adds a little complexity and doesn't really =
speed up short lists.</p>

<p>To run these transformers we're going to inject a single line of code in=
 to the top of our interpreter:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">Q</span>.<span class=3D=
"fu">run</span> =3D <span class=3D"kw">function</span>() {                 =
    <span class=3D"co">// our virtual machine for querying</span>
  <span class=3D"kw">this</span>.<span class=3D"fu">program</span> =3D <spa=
n class=3D"ot">Dagoba</span>.<span class=3D"fu">transform</span>(<span clas=
s=3D"kw">this</span>.<span class=3D"fu">program</span>) <span class=3D"co">=
// activate the transformers</span></code></pre>

<p>We'll use that to call this function, which just passes our program thro=
ugh each transformer in turn:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">transform</span> =3D <s=
pan class=3D"kw">function</span>(program) {
  <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span c=
lass=3D"ot">T</span>.<span class=3D"fu">reduce</span>(<span class=3D"kw">fu=
nction</span>(acc, transformer) {
    <span class=3D"kw">return</span> <span class=3D"ot">transformer</span>.=
<span class=3D"fu">fun</span>(acc)
  }, program)
}</code></pre>

<p>Up until this point, our engine has traded simplicity for performance, b=
ut one of the nice things about this strategy is that it leaves doors open =
for global optimizations that may have been unavailable if we had opted to =
optimize locally as we designed the system.</p>

<p>Optimizing a program can often increase complexity and reduce the elegan=
ce of the system, making it harder to reason about and maintain. Breaking a=
bstraction barriers for performance gains is one of the more egregious form=
s of optimization, but even something seemingly innocuous like embedding pe=
rformance-oriented code into business logic makes maintenance more difficul=
t.</p>

<p>In light of that, this type of "orthogonal optimization" is particularly=
 appealing. We can add optimizers in modules or even user code, instead of =
having them tightly coupled to the engine. We can test them in isolation, o=
r in groups, and with the addition of generative testing we could even auto=
mate that process, ensuring that our available optimizers play nicely toget=
her.</p>

<p>We can also use this transformer system to add new functionality unrelat=
ed to optimization. Let's look at a case of that now.</p>

<h2 id=3D"aliases">Aliases</h2>

<p>Making a query like <code>g.v('Thor').out().in()</code> is quite compact=
, but is this Thor's siblings or his mates? Neither interpretation is fully=
 satisfying. It'd be nicer to say what mean: either <code>g.v('Thor').paren=
ts().children()</code> or <code>g.v('Thor').children().parents()</code>.</p=
>

<p>We can use query transformers to make aliases with just a couple of extr=
a helper functions:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span> =3D <sp=
an class=3D"kw">function</span>(newname, oldname, defaults) {
  defaults =3D defaults || []                     <span class=3D"co">// def=
ault arguments for the alias</span>
  <span class=3D"ot">Dagoba</span>.<span class=3D"fu">addTransformer</span>=
(<span class=3D"kw">function</span>(program) {
    <span class=3D"kw">return</span> <span class=3D"ot">program</span>.<spa=
n class=3D"fu">map</span>(<span class=3D"kw">function</span>(step) {
      <span class=3D"kw">if</span>(step[<span class=3D"dv">0</span>] !=3D n=
ewname) <span class=3D"kw">return</span> step
      <span class=3D"kw">return</span> [oldname, <span class=3D"ot">Dagoba<=
/span>.<span class=3D"fu">extend</span>(step[<span class=3D"dv">1</span>], =
defaults)]
    })
    }, <span class=3D"dv">100</span>)                                     <=
span class=3D"co">// 100 because aliases run early</span>

  <span class=3D"ot">Dagoba</span>.<span class=3D"fu">addPipetype</span>(ne=
wname, <span class=3D"kw">function</span>() {})
}</code></pre>

<p>We're adding a new name for an existing step, so we'll need to create a =
query transformer that converts the new name to the old name whenever it's =
encountered. We'll also need to add the new name as a method on the main qu=
ery object, so it can be pulled into the query program.</p>

<p>If we could capture missing method calls and route them to a handler fun=
ction then we might be able to run this transformer with a lower priority, =
but there's currently no way to do that. Instead we will run it with a high=
 priority of 100 so the aliased methods are added before they are invoked.<=
/p>

<p>We call another helper to merge the incoming step's arguments with the a=
lias's default arguments. If the incoming step is missing an argument then =
we'll use the alias's argument for that slot.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">extend</span> =3D <span=
 class=3D"kw">function</span>(list, defaults) {
  <span class=3D"kw">return</span> <span class=3D"ot">Object</span>.<span c=
lass=3D"fu">keys</span>(defaults).<span class=3D"fu">reduce</span>(<span cl=
ass=3D"kw">function</span>(acc, key) {
    <span class=3D"kw">if</span>(<span class=3D"kw">typeof</span> list[key]=
 !=3D <span class=3D"st">'undefined'</span>) <span class=3D"kw">return</spa=
n> acc
    acc[key] =3D defaults[key]
    <span class=3D"kw">return</span> acc
  }, list)
}</code></pre>

<p>Now we can make those aliases we wanted:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'parents'</span>, <span class=3D"st">'out'</span>)
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'children'</span>, <span class=3D"st">'in'</span>)</code></pre>

<p>We can also start to specialize our data model a little more, by labelin=
g each edge between a parent and child as a 'parent' edge. Then our aliases=
 would look like this:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'parents'</span>, <span class=3D"st">'out'</span>, [<span class=
=3D"st">'parent'</span>])
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'children'</span>, <span class=3D"st">'in'</span>, [<span class=
=3D"st">'parent'</span>])</code></pre>

<p>Now we can add edges for spouses, step-parents, or even jilted ex-lovers=
. If we enhance our <code>addAlias</code> function we can introduce new ali=
ases for grandparents, siblings, or even cousins:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'grandparents'</span>, [ [<span class=3D"st">'out'</span>, <spa=
n class=3D"st">'parent'</span>], [<span class=3D"st">'out'</span>, <span cl=
ass=3D"st">'parent'</span>]])
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'siblings'</span>,     [ [<span class=3D"st">'as'</span>, <span=
 class=3D"st">'me'</span>], [<span class=3D"st">'out'</span>, <span class=
=3D"st">'parent'</span>]
                                , [<span class=3D"st">'in'</span>, <span cl=
ass=3D"st">'parent'</span>], [<span class=3D"st">'except'</span>, <span cla=
ss=3D"st">'me'</span>]])
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'cousins'</span>,      [ [<span class=3D"st">'out'</span>, <spa=
n class=3D"st">'parent'</span>], [<span class=3D"st">'as'</span>, <span cla=
ss=3D"st">'folks'</span>]
                                , [<span class=3D"st">'out'</span>, <span c=
lass=3D"st">'parent'</span>], [<span class=3D"st">'in'</span>, <span class=
=3D"st">'parent'</span>]
                                , [<span class=3D"st">'except'</span>, <spa=
n class=3D"st">'folks'</span>], [<span class=3D"st">'in'</span>, <span clas=
s=3D"st">'parent'</span>]
                                , [<span class=3D"st">'unique'</span>]])</c=
ode></pre>

<p>That <code>cousins</code> alias is kind of cumbersome. Maybe we could ex=
pand our <code>addAlias</code> function to allow ourselves to use other ali=
ases in our aliases, and call it like this:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">addAlias</span>(<span c=
lass=3D"st">'cousins'</span>,      [ <span class=3D"st">'parents'</span>, [=
<span class=3D"st">'as'</span>, <span class=3D"st">'folks'</span>]
                                , <span class=3D"st">'parents'</span>, <spa=
n class=3D"st">'children'</span>
                                , [<span class=3D"st">'except'</span>, <spa=
n class=3D"st">'folks'</span>], <span class=3D"st">'children'</span>, <span=
 class=3D"st">'unique'</span>])</code></pre>

<p>Now instead of</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Forseti'</span>).<span class=3D"fu">parents</span>().<span class=3D"fu">as=
</span>(<span class=3D"st">'parents'</span>).<span class=3D"fu">parents</sp=
an>().<span class=3D"fu">children</span>()
                        .<span class=3D"fu">except</span>(<span class=3D"st=
">'parents'</span>).<span class=3D"fu">children</span>().<span class=3D"fu"=
>unique</span>()</code></pre>

<p>we can just say <code>g.v('Forseti').cousins()</code>.</p>

<p>We've introduced a bit of a pickle, though: while our <code>addAlias</co=
de> function is resolving an alias it also has to resolve other aliases. Wh=
at if <code>parents</code> called some other alias, and while we were resol=
ving <code>cousins</code> we had to stop to resolve <code>parents</code> an=
d then resolve its aliases and so on? What if one of <code>parents</code> a=
liases ultimately called <code>cousins</code>?</p>

<p>This brings us in to the realm of dependency resolution<a href=3D"http:/=
/aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn28" class=
=3D"footnoteRef" id=3D"fnref28"><sup>28</sup></a>, a core component of mode=
rn package managers. There are a lot of fancy tricks for choosing ideal ver=
sions, tree shaking, general optimizations and the like, but the basic idea=
 is fairly simple. We're going to make a graph of all the dependencies and =
their relationships, and then try to find a way to line up the vertices whi=
le making all the arrows go from left to right. If we can, then this partic=
ular sorting of the vertices is called a 'topological ordering', and we've =
proven that our dependency graph has no cycles: it is a Directed Acyclic Gr=
aph (DAG). If we fail to do so then our graph has at least one cycle.</p>

<p>On the other hand, we expect that our queries will generally be rather s=
hort (100 steps would be a very long query) and that we'll have a reasonabl=
y low number of transformers. Instead of fiddling around with DAGs and depe=
ndency management we could return 'true' from the transform function if any=
thing changed, and then run it until it stops being productive. This requir=
es each transformer to be idempotent, but that's a useful property for tran=
sformers to have. What are the pros and cons of these two pathways?</p>

<h2 id=3D"performance">Performance</h2>

<p>All production graph databases share a particular performance characteri=
stic: graph traversal queries are constant time with respect to total graph=
 size <a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-data=
base.html#fn29" class=3D"footnoteRef" id=3D"fnref29"><sup>29</sup></a>. In =
a non-graph database, asking for the list of someone's friends can require =
time proportional to the number of entries, because in the naive worst-case=
 you have to look at every entry. This means if a query over ten entries ta=
kes a millisecond, then a query over ten million entries will take almost t=
wo weeks. Your friend list would arrive faster if sent by Pony Express <a h=
ref=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#=
fn30" class=3D"footnoteRef" id=3D"fnref30"><sup>30</sup></a>!</p>

<p>To alleviate this dismal performance most databases index over oft-queri=
ed fields, which turns an <span class=3D"math"><span class=3D"MathJax_Previ=
ew" style=3D"color: inherit; display: none;"></span><span class=3D"MathJax"=
 id=3D"MathJax-Element-3-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=
=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>O</mi><mo stretchy=3D=
&quot;false&quot;>(</mo><mi>n</mi><mo stretchy=3D&quot;false&quot;>)</mo></=
math>" role=3D"presentation" style=3D"position: relative;"><nobr aria-hidde=
n=3D"true"><span class=3D"math" id=3D"MathJax-Span-15" style=3D"width: 2.56=
7em; display: inline-block;"><span style=3D"display: inline-block; position=
: relative; width: 2.119em; height: 0px; font-size: 120%;"><span style=3D"p=
osition: absolute; clip: rect(1.221em 1002.05em 2.631em -999.997em); top: -=
2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-16"><span clas=
s=3D"mi" id=3D"MathJax-Span-17" style=3D"font-family: MathJax_Math-italic;"=
>O</span><span class=3D"mo" id=3D"MathJax-Span-18" style=3D"font-family: Ma=
thJax_Main;">(</span><span class=3D"mi" id=3D"MathJax-Span-19" style=3D"fon=
t-family: MathJax_Math-italic;">n</span><span class=3D"mo" id=3D"MathJax-Sp=
an-20" style=3D"font-family: MathJax_Main;">)</span></span><span style=3D"d=
isplay: inline-block; width: 0px; height: 2.183em;"></span></span></span><s=
pan style=3D"display: inline-block; overflow: hidden; vertical-align: -0.38=
1em; border-left: 0px solid; width: 0px; height: 1.388em;"></span></span></=
nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=
=3D"http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretchy=3D"false">(<=
/mo><mi>n</mi><mo stretchy=3D"false">)</mo></math></span></span></span> sea=
rch into an <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"c=
olor: inherit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax=
-Element-4-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://=
www.w3.org/1998/Math/MathML&quot;><mi>O</mi><mo stretchy=3D&quot;false&quot=
;>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=3D&quot;false&=
quot;>)</mo></math>" role=3D"presentation" style=3D"position: relative;"><n=
obr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-21" style=
=3D"width: 4.106em; display: inline-block;"><span style=3D"display: inline-=
block; position: relative; width: 3.401em; height: 0px; font-size: 120%;"><=
span style=3D"position: absolute; clip: rect(1.221em 1003.34em 2.631em -999=
.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span=
-22"><span class=3D"mi" id=3D"MathJax-Span-23" style=3D"font-family: MathJa=
x_Math-italic;">O</span><span class=3D"mo" id=3D"MathJax-Span-24" style=3D"=
font-family: MathJax_Main;">(</span><span class=3D"mi" id=3D"MathJax-Span-2=
5" style=3D"font-family: MathJax_Math-italic;">l</span><span class=3D"mi" i=
d=3D"MathJax-Span-26" style=3D"font-family: MathJax_Math-italic;">o</span><=
span class=3D"mi" id=3D"MathJax-Span-27" style=3D"font-family: MathJax_Math=
-italic;">g<span style=3D"display: inline-block; overflow: hidden; height: =
1px; width: 0.003em;"></span></span><span class=3D"mi" id=3D"MathJax-Span-2=
8" style=3D"font-family: MathJax_Math-italic;">n</span><span class=3D"mo" i=
d=3D"MathJax-Span-29" style=3D"font-family: MathJax_Main;">)</span></span><=
span style=3D"display: inline-block; width: 0px; height: 2.183em;"></span><=
/span></span><span style=3D"display: inline-block; overflow: hidden; vertic=
al-align: -0.381em; border-left: 0px solid; width: 0px; height: 1.388em;"><=
/span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentati=
on"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>O</mi><mo stretc=
hy=3D"false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=3D"=
false">)</mo></math></span></span></span> search. This gives considerably b=
etter search performance, but at the cost of some write performance and a l=
ot of space=E2=80=94indices can easily double the size of a database. Caref=
ul balancing of the space/time tradeoffs of indices is part of the perpetua=
l tuning process for most databases.</p>

<p>Graph databases sidestep this issue by making direct connections between=
 vertices and edges, so graph traversals are just pointer jumps; no need to=
 scan through every item, no need for indices, no extra work at all. Now fi=
nding your friends has the same price regardless of the total number of peo=
ple in the graph, with no additional space cost or write time cost. One dow=
nside to this approach is that the pointers work best when the whole graph =
is in memory on the same machine. Effectively sharding a graph database acr=
oss multiple machines is still an active area of research <a href=3D"http:/=
/aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn31" class=
=3D"footnoteRef" id=3D"fnref31"><sup>31</sup></a>.</p>

<p>We can see this at work in the microcosm of Dagoba if we replace the fun=
ctions for finding edges. Here's a naive version that searches through all =
the edges in linear time. It's similar to our very first implementation, bu=
t uses all the structures we've since built.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findInEdges</span>  =3D <span class=3D"kw">function</span>(vertex) {
  <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span cla=
ss=3D"ot">edges</span>.<span class=3D"fu">filter</span>(<span class=3D"kw">=
function</span>(edge) {<span class=3D"kw">return</span> <span class=3D"ot">=
edge</span>.<span class=3D"ot">_in</span>.<span class=3D"fu">_id</span>  =
=3D=3D <span class=3D"ot">vertex</span>.<span class=3D"fu">_id</span>} )
}
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findOutEdges</span> =3D <span class=3D"kw">function</span>(vertex) {
  <span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span cla=
ss=3D"ot">edges</span>.<span class=3D"fu">filter</span>(<span class=3D"kw">=
function</span>(edge) {<span class=3D"kw">return</span> <span class=3D"ot">=
edge</span>.<span class=3D"ot">_out</span>.<span class=3D"fu">_id</span> =
=3D=3D <span class=3D"ot">vertex</span>.<span class=3D"fu">_id</span>} )
}</code></pre>

<p>We can add an index for edges, which gets us most of the way there with =
small graphs but has all the classic indexing issues for large ones.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findInEdges</span>  =3D <span class=3D"kw">function</span>(vertex) { <=
span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span class=
=3D"fu">inEdgeIndex</span> [<span class=3D"ot">vertex</span>.<span class=3D=
"fu">_id</span>] }
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findOutEdges</span> =3D <span class=3D"kw">function</span>(vertex) { <=
span class=3D"kw">return</span> <span class=3D"kw">this</span>.<span class=
=3D"fu">outEdgeIndex</span>[<span class=3D"ot">vertex</span>.<span class=3D=
"fu">_id</span>] }</code></pre>

<p>And here we have our old friends back again: pure, sweet index-free adja=
cency.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findInEdges</span>  =3D <span class=3D"kw">function</span>(vertex) { <=
span class=3D"kw">return</span> <span class=3D"ot">vertex</span>.<span clas=
s=3D"fu">_in</span>  }
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">findOutEdges</span> =3D <span class=3D"kw">function</span>(vertex) { <=
span class=3D"kw">return</span> <span class=3D"ot">vertex</span>.<span clas=
s=3D"fu">_out</span> }</code></pre>

<p>Run these yourself to experience the graph database difference <a href=
=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn3=
2" class=3D"footnoteRef" id=3D"fnref32"><sup>32</sup></a>.</p>

<h2 id=3D"serialization">Serialization</h2>

<p>Having a graph in memory is great, but how do we get it there in the fir=
st place? We saw that our graph constructor can take a list of vertices and=
 edges and create a graph for us, but once the graph has been built how do =
we get the vertices and edges back out?</p>

<p>Our natural inclination is to do something like <code>JSON.stringify(gra=
ph)</code>, which produces the terribly helpful error "TypeError: Convertin=
g circular structure to JSON". During the graph construction process the ve=
rtices were linked to their edges, and the edges are all linked to their ve=
rtices, so now everything refers to everything else. So how can we extract =
our nice neat lists again? JSON replacer functions to the rescue.</p>

<p>The <code>JSON.stringify</code> function takes a value to stringify, but=
 it also takes two additional parameters: a replacer function and a whitesp=
ace number <a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph=
-database.html#fn33" class=3D"footnoteRef" id=3D"fnref33"><sup>33</sup></a>=
. The replacer allows you to customize how the stringification proceeds.</p=
>

<p>We need to treat the vertices and edges a bit differently, so we're goin=
g to manually merge the two sides into a single JSON string.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">jsonify</span> =3D <spa=
n class=3D"kw">function</span>(graph) {
  <span class=3D"kw">return</span> <span class=3D"st">'{"V":'</span> + <spa=
n class=3D"ot">JSON</span>.<span class=3D"fu">stringify</span>(<span class=
=3D"ot">graph</span>.<span class=3D"fu">vertices</span>, <span class=3D"ot"=
>Dagoba</span>.<span class=3D"fu">cleanVertex</span>)
       + <span class=3D"st">',"E":'</span> + <span class=3D"ot">JSON</span>=
.<span class=3D"fu">stringify</span>(<span class=3D"ot">graph</span>.<span =
class=3D"fu">edges</span>,    <span class=3D"ot">Dagoba</span>.<span class=
=3D"fu">cleanEdge</span>)
       + <span class=3D"st">'}'</span>
}</code></pre>

<p>And these are the replacers for vertices and edges.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">cleanVertex</span> =3D =
<span class=3D"kw">function</span>(key, value) {
  <span class=3D"kw">return</span> (key =3D=3D <span class=3D"st">'_in'</sp=
an> || key =3D=3D <span class=3D"st">'_out'</span>) ? <span class=3D"kw">un=
defined</span> : value
}

<span class=3D"ot">Dagoba</span>.<span class=3D"fu">cleanEdge</span> =3D <s=
pan class=3D"kw">function</span>(key, value) {
  <span class=3D"kw">return</span> (key =3D=3D <span class=3D"st">'_in'</sp=
an> || key =3D=3D <span class=3D"st">'_out'</span>) ? <span class=3D"ot">va=
lue</span>.<span class=3D"fu">_id</span> : value
}</code></pre>

<p>The only difference between them is what they do when a cycle is about t=
o be formed: for vertices, we skip the edge list entirely. For edges, we re=
place each vertex with its ID. That gets rid of all the cycles we created w=
hile building the graph.</p>

<p>We're manually manipulating JSON in <code>Dagoba.jsonify</code>, which g=
enerally isn't recommended as the JSON format is rather persnickety. Even i=
n a dose this small it's easy to miss something and hard to visually confir=
m correctness.</p>

<p>We could merge the two replacer functions into a single function, and us=
e that new replacer function over the whole graph by doing <code>JSON.strin=
gify(graph, my_cool_replacer)</code>. This frees us from having to manually=
 massage the JSON output, but the resulting code may be quite a bit messier=
. Try it yourself and see if you can come up with a well-factored solution =
that avoids hand-coded JSON. (Bonus points if it fits in a tweet.)</p>

<h2 id=3D"persistence">Persistence</h2>

<p>Persistence is usually one of the trickier parts of a database: disks ar=
e relatively safe but slow. Batching writes, making them atomic, journaling=
=E2=80=94these are difficult to make both fast and correct.</p>

<p>Fortunately, we're building an <em>in-memory</em> database, so we don't =
have to worry about any of that! We may, though, occasionally want to save =
a copy of the database locally for fast restart on page load. We can use th=
e serializer we just built to do exactly that. First let's wrap it in a hel=
per function:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"ot">G</span>.<span class=3D=
"fu">toString</span> =3D <span class=3D"kw">function</span>() { <span class=
=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span class=3D"fu">j=
sonify</span>(<span class=3D"kw">this</span>) }</code></pre>

<p>In JavaScript an object's <code>toString</code> function is called whene=
ver that object is coerced into a string. So if <code>g</code> is a graph, =
then <code>g+''</code> will be the graph's serialized JSON string.</p>

<p>The <code>fromString</code> function isn't part of the language specific=
ation, but it's handy to have around.</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">fromString</span> =3D <=
span class=3D"kw">function</span>(str) {             <span class=3D"co">// =
another graph constructor</span>
  <span class=3D"kw">var</span> obj =3D <span class=3D"ot">JSON</span>.<spa=
n class=3D"fu">parse</span>(str)                     <span class=3D"co">// =
this can throw</span>
  <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span c=
lass=3D"fu">graph</span>(<span class=3D"ot">obj</span>.<span class=3D"fu">V=
</span>, <span class=3D"ot">obj</span>.<span class=3D"fu">E</span>)
}</code></pre>

<p>Now we'll use those in our persistence functions. The <code>toString</co=
de> function is hiding=E2=80=94can you spot it?</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">Dagoba</span>.<span class=3D"fu">persist</span> =3D <spa=
n class=3D"kw">function</span>(graph, name) {
  name =3D name || <span class=3D"st">'graph'</span>
  <span class=3D"ot">localStorage</span>.<span class=3D"fu">setItem</span>(=
<span class=3D"st">'DAGOBA::'</span>+name, graph)
}

<span class=3D"ot">Dagoba</span>.<span class=3D"fu">depersist</span> =3D <s=
pan class=3D"kw">function</span> (name) {
  name =3D <span class=3D"st">'DAGOBA::'</span> + (name || <span class=3D"s=
t">'graph'</span>)
  <span class=3D"kw">var</span> flatgraph =3D <span class=3D"ot">localStora=
ge</span>.<span class=3D"fu">getItem</span>(name)
  <span class=3D"kw">return</span> <span class=3D"ot">Dagoba</span>.<span c=
lass=3D"fu">fromString</span>(flatgraph)
}</code></pre>

<p>We preface the name with a faux namespace to avoid polluting the <code>l=
ocalStorage</code> properties of the domain, as it can get quite crowded in=
 there. There's also usually a low storage limit, so for larger graphs we'd=
 probably want to use a Blob of some sort.</p>

<p>There are also potential issues if multiple browser windows from the sam=
e domain are persisting and depersisting simultaneously. The <code>localSto=
rage</code> space is shared between those windows, and they're potentially =
on different event loops, so there's the possibility of one carelessly over=
writing the work of another. The spec says there should be a mutex required=
 for read/write access to <code>localStorage</code>, but it's inconsistentl=
y implemented between different browsers, and even with it a simple impleme=
ntation like ours could still encounter issues.</p>

<p>If we wanted our persistence implementation to be multi-window=E2=80=93c=
oncurrency aware, then we could make use of the storage events that are fir=
ed when <code>localStorage</code> is changed to update our local graph acco=
rdingly.</p>

<h2 id=3D"updates">Updates</h2>

<p>Our <code>out</code> pipetype copies the vertex's out-going edges and po=
ps one off each time it needs one. Building that new data structure takes t=
ime and space, and pushes more work on to the memory manager. We could have=
 instead used the vertex's out-going edge list directly, keeping track of o=
ur place with a counter variable. Can you think of a problem with that appr=
oach?</p>

<p>If someone deletes an edge we've visited while we're in the middle of a =
query, that would change the size of our edge list, and we'd then skip an e=
dge because our counter would be off. To solve this we could lock the verti=
ces involved in our query, but then we'd either lose our capacity to regula=
rly update the graph, or the ability to have long-lived query objects respo=
nding to requests for more results on-demand. Even though we're in a single=
-threaded event loop, our queries can span multiple asynchronous re-entries=
, which means concurrency concerns like this are a very real problem.</p>

<p>So we'll pay the performance price to copy the edge list. There's still =
a problem, though, in that long-lived queries may not see a completely cons=
istent chronology. We will traverse every edge belonging to a vertex at the=
 moment we visit it, but we visit vertices at different clock times during =
our query. Suppose we save a query like <code>var q =3D g.v('Odin').childre=
n().children().take(2)</code> and then call <code>q.run()</code> to gather =
two of Odin's grandchildren. Some time later we need to pull another two gr=
andchildren, so we call <code>q.run()</code> again. If Odin has had a new g=
randchild in the intervening time, we may or may not see it, depending on w=
hether the parent vertex was visited the first time we ran the query.</p>

<p>One way to fix this non-determinism is to change the update handlers to =
add versioning to the data. We'll then change the driver loop to pass the g=
raph's current version in to the query, so we're always seeing a consistent=
 view of the world as it existed when the query was first initialized. Addi=
ng versioning to our database also opens the door to true transactions, and=
 automated rollback/retries in an STM-like fashion.</p>

<h2 id=3D"future-directions">Future Directions</h2>

<p>We saw one way of gathering ancestors earlier:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">as</span>=
(<span class=3D"st">'parent'</span>)
           .<span class=3D"fu">out</span>().<span class=3D"fu">as</span>(<s=
pan class=3D"st">'grandparent'</span>)
           .<span class=3D"fu">out</span>().<span class=3D"fu">as</span>(<s=
pan class=3D"st">'great-grandparent'</span>)
           .<span class=3D"fu">merge</span>([<span class=3D"st">'parent'</s=
pan>, <span class=3D"st">'grandparent'</span>, <span class=3D"st">'great-gr=
andparent'</span>])
           .<span class=3D"fu">run</span>()</code></pre>

<p>This is pretty clumsy, and doesn't scale well=E2=80=94what if we wanted =
six layers of ancestors? Or to look through an arbitrary number of ancestor=
s until we found what we wanted?</p>

<p>It'd be nice if we could say something like this instead:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">all</span=
>().<span class=3D"fu">times</span>(<span class=3D"dv">3</span>).<span clas=
s=3D"fu">run</span>()</code></pre>

<p>What we'd like to get out of this is something like the query above=E2=
=80=94maybe:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">as</span>=
(<span class=3D"st">'a'</span>)
           .<span class=3D"fu">out</span>().<span class=3D"fu">as</span>(<s=
pan class=3D"st">'b'</span>)
           .<span class=3D"fu">out</span>().<span class=3D"fu">as</span>(<s=
pan class=3D"st">'c'</span>)
           .<span class=3D"fu">merge</span>([<span class=3D"st">'a'</span>,=
 <span class=3D"st">'b'</span>, <span class=3D"st">'c'</span>])
           .<span class=3D"fu">run</span>()`</code></pre>

<p>after the query transformers have all run. We could run the <code>times<=
/code> transformer first, to produce:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
    <span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"=
st">'Thor'</span>).<span class=3D"fu">out</span>().<span class=3D"fu">all</=
span>().<span class=3D"fu">out</span>().<span class=3D"fu">all</span>().<sp=
an class=3D"fu">out</span>().<span class=3D"fu">all</span>().<span class=3D=
"fu">run</span>()</code></pre>

<p>Then run the <code>all</code> transformer and have it transform each <co=
de>all</code> into a uniquely labeled <code>as</code>, and put a <code>merg=
e</code> after the last <code>as</code>.</p>

<p>There are a few problems with this, though. For one, this <code>as</code=
>/<code>merge</code> technique only works if every pathway is present in th=
e graph: if we're missing an entry for one of Thor's great-grandparents the=
n we will skip valid entries. For another, what happens if we want to do th=
is to just part of a query and not the whole thing? What if there are multi=
ple <code>all</code>s?</p>

<p>To solve that first problem we're going to have to treat <code>all</code=
>s as something more than just as/merge. We need each parent gremlin to act=
ually skip the intervening steps. We can think of this as a kind of telepor=
tation=E2=80=94jumping from one part of the pipeline directly to another=E2=
=80=94or we can think of it as a certain kind of branching pipeline, but ei=
ther way it complicates our model somewhat. Another approach would be to th=
ink of the gremlin as passing through the intervening pipes in a sort of su=
spended animation, until awoken by a special pipe. Scoping the suspending/u=
nsuspending pipes may be tricky, however.</p>

<p>The next two problems are easier. To modify just part of a query we'll w=
rap that portion in special start/end steps, like <code>g.v('Thor').out().s=
tart().in().out().end().times(4).run()</code>. Actually, if the interpreter=
 knows about these special pipetypes we don't need the end step, because th=
e end of a sequence is always a special pipetype. We'll call these special =
pipetypes "adverbs", because they modify regular pipetypes like adverbs mod=
ify verbs.</p>

<p>To handle multiple <code>all</code>s we need to run all <code>all</code>=
 transformers twice: once before <code>times</code>, to mark all <code>all<=
/code>s uniquely, and again after <code>times</code> to re-mark all marked =
<code>all</code>s uniquely.</p>

<p>There's still the issue of searching through an unbounded number of ance=
stors=E2=80=94for example, how do we find out which of Ymir's descendants a=
re scheduled to survive Ragnar=C3=B6k? We could make individual queries lik=
e <code>g.v('Ymir').in().filter({survives: true})</code> and <code>g.v('Ymi=
r').in().in().in().in().filter({survives: true})</code>, and manually colle=
ct the results ourselves, but that's pretty awful.</p>

<p>We'd like to use an adverb like this:</p>

<pre class=3D"sourceCode javascript"><code class=3D"sourceCode javascript">=
<span class=3D"ot">g</span>.<span class=3D"fu">v</span>(<span class=3D"st">=
'Ymir'</span>).<span class=3D"fu">in</span>().<span class=3D"fu">filter</sp=
an>({<span class=3D"dt">survives</span>: <span class=3D"kw">true</span>}).<=
span class=3D"fu">every</span>()</code></pre>

<p>which would work like <code>all</code>+<code>times</code> but without en=
forcing a limit. We may want to impose a particular strategy on the travers=
al, though, like a stolid BFS or YOLO DFS, so <code>g.v('Ymir').in().filter=
({survives: true}).bfs()</code> would be more flexible. Phrasing it this wa=
y allows us to state complicated queries like "check for Ragnar=C3=B6k surv=
ivors, skipping every other generation" in a straightforward fashion: <code=
>g.v('Ymir').in().filter({survives: true}).in().bfs()</code>.</p>

<h2 id=3D"wrapping-up">Wrapping Up</h2>

<p>So what have we learned? Graph databases are great for storing interconn=
ected <a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-data=
base.html#fn34" class=3D"footnoteRef" id=3D"fnref34"><sup>34</sup></a> data=
 that you plan to query via graph traversals. Adding non-strict semantics a=
llows for a fluent interface over queries you could never express in an eag=
er system for performance reasons, and allows you to cross async boundaries=
. Time makes things complicated, and time from multiple perspectives (i.e.,=
 concurrency) makes things very complicated, so whenever we can avoid intro=
ducing a temporal dependency (e.g., state, observable effects, etc.) we mak=
e reasoning about our system easier. Building in a simple, decoupled and pa=
infully unoptimized style leaves the door open for global optimizations lat=
er on, and using a driver loop allows for orthogonal optimizations=E2=80=94=
each without introducing the brittleness and complexity that is the hallmar=
k of most optimization techniques.</p>

<p>That last point can't be overstated: keep it simple. Eschew optimization=
 in favor of simplicity. Work hard to achieve simplicity by finding the rig=
ht model. Explore many possibilities. The chapters in this book provide amp=
le evidence that highly non-trivial applications can have a small, tight ke=
rnel. Once you find that kernel for the application you are building, fight=
 to keep complexity from polluting it. Build hooks for attaching additional=
 functionality, and maintain your abstraction barriers at all costs. Using =
these techniques well is not easy, but they can give you leverage over othe=
rwise intractable problems.</p>

<h3 id=3D"acknowledgements">Acknowledgements</h3>

<p>Many thanks are due to Amy Brown, Michael DiBernardo, Colin Lupton, Scot=
t Rostrup, Michael Russo, Erin Toliver, and Leo Zovic for their invaluable =
contributions to this chapter.</p>

<div class=3D"footnotes">
<hr>
<ol>
<li id=3D"fn1"><p>One of the very first database designs was the hierarchic=
al model, which grouped items into tree-shaped hierarchies and is still use=
d as the basis of IBM's IMS product, a high-speed transaction processing sy=
stem. It's influence can also been seen in XML, file systems and geographic=
 information storage. The network model, invented by Charles Bachmann and s=
tandardized by CODASYL, generalized the hierarchical model by allowing mult=
iple parents, forming a DAG instead of a tree. These navigational database =
models came in to vogue in the 1960s and continued their dominance until pe=
rformance gains made relational databases usable in the 1980s.<a href=3D"ht=
tp://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fnref1">=
=E2=86=A9</a></p></li>
<li id=3D"fn2"><p>Edgar F. Codd developed relational database theory while =
working at IBM, but Big Blue feared that a relational database would cannib=
alize the sales of IMS. While IBM eventually built a research prototype cal=
led System R, it was based around a new non-relational language called SEQU=
EL, instead of Codd's original Alpha language. The SEQUEL language was copi=
ed by Larry Ellison in his Oracle Database based on pre-launch conference p=
apers, and the name changed to SQL to avoid trademark disputes.<a href=3D"h=
ttp://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fnref2">=
=E2=86=A9</a></p></li>
<li id=3D"fn3"><p>This database started life as a library for managing Dire=
cted Acyclic Graphs, or DAGs. Its name "Dagoba" was originally intended to =
come with a silent 'h' at the end, an homage to the swampy fictional planet=
, but reading the back of a chocolate bar one day we discovered the sans-h =
version refers to a place for silently contemplating the connections betwee=
n things, which seems even more fitting.<a href=3D"http://aosabook.org/en/5=
00L/dagoba-an-in-memory-graph-database.html#fnref3">=E2=86=A9</a></p></li>
<li id=3D"fn4"><p>The two purposes of this chapter are to teach this proces=
s, to build a graph database, and to have fun.<a href=3D"http://aosabook.or=
g/en/500L/dagoba-an-in-memory-graph-database.html#fnref4">=E2=86=A9</a></p>=
</li>
<li id=3D"fn5"><p>Notice that we're modeling edges as a pair of vertices. A=
lso notice that those pairs are ordered, because we're using arrays. That m=
eans we're modeling a <em>directed graph</em>, where every edge has a start=
ing vertex and an ending vertex. Our "dots and lines" visual model becomes =
a "dots and arrows" model. This adds complexity to our model, because we ha=
ve to keep track of the direction of edges, but it also allows us to ask mo=
re interesting questions, like "which vertices point to vertex 3?" or "whic=
h vertex has the most outgoing edges?" If we need to model an undirected gr=
aph we could add a reversed edge for each existing edge in our directed gra=
ph. It can be cumbersome to go the other direction: simulating a directed g=
raph from an undirected one. Can you think of a way to do it?<a href=3D"htt=
p://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fnref5">=
=E2=86=A9</a></p></li>
<li id=3D"fn6"><p>It's also lax in the other direction: all functions are v=
ariadic, and all arguments are available by position via the <code>argument=
s</code> object, which is almost like an array but not quite. ("Variadic" i=
s a fancy way of saying a function has indefinite arity. "A function has in=
definite arity" is a fancy way of saying it takes a variable number of vari=
ables.)<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-dat=
abase.html#fnref6">=E2=86=A9</a></p></li>
<li id=3D"fn7"><p>The <code>Array.isArray</code> checks here are to disting=
uish our two different use cases, but in general we won't be doing many of =
the validations one would expect of production code, in order to focus on t=
he architecture instead of the trash bins.<a href=3D"http://aosabook.org/en=
/500L/dagoba-an-in-memory-graph-database.html#fnref7">=E2=86=A9</a></p></li=
>
<li id=3D"fn8"><p>Why can't we just use <code>this.vertices.length</code> h=
ere?<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-databa=
se.html#fnref8">=E2=86=A9</a></p></li>
<li id=3D"fn9"><p>Often when faced with space leaks due to deep copying the=
 solution is to use a path-copying persistent data structure, which allows =
mutation-free changes for only <span class=3D"math"><span class=3D"MathJax_=
Preview" style=3D"color: inherit; display: none;"></span><span class=3D"Mat=
hJax" id=3D"MathJax-Element-5-Frame" tabindex=3D"0" data-mathml=3D"<math xm=
lns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>log</mi><mo>&amp;#=
x2061;</mo><mrow class=3D&quot;MJX-TeXAtom-ORD&quot;></mrow><mi>N</mi></mat=
h>" role=3D"presentation" style=3D"position: relative;"><nobr aria-hidden=
=3D"true"><span class=3D"math" id=3D"MathJax-Span-30" style=3D"width: 2.824=
em; display: inline-block;"><span style=3D"display: inline-block; position:=
 relative; width: 2.311em; height: 0px; font-size: 120%;"><span style=3D"po=
sition: absolute; clip: rect(1.285em 1002.31em 2.567em -999.997em); top: -2=
.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-31"><span class=
=3D"mi" id=3D"MathJax-Span-32" style=3D"font-family: MathJax_Main;">log</sp=
an><span class=3D"mo" id=3D"MathJax-Span-33"></span><span class=3D"texatom"=
 id=3D"MathJax-Span-34" style=3D"padding-left: 0.196em;"><span class=3D"mro=
w" id=3D"MathJax-Span-35"></span></span><span class=3D"mi" id=3D"MathJax-Sp=
an-36" style=3D"font-family: MathJax_Math-italic;">N<span style=3D"display:=
 inline-block; overflow: hidden; height: 1px; width: 0.067em;"></span></spa=
n></span><span style=3D"display: inline-block; width: 0px; height: 2.183em;=
"></span></span></span><span style=3D"display: inline-block; overflow: hidd=
en; vertical-align: -0.304em; border-left: 0px solid; width: 0px; height: 1=
.235em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"=
presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>log</m=
i><mo>=E2=81=A1</mo><mrow class=3D"MJX-TeXAtom-ORD"></mrow><mi>N</mi></math=
></span></span></span> extra space. But the problem remains: if the host ap=
plication retains a pointer to the vertex data then it can mutate that data=
 any time, regardless of what strictures we impose in our database. The onl=
y practical solution is deep copying vertices, which doubles our space usag=
e. Dagoba's original use case involves vertices that are treated as immutab=
le by the host application, which allows us to avoid this issue, but requir=
es a certain amount of discipline on the part of the user.<a href=3D"http:/=
/aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fnref9">=E2=
=86=A9</a></p></li>
<li id=3D"fn10"><p>We could make this decision based on a Dagoba-level conf=
iguration parameter, a graph-specific configuration, or possibly some type =
of heuristic.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-gra=
ph-database.html#fnref10">=E2=86=A9</a></p></li>
<li id=3D"fn11"><p>We use the term <em>list</em> to refer to the abstract d=
ata structure requiring push and iterate operations. We use JavaScript's "a=
rray" concrete data structure to fulfill the API required by the list abstr=
action. Technically both "list of edges" and "array of edges" are correct, =
so which we use at a given moment depends on context: if we are relying on =
the specific details of JavaScript arrays, like the <code>.length</code> pr=
operty, we will say "array of edges". Otherwise we say "list of edges", as =
an indication that any list implementation would suffice.<a href=3D"http://=
aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fnref11">=E2=
=86=A9</a></p></li>
<li id=3D"fn12"><p>A tuple is another abstract data structure=E2=80=94one t=
hat is more constrained than a list. In particular a tuple has a fixed size=
: in this case we're using a 2-tuple (also known as a "pair" in the technic=
al jargon of data structure researchers). Using the term for the most const=
rained abstract data structure required is a nicety for future implementors=
.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.=
html#fnref12">=E2=86=A9</a></p></li>
<li id=3D"fn13"><p>Very short lived garbage though, which is the second bes=
t kind.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-dat=
abase.html#fnref13">=E2=86=A9</a></p></li>
<li id=3D"fn14"><p>Two references to the same mutable data structure act li=
ke a pair of walkie-talkies, allowing whoever holds them to communicate dir=
ectly. Those walkie-talkies can be passed around from function to function,=
 and cloned to create a whole lot of walkie-talkies. This completely subver=
ts the natural communication channels your code already possesses. In a sys=
tem with no concurrency you can sometimes get away with it, but introduce m=
ultithreading or asynchronous behavior and all that walkie-talkie squawking=
 can become a real drag.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in=
-memory-graph-database.html#fnref14">=E2=86=A9</a></p></li>
<li id=3D"fn15"><p>Uniqueness types were dusted off in the Clean language, =
and have a non-linear relationship with linear types, which are themselves =
a subtype of substructural types.<a href=3D"http://aosabook.org/en/500L/dag=
oba-an-in-memory-graph-database.html#fnref15">=E2=86=A9</a></p></li>
<li id=3D"fn16"><p>Most modern JS runtimes employ generational garbage coll=
ectors, and the language is intentionally kept at arm's length from the eng=
ine's memory management to curtail a source of programmatic non-determinism=
.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.=
html#fnref16">=E2=86=A9</a></p></li>
<li id=3D"fn17"><p>The <code>run()</code> at the end of the query invokes t=
he interpreter and returns results.<a href=3D"http://aosabook.org/en/500L/d=
agoba-an-in-memory-graph-database.html#fnref17">=E2=86=A9</a></p></li>
<li id=3D"fn18"><p>With weight in skippund and height in fathoms, naturally=
. Depending on the density of Asgardian flesh this may return many results,=
 or none at all. (Or just Volstagg, if we're allowing Shakespeare by way of=
 Jack Kirby into our pantheon.)<a href=3D"http://aosabook.org/en/500L/dagob=
a-an-in-memory-graph-database.html#fnref18">=E2=86=A9</a></p></li>
<li id=3D"fn19"><p>Some would argue it's best to be explicit all the time. =
Others would argue that a good system for implicits makes for more concise,=
 readable code, with less boilerplate and a smaller surface area for bugs. =
One thing we can all agree on is that making effective use of JavaScript's =
implicit coercion requires memorizing a lot of non-intuitive special cases,=
 making it a minefield for the uninitiated.<a href=3D"http://aosabook.org/e=
n/500L/dagoba-an-in-memory-graph-database.html#fnref19">=E2=86=A9</a></p></=
li>
<li id=3D"fn20"><p>What would you expect each of those to return? What do t=
hey actually return?<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-mem=
ory-graph-database.html#fnref20">=E2=86=A9</a></p></li>
<li id=3D"fn21"><p>There are certain conditions under which this particular=
 query might yield unexpected results. Can you think of any? How could you =
modify it to handle those cases?<a href=3D"http://aosabook.org/en/500L/dago=
ba-an-in-memory-graph-database.html#fnref21">=E2=86=A9</a></p></li>
<li id=3D"fn22"><p>Technically we need to implement an interpreter with non=
-strict semantics, which means it will only evaluate when forced to do so. =
Lazy evaluation is a technique used for implementing non-strictness. It's a=
 bit lazy of us to conflate the two, so we will only disambiguate when forc=
ed to do so.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-grap=
h-database.html#fnref22">=E2=86=A9</a></p></li>
<li id=3D"fn23"><p>Method chaining lets us write <code>g.v('Thor').in().out=
().run()</code> instead of the six lines of non-fluent JS required to accom=
plish the same thing.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-me=
mory-graph-database.html#fnref23">=E2=86=A9</a></p></li>
<li id=3D"fn24"><p>We call it <code>maybe_gremlin</code> to remind ourselve=
s that it could be a gremlin, or it could be something else. Also because o=
riginally it was either a gremlin or Nothing.<a href=3D"http://aosabook.org=
/en/500L/dagoba-an-in-memory-graph-database.html#fnref24">=E2=86=A9</a></p>=
</li>
<li id=3D"fn25"><p>Recall that done starts at -1, so the first step's prede=
cessor is always done.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-m=
emory-graph-database.html#fnref25">=E2=86=A9</a></p></li>
<li id=3D"fn26"><p>Or, more pointedly, a poorly phrased query is less likel=
y to yield exponential slowdowns. As an end-user of an RDBMS the aesthetics=
 of query quality can often be quite opaque.<a href=3D"http://aosabook.org/=
en/500L/dagoba-an-in-memory-graph-database.html#fnref26">=E2=86=A9</a></p><=
/li>
<li id=3D"fn27"><p>Note that we're keeping the domain of the priority param=
eter open, so it can be an integer, a rational, a negative number, or even =
things like Infinity or NaN.<a href=3D"http://aosabook.org/en/500L/dagoba-a=
n-in-memory-graph-database.html#fnref27">=E2=86=A9</a></p></li>
<li id=3D"fn28"><p>You can learn more about dependency resolution in the Co=
ntingent chapter of this book.<a href=3D"http://aosabook.org/en/500L/dagoba=
-an-in-memory-graph-database.html#fnref28">=E2=86=A9</a></p></li>
<li id=3D"fn29"><p>The fancy term for this is "index-free adjacency".<a hre=
f=3D"http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fn=
ref29">=E2=86=A9</a></p></li>
<li id=3D"fn30"><p>Though only in operation for 18 months due to the arriva=
l of the transcontinental telegraph and the outbreak of the American Civil =
War, the Pony Express is still remembered today for delivering mail coast t=
o coast in just ten days.<a href=3D"http://aosabook.org/en/500L/dagoba-an-i=
n-memory-graph-database.html#fnref30">=E2=86=A9</a></p></li>
<li id=3D"fn31"><p>Sharding a graph database requires partitioning the grap=
h. <a href=3D"http://dl.acm.org/citation.cfm?doid=3D1007912.1007931">Optima=
l graph partitioning is NP-hard</a>, even for simple graphs like trees and =
grids, and good approximations also have exponential <a href=3D"http://arxi=
v.org/pdf/1311.3144v2.pdf">asymptotic complexity</a>.<a href=3D"http://aosa=
book.org/en/500L/dagoba-an-in-memory-graph-database.html#fnref31">=E2=86=A9=
</a></p></li>
<li id=3D"fn32"><p>In modern JavaScript engines filtering a list is quite f=
ast=E2=80=94for small graphs the naive version can actually be faster than =
the index-free version due to the underlying data structures and the way th=
e code is JIT compiled. Try it with different sizes of graphs to see how th=
e two approaches scale.<a href=3D"http://aosabook.org/en/500L/dagoba-an-in-=
memory-graph-database.html#fnref32">=E2=86=A9</a></p></li>
<li id=3D"fn33"><p>Pro tip: Given a deep tree <code>deep_tree</code>, runni=
ng <code>JSON.stringify(deep_tree, 0, 2)</code> in the JS console is a quic=
k way to make it human readable.<a href=3D"http://aosabook.org/en/500L/dago=
ba-an-in-memory-graph-database.html#fnref33">=E2=86=A9</a></p></li>
<li id=3D"fn34"><p>Not <em>too</em> interconnected, though=E2=80=94you'd li=
ke the number of edges to grow in direct proportion to the number of vertic=
es. In other words, the average number of edges connected to a vertex shoul=
dn't vary with the size of the graph. Most systems we'd consider putting in=
 a graph database already have this property: if Loki had 100,000 additiona=
l grandchildren the degree of the Thor vertex wouldn't increase.<a href=3D"=
http://aosabook.org/en/500L/dagoba-an-in-memory-graph-database.html#fnref34=
">=E2=86=A9</a></p></li>
</ol>
</div>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div style=3D"position: absolute; =
width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margi=
n: 0px;"><div id=3D"MathJax_Font_Test" style=3D"position: absolute; visibil=
ity: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; m=
argin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-t=
ransform: none; line-height: normal; letter-spacing: normal; word-spacing: =
normal; font-size: 40px; font-weight: normal; font-style: normal; font-fami=
ly: MathJax_Main, sans-serif;"></div></div><div id=3D"qb-sougou-search" sty=
le=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D"last=
-btn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-90-1dda6a6d-6426-4298-=
9818-b5700efbd0f7@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?V=2.7.1

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
AMbULpkAAAAAxvkyTwAAAADR7uVs
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?V=2.7.1

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
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?V=2.7.1

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
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC----
Content-Type: text/html
Content-ID: <frame-90-1dda6a6d-6426-4298-9818-b5700efbd0f7@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--u5sVH7zzOj1kIBT6LKAhAIpBKnS0eYIZjaWTr0l3EC------
