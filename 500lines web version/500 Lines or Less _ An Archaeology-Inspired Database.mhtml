From: <Saved by Blink>
Subject: 500 Lines or Less | An Archaeology-Inspired Database
Date: Tue, 11 Feb 2019 01:53:45 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----"

------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: text/html
Content-ID: <frame-60-60896dfc-c454-40d0-99fb-e8a1de71ec70@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/an-archaeology-inspired-database.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | An Archaeology-Inspired Database</title>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style><style type=3D"text/css">.MathJax_Display {text-align: center; marg=
in: 1em 0em; position: relative; display: block!important; text-indent: 0; =
max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%=
}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px so=
lid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border=
: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px=
 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: =
2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(O=
ffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true'); padding: 3px 4px; z-=
index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto;=
 display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-he=
ight: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text=
-align: left; text-transform: none; letter-spacing: normal; word-spacing: n=
ormal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr;=
 max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0;=
 padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax.MathJax_FullWidth {text-align: center; display: table-cell!importa=
nt; width: 10000em!important}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; =
max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-al=
ign: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!imp=
ortant; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; ma=
rgin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: no=
ne; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height:=
 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; hei=
ght: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width:=
 1px; height: 60em; min-height: 0; max-height: none}
.MathJax_LineBox {display: table!important}
.MathJax_LineBox span {display: table-cell!important; width: 10000em!import=
ant; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filt=
er: alpha(opacity=3D0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transpare=
nt}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Main; src: url('https://cdnjs.cloudflare.c=
om/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.wof=
f?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/m=
athjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?V=3D2.7.1') fo=
rmat('opentype')}
@font-face {font-family: MathJax_Main-bold; src: url('https://cdnjs.cloudfl=
are.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?V=3D2.7.1') for=
mat('opentype')}
@font-face {font-family: MathJax_Main-italic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Ital=
ic.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/=
libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?V=3D2.7.1=
') format('opentype')}
@font-face {font-family: MathJax_Math-italic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Ital=
ic.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/=
libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?V=3D2.7.1=
') format('opentype')}
@font-face {font-family: MathJax_Caligraphic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Caligraph=
ic-Regular.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.c=
om/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regul=
ar.otf?V=3D2.7.1') format('opentype')}
@font-face {font-family: MathJax_Size1; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size2; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size3; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size4; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?V=3D2.7.1')=
 format('opentype')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; colo=
r: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div style=3D"visibility: hidden; overflow: hidden; position: absol=
ute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin:=
 0px; text-align: left; text-indent: 0px; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal;"><div id=3D"MathJax=
_Hidden"></div></div><div id=3D"MathJax_Message" style=3D"display: none;"><=
/div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>An Archaeology-Inspired Database</h1>
          <h2 class=3D"author">Yoav Rubin</h2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em>Yoav Rubin is a Senior Software Engineer at Microsoft, and=
 prior to that was a Research Staff Member and a Master Inventor at IBM Res=
earch. He works now in the domain of data security in the cloud, and in the=
 past his work focused on developing cloud or web based development environ=
ments. Yoav holds an M.Sc. in Medical Research in the field of Neuroscience=
 and B.Sc in Information Systems Engineering. He goes by <a href=3D"https:/=
/twitter.com/yoavrubin">@yoavrubin</a> on Twitter, and occasionally blogs a=
t <a href=3D"http://yoavrubin.blogspot.com/">http://yoavrubin.blogspot.com<=
/a>.</em></p>

<h2 id=3D"introduction">Introduction</h2>

<p>Software development is often viewed as a rigorous process, where the in=
puts are requirements and the output is the working product. However, softw=
are developers are people, with their own perspectives and biases which col=
or the outcome of their work.</p>

<p>In this chapter, we will explore how a change in a common perspective af=
fects the design and implementation of a well-studied type of software: a d=
atabase.</p>

<p>Database systems are designed to store and query data. This is something=
 that all information workers do; however, the systems themselves were desi=
gned by computer scientists. As a result, modern database systems are highl=
y influenced by computer scientists=E2=80=99 definition of what data is, an=
d what can be done with it.</p>

<p>For example, most modern databases implement updates by overwriting old =
data in-place instead of appending the new data and keeping the old. This m=
echanism, nicknamed "place-oriented programming" by <a href=3D"http://www.i=
nfoq.com/presentations/Value-Values">Rich Hickey</a>, saves storage space b=
ut makes it impossible to retrieve the entire history of a particular recor=
d. This design decision reflects the computer scientist=E2=80=99s perspecti=
ve that "history" is less important than the price of its storage.</p>

<p>If you were to instead ask an archaeologist where the old data can be fo=
und, the answer would be "hopefully, it's just buried underneath".</p>

<p>(Disclaimer: My understanding of the views of a typical archaeologist is=
 based on visiting a few museums, reading several Wikipedia articles, and w=
atching the entire Indiana Jones series.)</p>

<h3 id=3D"designing-a-database-like-an-archaeologist">Designing a Database =
Like an Archaeologist</h3>

<p>If we were to ask our friendly archaeologist to design a database, we mi=
ght expect the requirements to reflect what would be found at an excavation=
 site:</p>

<ul>
<li>All data is found and catalogued at the site.</li>
<li>Digging deeper will expose the state of things in times past.</li>
<li>Artifacts found at the same layer are from the same period.</li>
<li>Each artifact will consist of state that it accumulated in different pe=
riods.</li>
</ul>

<p>For example, a wall may have Roman symbols on it on one layer, and in a =
lower layer there may be Greek symbols. Both these observations are recorde=
d as part of the wall's state.</p>

<p>This analogy is visualized in <a href=3D"http://aosabook.org/en/500L/an-=
archaeology-inspired-database.html#figure-10.1">Figure 10.1</a>:</p>

<ul>
<li>The entire circle is the excavation site.</li>
<li>Each ring is a <em>layer</em> (here numbered from 0 to 4).</li>
<li>Each slice is a labeled artifact (=E2=80=98A=E2=80=99 through =E2=80=98=
E=E2=80=99).</li>
<li>Each artifact has a =E2=80=98symbol=E2=80=99 attribute (where a blank m=
eans that no update was made).</li>
<li>Solid arrows denote a change in symbol between layers</li>
<li>Dotted arrows are arbitrary relationships of interest between artifacts=
 (e.g., from =E2=80=98E=E2=80=99 to =E2=80=98A=E2=80=99).</li>
</ul>

<div class=3D"center figure">
<a name=3D"figure-10.1"></a><img src=3D"http://aosabook.org/en/500L/functio=
nalDB-images/image_0.png" alt=3D"Figure 10.1 - The Excavation Site" title=
=3D"Figure 10.1 - The Excavation Site">
</div>

<p class=3D"center figcaption">
<small>Figure 10.1 - The Excavation Site</small>
</p>

<p>If we translate the archaeologist's language into terms a database desig=
ner would use:</p>

<ul>
<li>The excavation site is a <em>database</em>.</li>
<li>Each artifact is an <em>entity</em> with a corresponding <em>ID</em>.</=
li>
<li>Each entity has a set of <em>attributes</em>, which may change over tim=
e.</li>
<li>Each attribute has a specific <em>value</em> at a specific time.</li>
</ul>

<p>This may look very different from the kinds of databases you are used to=
 working with. This design is sometimes referred to as "functional database=
", since it uses ideas from the domain of functional programming. The rest =
of the chapter describes how to implement such a database.</p>

<p>Since we are building a functional database, we will be using a function=
al programming language called Clojure.</p>

<p>Clojure has several qualities that make it a good implementation languag=
e for a functional database, such as out-of-the-box immutability, higher or=
der functions, and metaprogramming facilities. But ultimately, the reason C=
lojure was chosen was its emphasis on clean, rigorous design, which few pro=
gramming languages possess.</p>

<h2 id=3D"laying-the-foundation">Laying the Foundation</h2>

<p>Let=E2=80=99s start by declaring the core constructs that make up our da=
tabase.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defrecord</span><span class=3D"fu"> Database </span>[layers t=
op-id curr-time])</code></pre>

<p>A database consists of:</p>

<ol style=3D"list-style-type: decimal">
<li>Layers of entities, each with its own unique timestamp (the rings in Fi=
gure 1).</li>
<li>A top-id value which is the next available unique ID.</li>
<li>The time at which the database was last updated.</li>
</ol>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defrecord</span><span class=3D"fu"> Layer </span>[storage VAE=
T AVET VEAT EAVT])</code></pre>

<p>Each layer consists of:</p>

<ol style=3D"list-style-type: decimal">
<li>A data store for entities.</li>
<li>Indexes that are used to speed up queries to the database. (These index=
es and the meaning of their names will be explained later.)</li>
</ol>

<p>In our design, a single conceptual =E2=80=98database=E2=80=99 may consis=
t of many <code>Database</code> instances, each of which represents a snaps=
hot of the database at <code>curr-time</code>. A <code>Layer</code> may sha=
re the exact same entity with another <code>Layer</code> if the entity=E2=
=80=99s state hasn=E2=80=99t changed between the times that they represent.=
</p>

<h3 id=3D"entities">Entities</h3>

<p>Our database wouldn't be of any use without entities to store, so we def=
ine those next. As discussed before, an entity has an ID and a list of attr=
ibutes; we create them using the <code>make-entity</code> function.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defrecord</span><span class=3D"fu"> Entity </span>[id <span c=
lass=3D"kw">attrs</span>])

(<span class=3D"kw">defn</span><span class=3D"fu"> make-entity</span>
   ([] (make-entity <span class=3D"kw">:db</span>/no-id-yet))
   ([id] (Entity.  id {})))</code></pre>

<p>Note that if no ID is given, the entity=E2=80=99s ID is set to be <code>=
:db/no-id-yet</code>, which means that something else is responsible for gi=
ving it an ID. We=E2=80=99ll see how that works later.</p>

<h4 id=3D"attributes">Attributes</h4>

<p>Each attribute consists of its name, value, and the timestamps of its mo=
st recent update as well as the one before that. Each attribute also has tw=
o fields that describe its <code>type</code> and <code>cardinality</code>.<=
/p>

<p>In the case that an attribute is used to represent a relationship to ano=
ther entity, its <code>type</code> will be <code>:db/ref</code> and its val=
ue will be the ID of the related entity. This simple type system also acts =
as an extension point. Users are free to define their own types and leverag=
e them to provide additional semantics for their data.</p>

<p>An attribute's <code>cardinality</code> specifies whether the attribute =
represents a single value or a set of values. We use this field to determin=
e the set of operations that are permitted on this attribute.</p>

<p>Creating an attribute is done using the <code>make-attr</code> function.=
</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defrecord</span><span class=3D"fu"> Attr </span>[<span class=
=3D"kw">name</span> value ts prev-ts])

(<span class=3D"kw">defn</span><span class=3D"fu"> make-attr</span>
   ([<span class=3D"kw">name</span> value <span class=3D"kw">type</span> <s=
pan class=3D"co">; these ones are required</span>
       &amp; {<span class=3D"kw">:keys</span> [cardinality] <span class=3D"=
kw">:or</span> {cardinality <span class=3D"kw">:db</span>/single}} ]
     {<span class=3D"kw">:pre</span> [(<span class=3D"kw">contains?</span> =
#{<span class=3D"kw">:db</span>/single <span class=3D"kw">:db</span>/multip=
le} cardinality)]}
    (<span class=3D"kw">with-meta</span> (Attr. <span class=3D"kw">name</sp=
an> value -<span class=3D"dv">1</span> -<span class=3D"dv">1</span>) {<span=
 class=3D"kw">:type</span> <span class=3D"kw">type</span> <span class=3D"kw=
">:cardinality</span> cardinality})))</code></pre>

<p>There are a couple of interesting patterns used in this constructor func=
tion:</p>

<ul>
<li>We use Clojure=E2=80=99s <em>Design by Contract</em> pattern to validat=
e that the cardinality parameter is a permissible value.</li>
<li>We use Clojure=E2=80=99s destructuring mechanism to provide a default v=
alue of <code>:db/single</code> if one is not given.</li>
<li>We use Clojure=E2=80=99s metadata capabilities to distinguish between a=
n attribute's data (name, value and timestamps) and its metadata (type and =
cardinality). In Clojure, metadata handling is done using the functions <co=
de>with-meta</code> (to set) and <code>meta</code> (to read).</li>
</ul>

<p>Attributes only have meaning if they are part of an entity. We make this=
 connection with the <code>add-attr</code> function, which adds a given att=
ribute to an entity's attribute map (called <code>:attrs</code>).</p>

<p>Note that instead of using the attribute=E2=80=99s name directly, we fir=
st convert it into a keyword to adhere to Clojure=E2=80=99s idiomatic usage=
 of maps.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> add-attr </span>[ent attr]
   (<span class=3D"kw">let</span> [attr-id (<span class=3D"kw">keyword</spa=
n> (<span class=3D"kw">:name</span> attr))]
      (<span class=3D"kw">assoc-in</span> ent [<span class=3D"kw">:attrs</s=
pan> attr-id] attr)))</code></pre>

<h3 id=3D"storage">Storage</h3>

<p>So far we have talked a lot about <em>what</em> we are going to store, w=
ithout thinking about <em>where</em> we are going to store it. In this chap=
ter, we resort to the simplest storage mechanism: storing the data in memor=
y. This is certainly not reliable, but it simplifies development and debugg=
ing and allows us to focus on more interesting parts of the program.</p>

<p>We will access the storage via a simple <em>protocol</em>, which will ma=
ke it possible to define additional storage providers for a database owner =
to select from.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defprotocol</span><span class=3D"fu"> Storage</span>
   (get-entity [storage e-id] )
   (write-entity [storage entity])
   (drop-entity [storage entity]))</code></pre>

<p>And here's our in-memory implementation of the protocol, which uses a ma=
p as the store:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defrecord</span><span class=3D"fu"> InMemory </span>[] Storag=
e
   (get-entity [storage e-id] (e-id storage))
   (write-entity [storage entity] (<span class=3D"kw">assoc</span> storage =
(<span class=3D"kw">:id</span> entity) entity))
   (drop-entity [storage entity] (<span class=3D"kw">dissoc</span> storage =
(<span class=3D"kw">:id</span> entity))))</code></pre>

<h3 id=3D"indexing-the-data">Indexing the Data</h3>

<p>Now that we've defined the basic elements of our database, we can start =
thinking about how we're going to query it. By virtue of how we've structur=
ed our data, any query is necessarily going to be interested in at least on=
e of an entity's ID, and the name and value of some of its attributes. This=
 triplet of <code>(entity-id, attribute-name, attribute-value)</code> is im=
portant enough to our query process that we give it an explicit name: a <em=
>datom</em>.</p>

<p>Datoms are important because they represent facts, and our database accu=
mulates facts.</p>

<p>If you've used a database system before, you are probably already famili=
ar with the concept of an <em>index</em>, which is a supporting data struct=
ure that consumes extra space in order to decrease the average query time. =
In our database, an index is a three-leveled structure which stores the com=
ponents of a datom in a specific order. Each index derives its name from th=
e order it stores the datom's components in.</p>

<p>For example, let=E2=80=99s look at at the index sketched in <a href=3D"h=
ttp://aosabook.org/en/500L/an-archaeology-inspired-database.html#figure-10.=
2">Figure 10.2</a>:</p>

<ul>
<li>The first level stores entity-IDs</li>
<li>The second level stores the related attribute-names</li>
<li>The third level stores the related value</li>
</ul>

<p>This index is named EAVT, as the top level map holds Entity IDs, the sec=
ond level holds Attribute names, and the leaves hold Values. The "T" comes =
from the fact that each layer in the database has its own indexes, hence th=
e index itself is relevant for a specific Time.</p>

<div class=3D"center figure">
<a name=3D"figure-10.2"></a><img src=3D"http://aosabook.org/en/500L/functio=
nalDB-images/image_1.png" alt=3D"Figure 10.2 - EAVT" title=3D"Figure 10.2 -=
 EAVT">
</div>

<p class=3D"center figcaption">
<small>Figure 10.2 - EAVT</small>
</p>

<p><a href=3D"http://aosabook.org/en/500L/an-archaeology-inspired-database.=
html#figure-10.3">Figure 10.3</a> shows an index that would be called AVET =
since:</p>

<ul>
<li>The first level map holds attribute-name.</li>
<li>The second level map holds the values (of the attributes).</li>
<li>The third level set holds the entity-IDs (of the entities whose attribu=
te is at the first level).</li>
</ul>

<div class=3D"center figure">
<a name=3D"figure-10.3"></a><img src=3D"http://aosabook.org/en/500L/functio=
nalDB-images/image_2.png" alt=3D"Figure 10.3 - AVET" title=3D"Figure 10.3 -=
 AVET">
</div>

<p class=3D"center figcaption">
<small>Figure 10.3 - AVET</small>
</p>

<p>Our indexes are implemented as a map of maps, where the keys of the root=
 map act as the first level, each such key points to a map whose keys act a=
s the index=E2=80=99s second-level and the values are the index=E2=80=99s t=
hird level. Each element in the third level is a set, holding the leaves of=
 the index.</p>

<p>Each index stores the components of a datom as some permutation of its c=
anonical 'EAV' ordering (entity_id, attribute-name, attribute-value). Howev=
er, when we are working with datoms <em>outside</em> of the index, we expec=
t them to be in canonical format. We thus provide each index with functions=
 <code>from-eav</code> and <code>to-eav</code> to convert to and from these=
 orderings.</p>

<p>In most database systems, indexes are an optional component; for example=
, in an RDBMS (Relational Database Management System) like PostgreSQL or My=
SQL, you will choose to add indexes only to certain columns in a table. We =
provide each index with a <code>usage-pred</code> function that determines =
for an attribute whether it should be included in this index or not.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> make-index </span>[from-eav to=
-eav usage-pred]
    (<span class=3D"kw">with-meta</span> {} {<span class=3D"kw">:from-eav</=
span> from-eav <span class=3D"kw">:to-eav</span> to-eav <span class=3D"kw">=
:usage-pred</span> usage-pred}))

 (<span class=3D"kw">defn</span><span class=3D"fu"> from-eav </span>[<span =
class=3D"kw">index</span>] (<span class=3D"kw">:from-eav</span> (<span clas=
s=3D"kw">meta</span> <span class=3D"kw">index</span>)))
 (<span class=3D"kw">defn</span><span class=3D"fu"> to-eav </span>[<span cl=
ass=3D"kw">index</span>] (<span class=3D"kw">:to-eav</span> (<span class=3D=
"kw">meta</span> <span class=3D"kw">index</span>)))
 (<span class=3D"kw">defn</span><span class=3D"fu"> usage-pred </span>[<spa=
n class=3D"kw">index</span>] (<span class=3D"kw">:usage-pred</span> (<span =
class=3D"kw">meta</span> <span class=3D"kw">index</span>)))</code></pre>

<p>In our database there are four indexes: EAVT (see <a href=3D"http://aosa=
book.org/en/500L/an-archaeology-inspired-database.html#figure-10.2">Figure =
10.2</a>), AVET (see <a href=3D"http://aosabook.org/en/500L/an-archaeology-=
inspired-database.html#figure-10.3">Figure 10.3</a>), VEAT and VAET. We can=
 access these as a vector of values returned from the <code>indexes</code> =
function.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> indexes</span>[] [<span class=
=3D"kw">:VAET</span> <span class=3D"kw">:AVET</span> <span class=3D"kw">:VE=
AT</span> <span class=3D"kw">:EAVT</span>])</code></pre>

<p>To demonstrate how all of this comes together, the result of indexing th=
e following five entities is visualized in Table 10.1.</p>

<ol style=3D"list-style-type: decimal">
<li>Julius Caesar (also known as JC) lives in Rome</li>
<li>Brutus (also known as B) lives in Rome</li>
<li>Cleopatra (also known as Cleo) lives in Egypt</li>
<li>Rome=E2=80=99s river is the Tiber</li>
<li>Egypt=E2=80=99s river is the Nile</li>
</ol>

<table>
  <tbody><tr>
    <td>
EAVT index
</td>
    <td>
AVET index
</td>
  </tr>
  <tr>
    <td><ul>
<li>
<span style=3D"background-color:lightblue">JC</span> =E2=87=92 {<span style=
=3D"background-color:lightgreen">lives-in</span> =E2=87=92 {<span style=3D"=
background-color:pink">Rome</span>}}
</li>
<li>
<span style=3D"background-color:lightblue">B</span> =E2=87=92 {<span style=
=3D"background-color:lightgreen">lives-in</span> =E2=87=92 {<span style=3D"=
background-color:pink">Rome</span>}}
</li>
<li>
<span style=3D"background-color:lightblue">Cleo</span> =E2=87=92 {<span sty=
le=3D"background-color:lightgreen">lives-in</span> =E2=87=92 {<span style=
=3D"background-color:pink">Egypt</span>}}
</li>
<li>
<span style=3D"background-color:lightblue">Rome</span> =E2=87=92 {<span sty=
le=3D"background-color:lightgreen">river</span> =E2=87=92 {<span style=3D"b=
ackground-color:pink">Tiber</span>}}
</li>
<li>
<span style=3D"background-color:lightblue">Egypt</span> =E2=87=92 {<span st=
yle=3D"background-color:lightgreen">river</span> =E2=87=92 {<span style=3D"=
background-color:pink">Nile</span>}}
</li>
</ul></td>
<td><ul>
<li>
<span style=3D"background-color:lightgreen">lives-in</span> =E2=87=92 {<spa=
n style=3D"background-color:pink">Rome</span> =E2=87=92 {<span style=3D"bac=
kground-color:lightblue">JC, B</span>}}<br> {<span style=3D"background-colo=
r:pink">Egypt</span> =E2=87=92 {<span style=3D"background-color:lightblue">=
Cleo</span>}}
</li>
<li>
<span style=3D"background-color:lightgreen">river</span> =E2=87=92 {<span s=
tyle=3D"background-color:pink">Rome</span> =E2=87=92 {<span style=3D"backgr=
ound-color:lightblue">Tiber</span>}}<br> {<span style=3D"background-color:p=
ink">Egypt</span> =E2=87=92 {<span style=3D"background-color:lightblue">Nil=
e</span>}}
</li>
</ul></td>
  </tr>
  <tr>
    <td>
VEAT index
</td>
    <td>
VAET index
</td>
  </tr>
  <tr>
    <td><ul>
<li>
<span style=3D"background-color:pink">Rome</span> =E2=87=92 {<span style=3D=
"background-color:lightblue">JC</span> =E2=87=92 {<span style=3D"background=
-color:lightgreen">lives-in</span>}}<br> {<span style=3D"background-color:l=
ightblue">B</span> =E2=87=92 {<span style=3D"background-color:lightgreen">l=
ives-in</span>}}
</li>
<li>
<span style=3D"background-color:pink">Egypt</span> =E2=87=92 {<span style=
=3D"background-color:lightblue">Cleo</span> =E2=87=92 {<span style=3D"backg=
round-color:lightgreen">lives-in</span>}}
</li>
<li>
<span style=3D"background-color:pink">Tiber</span> =E2=87=92 {<span style=
=3D"background-color:lightblue">Rome</span> =E2=87=92 {<span style=3D"backg=
round-color:lightgreen">river</span>}}
</li>
<li>
<span style=3D"background-color:pink">Nile</span> =E2=87=92 {<span style=3D=
"background-color:lightblue">Egypt</span> =E2=87=92 {<span style=3D"backgro=
und-color:lightgreen">river</span>}}
</li></ul></td>
<td><ul>
<li>
<span style=3D"background-color:pink">Rome</span> =E2=87=92 {<span style=3D=
"background-color:lightgreen">lives-in</span> =E2=87=92 {<span style=3D"bac=
kground-color:lightblue">JC, B</span>}}
</li>
<li>
<span style=3D"background-color:pink">Egypt</span> =E2=87=92 {<span style=
=3D"background-color:lightgreen">lives-in</span> =E2=87=92 {<span style=3D"=
background-color:lightblue">Cleo</span>}}
</li>
<li>
<span style=3D"background-color:pink">Tiber</span> =E2=87=92 {<span style=
=3D"background-color:lightgreen">river</span> =E2=87=92 {<span style=3D"bac=
kground-color:lightblue">Rome</span>}}
</li>
<li>
<span style=3D"background-color:pink">Nile</span> =E2=87=92 {<span style=3D=
"background-color:lightgreen">river</span> =E2=87=92 {<span style=3D"backgr=
ound-color:lightblue">Egypt</span>}}
</li></ul></td>
  </tr>
</tbody></table>

<p>: <b>Table 10.1</b> - Indexes</p>

<p></p>

<h3 id=3D"database">Database</h3>

<p>We now have all the components we need to construct our database. Initia=
lizing our database means:</p>

<ul>
<li>creating an initial empty layer with no data</li>
<li>creating a set of empty indexes</li>
<li>setting its <code>top-id</code> and <code>curr-time</code> to be 0</li>
</ul>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> ref</span>? [attr] (<span clas=
s=3D"kw">=3D</span> <span class=3D"kw">:db</span>/ref (<span class=3D"kw">:=
type</span> (<span class=3D"kw">meta</span> attr))))

(<span class=3D"kw">defn</span><span class=3D"fu"> always</span>[&amp; more=
] true)

(<span class=3D"kw">defn</span><span class=3D"fu"> make-db </span>[]
   (<span class=3D"kw">atom</span>=20
       (Database. [(Layer.
                   (fdb.storage.InMemory.) <span class=3D"co">; storage</sp=
an>
                   (make-index #(<span class=3D"kw">vector</span> %<span cl=
ass=3D"dv">3</span> %<span class=3D"dv">2</span> %<span class=3D"dv">1</spa=
n>) #(<span class=3D"kw">vector</span> %<span class=3D"dv">3</span> %<span =
class=3D"dv">2</span> %<span class=3D"dv">1</span>) #(ref? %))<span class=
=3D"co">;VAET                     </span>
                   (make-index #(<span class=3D"kw">vector</span> %<span cl=
ass=3D"dv">2</span> %<span class=3D"dv">3</span> %<span class=3D"dv">1</spa=
n>) #(<span class=3D"kw">vector</span> %<span class=3D"dv">3</span> %<span =
class=3D"dv">1</span> %<span class=3D"dv">2</span>) always)<span class=3D"c=
o">;AVET                        </span>
                   (make-index #(<span class=3D"kw">vector</span> %<span cl=
ass=3D"dv">3</span> %<span class=3D"dv">1</span> %<span class=3D"dv">2</spa=
n>) #(<span class=3D"kw">vector</span> %<span class=3D"dv">2</span> %<span =
class=3D"dv">3</span> %<span class=3D"dv">1</span>) always)<span class=3D"c=
o">;VEAT                       </span>
                   (make-index #(<span class=3D"kw">vector</span> %<span cl=
ass=3D"dv">1</span> %<span class=3D"dv">2</span> %<span class=3D"dv">3</spa=
n>) #(<span class=3D"kw">vector</span> %<span class=3D"dv">1</span> %<span =
class=3D"dv">2</span> %<span class=3D"dv">3</span>) always)<span class=3D"c=
o">;EAVT</span>
                  )] <span class=3D"dv">0</span> <span class=3D"dv">0</span=
>)))</code></pre>

<p>There is one snag, though: all collections in Clojure are immutable. Sin=
ce write operations are pretty critical in a database, we define our struct=
ure to be an <em>Atom</em>, which is a Clojure reference type that provides=
 the capability of atomic writes.</p>

<p>You may be wondering why we use the <code>always</code> function for the=
 AVET, VEAT and EAVT indexes, and the <code>ref?</code> predicate for the V=
AET index. This is because these indexes are used in different scenarios, w=
hich we=E2=80=99ll see later when we explore queries in depth.</p>

<h3 id=3D"basic-accessors">Basic Accessors</h3>

<p>Before we can build complex querying facilities for our database, we nee=
d to provide a lower-level API that different parts of the system can use t=
o retrieve the components we've built by their associated identifiers from =
any point in time. Consumers of the database can also use this API; however=
, it is more likely that they will be using the more fully-featured compone=
nts built on top of it.</p>

<p>This lower-level API is composed of the following four accessor function=
s:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> entity-at</span>
   ([db ent-id] (entity-at db (<span class=3D"kw">:curr-time</span> db) ent=
-id))
   ([db ts ent-id] (get-entity (<span class=3D"kw">get-in</span> db [<span =
class=3D"kw">:layers</span> ts <span class=3D"kw">:storage</span>]) ent-id)=
))

(<span class=3D"kw">defn</span><span class=3D"fu"> attr-at</span>
   ([db ent-id attr-name] (attr-at db ent-id attr-name (<span class=3D"kw">=
:curr-time</span> db)))
   ([db ent-id attr-name ts] (<span class=3D"kw">get-in</span> (entity-at d=
b ts ent-id) [<span class=3D"kw">:attrs</span> attr-name])))

(<span class=3D"kw">defn</span><span class=3D"fu"> value-of-at</span>
   ([db ent-id attr-name]  (<span class=3D"kw">:value</span> (attr-at db en=
t-id attr-name)))
   ([db ent-id attr-name ts] (<span class=3D"kw">:value</span> (attr-at db =
ent-id attr-name ts))))

(<span class=3D"kw">defn</span><span class=3D"fu"> indx-at</span>
   ([db kind] (indx-at db kind (<span class=3D"kw">:curr-time</span> db)))
   ([db kind ts] (kind ((<span class=3D"kw">:layers</span> db) ts))))</code=
></pre>

<p>Since we treat our database just like any other value, each of these fun=
ctions take a database as an argument. Each element is retrieved by its ass=
ociated identifier, and optionally the timestamp of interest. This timestam=
p is used to find the corresponding layer that our lookup should be applied=
 to.</p>

<h4 id=3D"evolution">Evolution</h4>

<p>A first usage of the basic accessors is to provide a "read-into-the-past=
" API. This is possible as, in our database, an update operation is done by=
 appending a new layer (as opposed to overwriting). Therefore we can use th=
e <code>prev-ts</code> property to look at the attribute at that layer, and=
 continue looking deeper into history to observe how the attribute=E2=80=99=
s value evolved throughout time.</p>

<p>The function <code>evolution-of</code> does exactly that. It returns a s=
equence of pairs, each consisting of the timestamp and value of an attribut=
e=E2=80=99s update.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> evolution-of </span>[db ent-id=
 attr-name]
   (<span class=3D"kw">loop</span> [res [] ts (<span class=3D"kw">:curr-tim=
e</span> db)]
     (<span class=3D"kw">if</span> (<span class=3D"kw">=3D</span> -<span cl=
ass=3D"dv">1</span> ts) (<span class=3D"kw">reverse</span> res)
         (<span class=3D"kw">let</span> [attr (attr-at db ent-id attr-name =
ts)]
           (<span class=3D"kw">recur</span> (<span class=3D"kw">conj</span>=
 res {(<span class=3D"kw">:ts</span> attr) (<span class=3D"kw">:value</span=
> attr)})  (<span class=3D"kw">:prev-ts</span> attr))))))</code></pre>

<h2 id=3D"data-behavior-and-life-cycle">Data Behavior and Life Cycle</h2>

<p>So far, our discussion has focused on the structure of our data: what th=
e core components are and how they are aggregated together. It's time to ex=
plore the dynamics of our system: how data is changed over time through the=
 add--update--remove <em>data lifecycle</em>.</p>

<p>As we've already discussed, data in an archaeologist's world never actua=
lly changes. Once it is created, it exists forever and can only be hidden f=
rom the world by data in a newer layer. The term "hidden" is crucial here. =
Older data does not "disappear"=E2=80=94it is buried, and can be revealed a=
gain by exposing an older layer. Conversely, updating data means obscuring =
the old by adding a new layer on top of it with something else. We can thus=
 "delete" data by adding a layer of "nothing" on top of it.</p>

<p>This means that when we talk about data lifecycle, we are really talking=
 about adding layers to our data over time.</p>

<h3 id=3D"the-bare-necessities">The Bare Necessities</h3>

<p>The data lifecycle consists of three basic operations:</p>

<ul>
<li>adding an entity with the <code>add-entity</code> function</li>
<li>removing an entity with the <code>remove-entity</code> function</li>
<li>updating an entity with the <code>update-entity</code> function</li>
</ul>

<p>Remember that, even though these functions provide the illusion of mutab=
ility, all that we are really doing in each case is adding another layer to=
 the data. Also, since we are using Clojure's persistent data structures, f=
rom the caller's perspective we pay the same price for these operations as =
for an "in-place" change (i.e., negligible performance overhead), while mai=
ntaining immutability for all other users of the data structure.</p>

<h4 id=3D"adding-an-entity">Adding an Entity</h4>

<p>Adding an entity requires us to do three things:</p>

<ul>
<li>prepare the entity for addition (by giving it an ID and a timestamp)</l=
i>
<li>place the entity in storage</li>
<li>update indexes as necessary</li>
</ul>

<p>These steps are performed in the <code>add-entity</code> function.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> add-entity </span>[db ent]
   (<span class=3D"kw">let</span> [[fixed-ent next-top-id] (fix-new-entity =
db ent)
         layer-with-updated-storage (<span class=3D"kw">update-in</span>=20
                            (<span class=3D"kw">last</span> (<span class=3D=
"kw">:layers</span> db)) [<span class=3D"kw">:storage</span>] write-entity =
fixed-ent)
         add-fn (<span class=3D"kw">partial</span> add-entity-to-index fixe=
d-ent)
         new-layer (<span class=3D"kw">reduce</span> add-fn layer-with-upda=
ted-storage (indexes))]
    (<span class=3D"kw">assoc</span> db <span class=3D"kw">:layers</span> (=
<span class=3D"kw">conj</span> (<span class=3D"kw">:layers</span> db) new-l=
ayer) <span class=3D"kw">:top-id</span> next-top-id)))</code></pre>

<p>Preparing an entity is done by calling the <code>fix-new-entity</code> f=
unction and its auxiliary functions <code>next-id</code>, <code>next-ts</co=
de> and <code>update-creation-ts</code>. These latter two helper functions =
are responsible for finding the next timestamp of the database (done by <co=
de>next-ts</code>), and updating the creation timestamp of the given entity=
 (done by <code>update-creation-ts</code>). Updating the creation timestamp=
 of an entity means going over the attributes of the entity and updating th=
eir <code>:ts</code> fields.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> next-ts </span>[db] (<span cl=
ass=3D"kw">inc</span> (<span class=3D"kw">:curr-time</span> db)))

(<span class=3D"kw">defn-</span><span class=3D"fu"> update-creation-ts </sp=
an>[ent ts-val]
   (<span class=3D"kw">reduce</span> #(<span class=3D"kw">assoc-in</span> %=
<span class=3D"dv">1</span> [<span class=3D"kw">:attrs</span> %<span class=
=3D"dv">2</span> <span class=3D"kw">:ts</span> ] ts-val) ent (<span class=
=3D"kw">keys</span> (<span class=3D"kw">:attrs</span> ent))))

(<span class=3D"kw">defn-</span><span class=3D"fu"> next-id </span>[db ent]
   (<span class=3D"kw">let</span> [top-id (<span class=3D"kw">:top-id</span=
> db)
         ent-id (<span class=3D"kw">:id</span> ent)
         increased-id (<span class=3D"kw">inc</span> top-id)]
         (<span class=3D"kw">if</span> (<span class=3D"kw">=3D</span> ent-i=
d <span class=3D"kw">:db</span>/no-id-yet)
             [(<span class=3D"kw">keyword</span> (<span class=3D"kw">str</s=
pan> increased-id)) increased-id]
             [ent-id top-id])))

(<span class=3D"kw">defn-</span><span class=3D"fu"> fix-new-entity </span>[=
db ent]
   (<span class=3D"kw">let</span> [[ent-id next-top-id] (next-id db ent)
         new-ts               (next-ts db)]
       [(update-creation-ts (<span class=3D"kw">assoc</span> ent <span clas=
s=3D"kw">:id</span> ent-id) new-ts) next-top-id]))</code></pre>

<p>To add the entity to storage, we locate the most recent layer in the dat=
abase and update the storage in that layer with a new layer, the results of=
 which are stored in <code>layer-with-updated-storage</code>.</p>

<p>Finally, we must update the indexes. This means, for each of the indexes=
 (done by the combination of <code>reduce</code> and the <code>partial</cod=
e>-ed <code>add-entity-to-index</code> at the <code>add-entity</code> funct=
ion):</p>

<ul>
<li>Find the attributes that should be indexed (see the combination of <cod=
e>filter</code> with the index=E2=80=99s <code>usage-pred</code> that opera=
tes on the attributes in <code>add-entity-to-index</code>)</li>
<li>Build an index-path from the the entity=E2=80=99s ID (see the combinati=
on of the <code>partial</code>-ed <code>update-entry-in-index</code> with <=
code>from-eav</code> at the <code>update-attr-in-index</code> function)</li=
>
<li>Add that path to the index (see the <code>update-entry-in-index</code> =
function)</li>
</ul>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> add-entity-to-index </span>[e=
nt layer ind-name]
   (<span class=3D"kw">let</span> [ent-id (<span class=3D"kw">:id</span> en=
t)
         <span class=3D"kw">index</span> (ind-name layer)
         all-attrs  (<span class=3D"kw">vals</span> (<span class=3D"kw">:at=
trs</span> ent))
         relevant-attrs (<span class=3D"kw">filter</span> #((usage-pred <sp=
an class=3D"kw">index</span>) %) all-attrs)
         add-in-index-fn (<span class=3D"kw">fn</span> [ind attr]=20
                                 (update-attr-in-index ind ent-id (<span cl=
ass=3D"kw">:name</span> attr)=20
                                                                  (<span cl=
ass=3D"kw">:value</span> attr)=20
                                                                  <span cla=
ss=3D"kw">:db</span>/add))]
        (<span class=3D"kw">assoc</span> layer ind-name  (<span class=3D"kw=
">reduce</span> add-in-index-fn <span class=3D"kw">index</span> relevant-at=
trs))))

(<span class=3D"kw">defn-</span><span class=3D"fu"> update-attr-in-index </=
span>[<span class=3D"kw">index</span> ent-id attr-name target-val operation=
]
   (<span class=3D"kw">let</span> [colled-target-val (collify target-val)
         update-entry-fn (<span class=3D"kw">fn</span> [ind vl]=20
                             (update-entry-in-index=20
                                ind=20
                                ((from-eav <span class=3D"kw">index</span>)=
 ent-id attr-name vl)=20
                                operation))]
     (<span class=3D"kw">reduce</span> update-entry-fn <span class=3D"kw">i=
ndex</span> colled-target-val)))

(<span class=3D"kw">defn-</span><span class=3D"fu"> update-entry-in-index <=
/span>[<span class=3D"kw">index</span> <span class=3D"kw">path</span> opera=
tion]
   (<span class=3D"kw">let</span> [update-path (<span class=3D"kw">butlast<=
/span> <span class=3D"kw">path</span>)
         update-value (<span class=3D"kw">last</span> <span class=3D"kw">pa=
th</span>)
         to-be-updated-set (<span class=3D"kw">get-in</span> <span class=3D=
"kw">index</span> update-path #{})]
     (<span class=3D"kw">assoc-in</span> <span class=3D"kw">index</span> up=
date-path (<span class=3D"kw">conj</span> to-be-updated-set update-value)))=
)</code></pre>

<p>All of these components are added as a new layer to the given database. =
All that=E2=80=99s left is to update the database=E2=80=99s timestamp and <=
code>top-id</code> fields. That last step occurs on the last line of <code>=
add-entity</code>, which also returns the updated database.</p>

<p>We also provide an <code>add-entities</code> convenience function that a=
dds multiple entities to the database in one call by iteratively applying <=
code>add-entity</code>.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> add-entities </span>[db ents-s=
eq] (<span class=3D"kw">reduce</span> add-entity db ents-seq))</code></pre>

<h4 id=3D"removing-an-entity">Removing an Entity</h4>

<p>Removing an entity from our database means adding a layer in which it do=
es not exist. To do this, we need to:</p>

<ul>
<li>Remove the entity itself</li>
<li>Update any attributes of other entities that reference it</li>
<li>Clear the entity from our indexes</li>
</ul>

<p>This "construct-without" process is executed by the <code>remove-entity<=
/code> function, which looks very similar to <code>add-entity</code>:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> remove-entity </span>[db ent-i=
d]
   (<span class=3D"kw">let</span> [ent (entity-at db ent-id)
         layer (remove-back-refs db ent-id (<span class=3D"kw">last</span> =
(<span class=3D"kw">:layers</span> db)))
         no-ref-layer (<span class=3D"kw">update-in</span> layer [<span cla=
ss=3D"kw">:VAET</span>] <span class=3D"kw">dissoc</span> ent-id)
         no-ent-layer (<span class=3D"kw">assoc</span> no-ref-layer <span c=
lass=3D"kw">:storage</span>=20
                                   (drop-entity =20
                                          (<span class=3D"kw">:storage</spa=
n> no-ref-layer) ent))
         new-layer (<span class=3D"kw">reduce</span> (<span class=3D"kw">pa=
rtial</span> remove-entity-from-index ent)=20
                                 no-ent-layer (indexes))]
     (<span class=3D"kw">assoc</span> db <span class=3D"kw">:layers</span> =
(<span class=3D"kw">conj</span>  (<span class=3D"kw">:layers</span> db) new=
-layer))))</code></pre>

<p>Reference removal is done by the <code>remove-back-refs</code> function:=
</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> remove-back-refs </span>[db e=
-id layer]
   (<span class=3D"kw">let</span> [reffing-datoms (reffing-to e-id layer)
         remove-fn (<span class=3D"kw">fn</span>[d [<span class=3D"kw">e</s=
pan> a]] (update-entity db <span class=3D"kw">e</span> a e-id <span class=
=3D"kw">:db</span>/remove))
         clean-db (<span class=3D"kw">reduce</span> remove-fn db reffing-da=
toms)]
     (<span class=3D"kw">last</span> (<span class=3D"kw">:layers</span> cle=
an-db))))</code></pre>

<p>We begin by using <code>reffing-datoms-to</code> to find all entities th=
at reference ours in the given layer; it returns a sequence of triplets tha=
t contain the ID of the referencing entity, as well as the attribute name a=
nd the ID of the removed entity.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> reffing-to </span>[e-id layer=
]
   (<span class=3D"kw">let</span> [vaet (<span class=3D"kw">:VAET</span> la=
yer)]
         (<span class=3D"kw">for</span> [[attr-name reffing-set] (e-id vaet=
)
               reffing reffing-set]
              [reffing attr-name])))</code></pre>

<p>We then apply <code>update-entity</code> to each triplet to update the a=
ttributes that reference our removed entity. (We'll explore how <code>updat=
e-entity</code> works in the next section.)</p>

<p>The last step of <code>remove-back-refs</code> is to clear the reference=
 itself from our indexes, and more specifically from the VAET index, since =
it is the only index that stores reference information.</p>

<h4 id=3D"updating-an-entity">Updating an Entity</h4>

<p>At its essence, an update is the modification of an entity=E2=80=99s att=
ribute=E2=80=99s value. The modification process itself depends on the card=
inality of the attribute: an attribute with cardinality <code>:db/multiple<=
/code> holds a set of values, so we must allow items to be added to or remo=
ved from this set, or the set to be replaced entirely. An attribute with ca=
rdinality <code>:db/single</code> holds a single value, and thus only allow=
s replacement.</p>

<p>Since we also have indexes that provide lookups directly on attributes a=
nd their values, these will also have to be updated.</p>

<p>As with <code>add-entity</code> and <code>remove-entity</code>, we won't=
 actually be modifying our entity in place, but will instead add a new laye=
r which contains the updated entity.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> update-entity</span>
   ([db ent-id attr-name new-val]
    (update-entity db ent-id attr-name new-val <span class=3D"kw">:db</span=
>/reset-to))
   ([db ent-id attr-name new-val operation]
      (<span class=3D"kw">let</span> [update-ts (next-ts db)
            layer (<span class=3D"kw">last</span> (<span class=3D"kw">:laye=
rs</span> db))
            attr (attr-at db ent-id attr-name)
            updated-attr (update-attr attr new-val update-ts operation)
            fully-updated-layer (update-layer layer ent-id=20
                                              attr updated-attr=20
                                              new-val operation)]
        (<span class=3D"kw">update-in</span> db [<span class=3D"kw">:layers=
</span>] <span class=3D"kw">conj</span> fully-updated-layer))))</code></pre=
>

<p>To update an attribute, we locate it with <code>attr-at</code> and then =
use <code>update-attr</code> to perform the actual update.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> update-attr </span>[attr new-=
val new-ts operation]
    {<span class=3D"kw">:pre</span>  [(<span class=3D"kw">if</span> (single=
? attr)
            (<span class=3D"kw">contains?</span> #{<span class=3D"kw">:db</=
span>/reset-to <span class=3D"kw">:db</span>/remove} operation)
            (<span class=3D"kw">contains?</span> #{<span class=3D"kw">:db</=
span>/reset-to <span class=3D"kw">:db</span>/add <span class=3D"kw">:db</sp=
an>/remove} operation))]}
    (<span class=3D"kw">-&gt;</span> attr
       (update-attr-modification-time new-ts)
       (update-attr-value new-val operation)))</code></pre>

<p>We use two helper functions to perform the update. <code>update-attr-mod=
ification-time</code> updates timestamps to reflect the creation of the bla=
ck arrows in Figure 1:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> update-attr-modification-time=
  </span>
  [attr new-ts]
       (<span class=3D"kw">assoc</span> attr <span class=3D"kw">:ts</span> =
new-ts <span class=3D"kw">:prev-ts</span> (<span class=3D"kw">:ts</span> at=
tr)))</code></pre>

<p><code>update-attr-value</code> actually updates the value:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> update-attr-value </span>[att=
r value operation]
   (<span class=3D"kw">cond</span>
      (single? attr)    (<span class=3D"kw">assoc</span> attr <span class=
=3D"kw">:value</span> #{value})
      <span class=3D"co">; now we're talking about an attribute of multiple=
 values</span>
      (<span class=3D"kw">=3D</span> <span class=3D"kw">:db</span>/reset-to=
 operation)=20
        (<span class=3D"kw">assoc</span> attr <span class=3D"kw">:value</sp=
an> value)
      (<span class=3D"kw">=3D</span> <span class=3D"kw">:db</span>/add oper=
ation)=20
        (<span class=3D"kw">assoc</span> attr <span class=3D"kw">:value</sp=
an> (CS/union (<span class=3D"kw">:value</span> attr) value))
      (<span class=3D"kw">=3D</span> <span class=3D"kw">:db</span>/remove o=
peration)
        (<span class=3D"kw">assoc</span> attr <span class=3D"kw">:value</sp=
an> (CS/difference (<span class=3D"kw">:value</span> attr) value))))</code>=
</pre>

<p>All that remains is to remove the old value from the indexes and add the=
 new one to them, and then construct the new layer with all of our updated =
components. Luckily, we can leverage the code we wrote for adding and remov=
ing entities to do this.</p>

<h3 id=3D"transactions">Transactions</h3>

<p>Each of the operations in our low-level API acts on a single entity. How=
ever, nearly all databases have a way for users to do multiple operations a=
s a single <em>transaction</em>. This means:</p>

<ul>
<li>The batch of operations is viewed as a single atomic operation, so all =
of the operations either succeed together or fail together.</li>
<li>The database is in a valid state before and after the transaction.</li>
<li>The batch update appears to be <em>isolated</em>; other queries should =
never see a database state in which only some of the operations have been a=
pplied.</li>
</ul>

<p>We can fulfill these requirements through an interface that consumes a d=
atabase and a set of operations to be performed, and produces a database wh=
ose state reflects the given changes. All of the changes submitted in the b=
atch should be applied through the addition of a <em>single</em> layer. How=
ever, we have a problem: All of the functions we wrote in our low-level API=
 add a new layer to the database. If we were to perform a batch with <em>n<=
/em> operations, we would thus see <em>n</em> new layers added, when what w=
e would really like is to have exactly one new layer.</p>

<p>The key here is that the layer we want is the <em>top</em> layer that wo=
uld be produced by performing those updates in sequence. Therefore, the sol=
ution is to execute the user=E2=80=99s operations one after another, each c=
reating a new layer. When the last layer is created, we take only that top =
layer and place it on the initial database (leaving all the intermediate la=
yers to pine for the fjords). Only after we've done all this will we update=
 the database's timestamp.</p>

<p>All this is done in the <code>transact-on-db</code> function, which rece=
ives the initial value of the database and the batch of operations to perfo=
rm, and returns its updated value.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> transact-on-db </span>[initial=
-db ops]
    (<span class=3D"kw">loop</span> [[op &amp; rst-ops] ops transacted init=
ial-db]
      (<span class=3D"kw">if</span> op
          (<span class=3D"kw">recur</span> rst-ops (<span class=3D"kw">appl=
y</span> (<span class=3D"kw">first</span> op) transacted (<span class=3D"kw=
">rest</span> op)))
          (<span class=3D"kw">let</span> [initial-layer  (<span class=3D"kw=
">:layers</span> initial-db)
                new-layer (<span class=3D"kw">last</span> (<span class=3D"k=
w">:layers</span> transacted))]
            (<span class=3D"kw">assoc</span> initial-db <span class=3D"kw">=
:layers</span> (<span class=3D"kw">conj</span> initial-layer new-layer)=20
                              <span class=3D"kw">:curr-time</span> (next-ts=
 initial-db)=20
                              <span class=3D"kw">:top-id</span> (<span clas=
s=3D"kw">:top-id</span> transacted))))))</code></pre>

<p>Note here that we used the term <em>value</em>, meaning that only the ca=
ller to this function is exposed to the updated state; all other users of t=
he database are unaware of this change (as a database is a value, and there=
fore cannot change). In order to have a system where users can be exposed t=
o state changes performed by others, users do not interact directly with th=
e database, but rather refer to it using another level of indirection. This=
 additional level is implemented using Clojure's <code>Atom</code>, a refer=
ence type. Here we leverage the main three key features of an <code>Atom</c=
ode>, which are:</p>

<ol style=3D"list-style-type: decimal">
<li>It references a value.</li>
<li>It is possible to update the referencing of the <code>Atom</code> to an=
other value by executing a transaction (using Clojure's Software Transactio=
n Memory capabilities). The transaction accepts an <code>Atom</code> and a =
function. That function operates on the value of the <code>Atom</code> and =
returns a new value. After the execution of the transaction, the <code>Atom=
</code> references the value that was returned from the function.</li>
<li>Getting to the value that is referenced by the <code>Atom</code> is don=
e by dereferencing it, which returns the state of that <code>Atom</code> at=
 that time.</li>
</ol>

<p>In between Clojure's <code>Atom</code> and the work done in <code>transa=
ct-on-db</code>, there's still a gap to be bridged; namely, to invoke the t=
ransaction with the right inputs.</p>

<p>To have the simplest and clearest APIs, we would like users to just prov=
ide the <code>Atom</code> and the list of operations, and have the database=
 transform the user input into a proper transaction.</p>

<p>That transformation occurs in the following transaction call chain:</p>

<pre><code>transact =E2=86=92  _transact =E2=86=92 swap! =E2=86=92 transact=
-on-db</code></pre>

<p>Users call <code>transact</code> with the <code>Atom</code> (i.e., the c=
onnection) and the operations to perform, which relays its input to <code>_=
transact</code>, adding to it the name of the function that updates the <co=
de>Atom</code> (<code>swap!</code>).</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu"> transact </span>[db-conn &=
amp; txs]  `(_transact <span class=3D"kw">~db-conn</span> <span class=3D"kw=
">swap!</span> <span class=3D"kw">~@txs))</span></code></pre>

<p><code>_transact</code> prepares the call to <code>swap!</code>. It does =
so by creating a list that begins with <code>swap!</code>, followed by the =
<code>Atom</code>, then the <code>transact-on-db</code> symbol and the batc=
h of operations.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu">  </span>_transact [db op &=
amp; txs]
   (<span class=3D"kw">when</span> txs
     (<span class=3D"kw">loop</span> [[frst-tx# &amp; rst-tx#] txs  res#  [=
op db `transact-on-db]  accum-txs# []]
       (<span class=3D"kw">if</span> frst-tx#
           (<span class=3D"kw">recur</span> rst-tx# res#  (<span class=3D"k=
w">conj</span>  accum-txs#  (<span class=3D"kw">vec</span> frst-tx#)))
           (<span class=3D"kw">list*</span> (<span class=3D"kw">conj</span>=
 res#  accum-txs#))))))</code></pre>

<p><code>swap!</code> invokes <code>transact-on-db</code> within a transact=
ion (with the previously prepared arguments), and <code>transact-on-db</cod=
e> creates the new state of the database and returns it.</p>

<p>At this point we can see that with few minor tweaks, we can also provide=
 a way to ask "what if" questions. This can be done by replacing <code>swap=
!</code> with a function that would not make any change to the system. This=
 scenario is implemented with the <code>what-if</code> call chain:</p>

<p><code>what-if</code> <span class=3D"math"><span class=3D"MathJax_Preview=
" style=3D"color: inherit; display: none;"></span><span class=3D"MathJax" i=
d=3D"MathJax-Element-1-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&=
quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=3D&quot;false&qu=
ot;>&amp;#x2192;</mo></math>" role=3D"presentation" style=3D"position: rela=
tive;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-1=
" style=3D"width: 1.285em; display: inline-block;"><span style=3D"display: =
inline-block; position: relative; width: 1.029em; height: 0px; font-size: 1=
20%;"><span style=3D"position: absolute; clip: rect(1.478em 1000.97em 2.375=
em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJ=
ax-Span-2"><span class=3D"mo" id=3D"MathJax-Span-3" style=3D"font-family: M=
athJax_Main;">=E2=86=92</span></span><span style=3D"display: inline-block; =
width: 0px; height: 2.183em;"></span></span></span><span style=3D"display: =
inline-block; overflow: hidden; vertical-align: -0.073em; border-left: 0px =
solid; width: 0px; height: 0.773em;"></span></span></nobr><span class=3D"MJ=
X_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/=
1998/Math/MathML"><mo stretchy=3D"false">=E2=86=92</mo></math></span></span=
></span> <code>_transact</code> <span class=3D"math"><span class=3D"MathJax=
_Preview" style=3D"color: inherit; display: none;"></span><span class=3D"Ma=
thJax" id=3D"MathJax-Element-2-Frame" tabindex=3D"0" data-mathml=3D"<math x=
mlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=3D&quot;=
false&quot;>&amp;#x2192;</mo></math>" role=3D"presentation" style=3D"positi=
on: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJa=
x-Span-4" style=3D"width: 1.285em; display: inline-block;"><span style=3D"d=
isplay: inline-block; position: relative; width: 1.029em; height: 0px; font=
-size: 120%;"><span style=3D"position: absolute; clip: rect(1.478em 1000.97=
em 2.375em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=
=3D"MathJax-Span-5"><span class=3D"mo" id=3D"MathJax-Span-6" style=3D"font-=
family: MathJax_Main;">=E2=86=92</span></span><span style=3D"display: inlin=
e-block; width: 0px; height: 2.183em;"></span></span></span><span style=3D"=
display: inline-block; overflow: hidden; vertical-align: -0.073em; border-l=
eft: 0px solid; width: 0px; height: 0.773em;"></span></span></nobr><span cl=
ass=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://ww=
w.w3.org/1998/Math/MathML"><mo stretchy=3D"false">=E2=86=92</mo></math></sp=
an></span></span> <code>_what-if</code> <span class=3D"math"><span class=3D=
"MathJax_Preview" style=3D"color: inherit; display: none;"></span><span cla=
ss=3D"MathJax" id=3D"MathJax-Element-3-Frame" tabindex=3D"0" data-mathml=3D=
"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=
=3D&quot;false&quot;>&amp;#x2192;</mo></math>" role=3D"presentation" style=
=3D"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=
=3D"MathJax-Span-7" style=3D"width: 1.285em; display: inline-block;"><span =
style=3D"display: inline-block; position: relative; width: 1.029em; height:=
 0px; font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.478=
em 1000.97em 2.375em -999.997em); top: -2.176em; left: 0em;"><span class=3D=
"mrow" id=3D"MathJax-Span-8"><span class=3D"mo" id=3D"MathJax-Span-9" style=
=3D"font-family: MathJax_Main;">=E2=86=92</span></span><span style=3D"displ=
ay: inline-block; width: 0px; height: 2.183em;"></span></span></span><span =
style=3D"display: inline-block; overflow: hidden; vertical-align: -0.073em;=
 border-left: 0px solid; width: 0px; height: 0.773em;"></span></span></nobr=
><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"=
http://www.w3.org/1998/Math/MathML"><mo stretchy=3D"false">=E2=86=92</mo></=
math></span></span></span> <code>transact-on-db</code></p>

<p>The user calls <code>what-if</code> with the database value and the oper=
ations to perform. It then relays these inputs to <code>_transact</code>, a=
dding to them a function that mimics <code>swap!</code>'s APIs, without its=
 effect (callled <code>_what-if</code>).</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu"> what-if </span>[db &amp; o=
ps]  `(_transact <span class=3D"kw">~db</span> _what-if  <span class=3D"kw"=
>~@ops))</span></code></pre>

<p><code>_transact</code> prepares the call to <code>_what-if</code>. It do=
es so by creating a list that begins with <code>_what-if</code>, followed b=
y the database, then the <code>transact-on-db</code> symbol and the batch o=
f operations. <code>_what-if</code> invokes <code>transact-on-db</code>, ju=
st like <code>swap!</code> does in the transaction scenario, but does not i=
nflict any change on the system.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn-</span><span class=3D"fu"> </span>_what-if [db f txs]  (=
f db txs))</code></pre>

<p>Note that we are not using functions, but macros. The reason for using m=
acros here is that arguments to macros do not get evaluated as the call hap=
pens; this allows us to offer a cleaner API design where the user provides =
the operations structured in the same way that any function call is structu=
red in Clojure.</p>

<p>The above process can be seen in the following examples. For Transaction=
, the user call:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(trans=
act db-conn  (add-entity e1) (update-entity e2 atr2 val2 <span class=3D"kw"=
>:db</span>/add))  </code></pre>

<p>changes into:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(_tran=
sact db-conn <span class=3D"kw">swap!</span> (add-entity e1) (update-entity=
 e2 atr2 val2 <span class=3D"kw">:db</span>/add))</code></pre>

<p>which becomes:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">swap!</span> db-conn transact-on-db [[add-entity e1][update-e=
ntity e2 atr2 val2 <span class=3D"kw">:db</span>/add]])</code></pre>

<p>For what-if, the user call:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(what-=
if my-db (add-entity e3) (remove-entity e4))</code></pre>

<p>changes into:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(_tran=
sact my-db _what-if (add-entity e3) (remove-entity e4))</code></pre>

<p>then:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(_what=
-if my-db transact-on-db [[add-entity e3] [remove-entity e4]])</code></pre>

<p>and eventually:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(trans=
act-on-db my-db  [[add-entity e3] [remove-entity e4]])</code></pre>

<h2 id=3D"insight-extraction-as-libraries">Insight Extraction as Libraries<=
/h2>

<p>At this point we have the core functionality of the database in place, a=
nd it is time to add its <em>raison d'=C3=AAtre</em>: insights extraction. =
The architecture approach we used here is to allow adding these capabilitie=
s as libraries, as different usages of the database would need different su=
ch mechanisms.</p>

<h3 id=3D"graph-traversal">Graph Traversal</h3>

<p>A reference connection between entities is created when an entity=E2=80=
=99s attribute=E2=80=99s type is <code>:db/ref</code>, which means that the=
 value of that attribute is an ID of another entity. When a referring entit=
y is added to the database, the reference is indexed at the VAET index.<br>=
The information found in the VAET index can be leveraged to extract all the=
 incoming links to an entity. This is done in the <code>incoming-refs</code=
> function, which collects all the leaves that are reachable from the entit=
y at that index:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> incoming-refs </span>[db ts en=
t-id &amp; ref-names]
   (<span class=3D"kw">let</span> [vaet (indx-at db <span class=3D"kw">:VAE=
T</span> ts)
         all-attr-map (vaet ent-id)
         filtered-map (<span class=3D"kw">if</span> ref-names=20
                          (<span class=3D"kw">select-keys</span> ref-names =
all-attr-map)=20
                          all-attr-map)]
      (<span class=3D"kw">reduce</span> <span class=3D"kw">into</span> #{} =
(<span class=3D"kw">vals</span> filtered-map))))</code></pre>

<p>We can also go through all of a given entity=E2=80=99s attributes and co=
llect all the values of attributes of type <code>:db/ref</code>, and by tha=
t extract all the outgoing references from that entity. This is done by the=
 <code>outgoing-refs</code> function.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> outgoing-refs </span>[db ts en=
t-id &amp; ref-names]
   (<span class=3D"kw">let</span> [val-filter-fn (<span class=3D"kw">if</sp=
an> ref-names #(<span class=3D"kw">vals</span> (<span class=3D"kw">select-k=
eys</span> ref-names %)) <span class=3D"kw">vals</span>)]
   (<span class=3D"kw">if-not</span> ent-id []
     (<span class=3D"kw">-&gt;&gt;</span> (entity-at db ts ent-id)
          (<span class=3D"kw">:attrs</span>) (val-filter-fn) (<span class=
=3D"kw">filter</span> ref?) (<span class=3D"kw">mapcat</span> <span class=
=3D"kw">:value</span>)))))</code></pre>

<p>These two functions act as the basic building blocks for any graph trave=
rsal operation, as they are the ones that raise the level of abstraction fr=
om entities and attributes to nodes and links in a graph. Once we have the =
ability to look at our database as a graph, we can provide various graph tr=
aversing and querying APIs. We leave this as a solved exercise to the reade=
r; one solution can be found in the chapter's source code (see <code>graph.=
clj</code>).</p>

<h2 id=3D"querying-the-database">Querying the Database</h2>

<p>The second library we present provides querying capabilities, which is t=
he main concern of this section. A database is not very useful to its users=
 without a powerful query mechanism. This feature is usually exposed to use=
rs through a <em>query language</em> that is used to declaratively specify =
the set of data of interest.</p>

<p>Our data model is based on accumulation of facts (i.e., datoms) over tim=
e. For this model, a natural place to look for the right query language is =
<em>logic programming</em>. A commonly used query language influenced by lo=
gic programming is <em>Datalog</em> which, in addition to being well-suited=
 for our data model, has a very elegant adaptation to Clojure=E2=80=99s syn=
tax. Our query engine will implement a subset of the Datalog language from =
the <a href=3D"http://docs.datomic.com/query.html">Datomic database</a>.</p=
>

<h3 id=3D"query-language">Query Language</h3>

<p>Let's look at an example query in our proposed language. This query asks=
: "What are the names and birthdays of entities who like pizza, speak Engli=
sh, and who have a birthday this month?"</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">{  <sp=
an class=3D"kw">:find</span> [?nm ?bd ]
   <span class=3D"kw">:where</span> [
      [?e  <span class=3D"kw">:likes</span> <span class=3D"st">"pizza"</spa=
n>]
      [?e  <span class=3D"kw">:name</span>  ?nm]
      [?e  <span class=3D"kw">:speak</span> <span class=3D"st">"English"</s=
pan>]
      [?e  <span class=3D"kw">:bday</span> (bday-mo? ?bd)]]}</code></pre>

<h4 id=3D"syntax">Syntax</h4>

<p>We use the syntax of Clojure=E2=80=99s data literals directly to provide=
 the basic syntax for our queries. This allows us to avoid having to write =
a specialized parser, while still providing a form that is familiar and eas=
ily readable to programmers familiar with Clojure.</p>

<p>A query is a map with two items:</p>

<ul>
<li>An item with <code>:where</code> as a key, and with a <em>rule</em> as =
a value. A rule is a vector of <em>clauses</em>, and a clause is a vector c=
omposed of three <em>predicates</em>, each of which operates on a different=
 component of a datom. In the example above, <code>[?e  :likes "pizza"]</co=
de> is a clause. This <code>:where</code> item defines a rule that acts as =
a filter on datoms in our database (like a SQL <code>WHERE</code> clause.)<=
/li>
<li>An item with <code>:find</code> as a key, and with a vector as a value.=
 The vector defines which components of the selected datom should be projec=
ted into the results (like a SQL <code>SELECT</code> clause.)</li>
</ul>

<p>The description above omits a crucial requirement: how to make different=
 clauses sync on a value (i.e., make a join operation between them), and ho=
w to structure the found values in the output (specified by the <code>:find=
</code> part).</p>

<p>We fulfill both of these requirements using <em>variables</em>, which ar=
e denoted with a leading <code>?</code>. The only exception to this definit=
ion is the "don't care" variable <code>_</code> (underscore).</p>

<p>A clause in a query is composed of three predicates; Table 10.2 defines =
what can act as a predicate in our query language.</p>

<table>
  <tbody><tr>
    <td>
Name
</td>
    <td>
Meaning
</td>
    <td>
Example
</td>
  </tr>
  <tr>
    <td>
Constant
</td>
    <td>
Is the value of the item in the datom equal to the constant?
</td>
    <td>
:likes
</td>
  </tr>
  <tr>
    <td>
Variable
</td>
    <td>
Bind the value of the item in the datom to the variable and return true.
</td>
    <td>
?e
</td>
  </tr>
  <tr>
    <td>
Don=E2=80=99t-care
</td>
    <td>
Always returns true.
</td>
    <td>
_
</td>
  </tr>
  <tr>
    <td>
Unary operator
</td>
    <td>
Unary operation that takes a variable as its operand.<br> Bind the datom's =
item's value to the variable (unless it's an '_').<br> Replace the variable=
 with the value of the item in the datom.<br> Return the application of the=
 operation.
</td>
    <td>
(bday-mo? _)
</td>
  </tr>
  <tr>
    <td>
Binary operator
</td>
    <td>
A binary operation that must have a variable as one of its operands.<br> Bi=
nd the datom's item's value to the variable (unless it's an '_').<br><br> R=
eplace the variable with the value of the item in the datom.<br> Return the=
 result of the operation.
</td>
    <td>
(&gt; ?age 20)
</td>
  </tr>
</tbody></table>

<p>: <b>Table 10.2</b> - Predicates</p>

<h4 id=3D"limitations-of-our-query-language">Limitations of our Query Langu=
age</h4>

<p>Engineering is all about managing tradeoffs, and designing our query eng=
ine is no different. In our case, the main tradeoff we must address is feat=
ure-richness versus complexity. Resolving this tradeoff requires us to look=
 at common use-cases of the system, and from there deciding what limitation=
s would be acceptable.</p>

<p>In our database, we decided to build a query engine with the following l=
imitations:</p>

<ul>
<li>Users cannot define logical operations between the clauses; they are al=
ways =E2=80=98ANDed=E2=80=99 together. (This can be worked around by using =
unary or binary predicates.)</li>
<li>If there is more than one clause in a query, there must be one variable=
 that is found in all of the clauses of that query. This variable acts as a=
 joining variable. This limitation simplifies the query optimizer.</li>
<li>A query is only executed on a single database.</li>
</ul>

<p>While these design decisions result in a query language that is less ric=
h than Datalog, we are still able to support many types of simple but usefu=
l queries.</p>

<h3 id=3D"query-engine-design">Query Engine Design</h3>

<p>While our query language allows the user to specify <em>what</em> they w=
ant to access, it hides the details of <em>how</em> this will be accomplish=
ed. The query engine is the database component responsible for yielding the=
 data for a given query.</p>

<p>This involves four steps:</p>

<ol style=3D"list-style-type: decimal">
<li>Transformation to internal representation: Transform the query from its=
 textual form into a data structure that is consumed by the query planner.<=
/li>
<li>Building a query plan: Determine an efficient <em>plan</em> for yieldin=
g the results of the given query. In our case, a query plan is a function t=
o be invoked.</li>
<li>Executing the plan: Execute the plan and send its results to the next p=
hase.</li>
<li>Unification and reporting: Extract only the results that need to be rep=
orted and format them as specified.</li>
</ol>

<h4 id=3D"phase-1-transformation">Phase 1: Transformation</h4>

<p>In this phase, we transform the given query from a representation that i=
s easy for the user to understand into a representation that can be consume=
d efficiently by the query planner.</p>

<p>The <code>:find</code> part of the query is transformed into a set of th=
e given variable names:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu"> symbol-col-to-set </span>[=
coll] (<span class=3D"kw">set</span> (<span class=3D"kw">map</span> <span c=
lass=3D"kw">str</span> coll)))</code></pre>

<p>The <code>:where</code> part of the query retains its nested vector stru=
cture. However, each of the terms in each of the clauses is replaced with a=
 predicate according to Table 10.2.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu"> clause-term-expr </span>[c=
lause-term]
   (<span class=3D"kw">cond</span>
    (variable? (<span class=3D"kw">str</span> clause-term)) <span class=3D"=
co">;variable</span>
      #(<span class=3D"kw">=3D</span> % %)=20
    (<span class=3D"kw">not</span> (<span class=3D"kw">coll?</span> clause-=
term)) <span class=3D"co">;constant </span>
      `#(<span class=3D"kw">=3D</span> % <span class=3D"kw">~clause-term)</=
span>=20
    (<span class=3D"kw">=3D</span> <span class=3D"dv">2</span> (<span class=
=3D"kw">count</span> clause-term)) <span class=3D"co">;unary operator</span=
>
      `#(<span class=3D"kw">~(first</span> clause-term) %)=20
    (variable? (<span class=3D"kw">str</span> (<span class=3D"kw">second</s=
pan> clause-term)))<span class=3D"co">;binary operator, 1st operand is vari=
able</span>
      `#(<span class=3D"kw">~(first</span> clause-term) % <span class=3D"kw=
">~(last</span> clause-term))
    (variable? (<span class=3D"kw">str</span> (<span class=3D"kw">last</spa=
n> clause-term)))<span class=3D"co">;binary operator, 2nd operand is variab=
le</span>
      `#(<span class=3D"kw">~(first</span> clause-term) <span class=3D"kw">=
~(second</span> clause-term) %)))</code></pre>

<p>For each clause, a vector with the variable names used in that clause is=
 set as its metadata.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu"> clause-term-meta </span>[c=
lause-term]
   (<span class=3D"kw">cond</span>
   (<span class=3D"kw">coll?</span> clause-term)  (<span class=3D"kw">first=
</span> (<span class=3D"kw">filter</span> #(variable? % false) (<span class=
=3D"kw">map</span> <span class=3D"kw">str</span> clause-term)))=20
   (variable? (<span class=3D"kw">str</span> clause-term) false) (<span cla=
ss=3D"kw">str</span> clause-term)=20
   <span class=3D"kw">:no-variable-in-clause</span> nil))</code></pre>

<p>We use <code>pred-clause</code> to iterate over the terms in each clause=
:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu"> pred-clause </span>[clause=
]
   (<span class=3D"kw">loop</span> [[trm# &amp; rst-trm#] clause exprs# [] =
metas# []]
     (<span class=3D"kw">if</span>  trm#
          (<span class=3D"kw">recur</span> rst-trm# (<span class=3D"kw">con=
j</span> exprs# `(clause-term-expr ~ trm#))=20
                       (<span class=3D"kw">conj</span> metas#`(clause-term-=
meta ~ trm#)))
          (<span class=3D"kw">with-meta</span> exprs# {<span class=3D"kw">:=
db</span>/variable metas#}))))</code></pre>

<p>Iterating over the clauses themselves happens in <code>q-clauses-to-pred=
-clauses</code>:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu">  q-clauses-to-pred-clauses=
 </span>[clauses]
     (<span class=3D"kw">loop</span> [[frst# &amp; rst#] clauses preds-vecs=
# []]
       (<span class=3D"kw">if-not</span> frst#  preds-vecs#
         (<span class=3D"kw">recur</span> rst# `(<span class=3D"kw">conj</s=
pan> <span class=3D"kw">~preds-vecs#</span> (pred-clause <span class=3D"kw"=
>~frst#))))))</span></code></pre>

<p>We are once again relying on the fact that macros do not eagerly evaluat=
e their arguments. This allows us to define a simpler API where users provi=
de variable names as symbols (e.g., <code>?name</code>) instead of asking t=
he user to understand the internals of the engine by providing variable nam=
es as strings ( e.g., <code>"?name"</code>), or even worse, quoting the var=
iable name (e.g., <code>'?name</code>).</p>

<p>At the end of this phase, our example yields the following set for the <=
code>:find</code> part:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">#{<spa=
n class=3D"st">"?nm"</span> <span class=3D"st">"?bd"</span>} </code></pre>

<p>and the following structure in Table 10.3 for the <code>:where</code> pa=
rt. (Each cell in the <em>Predicate Clause</em> column holds the metadata f=
ound in its neighbor at the <em>Meta Clause</em> column.)</p>

<table>
<tbody><tr>
    <td>
Query Clause
</td>
    <td>
Predicate Clause
</td>
    <td>
Meta Clause
</td>
</tr>
<tr>
    <td>
[?e&nbsp;&nbsp;:likes "pizza"]
</td>
    <td>
[#(=3D % %) #(=3D % :likes) #(=3D % "pizza")]
</td>
    <td>
["?e" nil nil]
</td>
</tr>
<tr>
    <td>
[?e&nbsp;&nbsp;:name&nbsp;&nbsp;?nm]
</td>
    <td>
[#(=3D % %) #(=3D % :name) #(=3D % %)]
</td>
    <td>
["?e" nil "?nm"]
</td>
</tr>
<tr>
    <td>
[?e&nbsp;&nbsp;:speak "English"]
</td>
    <td>
[#(=3D % %) #(=3D % :speak) #(=3D % "English")]
</td>
    <td>
["?e" nil nil]
</td>
</tr>
<tr>
    <td>
[?e&nbsp;&nbsp;:bday (bday-mo? ?bd)]
</td>
    <td>
[#(=3D % %) #(=3D % :bday) #(bday-mo? %)]
</td>
    <td>
["?e" nil "?bd"]
</td>
</tr>
</tbody></table>

<p>: <b>Table 10.3</b> - Clauses</p>

<p>This structure acts as the query that is executed in a later phase, once=
 the engine decides on the right plan of execution.</p>

<h4 id=3D"phase-2-making-a-plan">Phase 2: Making a Plan</h4>

<p>In this phase, we inspect the query in order to construct a good plan to=
 produce the result it describes.</p>

<p>In general, this will involve choosing the appropriate index (Table 10.4=
) and constructing a plan in the form of a function. We choose the index ba=
sed on the <em>single</em> joining variable (that can operate on only a sin=
gle kind of element).</p>

<table>
    <tbody><tr>
        <td>
Joining variable operates on
</td><td>
Index to use
</td>
    </tr>
    <tr>
        <td>
Entity IDs
</td><td>
AVET
</td>
    </tr>
    <tr>
        <td>
Attribute names
</td><td>
VEAT
</td>
    </tr>
    <tr>
        <td>
Attribute values
</td><td>
EAVT
</td>
    </tr>
</tbody></table>

<p>: <b>Table 10.4</b> - Index Selection</p>

<p>The reasoning behind this mapping will become clearer in the next sectio=
n, when we actually execute the plan produced. For now, just note that the =
key here is to select an index whose leaves hold the elements that the join=
ing variable operates on.</p>

<p>Locating the index of the joining variable is done by <code>index-of-joi=
ning-variable</code>:</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> index-of-joining-variable </sp=
an>[query-clauses]
   (<span class=3D"kw">let</span> [metas-seq  (<span class=3D"kw">map</span=
> #(<span class=3D"kw">:db</span>/variable (<span class=3D"kw">meta</span> =
%)) query-clauses)=20
         collapsing-fn (<span class=3D"kw">fn</span> [accV v] (<span class=
=3D"kw">map</span> #(<span class=3D"kw">when</span> (<span class=3D"kw">=3D=
</span> %<span class=3D"dv">1</span> %<span class=3D"dv">2</span>) %<span c=
lass=3D"dv">1</span>)  accV v))
         collapsed (<span class=3D"kw">reduce</span> collapsing-fn metas-se=
q)]=20
     (<span class=3D"kw">first</span> (keep-indexed #(<span class=3D"kw">wh=
en</span> (variable? %<span class=3D"dv">2</span> false) %<span class=3D"dv=
">1</span>)  collapsed)))) </code></pre>

<p>We begin by extracting the metadata of each clause in the query. This ex=
tracted metadata is a 3-element vector; each element is either a variable n=
ame or nil. (Note that there is no more than one variable name in that vect=
or.) Once the vector is extracted, we produce from it (by reducing it) a si=
ngle value, which is either a variable name or nil. If a variable name is p=
roduced, then it appeared in all of the metadata vectors at the same index;=
 i.e., this is the joining variable. We can thus choose to use the index re=
levant for this joining variable based on the mapping described above.</p>

<p>Once the index is chosen, we construct our plan, which is a function tha=
t closes over the query and the index name and executes the operations nece=
ssary to return the query results.</p>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> build-query-plan </span>[query=
]
   (<span class=3D"kw">let</span> [term-ind (index-of-joining-variable quer=
y)
         ind-to-use (<span class=3D"kw">case</span> term-ind <span class=3D=
"dv">0</span> <span class=3D"kw">:AVET</span> <span class=3D"dv">1</span> <=
span class=3D"kw">:VEAT</span> <span class=3D"dv">2</span> <span class=3D"k=
w">:EAVT</span>)]
      (<span class=3D"kw">partial</span> single-index-query-plan query ind-=
to-use)))</code></pre>

<p>In our example the chosen index is the <code>AVET</code> index, as the j=
oining variable acts on the entity IDs.</p>

<h4 id=3D"phase-3-execution-of-the-plan">Phase 3: Execution of the Plan</h4=
>

<p>We saw in the previous phase that our query plan ends by calling <code>s=
ingle-index-query-plan</code>. This function will:</p>

<ol style=3D"list-style-type: decimal">
<li>Apply each predicate clause on an index (each predicate on its appropri=
ate index level).</li>
<li>Perform an AND operation across the results.</li>
<li>Merge the results into a simpler data structure.</li>
</ol>

<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> single-index-query-plan </span=
>[query indx db]
   (<span class=3D"kw">let</span> [q-res (query-index (indx-at db indx) que=
ry)]
     (bind-variables-to-query q-res (indx-at db indx))))</code></pre>

<p>To better explain this process we'll demonstrate it using our exemplary =
query, assuming that our database holds the entities in Table 10.5.</p>

<table>
<tbody><tr>
    <td>
Entity ID
</td>
    <td>
Attribute Name
</td>
    <td>
Attribute Value
</td>
</tr>
<tr>
    <td>
1
</td>
    <td>
:name <br> :likes<br> :speak<br> :bday
</td>
    <td>
USA<br> Pizza<br> English<br> July 4, 1776
</td>
</tr>
<tr>
    <td>
2
</td>
    <td>
:name <br> :likes<br> :speak<br> :bday
</td>
    <td>
France<br> Red wine<br> French<br> July 14, 1789
</td>
</tr>
<tr>
    <td>
3
</td>
    <td>
:name <br> :likes<br> :speak<br> :bday
</td>
    <td>
Canada<br> Snow<br> English<br> July 1, 1867
</td>
</tr>
</tbody></table>

<p></p><p>: <b>Table 10.5</b> - Example entities</p>
<p>Now it is time to go deeper into the rabbit hole and take a look at the =
<code>query-index</code> function, where our query finally begins to yield =
some results:</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> query-index </span>[<span clas=
s=3D"kw">index</span> pred-clauses]
   (<span class=3D"kw">let</span> [result-clauses (filter-index <span class=
=3D"kw">index</span> pred-clauses)
         relevant-items (items-that-answer-all-conditions (<span class=3D"k=
w">map</span> <span class=3D"kw">last</span> result-clauses)=20
                                                          (<span class=3D"k=
w">count</span> pred-clauses))
         cleaned-result-clauses (<span class=3D"kw">map</span> (<span class=
=3D"kw">partial</span> mask-path-leaf-with-items=20
                                              relevant-items)
                                     result-clauses)]=20
     (<span class=3D"kw">filter</span> #(<span class=3D"kw">not-empty</span=
> (<span class=3D"kw">last</span> %)) cleaned-result-clauses)))</code></pre=
>
<p>This function starts by applying the predicate clauses on the previously=
 chosen index. Each application of a predicate clause on an index returns a=
 <em>result clause</em>.</p>
<p>The main characteristics of a result are:</p>
<ol style=3D"list-style-type: decimal">
<li>It is built of three items, each from a different level of the index, a=
nd each passed its respective predicate.</li>
<li>The order of items matches the index's levels structure. (Predicate cla=
uses are always in EAV order.) The re-ordering is done when applying the in=
dex's <code>from-eav</code> on the predicate clause.</li>
<li>The metadata of the predicate clause is attached to it.</li>
</ol>
<p>All of this is done in the function <code>filter-index</code>.</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> filter-index </span>[<span cla=
ss=3D"kw">index</span> predicate-clauses]
   (<span class=3D"kw">for</span> [pred-clause predicate-clauses
         <span class=3D"kw">:let</span> [[lvl1-prd lvl2-prd lvl3-prd] (<spa=
n class=3D"kw">apply</span> (from-eav <span class=3D"kw">index</span>) pred=
-clause)]=20
         [k1 l2map] <span class=3D"kw">index</span>  <span class=3D"co">; k=
eys and values of the first level</span>
         <span class=3D"kw">:when</span> (<span class=3D"kw">try</span> (lv=
l1-prd k1) (<span class=3D"kw">catch</span> Exception <span class=3D"kw">e<=
/span> false))<br>
         [k2  l3-set] l2map  <span class=3D"co">; keys and values of the se=
cond level</span>
         <span class=3D"kw">:when</span> (<span class=3D"kw">try</span> (lv=
l2-prd k2) (<span class=3D"kw">catch</span> Exception <span class=3D"kw">e<=
/span> false))
         <span class=3D"kw">:let</span> [res (<span class=3D"kw">set</span>=
 (<span class=3D"kw">filter</span> lvl3-prd l3-set))] ]
     (<span class=3D"kw">with-meta</span> [k1 k2 res] (<span class=3D"kw">m=
eta</span> pred-clause))))</code></pre>
<p>Assuming the query was executed on July 4th, the results of executing it=
 on the above data are seen in Table 10.6.</p>
<table>
<tbody><tr>
<td>
Result Clause
</td><td>
Result Meta
</td>
</tr>
<tr>
<td>
[:likes Pizza #{1}]
</td><td>
["?e" nil nil]
</td>
</tr>
<tr>
<td>
[:name USA #{1}]
</td><td>
["?e" nil "?nm"]
</td>
</tr>
<tr>
<td>
[:speak "English" #{1, 3}]
</td><td>
["?e" nil nil]
</td>
</tr>
<tr>
<td>
[:bday "July 4, 1776" #{1}]
</td><td>
["?e" nil "?bd"]
</td>
</tr>
<tr>
<td>
[:name France #{2}]
</td><td>
["?e" nil "?nm"]
</td>
</tr>
<tr>
<td>
[:bday "July 14, 1789" #{2}]
</td><td>
["?e" nil "?bd"]
</td>
</tr>
<tr>
<td>
[:name Canada #{3}]
</td><td>
["?e" nil "?nm"]
</td>
</tr>
<tr>
<td>
[:bday "July 1, 1867" {3}]
</td><td>
["?e" nil "?bd"]
</td>
</tr>
</tbody></table>
<p>: <b>Table 10.6</b> - Query results</p>
<p>Once we have produced all of the result clauses, we need to perform an <=
code>AND</code> operation between them. This is done by finding all of the =
elements that passed all the predicate clauses:</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> items-that-answer-all-conditio=
ns </span>[items-seq num-of-conditions]
   (<span class=3D"kw">-&gt;&gt;</span> items-seq <span class=3D"co">; take=
 the items-seq</span>
         (<span class=3D"kw">map</span> <span class=3D"kw">vec</span>) <spa=
n class=3D"co">; make each collection (actually a set) into a vector</span>
         (<span class=3D"kw">reduce</span> <span class=3D"kw">into</span> [=
]) <span class=3D"co">;reduce all the vectors into one vector</span>
         (frequencies) <span class=3D"co">;count for each item in how many =
collections (sets) it was in</span>
         (<span class=3D"kw">filter</span> #(<span class=3D"kw">&lt;=3D</sp=
an> num-of-conditions (<span class=3D"kw">last</span> %))) <span class=3D"c=
o">;items that answered all conditions</span>
         (<span class=3D"kw">map</span> <span class=3D"kw">first</span>) <s=
pan class=3D"co">; take from the duos the items themselves</span>
         (<span class=3D"kw">set</span>))) <span class=3D"co">; return it a=
s set</span></code></pre>
<p>In our example, the result of this step is a set that holds the value <e=
m>1</em> (which is the entity ID of USA).</p>
<p>We now have to remove the items that didn=E2=80=99t pass all of the cond=
itions:</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> mask-path-leaf-with-items </sp=
an>[relevant-items <span class=3D"kw">path</span>]
     (<span class=3D"kw">update-in</span> <span class=3D"kw">path</span> [<=
span class=3D"dv">2</span>] CS/intersection relevant-items))</code></pre>
<p>Finally, we remove all of the result clauses that are "empty" (i.e., the=
ir last item is empty). We do this in the last line of the <code>query-inde=
x</code> function. Our example leaves us with the items in Table 10.7.</p>
<table>
<tbody><tr>
<td>
Result Clause
</td><td>
Result Meta
</td>
</tr>
<tr>
<td>
[:likes Pizza #{1}]
</td><td>
["?e" nil nil]
</td>
</tr>
<tr>
<td>
[:name USA #{1}]
</td><td>
["?e" nil "?nm"]
</td>
</tr>
<tr>
<td>
[:bday "July 4, 1776" #{1}]
</td><td>
["?e" nil "?bd"]
</td>
</tr>
<tr>
<td>
[:speak "English" #{1}]
</td><td>
["?e" nil nil]
</td>
</tr>
</tbody></table>
<p>: <b>Table 10.7</b> - Filtered query results</p>
<p>We are now ready to report the results. The result clause structure is u=
nwieldy for this purpose, so we will convert it into an an index-like struc=
ture (map of maps)=E2=80=94with a significant twist.</p>
<p>To understand the twist, we must first introduce the idea of a <em>bindi=
ng pair</em>, which is a pair that matches a variable name to its value. Th=
e variable name is the one used at the predicate clauses, and the value is =
the value found in the result clauses.</p>
<p>The twist to the index structure is that now we hold a binding pair of t=
he entity-id / attr-name / value in the location where we held an entity-id=
 / attr-name / value in an index:</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> bind-variables-to-query </span=
>[q-res <span class=3D"kw">index</span>]
   (<span class=3D"kw">let</span> [seq-res-path (<span class=3D"kw">mapcat<=
/span> (<span class=3D"kw">partial</span> combine-path-and-meta (from-eav <=
span class=3D"kw">index</span>))=20
                               q-res)       <br>
         res-path (<span class=3D"kw">map</span> #(<span class=3D"kw">-&gt;=
&gt;</span> %<span class=3D"dv">1</span> (<span class=3D"kw">partition</spa=
n> <span class=3D"dv">2</span>)(<span class=3D"kw">apply</span> (to-eav <sp=
an class=3D"kw">index</span>))) seq-res-path)]=20
     (<span class=3D"kw">reduce</span> #(<span class=3D"kw">assoc-in</span>=
 %<span class=3D"dv">1</span>  (<span class=3D"kw">butlast</span> %<span cl=
ass=3D"dv">2</span>) (<span class=3D"kw">last</span> %<span class=3D"dv">2<=
/span>)) {} res-path)))<p></p>
</code><p><code class=3D"sourceCode clojure">(<span class=3D"kw">defn</span=
><span class=3D"fu"> combine-path-and-meta </span>[from-eav-fn <span class=
=3D"kw">path</span>]
    (<span class=3D"kw">let</span> [expanded-path [(<span class=3D"kw">repe=
at</span> (<span class=3D"kw">first</span> <span class=3D"kw">path</span>))=
 (<span class=3D"kw">repeat</span> (<span class=3D"kw">second</span> <span =
class=3D"kw">path</span>)) (<span class=3D"kw">last</span> <span class=3D"k=
w">path</span>)]=20
          meta-of-path (<span class=3D"kw">apply</span> from-eav-fn (<span =
class=3D"kw">map</span> <span class=3D"kw">repeat</span> (<span class=3D"kw=
">:db</span>/variable (<span class=3D"kw">meta</span> <span class=3D"kw">pa=
th</span>))))
          combined-data-and-meta-path (<span class=3D"kw">interleave</span>=
 meta-of-path expanded-path)]
       (<span class=3D"kw">apply</span> (<span class=3D"kw">partial</span> =
<span class=3D"kw">map</span> <span class=3D"kw">vector</span>) combined-da=
ta-and-meta-path)))</code></p></pre>
<p>At the end of phase 3 of our example execution, we have the following st=
ructure at hand:</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">{[<spa=
n class=3D"dv">1</span> <span class=3D"st">"?e"</span>]{=20
    {[<span class=3D"kw">:likes</span> nil]    [<span class=3D"st">"Pizza"<=
/span> nil]}
    {[<span class=3D"kw">:name</span> nil]     [<span class=3D"st">"USA"</s=
pan> <span class=3D"st">"?nm"</span>]}
    {[<span class=3D"kw">:speaks</span> nil]   [<span class=3D"st">"English=
"</span> nil]}=20
    {[<span class=3D"kw">:bday</span> nil] [<span class=3D"st">"July 4, 177=
6"</span> <span class=3D"st">"?bd"</span>]}=20
}}</code></pre>
<h4 id=3D"phase-4-unify-and-report">Phase 4: Unify and Report</h4>
<p>At this point, we=E2=80=99ve produced a superset of the results that the=
 user initially asked for. In this phase, we'll extract the values that the=
 user wants. This process is called <em>unification</em>: it is here that w=
e will unify the binding pairs structure with the vector of variable names =
that the user defined in the <code>:find</code> clause of the query.</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> unify </span>[binded-res-col n=
eeded-vars]
   (<span class=3D"kw">map</span> (<span class=3D"kw">partial</span> locate=
-vars-in-query-res needed-vars) binded-res-col))</code></pre>
<p>Each unification step is handled by <code>locate-vars-in-query-result</c=
ode>, which iterates over a query result (structured as an index entry, but=
 with binding pairs) to detect all the variables and values that the user a=
sked for.</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defn</span><span class=3D"fu"> locate-vars-in-query-res </spa=
n>[vars-set q-res]
   (<span class=3D"kw">let</span> [[e-pair av-map]  q-res
         e-res (resultify-bind-pair vars-set [] e-pair)]
     (<span class=3D"kw">map</span> (<span class=3D"kw">partial</span> resu=
ltify-av-pair vars-set e-res)  av-map)))<p></p>
<p>(<span class=3D"kw">defn</span><span class=3D"fu"> resultify-bind-pair <=
/span>[vars-set accum pair]
   (<span class=3D"kw">let</span> [[ var-name _] pair]
      (<span class=3D"kw">if</span> (<span class=3D"kw">contains?</span> va=
rs-set var-name) (<span class=3D"kw">conj</span> accum pair) accum)))</p>
</code><p><code class=3D"sourceCode clojure">(<span class=3D"kw">defn</span=
><span class=3D"fu"> resultify-av-pair </span>[vars-set accum-res av-pair]
   (<span class=3D"kw">reduce</span> (<span class=3D"kw">partial</span> res=
ultify-bind-pair vars-set) accum-res av-pair))</code></p></pre>
<p>At the end of this phase, the results for our example are:</p>
<pre><code>[("?nm" "USA") ("?bd" "July 4, 1776")]</code></pre>
<h4 id=3D"running-the-show">Running the Show</h4>
<p>We've finally built all of the components we need for our user-facing qu=
ery mechanism, the <code>q</code> macro, which receives as arguments a data=
base and a query.</p>
<pre class=3D"sourceCode clojure"><code class=3D"sourceCode clojure">(<span=
 class=3D"kw">defmacro</span><span class=3D"fu"> q</span>
  [db query]
  `(<span class=3D"kw">let</span> [pred-clauses#  (q-clauses-to-pred-clause=
s <span class=3D"kw">~(:where</span> query))=20
         needed-vars# (symbol-col-to-set  <span class=3D"kw">~(:find</span>=
 query))
         query-plan# (build-query-plan pred-clauses#)
         query-internal-res# (query-plan# <span class=3D"kw">~db)]</span>
     (unify query-internal-res# needed-vars#)))</code></pre>
<h2 id=3D"summary">Summary</h2>
<p>Our journey started with a conception of a different kind of database, a=
nd ended with one that:</p>
<ul>
<li>Supports ACI transactions (durability was lost when we decided to have =
the data stored in-memory).</li>
<li>Supports "what if" interactions.</li>
<li>Answers time-related questions.</li>
<li>Handles simple datalog queries that are optimized with indexes.</li>
<li>Provides APIs for graph queries.</li>
<li>Introduces and implements the notion of evolutionary queries.</li>
</ul>
<p>There are still many things that we could improve: We could add caching =
to several components to improve performance; support richer queries; and a=
dd real storage support to provide data durability, to name a few.</p>
<p>However, our final product can do a great many things, and was implement=
ed in 488 lines of Clojure source code, 73 of which are blank lines and 55 =
of which are docstrings.</p>
<p>Finally, there's one thing that is still missing: a name. The only sensi=
ble option for an in-memory, index-optimized, query-supporting, library dev=
eloper-friendly, time-aware functional database implemented in 360 lines of=
 Clojure code is CircleDB.</p><p></p>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div style=3D"position: absolute; =
width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margi=
n: 0px;"><div id=3D"MathJax_Font_Test" style=3D"position: absolute; visibil=
ity: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; m=
argin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-t=
ransform: none; line-height: normal; letter-spacing: normal; word-spacing: =
normal; font-size: 40px; font-weight: normal; font-style: normal; font-fami=
ly: MathJax_Main, sans-serif;"></div></div><div id=3D"qb-sougou-search" sty=
le=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D"last=
-btn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-98-5d180298-9d7a-473b-=
bd85-6b86b491a39d@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?V=2.7.1

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
AMbULpkAAAAAxvkyTwAAAADR7uVs
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?V=2.7.1

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
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?V=2.7.1

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
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/functionalDB-images/image_0.png

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
AElFTkSuQmCC
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/functionalDB-images/image_1.png

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
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/functionalDB-images/image_2.png

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
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv----
Content-Type: text/html
Content-ID: <frame-98-5d180298-9d7a-473b-bd85-6b86b491a39d@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--Nh6brx2FqpoaDiM4GuZMDn5PWTU3QbkYDENYm5IDtv------
