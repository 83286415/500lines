From: <Saved by Blink>
Subject: 500 Lines or Less | A Web Crawler With asyncio Coroutines
Date: Tue, 11 Feb 2019 01:52:03 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----"

------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: text/html
Content-ID: <frame-60-87931d85-783c-4236-ba61-ee071d783daa@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | A Web Crawler With asyncio Coroutines</title=
>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div id=3D"MathJax_Message" style=3D"display: none;"></div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>A Web Crawler With asyncio Coroutines</h1>
          <h2 class=3D"author">A. Jesse Jiryu Davis and Guido van Rossum</h=
2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em>A. Jesse Jiryu Davis is a staff engineer at MongoDB in New=
 York. He wrote Motor, the async MongoDB Python driver, and he is the lead =
developer of the MongoDB C Driver and a member of the PyMongo team. He cont=
ributes to asyncio and Tornado. He writes at <a href=3D"http://emptysqua.re=
/">http://emptysqua.re</a>.</em></p>

<p><em>Guido van Rossum is the creator of Python, one of the major programm=
ing languages on and off the web. The Python community refers to him as the=
 BDFL (Benevolent Dictator For Life), a title straight from a Monty Python =
skit. Guido's home on the web is <a href=3D"http://www.python.org/~guido/">=
http://www.python.org/~guido/</a>.</em></p>

<h2 id=3D"introduction">Introduction</h2>

<p>Classical computer science emphasizes efficient algorithms that complete=
 computations as quickly as possible. But many networked programs spend the=
ir time not computing, but holding open many connections that are slow, or =
have infrequent events. These programs present a very different challenge: =
to wait for a huge number of network events efficiently. A contemporary app=
roach to this problem is asynchronous I/O, or "async".</p>

<p>This chapter presents a simple web crawler. The crawler is an archetypal=
 async application because it waits for many responses, but does little com=
putation. The more pages it can fetch at once, the sooner it completes. If =
it devotes a thread to each in-flight request, then as the number of concur=
rent requests rises it will run out of memory or other thread-related resou=
rce before it runs out of sockets. It avoids the need for threads by using =
asynchronous I/O.</p>

<p>We present the example in three stages. First, we show an async event lo=
op and sketch a crawler that uses the event loop with callbacks: it is very=
 efficient, but extending it to more complex problems would lead to unmanag=
eable spaghetti code. Second, therefore, we show that Python coroutines are=
 both efficient and extensible. We implement simple coroutines in Python us=
ing generator functions. In the third stage, we use the full-featured corou=
tines from Python's standard "asyncio" library<a href=3D"http://aosabook.or=
g/en/500L/a-web-crawler-with-asyncio-coroutines.html#fn1" class=3D"footnote=
Ref" id=3D"fnref1"><sup>1</sup></a>, and coordinate them using an async que=
ue.</p>

<h2 id=3D"the-task">The Task</h2>

<p>A web crawler finds and downloads all pages on a website, perhaps to arc=
hive or index them. Beginning with a root URL, it fetches each page, parses=
 it for links to unseen pages, and adds these to a queue. It stops when it =
fetches a page with no unseen links and the queue is empty.</p>

<p>We can hasten this process by downloading many pages concurrently. As th=
e crawler finds new links, it launches simultaneous fetch operations for th=
e new pages on separate sockets. It parses responses as they arrive, adding=
 new links to the queue. There may come some point of diminishing returns w=
here too much concurrency degrades performance, so we cap the number of con=
current requests, and leave the remaining links in the queue until some in-=
flight requests complete.</p>

<h2 id=3D"the-traditional-approach">The Traditional Approach</h2>

<p>How do we make the crawler concurrent? Traditionally we would create a t=
hread pool. Each thread would be in charge of downloading one page at a tim=
e over a socket. For example, to download a page from <code>xkcd.com</code>=
:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> fetch(url):
    sock =3D socket.socket()
    sock.<span class=3D"ot">connect</span>((<span class=3D"st">'xkcd.com'</=
span>, <span class=3D"dv">80</span>))
    request =3D <span class=3D"st">'GET {} HTTP/1.0</span><span class=3D"ch=
">\r\n</span><span class=3D"st">Host: xkcd.com</span><span class=3D"ch">\r\=
n\r\n</span><span class=3D"st">'</span>.<span class=3D"dt">format</span>(ur=
l)
    sock.send(request.encode(<span class=3D"st">'ascii'</span>))
    response =3D b<span class=3D"st">''</span>
    chunk =3D sock.recv(<span class=3D"dv">4096</span>)
    <span class=3D"kw">while</span> chunk:
        response +=3D chunk
        chunk =3D sock.recv(<span class=3D"dv">4096</span>)

    <span class=3D"co"># Page is now downloaded.</span>
    links =3D parse_links(response)
    q.add(links)</code></pre>

<p>By default, socket operations are <em>blocking</em>: when the thread cal=
ls a method like <code>connect</code> or <code>recv</code>, it pauses until=
 the operation completes.<a href=3D"http://aosabook.org/en/500L/a-web-crawl=
er-with-asyncio-coroutines.html#fn2" class=3D"footnoteRef" id=3D"fnref2"><s=
up>2</sup></a> Consequently to download many pages at once, we need many th=
reads. A sophisticated application amortizes the cost of thread-creation by=
 keeping idle threads in a thread pool, then checking them out to reuse the=
m for subsequent tasks; it does the same with sockets in a connection pool.=
</p>

<p>And yet, threads are expensive, and operating systems enforce a variety =
of hard caps on the number of threads a process, user, or machine may have.=
 On Jesse's system, a Python thread costs around 50k of memory, and startin=
g tens of thousands of threads causes failures. If we scale up to tens of t=
housands of simultaneous operations on concurrent sockets, we run out of th=
reads before we run out of sockets. Per-thread overhead or system limits on=
 threads are the bottleneck.</p>

<p>In his influential article "The C10K problem"<a href=3D"http://aosabook.=
org/en/500L/a-web-crawler-with-asyncio-coroutines.html#fn3" class=3D"footno=
teRef" id=3D"fnref3"><sup>3</sup></a>, Dan Kegel outlines the limitations o=
f multithreading for I/O concurrency. He begins,</p>

<blockquote>
<p>It's time for web servers to handle ten thousand clients simultaneously,=
 don't you think? After all, the web is a big place now.</p>
</blockquote>

<p>Kegel coined the term "C10K" in 1999. Ten thousand connections sounds da=
inty now, but the problem has changed only in size, not in kind. Back then,=
 using a thread per connection for C10K was impractical. Now the cap is ord=
ers of magnitude higher. Indeed, our toy web crawler would work just fine w=
ith threads. Yet for very large scale applications, with hundreds of thousa=
nds of connections, the cap remains: there is a limit beyond which most sys=
tems can still create sockets, but have run out of threads. How can we over=
come this?</p>

<h2 id=3D"async">Async</h2>

<p>Asynchronous I/O frameworks do concurrent operations on a single thread =
using <em>non-blocking</em> sockets. In our async crawler, we set the socke=
t non-blocking before we begin to connect to the server:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">sock =3D=
 socket.socket()
sock.setblocking(<span class=3D"ot">False</span>)
<span class=3D"kw">try</span>:
    sock.<span class=3D"ot">connect</span>((<span class=3D"st">'xkcd.com'</=
span>, <span class=3D"dv">80</span>))
<span class=3D"kw">except</span> <span class=3D"ot">BlockingIOError</span>:
    <span class=3D"kw">pass</span></code></pre>

<p>Irritatingly, a non-blocking socket throws an exception from <code>conne=
ct</code>, even when it is working normally. This exception replicates the =
irritating behavior of the underlying C function, which sets <code>errno</c=
ode> to <code>EINPROGRESS</code> to tell you it has begun.</p>

<p>Now our crawler needs a way to know when the connection is established, =
so it can send the HTTP request. We could simply keep trying in a tight loo=
p:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">request =
=3D <span class=3D"st">'GET {} HTTP/1.0</span><span class=3D"ch">\r\n</span=
><span class=3D"st">Host: xkcd.com</span><span class=3D"ch">\r\n\r\n</span>=
<span class=3D"st">'</span>.<span class=3D"dt">format</span>(url)
encoded =3D request.encode(<span class=3D"st">'ascii'</span>)

<span class=3D"kw">while</span> <span class=3D"ot">True</span>:
    <span class=3D"kw">try</span>:
        sock.send(encoded)
        <span class=3D"kw">break</span>  <span class=3D"co"># Done.</span>
    <span class=3D"kw">except</span> <span class=3D"ot">OSError</span> <spa=
n class=3D"ch">as</span> e:
        <span class=3D"kw">pass</span>

<span class=3D"dt">print</span>(<span class=3D"st">'sent'</span>)</code></p=
re>

<p>This method not only wastes electricity, but it cannot efficiently await=
 events on <em>multiple</em> sockets. In ancient times, BSD Unix's solution=
 to this problem was <code>select</code>, a C function that waits for an ev=
ent to occur on a non-blocking socket or a small array of them. Nowadays th=
e demand for Internet applications with huge numbers of connections has led=
 to replacements like <code>poll</code>, then <code>kqueue</code> on BSD an=
d <code>epoll</code> on Linux. These APIs are similar to <code>select</code=
>, but perform well with very large numbers of connections.</p>

<p>Python 3.4's <code>DefaultSelector</code> uses the best <code>select</co=
de>-like function available on your system. To register for notifications a=
bout network I/O, we create a non-blocking socket and register it with the =
default selector:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"ch">from</span> selectors <span class=3D"ch">import</span> DefaultSe=
lector, EVENT_WRITE

selector =3D DefaultSelector()

sock =3D socket.socket()
sock.setblocking(<span class=3D"ot">False</span>)
<span class=3D"kw">try</span>:
    sock.<span class=3D"ot">connect</span>((<span class=3D"st">'xkcd.com'</=
span>, <span class=3D"dv">80</span>))
<span class=3D"kw">except</span> <span class=3D"ot">BlockingIOError</span>:
    <span class=3D"kw">pass</span>

<span class=3D"kw">def</span> connected():
    selector.unregister(sock.fileno())
    <span class=3D"dt">print</span>(<span class=3D"st">'connected!'</span>)

selector.register(sock.fileno(), EVENT_WRITE, connected)</code></pre>

<p>We disregard the spurious error and call <code>selector.register</code>,=
 passing in the socket's file descriptor and a constant that expresses what=
 event we are waiting for. To be notified when the connection is establishe=
d, we pass <code>EVENT_WRITE</code>: that is, we want to know when the sock=
et is "writable". We also pass a Python function, <code>connected</code>, t=
o run when that event occurs. Such a function is known as a <em>callback</e=
m>.</p>

<p>We process I/O notifications as the selector receives them, in a loop:</=
p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> loop():
    <span class=3D"kw">while</span> <span class=3D"ot">True</span>:
        events =3D selector.select()
        <span class=3D"kw">for</span> event_key, event_mask in events:
            callback =3D event_key.data
            callback()</code></pre>

<p>The <code>connected</code> callback is stored as <code>event_key.data</c=
ode>, which we retrieve and execute once the non-blocking socket is connect=
ed.</p>

<p>Unlike in our fast-spinning loop above, the call to <code>select</code> =
here pauses, awaiting the next I/O events. Then the loop runs callbacks tha=
t are waiting for these events. Operations that have not completed remain p=
ending until some future tick of the event loop.</p>

<p>What have we demonstrated already? We showed how to begin an operation a=
nd execute a callback when the operation is ready. An async <em>framework</=
em> builds on the two features we have shown=E2=80=94non-blocking sockets a=
nd the event loop=E2=80=94to run concurrent operations on a single thread.<=
/p>

<p>We have achieved "concurrency" here, but not what is traditionally calle=
d "parallelism". That is, we built a tiny system that does overlapping I/O.=
 It is capable of beginning new operations while others are in flight. It d=
oes not actually utilize multiple cores to execute computation in parallel.=
 But then, this system is designed for I/O-bound problems, not CPU-bound on=
es.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-corout=
ines.html#fn4" class=3D"footnoteRef" id=3D"fnref4"><sup>4</sup></a></p>

<p>So our event loop is efficient at concurrent I/O because it does not dev=
ote thread resources to each connection. But before we proceed, it is impor=
tant to correct a common misapprehension that async is <em>faster</em> than=
 multithreading. Often it is not=E2=80=94indeed, in Python, an event loop l=
ike ours is moderately slower than multithreading at serving a small number=
 of very active connections. In a runtime without a global interpreter lock=
, threads would perform even better on such a workload. What asynchronous I=
/O is right for, is applications with many slow or sleepy connections with =
infrequent events.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with=
-asyncio-coroutines.html#fn5" class=3D"footnoteRef" id=3D"fnref5"><sup>5</s=
up></a></p>

<h2 id=3D"programming-with-callbacks">Programming With Callbacks</h2>

<p>With the runty async framework we have built so far, how can we build a =
web crawler? Even a simple URL-fetcher is painful to write.</p>

<p>We begin with global sets of the URLs we have yet to fetch, and the URLs=
 we have seen:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">urls_tod=
o =3D <span class=3D"dt">set</span>([<span class=3D"st">'/'</span>])
seen_urls =3D <span class=3D"dt">set</span>([<span class=3D"st">'/'</span>]=
)</code></pre>

<p>The <code>seen_urls</code> set includes <code>urls_todo</code> plus comp=
leted URLs. The two sets are initialized with the root URL "/".</p>

<p>Fetching a page will require a series of callbacks. The <code>connected<=
/code> callback fires when a socket is connected, and sends a GET request t=
o the server. But then it must await a response, so it registers another ca=
llback. If, when that callback fires, it cannot read the full response yet,=
 it registers again, and so on.</p>

<p>Let us collect these callbacks into a <code>Fetcher</code> object. It ne=
eds a URL, a socket object, and a place to accumulate the response bytes:</=
p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Fetcher:
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>, url):
        <span class=3D"ot">self</span>.response =3D b<span class=3D"st">''<=
/span>  <span class=3D"co"># Empty array of bytes.</span>
        <span class=3D"ot">self</span>.url =3D url
        <span class=3D"ot">self</span>.sock =3D <span class=3D"ot">None</sp=
an></code></pre>

<p>We begin by calling <code>Fetcher.fetch</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method on Fetcher class.</span>
    <span class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.sock =3D socket.socket()
        <span class=3D"ot">self</span>.sock.setblocking(<span class=3D"ot">=
False</span>)
        <span class=3D"kw">try</span>:
            <span class=3D"ot">self</span>.sock.<span class=3D"ot">connect<=
/span>((<span class=3D"st">'xkcd.com'</span>, <span class=3D"dv">80</span>)=
)
        <span class=3D"kw">except</span> <span class=3D"ot">BlockingIOError=
</span>:
            <span class=3D"kw">pass</span>

        <span class=3D"co"># Register next callback.</span>
        selector.register(<span class=3D"ot">self</span>.sock.fileno(),
                          EVENT_WRITE,
                          <span class=3D"ot">self</span>.connected)</code><=
/pre>

<p>The <code>fetch</code> method begins connecting a socket. But notice the=
 method returns before the connection is established. It must return contro=
l to the event loop to wait for the connection. To understand why, imagine =
our whole application was structured so:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># Begin fetching http://xkcd.com/353/</span>
fetcher =3D Fetcher(<span class=3D"st">'/353/'</span>)
fetcher.fetch()

<span class=3D"kw">while</span> <span class=3D"ot">True</span>:
    events =3D selector.select()
    <span class=3D"kw">for</span> event_key, event_mask in events:
        callback =3D event_key.data
        callback(event_key, event_mask)</code></pre>

<p>All event notifications are processed in the event loop when it calls <c=
ode>select</code>. Hence <code>fetch</code> must hand control to the event =
loop, so that the program knows when the socket has connected. Only then do=
es the loop run the <code>connected</code> callback, which was registered a=
t the end of <code>fetch</code> above.</p>

<p>Here is the implementation of <code>connected</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method on Fetcher class.</span>
    <span class=3D"kw">def</span> connected(<span class=3D"ot">self</span>,=
 key, mask):
        <span class=3D"dt">print</span>(<span class=3D"st">'connected!'</sp=
an>)
        selector.unregister(key.fd)
        request =3D <span class=3D"st">'GET {} HTTP/1.0</span><span class=
=3D"ch">\r\n</span><span class=3D"st">Host: xkcd.com</span><span class=3D"c=
h">\r\n\r\n</span><span class=3D"st">'</span>.<span class=3D"dt">format</sp=
an>(<span class=3D"ot">self</span>.url)
        <span class=3D"ot">self</span>.sock.send(request.encode(<span class=
=3D"st">'ascii'</span>))

        <span class=3D"co"># Register the next callback.</span>
        selector.register(key.fd,
                          EVENT_READ,
                          <span class=3D"ot">self</span>.read_response)</co=
de></pre>

<p>The method sends a GET request. A real application would check the retur=
n value of <code>send</code> in case the whole message cannot be sent at on=
ce. But our request is small and our application unsophisticated. It blithe=
ly calls <code>send</code>, then waits for a response. Of course, it must r=
egister yet another callback and relinquish control to the event loop. The =
next and final callback, <code>read_response</code>, processes the server's=
 reply:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method on Fetcher class.</span>
    <span class=3D"kw">def</span> read_response(<span class=3D"ot">self</sp=
an>, key, mask):
        <span class=3D"kw">global</span> stopped

        chunk =3D <span class=3D"ot">self</span>.sock.recv(<span class=3D"d=
v">4096</span>)  <span class=3D"co"># 4k chunk size.</span>
        <span class=3D"kw">if</span> chunk:
            <span class=3D"ot">self</span>.response +=3D chunk
        <span class=3D"kw">else</span>:
            selector.unregister(key.fd)  <span class=3D"co"># Done reading.=
</span>
            links =3D <span class=3D"ot">self</span>.parse_links()

            <span class=3D"co"># Python set-logic:</span>
            <span class=3D"kw">for</span> link in links.difference(seen_url=
s):
                urls_todo.add(link)
                Fetcher(link).fetch()  <span class=3D"co"># &lt;- New Fetch=
er.</span>

            seen_urls.update(links)
            urls_todo.remove(<span class=3D"ot">self</span>.url)
            <span class=3D"kw">if</span> not urls_todo:
                stopped =3D <span class=3D"ot">True</span></code></pre>

<p>The callback is executed each time the selector sees that the socket is =
"readable", which could mean two things: the socket has data or it is close=
d.</p>

<p>The callback asks for up to four kilobytes of data from the socket. If l=
ess is ready, <code>chunk</code> contains whatever data is available. If th=
ere is more, <code>chunk</code> is four kilobytes long and the socket remai=
ns readable, so the event loop runs this callback again on the next tick. W=
hen the response is complete, the server has closed the socket and <code>ch=
unk</code> is empty.</p>

<p>The <code>parse_links</code> method, not shown, returns a set of URLs. W=
e start a new fetcher for each new URL, with no concurrency cap. Note a nic=
e feature of async programming with callbacks: we need no mutex around chan=
ges to shared data, such as when we add links to <code>seen_urls</code>. Th=
ere is no preemptive multitasking, so we cannot be interrupted at arbitrary=
 points in our code.</p>

<p>We add a global <code>stopped</code> variable and use it to control the =
loop:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">stopped =
=3D <span class=3D"ot">False</span>

<span class=3D"kw">def</span> loop():
    <span class=3D"kw">while</span> not stopped:
        events =3D selector.select()
        <span class=3D"kw">for</span> event_key, event_mask in events:
            callback =3D event_key.data
            callback()</code></pre>

<p>Once all pages are downloaded the fetcher stops the global event loop an=
d the program exits.</p>

<p>This example makes async's problem plain: spaghetti code. We need some w=
ay to express a series of computations and I/O operations, and schedule mul=
tiple such series of operations to run concurrently. But without threads, a=
 series of operations cannot be collected into a single function: whenever =
a function begins an I/O operation, it explicitly saves whatever state will=
 be needed in the future, then returns. You are responsible for thinking ab=
out and writing this state-saving code.</p>

<p>Let us explain what we mean by that. Consider how simply we fetched a UR=
L on a thread with a conventional blocking socket:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># Blocking version.</span>
<span class=3D"kw">def</span> fetch(url):
    sock =3D socket.socket()
    sock.<span class=3D"ot">connect</span>((<span class=3D"st">'xkcd.com'</=
span>, <span class=3D"dv">80</span>))
    request =3D <span class=3D"st">'GET {} HTTP/1.0</span><span class=3D"ch=
">\r\n</span><span class=3D"st">Host: xkcd.com</span><span class=3D"ch">\r\=
n\r\n</span><span class=3D"st">'</span>.<span class=3D"dt">format</span>(ur=
l)
    sock.send(request.encode(<span class=3D"st">'ascii'</span>))
    response =3D b<span class=3D"st">''</span>
    chunk =3D sock.recv(<span class=3D"dv">4096</span>)
    <span class=3D"kw">while</span> chunk:
        response +=3D chunk
        chunk =3D sock.recv(<span class=3D"dv">4096</span>)

    <span class=3D"co"># Page is now downloaded.</span>
    links =3D parse_links(response)
    q.add(links)</code></pre>

<p>What state does this function remember between one socket operation and =
the next? It has the socket, a URL, and the accumulating <code>response</co=
de>. A function that runs on a thread uses basic features of the programmin=
g language to store this temporary state in local variables, on its stack. =
The function also has a "continuation"=E2=80=94that is, the code it plans t=
o execute after I/O completes. The runtime remembers the continuation by st=
oring the thread's instruction pointer. You need not think about restoring =
these local variables and the continuation after I/O. It is built in to the=
 language.</p>

<p>But with a callback-based async framework, these language features are n=
o help. While waiting for I/O, a function must save its state explicitly, b=
ecause the function returns and loses its stack frame before I/O completes.=
 In lieu of local variables, our callback-based example stores <code>sock</=
code> and <code>response</code> as attributes of <code>self</code>, the Fet=
cher instance. In lieu of the instruction pointer, it stores its continuati=
on by registering the callbacks <code>connected</code> and <code>read_respo=
nse</code>. As the application's features grow, so does the complexity of t=
he state we manually save across callbacks. Such onerous bookkeeping makes =
the coder prone to migraines.</p>

<p>Even worse, what happens if a callback throws an exception, before it sc=
hedules the next callback in the chain? Say we did a poor job on the <code>=
parse_links</code> method and it throws an exception parsing some HTML:</p>

<pre><code>Traceback (most recent call last):
  File "loop-with-callbacks.py", line 111, in &lt;module&gt;
    loop()
  File "loop-with-callbacks.py", line 106, in loop
    callback(event_key, event_mask)
  File "loop-with-callbacks.py", line 51, in read_response
    links =3D self.parse_links()
  File "loop-with-callbacks.py", line 67, in parse_links
    raise Exception('parse error')
Exception: parse error</code></pre>

<p>The stack trace shows only that the event loop was running a callback. W=
e do not remember what led to the error. The chain is broken on both ends: =
we forgot where we were going and whence we came. This loss of context is c=
alled "stack ripping", and in many cases it confounds the investigator. Sta=
ck ripping also prevents us from installing an exception handler for a chai=
n of callbacks, the way a "try / except" block wraps a function call and it=
s tree of descendents.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-=
with-asyncio-coroutines.html#fn6" class=3D"footnoteRef" id=3D"fnref6"><sup>=
6</sup></a></p>

<p>So, even apart from the long debate about the relative efficiencies of m=
ultithreading and async, there is this other debate regarding which is more=
 error-prone: threads are susceptible to data races if you make a mistake s=
ynchronizing them, but callbacks are stubborn to debug due to stack ripping=
.</p>

<h2 id=3D"coroutines">Coroutines</h2>

<p>We entice you with a promise. It is possible to write asynchronous code =
that combines the efficiency of callbacks with the classic good looks of mu=
ltithreaded programming. This combination is achieved with a pattern called=
 "coroutines". Using Python 3.4's standard asyncio library, and a package c=
alled "aiohttp", fetching a URL in a coroutine is very direct<a href=3D"htt=
p://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html#fn7" cl=
ass=3D"footnoteRef" id=3D"fnref7"><sup>7</sup></a>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"ot">@asyncio.coroutine</span>
    <span class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>, url=
):
        response =3D <span class=3D"kw">yield</span> <span class=3D"ch">fro=
m</span> <span class=3D"ot">self</span>.session.get(url)
        body =3D <span class=3D"kw">yield</span> <span class=3D"ch">from</s=
pan> response.read()</code></pre>

<p>It is also scalable. Compared to the 50k of memory per thread and the op=
erating system's hard limits on threads, a Python coroutine takes barely 3k=
 of memory on Jesse's system. Python can easily start hundreds of thousands=
 of coroutines.</p>

<p>The concept of a coroutine, dating to the elder days of computer science=
, is simple: it is a subroutine that can be paused and resumed. Whereas thr=
eads are preemptively multitasked by the operating system, coroutines multi=
task cooperatively: they choose when to pause, and which coroutine to run n=
ext.</p>

<p>There are many implementations of coroutines; even in Python there are s=
everal. The coroutines in the standard "asyncio" library in Python 3.4 are =
built upon generators, a Future class, and the "yield from" statement. Star=
ting in Python 3.5, coroutines are a native feature of the language itself<=
a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines=
.html#fn8" class=3D"footnoteRef" id=3D"fnref8"><sup>8</sup></a>; however, u=
nderstanding coroutines as they were first implemented in Python 3.4, using=
 pre-existing language facilities, is the foundation to tackle Python 3.5's=
 native coroutines.</p>

<p>To explain Python 3.4's generator-based coroutines, we will engage in an=
 exposition of generators and how they are used as coroutines in asyncio, a=
nd trust you will enjoy reading it as much as we enjoyed writing it. Once w=
e have explained generator-based coroutines, we shall use them in our async=
 web crawler.</p>

<h2 id=3D"how-python-generators-work">How Python Generators Work</h2>

<p>Before you grasp Python generators, you have to understand how regular P=
ython functions work. Normally, when a Python function calls a subroutine, =
the subroutine retains control until it returns, or throws an exception. Th=
en control returns to the caller:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> foo():
...     bar()
...
&gt;&gt;&gt; <span class=3D"kw">def</span> bar():
...     <span class=3D"kw">pass</span></code></pre>

<p>The standard Python interpreter is written in C. The C function that exe=
cutes a Python function is called, mellifluously, <code>PyEval_EvalFrameEx<=
/code>. It takes a Python stack frame object and evaluates Python bytecode =
in the context of the frame. Here is the bytecode for <code>foo</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"ch">import</span> dis
&gt;&gt;&gt; dis.dis(foo)
  <span class=3D"dv">2</span>           <span class=3D"dv">0</span> LOAD_GL=
OBAL              <span class=3D"dv">0</span> (bar)
              <span class=3D"dv">3</span> CALL_FUNCTION            <span cl=
ass=3D"dv">0</span> (<span class=3D"dv">0</span> positional, <span class=3D=
"dv">0</span> keyword pair)
              <span class=3D"dv">6</span> POP_TOP
              <span class=3D"dv">7</span> LOAD_CONST               <span cl=
ass=3D"dv">0</span> (<span class=3D"ot">None</span>)
             <span class=3D"dv">10</span> RETURN_VALUE</code></pre>

<p>The <code>foo</code> function loads <code>bar</code> onto its stack and =
calls it, then pops its return value from the stack, loads <code>None</code=
> onto the stack, and returns <code>None</code>.</p>

<p>When <code>PyEval_EvalFrameEx</code> encounters the <code>CALL_FUNCTION<=
/code> bytecode, it creates a new Python stack frame and recurses: that is,=
 it calls <code>PyEval_EvalFrameEx</code> recursively with the new frame, w=
hich is used to execute <code>bar</code>.</p>

<p>It is crucial to understand that Python stack frames are allocated in he=
ap memory! The Python interpreter is a normal C program, so its stack frame=
s are normal stack frames. But the <em>Python</em> stack frames it manipula=
tes are on the heap. Among other surprises, this means a Python stack frame=
 can outlive its function call. To see this interactively, save the current=
 frame from within <code>bar</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"ch">import</span> inspect
&gt;&gt;&gt; frame =3D <span class=3D"ot">None</span>
&gt;&gt;&gt; <span class=3D"kw">def</span> foo():
...     bar()
...
&gt;&gt;&gt; <span class=3D"kw">def</span> bar():
...     <span class=3D"kw">global</span> frame
...     frame =3D inspect.currentframe()
...
&gt;&gt;&gt; foo()
&gt;&gt;&gt; <span class=3D"co"># The frame was executing the code for 'bar=
'.</span>
&gt;&gt;&gt; frame.f_code.co_name
<span class=3D"co">'bar'</span>
&gt;&gt;&gt; <span class=3D"co"># Its back pointer refers to the frame for =
'foo'.</span>
&gt;&gt;&gt; caller_frame =3D frame.f_back
&gt;&gt;&gt; caller_frame.f_code.co_name
<span class=3D"co">'foo'</span></code></pre>

<div class=3D"center figure">
<a name=3D"figure-5.1"></a><img src=3D"http://aosabook.org/en/500L/crawler-=
images/function-calls.png" alt=3D"Figure 5.1 - Function Calls" title=3D"Fig=
ure 5.1 - Function Calls">
</div>

<p class=3D"center figcaption">
<small>Figure 5.1 - Function Calls</small>
</p>

<p>The stage is now set for Python generators, which use the same building =
blocks=E2=80=94code objects and stack frames=E2=80=94to marvelous effect.</=
p>

<p>This is a generator function:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> gen_fn():
...     result =3D <span class=3D"kw">yield</span> <span class=3D"dv">1</sp=
an>
...     <span class=3D"dt">print</span>(<span class=3D"st">'result of yield=
: {}'</span>.<span class=3D"dt">format</span>(result))
...     result2 =3D <span class=3D"kw">yield</span> <span class=3D"dv">2</s=
pan>
...     <span class=3D"dt">print</span>(<span class=3D"st">'result of 2nd y=
ield: {}'</span>.<span class=3D"dt">format</span>(result2))
...     <span class=3D"kw">return</span> <span class=3D"st">'done'</span>
...     </code></pre>

<p>When Python compiles <code>gen_fn</code> to bytecode, it sees the <code>=
yield</code> statement and knows that <code>gen_fn</code> is a generator fu=
nction, not a regular one. It sets a flag to remember this fact:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"co"># The generator flag is bit position 5.</span>
&gt;&gt;&gt; generator_bit =3D <span class=3D"dv">1</span> &lt;&lt; <span c=
lass=3D"dv">5</span>
&gt;&gt;&gt; <span class=3D"dt">bool</span>(gen_fn.__code__.co_flags &amp; =
generator_bit)
<span class=3D"ot">True</span></code></pre>

<p>When you call a generator function, Python sees the generator flag, and =
it does not actually run the function. Instead, it creates a generator:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen =3D gen_fn()
&gt;&gt;&gt; <span class=3D"dt">type</span>(gen)
&lt;<span class=3D"kw">class</span> <span class=3D"st">'generator'</span>&g=
t;</code></pre>

<p>A Python generator encapsulates a stack frame plus a reference to some c=
ode, the body of <code>gen_fn</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen.gi_code.co_name
<span class=3D"co">'gen_fn'</span></code></pre>

<p>All generators from calls to <code>gen_fn</code> point to this same code=
. But each has its own stack frame. This stack frame is not on any actual s=
tack, it sits in heap memory waiting to be used:</p>

<div class=3D"center figure">
<a name=3D"figure-5.2"></a><img src=3D"http://aosabook.org/en/500L/crawler-=
images/generator.png" alt=3D"Figure 5.2 - Generators" title=3D"Figure 5.2 -=
 Generators">
</div>

<p class=3D"center figcaption">
<small>Figure 5.2 - Generators</small>
</p>

<p>The frame has a "last instruction" pointer, the instruction it executed =
most recently. In the beginning, the last instruction pointer is -1, meanin=
g the generator has not begun:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen.gi_frame.f_lasti
-<span class=3D"dv">1</span></code></pre>

<p>When we call <code>send</code>, the generator reaches its first <code>yi=
eld</code>, and pauses. The return value of <code>send</code> is 1, since t=
hat is what <code>gen</code> passes to the <code>yield</code> expression:</=
p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen.send(<span class=3D"ot">None</span>)
<span class=3D"dv">1</span></code></pre>

<p>The generator's instruction pointer is now 3 bytecodes from the start, p=
art way through the 56 bytes of compiled Python:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen.gi_frame.f_lasti
<span class=3D"dv">3</span>
&gt;&gt;&gt; <span class=3D"dt">len</span>(gen.gi_code.co_code)
<span class=3D"dv">56</span></code></pre>

<p>The generator can be resumed at any time, from any function, because its=
 stack frame is not actually on the stack: it is on the heap. Its position =
in the call hierarchy is not fixed, and it need not obey the first-in, last=
-out order of execution that regular functions do. It is liberated, floatin=
g free like a cloud.</p>

<p>We can send the value "hello" into the generator and it becomes the resu=
lt of the <code>yield</code> expression, and the generator continues until =
it yields 2:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen.send(<span class=3D"st">'hello'</span>)
result of <span class=3D"kw">yield</span>: hello
<span class=3D"dv">2</span></code></pre>

<p>Its stack frame now contains the local variable <code>result</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen.gi_frame.f_locals
{<span class=3D"st">'result'</span>: <span class=3D"st">'hello'</span>}</co=
de></pre>

<p>Other generators created from <code>gen_fn</code> will have their own st=
ack frames and local variables.</p>

<p>When we call <code>send</code> again, the generator continues from its s=
econd <code>yield</code>, and finishes by raising the special <code>StopIte=
ration</code> exception:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen.send(<span class=3D"st">'goodbye'</span>)
result of 2nd <span class=3D"kw">yield</span>: goodbye
Traceback (most recent call last):
  File <span class=3D"st">"&lt;input&gt;"</span>, line <span class=3D"dv">1=
</span>, in &lt;module&gt;
<span class=3D"ot">StopIteration</span>: done</code></pre>

<p>The exception has a value, which is the return value of the generator: t=
he string <code>"done"</code>.</p>

<h2 id=3D"building-coroutines-with-generators">Building Coroutines With Gen=
erators</h2>

<p>So a generator can pause, and it can be resumed with a value, and it has=
 a return value. Sounds like a good primitive upon which to build an async =
programming model, without spaghetti callbacks! We want to build a "corouti=
ne": a routine that is cooperatively scheduled with other routines in the p=
rogram. Our coroutines will be a simplified version of those in Python's st=
andard "asyncio" library. As in asyncio, we will use generators, futures, a=
nd the "yield from" statement.</p>

<p>First we need a way to represent some future result that a coroutine is =
waiting for. A stripped-down version:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Future:
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.result =3D <span class=3D"ot">None</=
span>
        <span class=3D"ot">self</span>._callbacks =3D []

    <span class=3D"kw">def</span> add_done_callback(<span class=3D"ot">self=
</span>, fn):
        <span class=3D"ot">self</span>._callbacks.append(fn)

    <span class=3D"kw">def</span> set_result(<span class=3D"ot">self</span>=
, result):
        <span class=3D"ot">self</span>.result =3D result
        <span class=3D"kw">for</span> fn in <span class=3D"ot">self</span>.=
_callbacks:
            fn(<span class=3D"ot">self</span>)</code></pre>

<p>A future is initially "pending". It is "resolved" by a call to <code>set=
_result</code>.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-as=
yncio-coroutines.html#fn9" class=3D"footnoteRef" id=3D"fnref9"><sup>9</sup>=
</a></p>

<p>Let us adapt our fetcher to use futures and coroutines. We wrote <code>f=
etch</code> with a callback:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Fetcher:
    <span class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.sock =3D socket.socket()
        <span class=3D"ot">self</span>.sock.setblocking(<span class=3D"ot">=
False</span>)
        <span class=3D"kw">try</span>:
            <span class=3D"ot">self</span>.sock.<span class=3D"ot">connect<=
/span>((<span class=3D"st">'xkcd.com'</span>, <span class=3D"dv">80</span>)=
)
        <span class=3D"kw">except</span> <span class=3D"ot">BlockingIOError=
</span>:
            <span class=3D"kw">pass</span>
        selector.register(<span class=3D"ot">self</span>.sock.fileno(),
                          EVENT_WRITE,
                          <span class=3D"ot">self</span>.connected)

    <span class=3D"kw">def</span> connected(<span class=3D"ot">self</span>,=
 key, mask):
        <span class=3D"dt">print</span>(<span class=3D"st">'connected!'</sp=
an>)
        <span class=3D"co"># And so on....</span></code></pre>

<p>The <code>fetch</code> method begins connecting a socket, then registers=
 the callback, <code>connected</code>, to be executed when the socket is re=
ady. Now we can combine these two steps into one coroutine:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>):
        sock =3D socket.socket()
        sock.setblocking(<span class=3D"ot">False</span>)
        <span class=3D"kw">try</span>:
            sock.<span class=3D"ot">connect</span>((<span class=3D"st">'xkc=
d.com'</span>, <span class=3D"dv">80</span>))
        <span class=3D"kw">except</span> <span class=3D"ot">BlockingIOError=
</span>:
            <span class=3D"kw">pass</span>

        f =3D Future()

        <span class=3D"kw">def</span> on_connected():
            f.set_result(<span class=3D"ot">None</span>)

        selector.register(sock.fileno(),
                          EVENT_WRITE,
                          on_connected)
        <span class=3D"kw">yield</span> f
        selector.unregister(sock.fileno())
        <span class=3D"dt">print</span>(<span class=3D"st">'connected!'</sp=
an>)</code></pre>

<p>Now <code>fetch</code> is a generator function, rather than a regular on=
e, because it contains a <code>yield</code> statement. We create a pending =
future, then yield it to pause <code>fetch</code> until the socket is ready=
. The inner function <code>on_connected</code> resolves the future.</p>

<p>But when the future resolves, what resumes the generator? We need a coro=
utine <em>driver</em>. Let us call it "task":</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Task:
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>, coro):
        <span class=3D"ot">self</span>.coro =3D coro
        f =3D Future()
        f.set_result(<span class=3D"ot">None</span>)
        <span class=3D"ot">self</span>.step(f)

    <span class=3D"kw">def</span> step(<span class=3D"ot">self</span>, futu=
re):
        <span class=3D"kw">try</span>:
            next_future =3D <span class=3D"ot">self</span>.coro.send(future=
.result)
        <span class=3D"kw">except</span> <span class=3D"ot">StopIteration</=
span>:
            <span class=3D"kw">return</span>

        next_future.add_done_callback(<span class=3D"ot">self</span>.step)

<span class=3D"co"># Begin fetching http://xkcd.com/353/</span>
fetcher =3D Fetcher(<span class=3D"st">'/353/'</span>)
Task(fetcher.fetch())

loop()</code></pre>

<p>The task starts the <code>fetch</code> generator by sending <code>None</=
code> into it. Then <code>fetch</code> runs until it yields a future, which=
 the task captures as <code>next_future</code>. When the socket is connecte=
d, the event loop runs the callback <code>on_connected</code>, which resolv=
es the future, which calls <code>step</code>, which resumes <code>fetch</co=
de>.</p>

<h2 id=3D"factoring-coroutines-with-yield-from">Factoring Coroutines With <=
code>yield from</code></h2>

<p>Once the socket is connected, we send the HTTP GET request and read the =
server response. These steps need no longer be scattered among callbacks; w=
e gather them into the same generator function:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>):
        <span class=3D"co"># ... connection logic from above, then:</span>
        sock.send(request.encode(<span class=3D"st">'ascii'</span>))

        <span class=3D"kw">while</span> <span class=3D"ot">True</span>:
            f =3D Future()

            <span class=3D"kw">def</span> on_readable():
                f.set_result(sock.recv(<span class=3D"dv">4096</span>))

            selector.register(sock.fileno(),
                              EVENT_READ,
                              on_readable)
            chunk =3D <span class=3D"kw">yield</span> f
            selector.unregister(sock.fileno())
            <span class=3D"kw">if</span> chunk:
                <span class=3D"ot">self</span>.response +=3D chunk
            <span class=3D"kw">else</span>:
                <span class=3D"co"># Done reading.</span>
                <span class=3D"kw">break</span></code></pre>

<p>This code, which reads a whole message from a socket, seems generally us=
eful. How can we factor it from <code>fetch</code> into a subroutine? Now P=
ython 3's celebrated <code>yield from</code> takes the stage. It lets one g=
enerator <em>delegate</em> to another.</p>

<p>To see how, let us return to our simple generator example:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> gen_fn():
...     result =3D <span class=3D"kw">yield</span> <span class=3D"dv">1</sp=
an>
...     <span class=3D"dt">print</span>(<span class=3D"st">'result of yield=
: {}'</span>.<span class=3D"dt">format</span>(result))
...     result2 =3D <span class=3D"kw">yield</span> <span class=3D"dv">2</s=
pan>
...     <span class=3D"dt">print</span>(<span class=3D"st">'result of 2nd y=
ield: {}'</span>.<span class=3D"dt">format</span>(result2))
...     <span class=3D"kw">return</span> <span class=3D"st">'done'</span>
...     </code></pre>

<p>To call this generator from another generator, delegate to it with <code=
>yield from</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"co"># Generator function:</span>
&gt;&gt;&gt; <span class=3D"kw">def</span> caller_fn():
...     gen =3D gen_fn()
...     rv =3D <span class=3D"kw">yield</span> <span class=3D"ch">from</spa=
n> gen
...     <span class=3D"dt">print</span>(<span class=3D"st">'return value of=
 yield-from: {}'</span>
...           .<span class=3D"dt">format</span>(rv))
...
&gt;&gt;&gt; <span class=3D"co"># Make a generator from the</span>
&gt;&gt;&gt; <span class=3D"co"># generator function.</span>
&gt;&gt;&gt; caller =3D caller_fn()</code></pre>

<p>The <code>caller</code> generator acts as if it were <code>gen</code>, t=
he generator it is delegating to:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; caller.send(<span class=3D"ot">None</span>)
<span class=3D"dv">1</span>
&gt;&gt;&gt; caller.gi_frame.f_lasti
<span class=3D"dv">15</span>
&gt;&gt;&gt; caller.send(<span class=3D"st">'hello'</span>)
result of <span class=3D"kw">yield</span>: hello
<span class=3D"dv">2</span>
&gt;&gt;&gt; caller.gi_frame.f_lasti  <span class=3D"co"># Hasn't advanced.=
</span>
<span class=3D"dv">15</span>
&gt;&gt;&gt; caller.send(<span class=3D"st">'goodbye'</span>)
result of 2nd <span class=3D"kw">yield</span>: goodbye
<span class=3D"kw">return</span> value of <span class=3D"kw">yield</span>-<=
span class=3D"ch">from</span>: done
Traceback (most recent call last):
  File <span class=3D"st">"&lt;input&gt;"</span>, line <span class=3D"dv">1=
</span>, in &lt;module&gt;
<span class=3D"ot">StopIteration</span></code></pre>

<p>While <code>caller</code> yields from <code>gen</code>, <code>caller</co=
de> does not advance. Notice that its instruction pointer remains at 15, th=
e site of its <code>yield from</code> statement, even while the inner gener=
ator <code>gen</code> advances from one <code>yield</code> statement to the=
 next.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-cor=
outines.html#fn10" class=3D"footnoteRef" id=3D"fnref10"><sup>10</sup></a> F=
rom our perspective outside <code>caller</code>, we cannot tell if the valu=
es it yields are from <code>caller</code> or from the generator it delegate=
s to. And from inside <code>gen</code>, we cannot tell if values are sent i=
n from <code>caller</code> or from outside it. The <code>yield from</code> =
statement is a frictionless channel, through which values flow in and out o=
f <code>gen</code> until <code>gen</code> completes.</p>

<p>A coroutine can delegate work to a sub-coroutine with <code>yield from</=
code> and receive the result of the work. Notice, above, that <code>caller<=
/code> printed "return value of yield-from: done". When <code>gen</code> co=
mpleted, its return value became the value of the <code>yield from</code> s=
tatement in <code>caller</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    rv =
=3D <span class=3D"kw">yield</span> <span class=3D"ch">from</span> gen</cod=
e></pre>

<p>Earlier, when we criticized callback-based async programming, our most s=
trident complaint was about "stack ripping": when a callback throws an exce=
ption, the stack trace is typically useless. It only shows that the event l=
oop was running the callback, not <em>why</em>. How do coroutines fare?</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> gen_fn():
...     <span class=3D"kw">raise</span> <span class=3D"ot">Exception</span>=
(<span class=3D"st">'my error'</span>)
&gt;&gt;&gt; caller =3D caller_fn()
&gt;&gt;&gt; caller.send(<span class=3D"ot">None</span>)
Traceback (most recent call last):
  File <span class=3D"st">"&lt;input&gt;"</span>, line <span class=3D"dv">1=
</span>, in &lt;module&gt;
  File <span class=3D"st">"&lt;input&gt;"</span>, line <span class=3D"dv">3=
</span>, in caller_fn
  File <span class=3D"st">"&lt;input&gt;"</span>, line <span class=3D"dv">2=
</span>, in gen_fn
<span class=3D"ot">Exception</span>: my error</code></pre>

<p>This is much more useful! The stack trace shows <code>caller_fn</code> w=
as delegating to <code>gen_fn</code> when it threw the error. Even more com=
forting, we can wrap the call to a sub-coroutine in an exception handler, t=
he same is with normal subroutines:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> gen_fn():
...     <span class=3D"kw">yield</span> <span class=3D"dv">1</span>
...     <span class=3D"kw">raise</span> <span class=3D"ot">Exception</span>=
(<span class=3D"st">'uh oh'</span>)
...
&gt;&gt;&gt; <span class=3D"kw">def</span> caller_fn():
...     <span class=3D"kw">try</span>:
...         <span class=3D"kw">yield</span> <span class=3D"ch">from</span> =
gen_fn()
...     <span class=3D"kw">except</span> <span class=3D"ot">Exception</span=
> <span class=3D"ch">as</span> exc:
...         <span class=3D"dt">print</span>(<span class=3D"st">'caught {}'<=
/span>.<span class=3D"dt">format</span>(exc))
...
&gt;&gt;&gt; caller =3D caller_fn()
&gt;&gt;&gt; caller.send(<span class=3D"ot">None</span>)
<span class=3D"dv">1</span>
&gt;&gt;&gt; caller.send(<span class=3D"st">'hello'</span>)
caught uh oh</code></pre>

<p>So we factor logic with sub-coroutines just like with regular subroutine=
s. Let us factor some useful sub-coroutines from our fetcher. We write a <c=
ode>read</code> coroutine to receive one chunk:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> read(sock):
    f =3D Future()

    <span class=3D"kw">def</span> on_readable():
        f.set_result(sock.recv(<span class=3D"dv">4096</span>))

    selector.register(sock.fileno(), EVENT_READ, on_readable)
    chunk =3D <span class=3D"kw">yield</span> f  <span class=3D"co"># Read =
one chunk.</span>
    selector.unregister(sock.fileno())
    <span class=3D"kw">return</span> chunk</code></pre>

<p>We build on <code>read</code> with a <code>read_all</code> coroutine tha=
t receives a whole message:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> read_all(sock):
    response =3D []
    <span class=3D"co"># Read whole response.</span>
    chunk =3D <span class=3D"kw">yield</span> <span class=3D"ch">from</span=
> read(sock)
    <span class=3D"kw">while</span> chunk:
        response.append(chunk)
        chunk =3D <span class=3D"kw">yield</span> <span class=3D"ch">from</=
span> read(sock)

    <span class=3D"kw">return</span> b<span class=3D"st">''</span>.join(res=
ponse)</code></pre>

<p>If you squint the right way, the <code>yield from</code> statements disa=
ppear and these look like conventional functions doing blocking I/O. But in=
 fact, <code>read</code> and <code>read_all</code> are coroutines. Yielding=
 from <code>read</code> pauses <code>read_all</code> until the I/O complete=
s. While <code>read_all</code> is paused, asyncio's event loop does other w=
ork and awaits other I/O events; <code>read_all</code> is resumed with the =
result of <code>read</code> on the next loop tick once its event is ready.<=
/p>

<p>At the stack's root, <code>fetch</code> calls <code>read_all</code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Fetcher:
    <span class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>):
         <span class=3D"co"># ... connection logic from above, then:</span>
        sock.send(request.encode(<span class=3D"st">'ascii'</span>))
        <span class=3D"ot">self</span>.response =3D <span class=3D"kw">yiel=
d</span> <span class=3D"ch">from</span> read_all(sock)</code></pre>

<p>Miraculously, the Task class needs no modification. It drives the outer =
<code>fetch</code> coroutine just the same as before:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">Task(fet=
cher.fetch())
loop()</code></pre>

<p>When <code>read</code> yields a future, the task receives it through the=
 channel of <code>yield from</code> statements, precisely as if the future =
were yielded directly from <code>fetch</code>. When the loop resolves a fut=
ure, the task sends its result into <code>fetch</code>, and the value is re=
ceived by <code>read</code>, exactly as if the task were driving <code>read=
</code> directly:</p>

<div class=3D"center figure">
<a name=3D"figure-5.3"></a><img src=3D"http://aosabook.org/en/500L/crawler-=
images/yield-from.png" alt=3D"Figure 5.3 - Yield From" title=3D"Figure 5.3 =
- Yield From">
</div>

<p class=3D"center figcaption">
<small>Figure 5.3 - Yield From</small>
</p>

<p>To perfect our coroutine implementation, we polish out one mar: our code=
 uses <code>yield</code> when it waits for a future, but <code>yield from</=
code> when it delegates to a sub-coroutine. It would be more refined if we =
used <code>yield from</code> whenever a coroutine pauses. Then a coroutine =
need not concern itself with what type of thing it awaits.</p>

<p>We take advantage of the deep correspondence in Python between generator=
s and iterators. Advancing a generator is, to the caller, the same as advan=
cing an iterator. So we make our Future class iterable by implementing a sp=
ecial method:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method on Future class.</span>
    <span class=3D"kw">def</span> <span class=3D"ot">__iter__</span>(<span =
class=3D"ot">self</span>):
        <span class=3D"co"># Tell Task to resume me here.</span>
        <span class=3D"kw">yield</span> <span class=3D"ot">self</span>
        <span class=3D"kw">return</span> <span class=3D"ot">self</span>.res=
ult</code></pre>

<p>The future's <code>__iter__</code> method is a coroutine that yields the=
 future itself. Now when we replace code like this:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># f is a Future.</span>
<span class=3D"kw">yield</span> f</code></pre>

<p>...with this:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># f is a Future.</span>
<span class=3D"kw">yield</span> <span class=3D"ch">from</span> f</code></pr=
e>

<p>...the outcome is the same! The driving Task receives the future from it=
s call to <code>send</code>, and when the future is resolved it sends the n=
ew result back into the coroutine.</p>

<p>What is the advantage of using <code>yield from</code> everywhere? Why i=
s that better than waiting for futures with <code>yield</code> and delegati=
ng to sub-coroutines with <code>yield from</code>? It is better because now=
, a method can freely change its implementation without affecting the calle=
r: it might be a normal method that returns a future that will <em>resolve<=
/em> to a value, or it might be a coroutine that contains <code>yield from<=
/code> statements and <em>returns</em> a value. In either case, the caller =
need only <code>yield from</code> the method in order to wait for the resul=
t.</p>

<p>Gentle reader, we have reached the end of our enjoyable exposition of co=
routines in asyncio. We peered into the machinery of generators, and sketch=
ed an implementation of futures and tasks. We outlined how asyncio attains =
the best of both worlds: concurrent I/O that is more efficient than threads=
 and more legible than callbacks. Of course, the real asyncio is much more =
sophisticated than our sketch. The real framework addresses zero-copy I/O, =
fair scheduling, exception handling, and an abundance of other features.</p=
>

<p>To an asyncio user, coding with coroutines is much simpler than you saw =
here. In the code above we implemented coroutines from first principles, so=
 you saw callbacks, tasks, and futures. You even saw non-blocking sockets a=
nd the call to <code>select</code>. But when it comes time to build an appl=
ication with asyncio, none of this appears in your code. As we promised, yo=
u can now sleekly fetch a URL:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"ot">@asyncio.coroutine</span>
    <span class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>, url=
):
        response =3D <span class=3D"kw">yield</span> <span class=3D"ch">fro=
m</span> <span class=3D"ot">self</span>.session.get(url)
        body =3D <span class=3D"kw">yield</span> <span class=3D"ch">from</s=
pan> response.read()</code></pre>

<p>Satisfied with this exposition, we return to our original assignment: to=
 write an async web crawler, using asyncio.</p>

<h2 id=3D"coordinating-coroutines">Coordinating Coroutines</h2>

<p>We began by describing how we want our crawler to work. Now it is time t=
o implement it with asyncio coroutines.</p>

<p>Our crawler will fetch the first page, parse its links, and add them to =
a queue. After this it fans out across the website, fetching pages concurre=
ntly. But to limit load on the client and server, we want some maximum numb=
er of workers to run, and no more. Whenever a worker finishes fetching a pa=
ge, it should immediately pull the next link from the queue. We will pass t=
hrough periods when there is not enough work to go around, so some workers =
must pause. But when a worker hits a page rich with new links, then the que=
ue suddenly grows and any paused workers should wake and get cracking. Fina=
lly, our program must quit once its work is done.</p>

<p>Imagine if the workers were threads. How would we express the crawler's =
algorithm? We could use a synchronized queue<a href=3D"http://aosabook.org/=
en/500L/a-web-crawler-with-asyncio-coroutines.html#fn11" class=3D"footnoteR=
ef" id=3D"fnref11"><sup>11</sup></a> from the Python standard library. Each=
 time an item is put in the queue, the queue increments its count of "tasks=
". Worker threads call <code>task_done</code> after completing work on an i=
tem. The main thread blocks on <code>Queue.join</code> until each item put =
in the queue is matched by a <code>task_done</code> call, then it exits.</p=
>

<p>Coroutines use the exact same pattern with an asyncio queue! First we im=
port it<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-co=
routines.html#fn12" class=3D"footnoteRef" id=3D"fnref12"><sup>12</sup></a>:=
</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">try</span>:
    <span class=3D"ch">from</span> asyncio <span class=3D"ch">import</span>=
 JoinableQueue <span class=3D"ch">as</span> Queue
<span class=3D"kw">except</span> <span class=3D"ot">ImportError</span>:
    <span class=3D"co"># In Python 3.5, asyncio.JoinableQueue is</span>
    <span class=3D"co"># merged into Queue.</span>
    <span class=3D"ch">from</span> asyncio <span class=3D"ch">import</span>=
 Queue</code></pre>

<p>We collect the workers' shared state in a crawler class, and write the m=
ain logic in its <code>crawl</code> method. We start <code>crawl</code> on =
a coroutine and run asyncio's event loop until <code>crawl</code> finishes:=
</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">loop =3D=
 asyncio.get_event_loop()

crawler =3D crawling.Crawler(<span class=3D"st">'http://xkcd.com'</span>,
                           max_redirect=3D<span class=3D"dv">10</span>)

loop.run_until_complete(crawler.crawl())</code></pre>

<p>The crawler begins with a root URL and <code>max_redirect</code>, the nu=
mber of redirects it is willing to follow to fetch any one URL. It puts the=
 pair <code>(URL, max_redirect)</code> in the queue. (For the reason why, s=
tay tuned.)</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Crawler:
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>, root_url, max_redirect):
        <span class=3D"ot">self</span>.max_tasks =3D <span class=3D"dv">10<=
/span>
        <span class=3D"ot">self</span>.max_redirect =3D max_redirect
        <span class=3D"ot">self</span>.q =3D Queue()
        <span class=3D"ot">self</span>.seen_urls =3D <span class=3D"dt">set=
</span>()

        <span class=3D"co"># aiohttp's ClientSession does connection poolin=
g and</span>
        <span class=3D"co"># HTTP keep-alives for us.</span>
        <span class=3D"ot">self</span>.session =3D aiohttp.ClientSession(lo=
op=3Dloop)

        <span class=3D"co"># Put (URL, max_redirect) in the queue.</span>
        <span class=3D"ot">self</span>.q.put((root_url, <span class=3D"ot">=
self</span>.max_redirect))</code></pre>

<p>The number of unfinished tasks in the queue is now one. Back in our main=
 script, we launch the event loop and the <code>crawl</code> method:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">loop.run=
_until_complete(crawler.crawl())</code></pre>

<p>The <code>crawl</code> coroutine kicks off the workers. It is like a mai=
n thread: it blocks on <code>join</code> until all tasks are finished, whil=
e the workers run in the background.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"ot">@asyncio.coroutine</span>
    <span class=3D"kw">def</span> crawl(<span class=3D"ot">self</span>):
        <span class=3D"co">"""Run the crawler until all work is done."""</s=
pan>
        workers =3D [asyncio.Task(<span class=3D"ot">self</span>.work())
                   <span class=3D"kw">for</span> _ in <span class=3D"dt">ra=
nge</span>(<span class=3D"ot">self</span>.max_tasks)]

        <span class=3D"co"># When all work is done, exit.</span>
        <span class=3D"kw">yield</span> <span class=3D"ch">from</span> <spa=
n class=3D"ot">self</span>.q.join()
        <span class=3D"kw">for</span> w in workers:
            w.cancel()</code></pre>

<p>If the workers were threads we might not wish to start them all at once.=
 To avoid creating expensive threads until it is certain they are necessary=
, a thread pool typically grows on demand. But coroutines are cheap, so we =
simply start the maximum number allowed.</p>

<p>It is interesting to note how we shut down the crawler. When the <code>j=
oin</code> future resolves, the worker tasks are alive but suspended: they =
wait for more URLs but none come. So, the main coroutine cancels them befor=
e exiting. Otherwise, as the Python interpreter shuts down and calls all ob=
jects' destructors, living tasks cry out:</p>

<pre><code>ERROR:asyncio:Task was destroyed but it is pending!</code></pre>

<p>And how does <code>cancel</code> work? Generators have a feature we have=
 not yet shown you. You can throw an exception into a generator from outsid=
e:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; gen =3D gen_fn()
&gt;&gt;&gt; gen.send(<span class=3D"ot">None</span>)  <span class=3D"co">#=
 Start the generator as usual.</span>
<span class=3D"dv">1</span>
&gt;&gt;&gt; gen.throw(<span class=3D"ot">Exception</span>(<span class=3D"s=
t">'error'</span>))
Traceback (most recent call last):
  File <span class=3D"st">"&lt;input&gt;"</span>, line <span class=3D"dv">3=
</span>, in &lt;module&gt;
  File <span class=3D"st">"&lt;input&gt;"</span>, line <span class=3D"dv">2=
</span>, in gen_fn
<span class=3D"ot">Exception</span>: error</code></pre>

<p>The generator is resumed by <code>throw</code>, but it is now raising an=
 exception. If no code in the generator's call stack catches it, the except=
ion bubbles back up to the top. So to cancel a task's coroutine:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method of Task class.</span>
    <span class=3D"kw">def</span> cancel(<span class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.coro.throw(CancelledError)</code></p=
re>

<p>Wherever the generator is paused, at some <code>yield from</code> statem=
ent, it resumes and throws an exception. We handle cancellation in the task=
's <code>step</code> method:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method of Task class.</span>
    <span class=3D"kw">def</span> step(<span class=3D"ot">self</span>, futu=
re):
        <span class=3D"kw">try</span>:
            next_future =3D <span class=3D"ot">self</span>.coro.send(future=
.result)
        <span class=3D"kw">except</span> CancelledError:
            <span class=3D"ot">self</span>.cancelled =3D <span class=3D"ot"=
>True</span>
            <span class=3D"kw">return</span>
        <span class=3D"kw">except</span> <span class=3D"ot">StopIteration</=
span>:
            <span class=3D"kw">return</span>

        next_future.add_done_callback(<span class=3D"ot">self</span>.step)<=
/code></pre>

<p>Now the task knows it is cancelled, so when it is destroyed it does not =
rage against the dying of the light.</p>

<p>Once <code>crawl</code> has canceled the workers, it exits. The event lo=
op sees that the coroutine is complete (we shall see how later), and it too=
 exits:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">loop.run=
_until_complete(crawler.crawl())</code></pre>

<p>The <code>crawl</code> method comprises all that our main coroutine must=
 do. It is the worker coroutines that get URLs from the queue, fetch them, =
and parse them for new links. Each worker runs the <code>work</code> corout=
ine independently:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"ot">@asyncio.coroutine</span>
    <span class=3D"kw">def</span> work(<span class=3D"ot">self</span>):
        <span class=3D"kw">while</span> <span class=3D"ot">True</span>:
            url, max_redirect =3D <span class=3D"kw">yield</span> <span cla=
ss=3D"ch">from</span> <span class=3D"ot">self</span>.q.get()

            <span class=3D"co"># Download page and add new links to self.q.=
</span>
            <span class=3D"kw">yield</span> <span class=3D"ch">from</span> =
<span class=3D"ot">self</span>.fetch(url, max_redirect)
            <span class=3D"ot">self</span>.q.task_done()</code></pre>

<p>Python sees that this code contains <code>yield from</code> statements, =
and compiles it into a generator function. So in <code>crawl</code>, when t=
he main coroutine calls <code>self.work</code> ten times, it does not actua=
lly execute this method: it only creates ten generator objects with referen=
ces to this code. It wraps each in a Task. The Task receives each future th=
e generator yields, and drives the generator by calling <code>send</code> w=
ith each future's result when the future resolves. Because the generators h=
ave their own stack frames, they run independently, with separate local var=
iables and instruction pointers.</p>

<p>The worker coordinates with its fellows via the queue. It waits for new =
URLs with:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    url,=
 max_redirect =3D <span class=3D"kw">yield</span> <span class=3D"ch">from</=
span> <span class=3D"ot">self</span>.q.get()</code></pre>

<p>The queue's <code>get</code> method is itself a coroutine: it pauses unt=
il someone puts an item in the queue, then resumes and returns the item.</p=
>

<p>Incidentally, this is where the worker will be paused at the end of the =
crawl, when the main coroutine cancels it. From the coroutine's perspective=
, its last trip around the loop ends when <code>yield from</code> raises a =
<code>CancelledError</code>.</p>

<p>When a worker fetches a page it parses the links and puts new ones in th=
e queue, then calls <code>task_done</code> to decrement the counter. Eventu=
ally, a worker fetches a page whose URLs have all been fetched already, and=
 there is also no work left in the queue. Thus this worker's call to <code>=
task_done</code> decrements the counter to zero. Then <code>crawl</code>, w=
hich is waiting for the queue's <code>join</code> method, is unpaused and f=
inishes.</p>

<p>We promised to explain why the items in the queue are pairs, like:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># URL to fetch, and the number of redirects left.</span>
(<span class=3D"st">'http://xkcd.com/353'</span>, <span class=3D"dv">10</sp=
an>)</code></pre>

<p>New URLs have ten redirects remaining. Fetching this particular URL resu=
lts in a redirect to a new location with a trailing slash. We decrement the=
 number of redirects remaining, and put the next location in the queue:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># URL with a trailing slash. Nine redirects left.</span>
(<span class=3D"st">'http://xkcd.com/353/'</span>, <span class=3D"dv">9</sp=
an>)</code></pre>

<p>The <code>aiohttp</code> package we use would follow redirects by defaul=
t and give us the final response. We tell it not to, however, and handle re=
directs in the crawler, so it can coalesce redirect paths that lead to the =
same destination: if we have already seen this URL, it is in <code>self.see=
n_urls</code> and we have already started on this path from a different ent=
ry point:</p>

<div class=3D"center figure">
<a name=3D"figure-5.4"></a><img src=3D"http://aosabook.org/en/500L/crawler-=
images/redirects.png" alt=3D"Figure 5.4 - Redirects" title=3D"Figure 5.4 - =
Redirects">
</div>

<p class=3D"center figcaption">
<small>Figure 5.4 - Redirects</small>
</p>

<p>The crawler fetches "foo" and sees it redirects to "baz", so it adds "ba=
z" to the queue and to <code>seen_urls</code>. If the next page it fetches =
is "bar", which also redirects to "baz", the fetcher does not enqueue "baz"=
 again. If the response is a page, rather than a redirect, <code>fetch</cod=
e> parses it for links and puts new ones in the queue.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"ot">@asyncio.coroutine</span>
    <span class=3D"kw">def</span> fetch(<span class=3D"ot">self</span>, url=
, max_redirect):
        <span class=3D"co"># Handle redirects ourselves.</span>
        response =3D <span class=3D"kw">yield</span> <span class=3D"ch">fro=
m</span> <span class=3D"ot">self</span>.session.get(
            url, allow_redirects=3D<span class=3D"ot">False</span>)

        <span class=3D"kw">try</span>:
            <span class=3D"kw">if</span> is_redirect(response):
                <span class=3D"kw">if</span> max_redirect &gt; <span class=
=3D"dv">0</span>:
                    next_url =3D response.headers[<span class=3D"st">'locat=
ion'</span>]
                    <span class=3D"kw">if</span> next_url in <span class=3D=
"ot">self</span>.seen_urls:
                        <span class=3D"co"># We have been down this path be=
fore.</span>
                        <span class=3D"kw">return</span>

                    <span class=3D"co"># Remember we have seen this URL.</s=
pan>
                    <span class=3D"ot">self</span>.seen_urls.add(next_url)

                    <span class=3D"co"># Follow the redirect. One less redi=
rect remains.</span>
                    <span class=3D"ot">self</span>.q.put_nowait((next_url, =
max_redirect - <span class=3D"dv">1</span>))
             <span class=3D"kw">else</span>:
                 links =3D <span class=3D"kw">yield</span> <span class=3D"c=
h">from</span> <span class=3D"ot">self</span>.parse_links(response)
                 <span class=3D"co"># Python set-logic:</span>
                 <span class=3D"kw">for</span> link in links.difference(<sp=
an class=3D"ot">self</span>.seen_urls):
                    <span class=3D"ot">self</span>.q.put_nowait((link, <spa=
n class=3D"ot">self</span>.max_redirect))
                <span class=3D"ot">self</span>.seen_urls.update(links)
        <span class=3D"kw">finally</span>:
            <span class=3D"co"># Return connection to pool.</span>
            <span class=3D"kw">yield</span> <span class=3D"ch">from</span> =
response.release()</code></pre>

<p>If this were multithreaded code, it would be lousy with race conditions.=
 For example, the worker checks if a link is in <code>seen_urls</code>, and=
 if not the worker puts it in the queue and adds it to <code>seen_urls</cod=
e>. If it were interrupted between the two operations, then another worker =
might parse the same link from a different page, also observe that it is no=
t in <code>seen_urls</code>, and also add it to the queue. Now that same li=
nk is in the queue twice, leading (at best) to duplicated work and wrong st=
atistics.</p>

<p>However, a coroutine is only vulnerable to interruption at <code>yield f=
rom</code> statements. This is a key difference that makes coroutine code f=
ar less prone to races than multithreaded code: multithreaded code must ent=
er a critical section explicitly, by grabbing a lock, otherwise it is inter=
ruptible. A Python coroutine is uninterruptible by default, and only cedes =
control when it explicitly yields.</p>

<p>We no longer need a fetcher class like we had in the callback-based prog=
ram. That class was a workaround for a deficiency of callbacks: they need s=
ome place to store state while waiting for I/O, since their local variables=
 are not preserved across calls. But the <code>fetch</code> coroutine can s=
tore its state in local variables like a regular function does, so there is=
 no more need for a class.</p>

<p>When <code>fetch</code> finishes processing the server response it retur=
ns to the caller, <code>work</code>. The <code>work</code> method calls <co=
de>task_done</code> on the queue and then gets the next URL from the queue =
to be fetched.</p>

<p>When <code>fetch</code> puts new links in the queue it increments the co=
unt of unfinished tasks and keeps the main coroutine, which is waiting for =
<code>q.join</code>, paused. If, however, there are no unseen links and thi=
s was the last URL in the queue, then when <code>work</code> calls <code>ta=
sk_done</code> the count of unfinished tasks falls to zero. That event unpa=
uses <code>join</code> and the main coroutine completes.</p>

<p>The queue code that coordinates the workers and the main coroutine is li=
ke this<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-co=
routines.html#fn13" class=3D"footnoteRef" id=3D"fnref13"><sup>13</sup></a>:=
</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Queue:
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>):
        <span class=3D"ot">self</span>._join_future =3D Future()
        <span class=3D"ot">self</span>._unfinished_tasks =3D <span class=3D=
"dv">0</span>
        <span class=3D"co"># ... other initialization ...</span>

    <span class=3D"kw">def</span> put_nowait(<span class=3D"ot">self</span>=
, item):
        <span class=3D"ot">self</span>._unfinished_tasks +=3D <span class=
=3D"dv">1</span>
        <span class=3D"co"># ... store the item ...</span>

    <span class=3D"kw">def</span> task_done(<span class=3D"ot">self</span>)=
:
        <span class=3D"ot">self</span>._unfinished_tasks -=3D <span class=
=3D"dv">1</span>
        <span class=3D"kw">if</span> <span class=3D"ot">self</span>._unfini=
shed_tasks =3D=3D <span class=3D"dv">0</span>:
            <span class=3D"ot">self</span>._join_future.set_result(<span cl=
ass=3D"ot">None</span>)

    <span class=3D"ot">@asyncio.coroutine</span>
    <span class=3D"kw">def</span> join(<span class=3D"ot">self</span>):
        <span class=3D"kw">if</span> <span class=3D"ot">self</span>._unfini=
shed_tasks &gt; <span class=3D"dv">0</span>:
            <span class=3D"kw">yield</span> <span class=3D"ch">from</span> =
<span class=3D"ot">self</span>._join_future</code></pre>

<p>The main coroutine, <code>crawl</code>, yields from <code>join</code>. S=
o when the last worker decrements the count of unfinished tasks to zero, it=
 signals <code>crawl</code> to resume, and finish.</p>

<p>The ride is almost over. Our program began with the call to <code>crawl<=
/code>:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">loop.run=
_until_complete(<span class=3D"ot">self</span>.crawler.crawl())</code></pre=
>

<p>How does the program end? Since <code>crawl</code> is a generator functi=
on, calling it returns a generator. To drive the generator, asyncio wraps i=
t in a task:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> EventLoop:
    <span class=3D"kw">def</span> run_until_complete(<span class=3D"ot">sel=
f</span>, coro):
        <span class=3D"co">"""Run until the coroutine is done."""</span>
        task =3D Task(coro)
        task.add_done_callback(stop_callback)
        <span class=3D"kw">try</span>:
            <span class=3D"ot">self</span>.run_forever()
        <span class=3D"kw">except</span> StopError:
            <span class=3D"kw">pass</span>

<span class=3D"kw">class</span> StopError(<span class=3D"ot">BaseException<=
/span>):
    <span class=3D"co">"""Raised to stop the event loop."""</span>

<span class=3D"kw">def</span> stop_callback(future):
    <span class=3D"kw">raise</span> StopError</code></pre>

<p>When the task completes, it raises <code>StopError</code>, which the loo=
p uses as a signal that it has arrived at normal completion.</p>

<p>But what's this? The task has methods called <code>add_done_callback</co=
de> and <code>result</code>? You might think that a task resembles a future=
. Your instinct is correct. We must admit a detail about the Task class we =
hid from you: a task is a future.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Task(Future):
    <span class=3D"co">"""A coroutine wrapped in a Future."""</span></code>=
</pre>

<p>Normally a future is resolved by someone else calling <code>set_result</=
code> on it. But a task resolves <em>itself</em> when its coroutine stops. =
Remember from our earlier exploration of Python generators that when a gene=
rator returns, it throws the special <code>StopIteration</code> exception:<=
/p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method of class Task.</span>
    <span class=3D"kw">def</span> step(<span class=3D"ot">self</span>, futu=
re):
        <span class=3D"kw">try</span>:
            next_future =3D <span class=3D"ot">self</span>.coro.send(future=
.result)
        <span class=3D"kw">except</span> CancelledError:
            <span class=3D"ot">self</span>.cancelled =3D <span class=3D"ot"=
>True</span>
            <span class=3D"kw">return</span>
        <span class=3D"kw">except</span> <span class=3D"ot">StopIteration</=
span> <span class=3D"ch">as</span> exc:

            <span class=3D"co"># Task resolves itself with coro's return</s=
pan>
            <span class=3D"co"># value.</span>
            <span class=3D"ot">self</span>.set_result(exc.value)
            <span class=3D"kw">return</span>

        next_future.add_done_callback(<span class=3D"ot">self</span>.step)<=
/code></pre>

<p>So when the event loop calls <code>task.add_done_callback(stop_callback)=
</code>, it prepares to be stopped by the task. Here is <code>run_until_com=
plete</code> again:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Method of event loop.</span>
    <span class=3D"kw">def</span> run_until_complete(<span class=3D"ot">sel=
f</span>, coro):
        task =3D Task(coro)
        task.add_done_callback(stop_callback)
        <span class=3D"kw">try</span>:
            <span class=3D"ot">self</span>.run_forever()
        <span class=3D"kw">except</span> StopError:
            <span class=3D"kw">pass</span></code></pre>

<p>When the task catches <code>StopIteration</code> and resolves itself, th=
e callback raises <code>StopError</code> from within the loop. The loop sto=
ps and the call stack is unwound to <code>run_until_complete</code>. Our pr=
ogram is finished.</p>

<h2 id=3D"conclusion">Conclusion</h2>

<p>Increasingly often, modern programs are I/O-bound instead of CPU-bound. =
For such programs, Python threads are the worst of both worlds: the global =
interpreter lock prevents them from actually executing computations in para=
llel, and preemptive switching makes them prone to races. Async is often th=
e right pattern. But as callback-based async code grows, it tends to become=
 a dishevelled mess. Coroutines are a tidy alternative. They factor natural=
ly into subroutines, with sane exception handling and stack traces.</p>

<p>If we squint so that the <code>yield from</code> statements blur, a coro=
utine looks like a thread doing traditional blocking I/O. We can even coord=
inate coroutines with classic patterns from multi-threaded programming. The=
re is no need for reinvention. Thus, compared to callbacks, coroutines are =
an inviting idiom to the coder experienced with multithreading.</p>

<p>But when we open our eyes and focus on the <code>yield from</code> state=
ments, we see they mark points when the coroutine cedes control and allows =
others to run. Unlike threads, coroutines display where our code can be int=
errupted and where it cannot. In his illuminating essay "Unyielding"<a href=
=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html#=
fn14" class=3D"footnoteRef" id=3D"fnref14"><sup>14</sup></a>, Glyph Lefkowi=
tz writes, "Threads make local reasoning difficult, and local reasoning is =
perhaps the most important thing in software development." Explicitly yield=
ing, however, makes it possible to "understand the behavior (and thereby, t=
he correctness) of a routine by examining the routine itself rather than ex=
amining the entire system."</p>

<p>This chapter was written during a renaissance in the history of Python a=
nd async. Generator-based coroutines, whose devising you have just learned,=
 were released in the "asyncio" module with Python 3.4 in March 2014. In Se=
ptember 2015, Python 3.5 was released with coroutines built in to the langu=
age itself. These native coroutinesare declared with the new syntax "async =
def", and instead of "yield from", they use the new "await" keyword to dele=
gate to a coroutine or wait for a Future.</p>

<p>Despite these advances, the core ideas remain. Python's new native corou=
tines will be syntactically distinct from generators but work very similarl=
y; indeed, they will share an implementation within the Python interpreter.=
 Task, Future, and the event loop will continue to play their roles in asyn=
cio.</p>

<p>Now that you know how asyncio coroutines work, you can largely forget th=
e details. The machinery is tucked behind a dapper interface. But your gras=
p of the fundamentals empowers you to code correctly and efficiently in mod=
ern async environments.</p>

<div class=3D"footnotes">
<hr>
<ol>
<li id=3D"fn1"><p>Guido introduced the standard asyncio library, called "Tu=
lip" then, at <a href=3D"http://pyvideo.org/video/1667/keynote">PyCon 2013<=
/a>.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-corou=
tines.html#fnref1">=E2=86=A9</a></p></li>
<li id=3D"fn2"><p>Even calls to <code>send</code> can block, if the recipie=
nt is slow to acknowledge outstanding messages and the system's buffer of o=
utgoing data is full.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-w=
ith-asyncio-coroutines.html#fnref2">=E2=86=A9</a></p></li>
<li id=3D"fn3"><p><a href=3D"http://www.kegel.com/c10k.html">http://www.keg=
el.com/c10k.html</a><a href=3D"http://aosabook.org/en/500L/a-web-crawler-wi=
th-asyncio-coroutines.html#fnref3">=E2=86=A9</a></p></li>
<li id=3D"fn4"><p>Python's global interpreter lock prohibits running Python=
 code in parallel in one process anyway. Parallelizing CPU-bound algorithms=
 in Python requires multiple processes, or writing the parallel portions of=
 the code in C. But that is a topic for another day.<a href=3D"http://aosab=
ook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html#fnref4">=E2=86=
=A9</a></p></li>
<li id=3D"fn5"><p>Jesse listed indications and contraindications for using =
async in <a href=3D"http://pyvideo.org/video/2565/what-is-async-how-does-it=
-work-and-when-should">"What Is Async, How Does It Work, And When Should I =
Use It?":</a>. Mike Bayer compared the throughput of asyncio and multithrea=
ding for different workloads in <a href=3D"http://techspot.zzzeek.org/2015/=
02/15/asynchronous-python-and-databases/">"Asynchronous Python and Database=
s":</a><a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-co=
routines.html#fnref5">=E2=86=A9</a></p></li>
<li id=3D"fn6"><p>For a complex solution to this problem, see <a href=3D"ht=
tp://www.tornadoweb.org/en/stable/stack_context.html">http://www.tornadoweb=
.org/en/stable/stack_context.html</a><a href=3D"http://aosabook.org/en/500L=
/a-web-crawler-with-asyncio-coroutines.html#fnref6">=E2=86=A9</a></p></li>
<li id=3D"fn7"><p>The <code>@asyncio.coroutine</code> decorator is not magi=
cal. In fact, if it decorates a generator function and the <code>PYTHONASYN=
CIODEBUG</code> environment variable is not set, the decorator does practic=
ally nothing. It just sets an attribute, <code>_is_coroutine</code>, for th=
e convenience of other parts of the framework. It is possible to use asynci=
o with bare generators not decorated with <code>@asyncio.coroutine</code> a=
t all.<a href=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-cor=
outines.html#fnref7">=E2=86=A9</a></p></li>
<li id=3D"fn8"><p>Python 3.5's built-in coroutines are described in <a href=
=3D"https://www.python.org/dev/peps/pep-0492/">PEP 492</a>, "Coroutines wit=
h async and await syntax."<a href=3D"http://aosabook.org/en/500L/a-web-craw=
ler-with-asyncio-coroutines.html#fnref8">=E2=86=A9</a></p></li>
<li id=3D"fn9"><p>This future has many deficiencies. For example, once this=
 future is resolved, a coroutine that yields it should resume immediately i=
nstead of pausing, but with our code it does not. See asyncio's Future clas=
s for a complete implementation.<a href=3D"http://aosabook.org/en/500L/a-we=
b-crawler-with-asyncio-coroutines.html#fnref9">=E2=86=A9</a></p></li>
<li id=3D"fn10"><p>In fact, this is exactly how "yield from" works in CPyth=
on. A function increments its instruction pointer before executing each sta=
tement. But after the outer generator executes "yield from", it subtracts 1=
 from its instruction pointer to keep itself pinned at the "yield from" sta=
tement. Then it yields to <em>its</em> caller. The cycle repeats until the =
inner generator throws <code>StopIteration</code>, at which point the outer=
 generator finally allows itself to advance to the next instruction.<a href=
=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html#=
fnref10">=E2=86=A9</a></p></li>
<li id=3D"fn11"><p><a href=3D"https://docs.python.org/3/library/queue.html"=
>https://docs.python.org/3/library/queue.html</a><a href=3D"http://aosabook=
.org/en/500L/a-web-crawler-with-asyncio-coroutines.html#fnref11">=E2=86=A9<=
/a></p></li>
<li id=3D"fn12"><p><a href=3D"https://docs.python.org/3/library/asyncio-syn=
c.html">https://docs.python.org/3/library/asyncio-sync.html</a><a href=3D"h=
ttp://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html#fnref=
12">=E2=86=A9</a></p></li>
<li id=3D"fn13"><p>The actual <code>asyncio.Queue</code> implementation use=
s an <code>asyncio.Event</code> in place of the Future shown here. The diff=
erence is an Event can be reset, whereas a Future cannot transition from re=
solved back to pending.<a href=3D"http://aosabook.org/en/500L/a-web-crawler=
-with-asyncio-coroutines.html#fnref13">=E2=86=A9</a></p></li>
<li id=3D"fn14"><p><a href=3D"https://glyph.twistedmatrix.com/2014/02/unyie=
lding.html">https://glyph.twistedmatrix.com/2014/02/unyielding.html</a><a h=
ref=3D"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.ht=
ml#fnref14">=E2=86=A9</a></p></li>
</ol>
</div>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div id=3D"qb-sougou-search" style=
=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D"last-b=
tn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-88-8c12fb24-2bd9-4271-8b=
00-8d414b9e34a5@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/crawler-images/function-calls.png

iVBORw0KGgoAAAANSUhEUgAABIAAAAH4CAYAAAAy4ZZRAAAKQWlDQ1BJQ0MgUHJvZmlsZQAASA2d
lndUU9kWh8+9N73QEiIgJfQaegkg0jtIFQRRiUmAUAKGhCZ2RAVGFBEpVmRUwAFHhyJjRRQLg4Ji
1wnyEFDGwVFEReXdjGsJ7601896a/cdZ39nnt9fZZ+9917oAUPyCBMJ0WAGANKFYFO7rwVwSE8vE
9wIYEAEOWAHA4WZmBEf4RALU/L09mZmoSMaz9u4ugGS72yy/UCZz1v9/kSI3QyQGAApF1TY8fiYX
5QKUU7PFGTL/BMr0lSkyhjEyFqEJoqwi48SvbPan5iu7yZiXJuShGlnOGbw0noy7UN6aJeGjjASh
XJgl4GejfAdlvVRJmgDl9yjT0/icTAAwFJlfzOcmoWyJMkUUGe6J8gIACJTEObxyDov5OWieAHim
Z+SKBIlJYqYR15hp5ejIZvrxs1P5YjErlMNN4Yh4TM/0tAyOMBeAr2+WRQElWW2ZaJHtrRzt7VnW
5mj5v9nfHn5T/T3IevtV8Sbsz55BjJ5Z32zsrC+9FgD2JFqbHbO+lVUAtG0GQOXhrE/vIADyBQC0
3pzzHoZsXpLE4gwnC4vs7GxzAZ9rLivoN/ufgm/Kv4Y595nL7vtWO6YXP4EjSRUzZUXlpqemS0TM
zAwOl89k/fcQ/+PAOWnNycMsnJ/AF/GF6FVR6JQJhIlou4U8gViQLmQKhH/V4X8YNicHGX6daxRo
dV8AfYU5ULhJB8hvPQBDIwMkbj96An3rWxAxCsi+vGitka9zjzJ6/uf6Hwtcim7hTEEiU+b2DI9k
ciWiLBmj34RswQISkAd0oAo0gS4wAixgDRyAM3AD3iAAhIBIEAOWAy5IAmlABLJBPtgACkEx2AF2
g2pwANSBetAEToI2cAZcBFfADXALDIBHQAqGwUswAd6BaQiC8BAVokGqkBakD5lC1hAbWgh5Q0FQ
OBQDxUOJkBCSQPnQJqgYKoOqoUNQPfQjdBq6CF2D+qAH0CA0Bv0BfYQRmALTYQ3YALaA2bA7HAhH
wsvgRHgVnAcXwNvhSrgWPg63whfhG/AALIVfwpMIQMgIA9FGWAgb8URCkFgkAREha5EipAKpRZqQ
DqQbuY1IkXHkAwaHoWGYGBbGGeOHWYzhYlZh1mJKMNWYY5hWTBfmNmYQM4H5gqVi1bGmWCesP3YJ
NhGbjS3EVmCPYFuwl7ED2GHsOxwOx8AZ4hxwfrgYXDJuNa4Etw/XjLuA68MN4SbxeLwq3hTvgg/B
c/BifCG+Cn8cfx7fjx/GvyeQCVoEa4IPIZYgJGwkVBAaCOcI/YQRwjRRgahPdCKGEHnEXGIpsY7Y
QbxJHCZOkxRJhiQXUiQpmbSBVElqIl0mPSa9IZPJOmRHchhZQF5PriSfIF8lD5I/UJQoJhRPShxF
QtlOOUq5QHlAeUOlUg2obtRYqpi6nVpPvUR9Sn0vR5Mzl/OX48mtk6uRa5Xrl3slT5TXl3eXXy6f
J18hf0r+pvy4AlHBQMFTgaOwVqFG4bTCPYVJRZqilWKIYppiiWKD4jXFUSW8koGStxJPqUDpsNIl
pSEaQtOledK4tE20Otpl2jAdRzek+9OT6cX0H+i99AllJWVb5SjlHOUa5bPKUgbCMGD4M1IZpYyT
jLuMj/M05rnP48/bNq9pXv+8KZX5Km4qfJUilWaVAZWPqkxVb9UU1Z2qbapP1DBqJmphatlq+9Uu
q43Pp893ns+dXzT/5PyH6rC6iXq4+mr1w+o96pMamhq+GhkaVRqXNMY1GZpumsma5ZrnNMe0aFoL
tQRa5VrntV4wlZnuzFRmJbOLOaGtru2nLdE+pN2rPa1jqLNYZ6NOs84TXZIuWzdBt1y3U3dCT0sv
WC9fr1HvoT5Rn62fpL9Hv1t/ysDQINpgi0GbwaihiqG/YZ5ho+FjI6qRq9Eqo1qjO8Y4Y7ZxivE+
41smsImdSZJJjclNU9jU3lRgus+0zwxr5mgmNKs1u8eisNxZWaxG1qA5wzzIfKN5m/krCz2LWIud
Ft0WXyztLFMt6ywfWSlZBVhttOqw+sPaxJprXWN9x4Zq42Ozzqbd5rWtqS3fdr/tfTuaXbDdFrtO
u8/2DvYi+yb7MQc9h3iHvQ732HR2KLuEfdUR6+jhuM7xjOMHJ3snsdNJp9+dWc4pzg3OowsMF/AX
1C0YctFx4bgccpEuZC6MX3hwodRV25XjWuv6zE3Xjed2xG3E3dg92f24+ysPSw+RR4vHlKeT5xrP
C16Il69XkVevt5L3Yu9q76c+Oj6JPo0+E752vqt9L/hh/QL9dvrd89fw5/rX+08EOASsCegKpARG
BFYHPgsyCRIFdQTDwQHBu4IfL9JfJFzUFgJC/EN2hTwJNQxdFfpzGC4sNKwm7Hm4VXh+eHcELWJF
REPEu0iPyNLIR4uNFksWd0bJR8VF1UdNRXtFl0VLl1gsWbPkRoxajCCmPRYfGxV7JHZyqffS3UuH
4+ziCuPuLjNclrPs2nK15anLz66QX8FZcSoeGx8d3xD/iRPCqeVMrvRfuXflBNeTu4f7kufGK+eN
8V34ZfyRBJeEsoTRRJfEXYljSa5JFUnjAk9BteB1sl/ygeSplJCUoykzqdGpzWmEtPi000IlYYqw
K10zPSe9L8M0ozBDuspp1e5VE6JA0ZFMKHNZZruYjv5M9UiMJJslg1kLs2qy3mdHZZ/KUcwR5vTk
muRuyx3J88n7fjVmNXd1Z752/ob8wTXuaw6thdauXNu5Tnddwbrh9b7rj20gbUjZ8MtGy41lG99u
it7UUaBRsL5gaLPv5sZCuUJR4b0tzlsObMVsFWzt3WazrWrblyJe0fViy+KK4k8l3JLr31l9V/nd
zPaE7b2l9qX7d+B2CHfc3em681iZYlle2dCu4F2t5czyovK3u1fsvlZhW3FgD2mPZI+0MqiyvUqv
akfVp+qk6oEaj5rmvep7t+2d2sfb17/fbX/TAY0DxQc+HhQcvH/I91BrrUFtxWHc4azDz+ui6rq/
Z39ff0TtSPGRz0eFR6XHwo911TvU1zeoN5Q2wo2SxrHjccdv/eD1Q3sTq+lQM6O5+AQ4ITnx4sf4
H++eDDzZeYp9qukn/Z/2ttBailqh1tzWibakNml7THvf6YDTnR3OHS0/m/989Iz2mZqzymdLz5HO
FZybOZ93fvJCxoXxi4kXhzpXdD66tOTSna6wrt7LgZevXvG5cqnbvfv8VZerZ645XTt9nX297Yb9
jdYeu56WX+x+aem172296XCz/ZbjrY6+BX3n+l37L972un3ljv+dGwOLBvruLr57/17cPel93v3R
B6kPXj/Mejj9aP1j7OOiJwpPKp6qP6391fjXZqm99Oyg12DPs4hnj4a4Qy//lfmvT8MFz6nPK0a0
RupHrUfPjPmM3Xqx9MXwy4yX0+OFvyn+tveV0auffnf7vWdiycTwa9HrmT9K3qi+OfrW9m3nZOjk
03dp76anit6rvj/2gf2h+2P0x5Hp7E/4T5WfjT93fAn88ngmbWbm3/eE8/syOll+AAAACXBIWXMA
AAsTAAALEwEAmpwYAAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxu
czp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJE
RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMi
PgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0
aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXBy
ZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50
ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8
dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlw
dGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KsOMy3QAAQABJREFUeAHsnQWYLMXVhgv3
YBeX4O4uCQSCEy4aJEBwDRZcIiS4a8INDsEhWIIHd3e7SXB3SXDo/7yVnP5renp2Z2Znd2dmv/M8
u21V1VVv93RXnzp1ziiZSZCIgAiIgAiIgAiIgAiIgAiIgAiIgAiIgAh0JYFRTEbtypapUSIgAiIg
AiIgAiIgAiIgAiIgAiIgAiIgAjkBKYByFFoRAREQAREQAREQAREQAREQAREQAREQge4kIAVQd15X
tUoEREAEREAEREAEREAEREAEREAEREAEcgJSAOUotCICIiACIiACIiACIiACIiACIiACIiAC3UlA
CqDuvK5qlQiIgAiIgAiIgAiIgAiIgAiIgAiIgAjkBKQAylFoRQREQAREQAREQAREQAREQAREQARE
QAS6k4AUQN15XdUqERABERABERABERABERABERABERABEcgJSAGUo9CKCIiACIiACIiACIiACIiA
CIiACIiACHQnASmAuvO6qlUiIAIiIAIiIAIiIAIiIAIiIAIiIAIikBOQAihHoRUREAEREAEREAER
EAEREAEREAEREAER6E4CUgB153VVq0RABERABERABERABERABERABERABEQgJyAFUI5CKyIgAiIg
AiIgAiIgAiIgAiIgAiIgAiLQnQSkAOrO66pWiYAIiIAIiIAIiIAIiIAIiIAIiIAIiEBOQAqgHIVW
REAEREAEREAEREAEREAEREAEREAERKA7CUgB1J3XVa0SAREQAREQAREQAREQAREQAREQAREQgZyA
FEA5Cq2IgAiIgAiIgAiIgAiIgAiIgAiIgAiIQHcSkAKoO6+rWiUCIiACIiACIiACIiACIiACIiAC
IiACOQEpgHIUWhEBERABERABERABERABERABERABERCB7iQgBVB3Xle1SgREQAREQAREQAREQARE
QAREQAREQARyAlIA5Si0IgIiIAIiIAIiIAIiIAIiIAIiIAIiIALdSUAKoO68rmqVCIiACIiACIiA
CIiACIiACIiACIiACOQEpADKUWhFBERABERABERABERABERABERABERABLqTgBRA3Xld1SoREAER
EAEREAEREAEREAEREAEREAERyAlIAZSj0IoIiIAIiIAIiIAIiIAIiIAIiIAIiIAIdCcBKYC687qq
VSIgAiIgAiIgAiIgAiIgAiIgAiIgAiKQE5ACKEehFREQAREQAREQAREQAREQAREQAREQARHoTgJS
AHXndVWrREAEREAEREAEREAEREAEREAEREAERCAnIAVQjkIrIiACIiACIiACIiACIiACIiACIiAC
ItCdBKQA6s7rqlaJgAiIgAiIgAiIgAiIgAiIgAiIgAiIQE5ACqAchVZEQAREQAREQAREQAREQARE
QAREQAREoDsJSAHUnddVrRIBERABERABERABERABERABERABERCBnIAUQDkKrYiACIiACIiACIiA
CIiACIiACIiACIhAdxKQAqg7r6taJQIiIAIiIAIiIAIiIAIiIAIiIAIiIAI5ASmAchRaEQEREAER
EAEREAEREAEREAEREAEREIHuJCAFUHdeV7VKBERABERABERABERABERABERABERABHICUgDlKLQi
AiIgAiIgAiIgAiIgAiIgAiIgAiIgAt1JQAqg7ryuapUIiIAIiIAIiIAIiIAIiIAIiIAIiIAI5ASk
AMpRaEUEREAEREAEREAEREAEREAEREAEREAEupOAFEDdeV3VKhEQAREQAREQAREQAREQAREQAREQ
ARHICUgBlKPQigiIgAiIgAiIgAiIgAiIgAiIgAiIgAh0JwEpgLrzuqpVIiACIiACIiACIiACIiAC
IiACIiACIpATkAIoR6EVERABERABERABERABERABERABERABEehOAlIAded1VatEQAREQAREQARE
QAREQAREQAREQAREICcwer6mFRFoIYFvvvkmPPPMM+GRRx6Jf//+97/DrLPOGmabbbaw8sorh/HH
H7/0bG+99VZ4+eWXS4+xc9xxxw2zzDJLGGeccWqmacUB6vD888+HqaaaKsw777ytKLKlZXz++efh
iSeeCKONNlpYZJFFWlp2WWHvvvtufi25rlNMMUW8losuumhYcMEFy7J01b77778/tmexxRYLo4wy
Sle1TY0RAREQgXYn8OKLL4Z33nknTDjhhGGOOebosbofffRRfH+TiHfUqKNqrLNHYDooAiIgAiIw
pAiMkpkMqRarsf1O4Kmnngrrrbde3gErnnDqqacORx99dNhoo42Kh8Kxxx4b9thjj6r96Q46c3Tq
jjvuuLDkkkumhxpe//LLLwN/Y445Zhh77LHz/Mccc0zYc889w4YbbhguvPDCfH+7rNAZnmmmmcKw
YcMCypn+ku+++y789re/DYccckio9ajgOnI9ua79JbWuU3+dr1iuK338Xike17YIiIAIiED/Edh6
663DGWecEZZffvlw880393iiv/71r2H48OExzaefflpzwKnHQnRQBERABERABLqQgH3TjKJhkS68
sIPZpD//+c9h8cUXj8qfSSaZJCpQjjjiiHDqqaeG/fbbL1oBvfHGG+FnP/tZVCzUqisKGawt0j8s
TbAcQimBRcbSSy8drrvuulpF1LX/wAMPjCOKu+66a13p2yXR9773vVgVX/ZHvRhtXWmllcLBBx8c
lT9LLLFE2G233cLpp58ejjzyyKjAwwIJBdlCCy0U3nzzzf6oRiyzU69TvwFRwSIgAiIgAiIgAiIg
AiIgAiLQIAFNAWsQmJLXJnDvvfeGn//85zHBj370o3D++edXWYX8/ve/DzvttFP405/+FBULKHFQ
MhRlyimnjEqe4n6sULAwWmeddcI///nPwKjgv/71rwrrnWKebtx2xQ/m8P0lXEtGWpl2d+KJJ4at
ttqq6lS/+tWvAoqht99+Oyr7brnlljgtrSqhdoiACIiACIiACIiACIiACIiACAwqAVkADSr+7jr5
3nvvHRuENQiKg7IpQaOPPnq0HsGHDJY8WAc1IkzFwSfPOeecE7NhTfT00083UkRXpB1jjDGiHyRX
BLW6UVy/G264IRaLIq9M+cPBueaaK6AEQu64445wzz33xHX9EwEREAEREAEREAEREAEREAERaC8C
sgBqr+vRsbW55pprwl133RXrz5ShnpwuorRA8fOLX/wiPProo+E///lPGG+88Rpq+8ILLxwtTb79
9tvw3HPPhemnnz4cfvjhsYydd945zDDDDFXlvfbaa9FvEAc222yzqES68847Yzqsl/A9hDXLT3/6
04q8OLTGpwBKEaaezTzzzDEd9UcRUyZMTbviiiti+3CAPd9884VVVlklbL755lVOhG+//fZw9dVX
B6ym1lhjjbh+4403xry0i2lwO+ywQ5WVExyLCiB8A+G/6MknnwzvvfdedNQ8//zzx6lbE000UVlV
S/ftu+++cT/nXmuttUrT+E6mhTH1j3NjAfTDH/7QD/W4rKeuL730UjjppJNCb9eJdKecckp0VI0j
cXwj4XQcK6Yf/OAHNetx+eWXh6uuuio89NBD8brgYHzLLbfM/UfUzPi/A1ikwZvpbyg18RvV073f
W3k6LgIiIAIi0L8EePdccMEF4eGHH47vyaWWWiosu+yy8R3t/t6KNWjkHfPJJ5+E448/Pg7S7LXX
XjFgA30I3utY1Pp06kYsePfff//or/CAAw4IX3zxRexf/O1vfwuTTTZZfF+tttpqsexXX301nH32
2XEwhkE2puRvs802Ybrppis2KW43wsL7KgSe2GCDDWKfiHbR31hhhRXC2muvHQeFKPjSSy8NN910
U7TYnnPOOaOlN3nKBKfdJ5xwQnwPE2SCunq/ZcYZZ6zIQh/skksuyftq5557bjjvvPOiY3D6K/Qp
Z5999rDttttW5PMN/EhxDtLWqo+n1VIEREAEupaAfcBIRKDPBHbffXeciWcWnaNPZdnHdCzHFB89
lmOOj2M6zmmWKpl1dDJT+sR9poAqzWtKp3jcOiPZ3XffneenDP+zjlLMa06N47511103M4fW+XFP
x9I6O9lXX31VcS5zEpyZP6E8vSkDMvOTk28vs8wy2euvv16Rx89FvjRveq5VV101s05fRT5TcGSb
bLJJvs+USJn5TsrPNdZYY+Xr1onKHnvssTxtTyvWec3zXXTRRT0lbfpYvXXt7TpRAesEZ2ZZltc5
bTcMuTeLYlHUMps+mOdJWbO+xRZbVGTx41xfF1M+ZqYsimVYtLjMOpV+SEsREAEREIEWEjAr1Pis
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
gAiIgAiIgAiIgAiIQOMEpABqnJlyiIAIiIAIiIAIiIAIiIAIiIAIiIAIiEBHEZACqKMulyorAiIg
AiIgAiIgAiIgAiIgAiIgAiIgAo0TkAKocWbKIQIiIAIiIAIiIAIiIAIiIAIiIAIiIAIdRUAKoI66
XKqsCIiACIiACIiACIiACIiACIiACIiACDROQAqgxpkphwiIgAiIgAiIgAiIgAiIgAiIgAiIgAh0
FAEpgDrqcqmyIiACIiACIiACIiACIiACIiACIiACItA4ASmAGmemHCIgAiIgAiIgAiIgAiIgAiIg
AiIgAiLQUQSkAOqoy6XKioAIiIAIiIAIiIAIiIAIiIAIiIAIiEDjBKQAapyZcoiACIiACIiACIiA
CIiACIiACIiACIhARxGQAqijLpcqKwIiIAIiIAIiIAIiIAIiIAIiIAIiIAKNE5ACqHFmyiECIiAC
IiACIiACIiACIiACIiACIiACHUVACqCOulyqrAiIgAiIgAiIgAiIgAiIgAiIgAiIgAg0TkAKoMaZ
KYcIiIAIiIAIiIAIiIAIiIAIiIAIiIAIdBQBKYA66nKpsiIgAiIgAiIgAiIgAiIgAiIgAiIgAiLQ
OAEpgBpnphwiIAIiIAIiIAIiIAIiIAIiIAIiIAIi0FEEpADqqMulyoqACIiACIiACIiACIiACIiA
CIiACIhA4wSkAGqcmXKIgAiIgAiIgAiIgAiIgAiIgAiIgAiIQEcRkAKooy6XKisCIiACIiACIiAC
IiACIiACIiACIiACjRMYvfEsyiECIiACIiACIiAC9RFYffXVw7XXXltfYqUSARHoegKrrbZauOaa
a7q+nWqgCIiACLQjgVEyk3asmOokAiIgAiIgAiLQ+QRGGWWUzm+EWiACItBSAvr8aClOFSYCIiAC
dRGwPtkosgCqC5USiYAIiIAIiIAI9IWAPvj6Qk95RaA7CEgh3B3XUa0QARHoXALyAdS51041FwER
EAEREAEREAEREAEREAEREAEREIG6CLSdBdBDDz0Uvv3229LKM2ow7bTThqmnnrr0eDM7ezpfWXmT
Tz55mHHGGcsO9du+Rx99NHz11VdhnnnmCeONN16fztPJ7W2k7twriy22WJ9YdULmRpjQnlbev7fe
emu47777wj777BNGHfW/uuSe6jPYv9+hck8U79svv/wyPP744+HBBx8MDz/8cJh00knD/PPPH//m
mGOOMMYYYxSzxO2nn346vP7664E0008/fWmasp1+D3COscceuyxJW+576aWXwmeffRbmmmuumvV7
7bXXwv333x9eeeWVsN5664Wnnnoq/OMf/wi77LJLzTw60FkEnn322fDqq6+WVppnyLBhw8Iss8wS
JphggtI0zez8z3/+E3+fjeT9wQ9+EEYfve26cI00oem0X3/9dbjyyivDM888E55//vnA75JnFM+q
ueeeOwwfPjyMNtpopeX/61//yq/vhBNOGBZccMHSdGU7//a3v4V33303HqI/tuiii5Yl0z4REAER
EAERaG8C+ABqJ7FOFT6Jevz73ve+lx1wwAGZdZr6XPV6zpfWZ9ttt+3zORstYJpppok87MOj0axV
6Tu5vY3U3RQSVW3vxh2NMOE+btX9+9FHH2VTTDFFtuWWW1Zgrac+g/X7HSr3RHpBfv3rX2em4Kn5
PB1//PGziy66KM2Sr3NtuWdOOOGEfF89K5RJvueee66e5C1N8/HHH2f8fffddw2Xu+OOO2ZLLbVU
zXzXX3995m2jfTfeeGP2wAMPxLZecsklNfPpQPQzGDl1Aosddtgh1pVr3NPfwgsvnN18880taZIp
Ens8V1k93n///Zacu9MKufvuuzNT8vTIi2tjyu7Spv3yl7/M8y699NKlaWrttEGlPO8ee+xRK1m/
76cveO+998a/TrwP/H7ud1A6gQiIgAiIQBUBewaHth0+wspmsskmo465MPLCKO0nn3wSDjnkkIAF
wp133plbH+QJm1iZZJJJwjjjjNNrzokmmqjXNJ2QoJPbyzXozRKKkdqhJAN9PX/zm9+E9957L+y/
//6lmAf696t7ovIyYDFoCpxw/vnnxwPf//73w5JLLhkWWGCB8Pnnn4fHHnss2IdUvIYbbrhhtD44
4ogjao6aV5benltYOjGij7zxxhthqqmm6rWib775ZsDSafnll69IixUTllFYMbmceuqp4d///ne0
QN10003DzDPPHGaaaaZAhKtdd901rLzyysGUm55cyy4ngDXdj3/843DWWWeFzTffvMtb2x7N+/Of
/xw222yzYL3ZHivEtcEC+C9/+UtYc801e0zbiQeXWWaZwPMOufTSS6M1Yie2Q3UWAREQAREYHAJt
qwCykeuwxRZbVFGhA37ccccFPkDvueee8Ic//CHsvPPOVeka3XHaaaeFddZZp9FsHZu+k9t77LHH
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
v4s5jC/1BTKQ9dC52pOARd+L02Utcl97VlC1apjAZJNNFiyIgKbVN0xOGURABERABNqFQFc5gcZp
Lo78cCLYTk6f2+Viqx4i0M4E9Ptt56vTe91wDo2/MTfv7z2HUgwVAn5PYLna7cLUR6Z7WYSr2Bdh
OqSkswlgUU7fEsf3KHwlfSMwlJ4HfSOl3CIgAiLQegL2DO5OH0CtR6USRUAEREAEREAEmiHgH3zN
5FUeERCB7iQwFBTC3Xnl1CoREIFOJoD+p6umgHXyxVDdRUAEREAEREAEREAEREAEREAEREAERKC/
CMg2ub/IqlwREAEREAEREIGcgEb8cxRaEYEhS0AWgUP20qvhIiACbUJAFkBtciFUDREQAREQAREQ
AREQAREQAREQAREQARHoLwKyAOovsipXBERABERABESgKQKvvfZauP/++8Mrr7wS1ltvvTDddNM1
Vc7TTz8dXn/99TDHHHOE6aefvqky+isT7UMWW2wxOU/vL8gqVwREQAREQAREoIKALIAqcGhDBERA
BERABERgMAnccMMNYc4554yKn9133z0899xzTVfn2GOPDSuvvHK48sormy6jvzIuscQSgb+vv/66
v06hckVABERABERABESggoAsgCpwaEMEREAEREAERGAwCZx66qmB0NtTTz112HTTTcPMM888mNXR
uUVABERABERABESgawhIAdQ1l1INEQEREAEREIHOJ+BTo04//fSw6qqrdn6D1AIREAEREAEREAER
aBMCmgLWJhdC1RABERABERABEQjhiy++iBgmnXRS4RABERABERABERABEWghAVkAtRCmihIBERAB
ERABEWiOwGWXXRaeeeaZ8Nlnn8UCzj777IA/oE022STMOOOMzRWa5Prwww/DiSeeGO65557wzjvv
hPnnnz+ss846Yfjw4Umq/1996aWXwimnnBIeeeSR8NZbb4Vhw4aFWWedNfz85z8PP/jBD/4/YWHt
8ssvD1dddVV46KGHonPnWWaZJWy55ZY1z1PIHrIsC8ccc0x48803wxRTTBH23HPPMOqoGq8rctK2
CIiACIiACIhA4wRGsY5G1ng25RABERABERABERCB3gmMMsooMVFv3Y2f/vSnASVQUW666aawwgor
FHfXtb3VVluFM888M+y4447h73//exg5cmRVvq233jqMGDEijDbaaPmxa665Jqy11lrhm2++ifvG
Gmus8OWXX+bHcU6NkiYVLJd23nnnwNS1Mtliiy1iXfyYc6HcMcccM+7+7rvvwjbbbBPTTTXVVOHm
m2+ODrE9j5Yi0OkE/L7v7XnQ6e1U/UVABESgHQnYM3gUDSm145VRnURABERABERgiBEgYtdTTz0V
Jpxwwtjyq6++Om4vueSSfSbxxz/+MWABdM4550Rrnn/961/hwAMPjBY6KGxQErlggbTBBhtE5c/+
++8f3n///fD5558HQsr/+te/jsmo62OPPeZZ4vLggw+Oyp/xxhsvlvf222/Hc+LUeowxxghnnXVW
qYLLC0H540qiaaaZJtx2221S/jgcLUVABERABERABFpCQBZALcGoQkRABERABERABMoINDriz1Qr
lC7PPvtsmGOOOcqKrHufWwBh3YPCZp555qnIe8ABB4RDDz00YG3z4osvBix97r777jjFi3NTh1RQ
0lAG+1HsYK2DvPHGG3F6GMqjCy64IGy00UZptrDZZpuFc889N/zsZz8L559/fjzmXLAAon6k4dj0
008fbrnlFkU/qyCojW4h4Pe9LIC65YqqHSIgAp1EwJ7BsgDqpAumuoqACIiACIiACDROAIVMUflD
Kbvttlu0zsHfzj//+c9YMP6GrrvuunDppZdWnQhfPISnR/7zn//kx1H6oPyZcsopq5Q/JNprr73C
euutF8ocWzPNDD9HKH849+233y7lT05WKyIgAiIgAiIgAq0kICfQraSpskRABERABERABNqOAA6f
y2SyySaLShd8A73wwgth7rnnjgoeV/J88skn4eGHHw44hMZC6NZbbw133XVXVVGuPJpvvvmqjrED
5VOZQoljWAXhNBpZffXVwwwzzBDX9U8EREAEREAEREAEWk1ACqBWE1V5IiACIiACIiACbUXAFTpl
lWL6FwogrIBcHn/88YDfIKxyUksfLHgoiylfqeBTCJl33nnT3XWto/wh2hc+gzgn1kCLL754XXmV
SAREQAREQAREQAQaISAn0I3QUloREAEREAEREIGOI/D666/XrDPOoRFXEv31r38NCyywQPTxM9ts
s4X99tsvXHzxxdGHEOHgl1pqqZjefZmw8e2331btizvq+LfQQguFJ554Iqy55poBH0NEJfvqq6/q
yKkkIiACIiACIiACItAYASmAGuOl1CIgAiIgAiIgAh1G4Pnnny+tMQqXV155JR6baaaZ4vJXv/pV
XBI6/pFHHolOotdff/3ANLLRRx89fPTRR1VloShCiNxVJiiOjjvuuIpoY56OMPeTTz55OPHEEwMR
xIiEdthhh/lhLUVABERABERABESgZQSkAGoZShUkAiIgAiIgAiLQjgTuueee8PXXX1dV7dprr40K
HaaBzTLLLNECxyN/bbjhhlXpscyhLCSNYoTFEPLoo48G/AYVBYXO7rvvHp1LF4+NP/74cRfRvwhN
jxCZjLDzEhEQAREQAREQARFoJQEpgFpJU2WJgAiIgAiIgAi0HQGUOvvss09Fvd55552w7777xn1E
6RpzzDEDUb7wx4NceeWVcen/Pv/88+iwmWhfRdl8883DtNNOG6eCHXXUURWHsTA67bTT4r7hw4dX
HCtuEJUMR9IompgKhoWSRAREQAREQAREQARaRUAKoFaRVDkiIAIiIAIiIAJtSYAoXEzBIsrXrrvu
GrbZZpuA7x2sbBZccMGw3Xbb5fXedNNN4/rJJ58cQ7cff/zxYbPNNgtM87r55pvDKqusEo8T+v2s
s86K62OPPXYgHVPEDj744LDCCiuE3/72t2GXXXaJ/oRQHpEPB889CflHjBgR8C903333hZNOOqmn
5DomAiIgAiIgAiIgAg0RGMVMmLOGciixCIiACIiACIiACNRJwJ0l19vdGDZsWHj//fcDVjtzzDFH
nWcpT7bVVltFvzuXXHJJuPfee8Ppp58ePv300zzxWmutFc4777zoe8d3Yn2Dgujcc8/1XdEyaIkl
loj7cPi89tprh2eeeSbMNddcFVO17rjjjrDRRhtVRAkbY4wxooLpoIMOChNNNFFepnP58ssvo/VR
fsBWUEideuqpuU8ghYZP6Wi9kwn4fV/v86CT26q6i4AIiEC7EbBn8ChSALXbVVF9REAEREAERKCL
CLTTBx9+gO66666ARQ6h1gnrXktQQD322GNRaUPkrwknnDBPyscrFjpTTjllmHHGGfP9rHCMsPA4
c8a5M0qsSSaZpCKNNkRgqBJop+fBUL0GarcIiMDQJYD+RwqgoXv91XIREAEREAER6HcCff3ge/vt
twNRtBoRpmTNPvvsjWRRWhEQgQEg0NfnwQBUUacQAREQga4lgP5n9K5tnRomAiIgAiIgAiLQ8QTw
iePRseptDMqf5557rt7kSicCIiACIiACIiACQ4KALICGxGVWI0VABERABERgcAhoxH9wuOusItCO
BPQ8aMerojqJgAgMFQKyABoqV1rtFAEREAEREAEREAEREAERaEsCq6++erj22mvbsm6qlAiIQOsI
rLbaauGaa65pXYFNlCQLoCagKYsI9EZAI1y9EdJxERCBoUJAz8OhcqXVThHonYCeB+WMnEv5Ue0V
ARHoJgKDGQXRnjXyAdRNN5PaIgIiIAIiIAIiIAIiIAIi0JkEBvPDsDOJqdYi0DkE2kXRO2rnIFNN
RUAEREAEREAEREAEREAEREAEREAEREAEmiGgKGDNUFMeERABERABERABERABERABERiCBJ599tnw
6quvlrYcK4dhw4aFWWaZJUwwwQSlaVqx87vvvgtPP/10ePLJJ8MTTzwRz7XAAguEBRdcMEw99dSt
OEVDZXz66afh4YcfzvMsuuiiYbzxxsu3+7ry9ddfhyuvvDI888wz4fnnnw+vvfZamH766cMcc8wR
5p577jB8+PAw2mijlZ7mX//6V369JpxwwsioNGHJzr/97W/h3XffjUfmmWeeQLsknU1ACqDOvn6q
vQiIgAiIgAiIgAiIgAiIgAgMGIGTTjopnHLKKb2eb+GFFw5HHnlkWH755XtN20gCFFCbb755eOCB
B0qzzTDDDOHiiy8Oiy22WOnx/tg5cuTIsNxyy+VFP/7442G++ebLt/uycs8994Rtt902KrxqlQPr
U089NSy00EJVSf7whz+E4447Lu5feumlw1133VWVptaOgw46KOe8xx57DJoCiGuN0g+ZbbbZwiST
TFKrytrfCwFNAesFkA6LgAiIgAiIgAgMLAFGNv/yl7/EDmutUeaBrVHzZ/vwww/DjTfemHegmy9J
OUVABESgswhgEfPjH/84nH322S2r+FlnnRUtWGopfzjRSy+9FJZddtlw/vnnt+y8g1XQn//85/CD
H/ygR+UPdYM1Cq+rrrpqsKrar+ddZpllwpJLLhn/brnlln49V7cXLgugbr/Cap8IiIAIiIAIdBCB
G264Iay33nrh3//+d6w1JufTTTddB7WgsqpMTVh55ZVjp5VRXIkIiIAIdBuBlVZaKW/SRx99FJUR
3377bb5v1113DaTp69QsFDu/+MUvwpdffpmXPeeccwaUA+OMM0547LHHwm233RaPffHFF2GTTTYJ
TEn72c9+lqfvpJXXX3897LzzziF1Do6VEaHEZ5111oAl1NVXXx3uvffe2CyYb7/99uGHP/xhyyxk
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
AVQWzNwJCZAACZAACZAACcQSmDFjhhs5cqQbNWqUmzlzppZBxDBEDkMEMUQSo5AACZBAPRGgAqie
jjbHWlYCVACVFTd3RgIkQAIkQAIkQAKxBObNm+fuuecetQqaPHmylsFzWteuXdUqqFu3bq5Jkyax
dZlIAiRAArVEgAqgWjqaHEuiCFABlKjDwc6QAAmQAAmQAAmQgHvttdc0etjtt9/u5syZo0TatGnj
PvzwQ9IhARIggZonQAVQzR9iDrBSBKgAqhR57pcESIAESIAESIAEGibw7bffutGjR7uTTz7ZNW3a
1P3+++8NV2AuCZAACdQAASqAauAgcgjJJEAFUDKPC3tFAiRAAiRAAiRAAiDw22+/uebNm7tFF13U
zZ07l1BIgARIoOYJQAHECa81f5g5QBIgARIgARIgARIgARIgAZ/AH3/8oZsLL7ywn8x1EiABEqhp
AlQA1fTh5eBIgARIgARIgARIgARIgASiBKgAihLhNgmQQD0QoAKoHo4yx0gCJEACJEACJEACJEAC
JBASmD9/vq7DBxCFBEiABOqFABVA9XKkOU4SIAESIAESIAESIAESIAElQAsgnggkQAL1SIAKoHo8
6hwzCZAACZAACZAACZAACdQxASqA6vjgc+gkUMcEqACq44PPoZMACZAACZAACZAACZBAPRKgAqge
jzrHTAIkQAUQzwESIAESIAESIAESIAESIIG6IkAfQHV1uDlYEiCBPwlQAcRTgQRIgARIgARIgARI
gARIoK4I0AKorg43B0sCJPAnASqAeCqQAAmQAAmQAAmQAAmQAAnUFQEqgOrqcHOwJEACfxKgAoin
AgmQAAmQAAmQAAmQAAmQQF0RoAKorg43B0sCJPAnASqAeCqQAAmQAAmQAAmQAAmQAAnUFQH6AKqr
w83BkgAJ/EmACiCeCiRAAiRAAiRAAiRAAiRAAnVFgBZAdXW4OVgSIIE/CVABxFOBBEiABEiABEiA
BEiABEigrghQAVRXh5uDJQES+JMAFUA8FUiABEiABEiABEiABEiABOqKABVAdXW4OVgSIIE/CVAB
xFOBBEiABEiABEiABEiABEigrgjQB1BdHW4OlgRI4E8CTUmCBEigMAKTJk1yxx13XIOVO3ToEJt/
xRVXuG222SY2j4kkQAIkQAIkQAIkQAKlJUALoNLyZeskQALJJEAFUDKPC3tVBQQ6duzoPv74Y/ft
t99m7O2rr76alteqVSu3xRZbpKUzgQRIgARIgARIgARIoDwEqAAqD2fuhQRIIFkEOAUsWceDvaki
As2aNXMHHnhg3j1GHdSlkAAJkAAJkAAJkAAJVIYAFUCV4c69kgAJVJYAFUCV5c+9VzmBQw89NO8R
FFIn752wAgmQAAmQAAmQAAmQQEYC9AGUEQ0zSIAEapgAFUA1fHA5tNITgI+fdu3a5bwjlM3kFyjn
RliQBEiABEiABEiABEigUQRoAdQofKxMAiRQpQSoAKrSA8duJ4dAPhY9+ZRNzgjZExIgARIgARIg
ARKoLQJUANXW8eRoSIAEciNABVBunFiKBDIS6N27t2vSJPulhDIoSyEBEiABEiABEiABEqgsASqA
KsufeycBEqgMgexvrZXpF/dKAlVDoHXr1q5bt25Z+4syKEshARIgARIgARIgARKoLAH6AKosf+6d
BEigMgSoAKoMd+61xgjkMrUrlzI1hoXDIQESIAESIAESIIFEEqAFUCIPCztFAiRQYgJUAJUYMJuv
DwI9evRwyyyzTMbBIg9lKCRAAiRAAiRAAiRAApUnQAVQ5Y8Be0ACJFB+AlQAlZ8591iDBJo1a+Z6
9eqVcWTIQxkKCZAACZAACZAACZBA5QlQAVT5Y8AekAAJlJ8AFUDlZ8491iiBhqZ4NZRXozg4LBIg
ARIgARIgARJILAH6AErsoWHHSIAESkiACqASwmXT9UWgQ4cOrl27dmmDRhryKCRAAiRAAiRAAiRA
AskgQAugZBwH9oIESKC8BKgAKi9v7q3GCcRZ+sSl1TgGDo8ESIAESIAESIAEEk2ACqBEHx52jgRI
oEQEqAAqEVg2W58Eevfu7Zo0+d9lhXWkUUiABEiABEiABEiABJJDgAqg5BwL9oQESKB8BP73plq+
fXJPJFCzBFq3bu26desWjg/rSKOQAAmQAAmQAAmQAAkkhwB9ACXnWLAnJEAC5SNABVD5WHNPdULA
n/Llr9fJ8DlMEiABEiABEiABEkg8AVoAJf4QsYMkQAIlINC0BG2ySRKoawI9evRwyyyzjDLAOoUE
SIAESIAESIAESCBZBKgAStbxYG9IgATKQ4AKoPJw5l7qiECzZs1cr169dMRYp5AACZAACZAACZAA
CSSLABVAyToe7A0JkEB5CFABVB7O3EudEeDUrzo74BwuCZAACZAACZBAVRGgD6CqOlzsLAmQQJEI
UAFUJJBshgR8Ah06dPA3uU4CJEACJEACJEACJJAgArQAStDBYFdIgATKRoBOoMuGmjsiARIgARIg
ARIgARIgARJIAgEqgJJwFNgHEiCBchOgAqjcxLk/EiABEiABEiABEiABEiCBihKgAqii+LlzEiCB
ChGgAqhC4LlbEiABEiABEiABEiABEiCByhCgD6DKcOdeSYAEKkuACqDK8ufeSYAESIAESIAESIAE
SIAEykyAFkBlBs7dkQAJJIIAFUCJOAzsBAmQAAmQAAmQAAmQAAmQQLkIUAFULtLcDwmQQJIIUAGU
pKPBvpAACZAACZAACZAACZAACZScABVAJUfMHZAACSSQABVACTwo7BIJkAAJkAAJkAAJkAAJkEDp
CNAHUOnYsmUSIIHkEqACKLnHhj0jARIgARIgARIgARIgARIoAQFaAJUAKpskARJIPAEqgBJ/iNhB
EiABEiABEiABEiABEiCBYhKgAqiYNNkWCZBAtRCgAqhajhT7SQIkQAIkQAIkQAIkQAIkUBQCVAAV
BSMbIQESqDICVABV2QFjd0mABEiABEiABEiABEiABBpHgD6AGsePtUmABKqTABVA1Xnc2GsSIAES
IAESIAESIAESIIECCdACqEBwrEYCJFDVBKgAqurDx86TAAmQAAmQAAmQAAmQAAnkS4AKoHyJsTwJ
kEAtEKACqBaOIsdAAiRAAiRAAiRAAiRAAiSQMwEqgHJGxYIkQAI1RIAKoBo6mBwKCZAACZAACZAA
CZAACZBAdgL0AZSdEUuQAAnUHoGmtTckjogESIAESIAESCApBLp37+7Gjx+flO6wHyRAAhUmsOuu
u7qHH364wr1wjhZAFT8E7AAJkEAFCNACqALQuUsSIAESIAESqBcCVP7Uy5HmOEkgNwJJuSdQAZTb
8WIpEiCB2iJAC6DaOp4cDQmQAAmQAAkkkkAQBInsFztFAiRQPgILLbRQ+XaWZU9UAGUBxGwSIIGa
JEALoJo8rBwUCZAACZAACZAACZAACZBAJgL0AZSJDNNJgARqmUDiLICmTJkSzsmNgsdXg1VXXdWt
vPLK0ayCtxvaX1yjK6ywgltrrbXiskqW9tprr7l58+a5jTbayC2xxBKN2k81jzefvuNc6dixY6NY
VUPlfJhgPMU8f5966in34osvupNPPtk1afJfXXJD/an09Vsv50T0vP3tt9/cG2+84V555RX36quv
umWXXdZtuumm+rfBBhu4RRZZJFpFt//973+7GTNmOJRZffXVY8vEJdo5gH00b948rkgi0z755BP3
66+/urZt22bs3xdffOFeeukl99lnn7l9993Xvf322+799993xxxzTMY6zKguAu+++677/PPPYzuN
e8hyyy3n1llnHbfkkkvGlikk8ZdfftHrM5+62267rWvaNHGPcPkMoeCyv//+uxs7dqx755133LRp
0xyuS9yjcK9q166d69Gjh1t44YVj2//www/D47v00ku79u3bx5aLSxw3bpybNWuWZuF5bIsttogr
xrQqIkALoCo6WOwqCZBA8QiISXaiRB6qYCPe4N9SSy0VDBkyJJCHpkb3PZf9+f3p379/o/eZbwOr
rLKK8pAXj3yrppWv5vHm03dRSKSNvRYT8mGC87hY5+/3338frLjiisHhhx+egjWX/lTq+q2Xc8I/
IKeffnogCp6M99MWLVoEd9xxh18lXMexxTlzxRVXhGm5rKBN1HvvvfdyKV7UMj/88EOAvwULFuTd
7sCBA4Ott946Y71HH300sLFhfI8//njw8ssv61jvuuuujPWYofO+lFM1sDjqqKO0rzjGDf393//9
XzBhwoSiDEkUiQ3uK64fs2fPLsq+q62R559/PhAlT4O8cGxE2R07tL/97W9h3W222Sa2TKZE+agU
1v373/+eqVjJ0/Es+MILL+hfNZ4Hdj6XHFQOO9h+++31mD799NM5lGYREiABEqh+AnIPdon9fAQr
m+WXXx59DAVfXvCV9scff3Tnn3++gwXCc889F1ofhAULWGnVqpVbbLHFstZs2bJl1jLVUKCax4tj
kM0SCl9q60nKfTzPOOMM95///MedeuqpsZjLff3ynEg9DLAYFAWOu/XWWzVjjTXWcFtttZXbbLPN
3Jw5c9zrr7/u5EVKj2HPnj3V+uDiiy/O+NU8tfVkbsHSCV/0IV9++aVbaaWVsnb0q6++crB06tKl
S0pZWDHBMgpWTCajRo1yP//8s1qg9unTx6299tquTZs2DhGujj32WNe1a1cnyk0rzmWNE4A13Y47
7uiuv/56d+ihh9b4aJMxvJtvvtkdcsghTh6/G+wQjg0sgO+99163xx57NFi2GjP/8pe/ONzvIHff
fbdaI1bjOJLQZ1oAJeEosA8kQALlJpBYBZB8uXaHHXZYGg88gP/rX/9yeAGdPHmyu+qqq9zRRx+d
Vi7fhGuvvdbtvffe+Var2vLVPN7LLrss9tyo2oNRhI6X83hi2guuOygO8BIcJ+W+fnlO/O8o4OUI
IXbFOsFBEXrCCSe48847zzVr1ux/hWTt22+/1evowQcfdEOHDnViOeNwHjVWsF+xwHFQOiVdMI1E
LH9UqbP44os7sWxz6623nk7rwks9Xu5NMPULMnr0aNetWzdLdqeddpoq1/CbdPnll4fp1boyadIk
fXmOni/VOp7G9vuvf/1r2ATODygX7KURGVD+oUwxp6avueaaTiwsw/3GrdTb9C9MR8Wznq/82WGH
HfRet+666zpM3cO9TCxjFBeO0ZFHHum22247hw8kxRBMu8M0asiGG25YjCbZRoUJ0AdQhQ8Ad08C
JFARAlXnBFpM8B1eLnfeeWcFJmb4FQHHnZJAvRI4++yz9QVo8ODBeSPg9Zs3srwrwE8FlDCQq6++
2l1yySVpyh/k4aXogQcecL1798amKjvgH6Oxgi/vnTp1qgr/PzLdR18cYdHzwQcfqEUUfHtACXLd
ddeloJg7d65uw4eSLxjr5ptvrkrRTL5j/PJJXz/uuOPUegrXNyyh6lmgQH3sscfCPygBYYl84IEH
hlhgkQxr5GLKSSedpP7V4GMt0182azMoYc1KJK5v8HflK1PiymRKy1bPV5BlasNPh2ItmwwYMECV
1FYOSm3c56DghpXPKaecohbhxx9/vBVxX3/9tcP5nKtk6zcU5Q899JD+9e3bt8FmcxlTXAM4LpTy
EbBjnslnVPl6wj2RAAmQQPkIVJ0CyNBsueWWuip+JnR5yy23OJmT7WCmn0nGjBmjZe68885MRXJO
v/LKK7Wtm266KWMdmCujT7fffntKGUxjg+NcKLE23nhjh69Y4ptFXzpSCiZoo5rHe8455+hxgIUD
viKCdYcOHdSBpCHGVyCYUu+///7q2BH5eKgU/ydqKWHlbPnMM8+ExxYP2k888YQ6gsWxxPREOKc0
QbvYp/gXcXhobOj8+/jjj7U+rNFg5o2H2kceeaTgB3XrQ3Qp8921/zg/8eIbFfQf5yiUrb5SAF9Z
YVaP8xYvvoVKpa9fvMhh7Dg2EFzH+Iofdeabz7VaqnMCL1vip8fhhRxfoPHyCcVOJmXDhRdeqGPa
ZJNN9LzTjQb+YeoXrF/wIHzBBRfElvzuu+8cFH+Y5gSnqbCOwdf2OLnoooscrjnxTZGWne9Y0MA3
33yjUw1xv8TUQnzRxwvyzJkzw/Zx38f5aoK+4vji5TybwHEspoxh+himyMGps/gQUesp1L3nnnt0
PPZidsMNN7hzzz3X4Vo1wXWNe8jw4cMtqaqXsA6DlR+c3EIh9s9//lNfpqt6UEXq/DLLLJOmVMB9
Eeej+JTR+zzu9bBKjAqmGyLP/jANs7EiPkzC9tAPWCjB8gUWSbhP+DJixAiH8rAuwjRqOGmHxRuu
HdzrotK5c2dnf3Ak/+STT+q1j/poH9Oxpk6dqtXgGP3ggw9Wq1C0i98I8Y0VbTLchqUO7idoC0zh
XBuWdehjVDCmhx9+OEzeZZddnPiBDK9Ry8BLPJQ0UMia4DnMv1Yt3ZawKj/xxBP1vrbooouqI2lc
z+bs2cphCWUS+og/WAJGJZ8x+XXRR0wnhNsDHBdMacaUXfwuweG1Ce6rsLz102ARjzQcG0r+BKgA
yp8Za5AACdQAAXkgT5SYE1n5+tpgvwYNGhQI/kB+JLWcmOrrNpx0io+LtLryJSyQB3wtIy/gYb7t
T15qw7RcVuTrk7Yl5sCBPPinVUEa8tBHUQCF+fJ1PhDTbU1HnjxwhOvYlq9XYVlbKYUT6Gocrx2r
bOeGcbOl8ZMvqeq4GJzxB0eKEJwb2//pCBDpcJorX37D4yIPqMH06dOtOV3KC5HmH3TQQYG8DIdl
rW0cY1EIBDI9IC0PZeSlO6U9bMCRLBwkWxv+8oADDog9r41JvsdTXowDmWag+5IX6hSnuTh3RQGm
efLwH8gDUthXO+/lq2uY5q9Yf7Ido2Jfv9n25/cR6zLVScd3xBFHBDKFJ2QuD/Zh0Xyv1VKcE3Dw
udtuu4X9888JeWlKc0ILx8tWJp9zAg6QUU+mbYXjNyfQyJOXxLBdax9L8Ive/8xRctQJdL5jQUee
ffbZQF40w3371yX2A+e5EFEOhWX8/onCV/Mb+offA9S5Xn5D5AU6kJfXlPuwRPuKbVuUvmGzxn21
1VYL06p1BQ50fYa2Difq4u8oEKWp3jPzGZ+1kU+dSpX1nUDjfIsTnMv+uSjKWS0mytGQnUwRSqsq
ytkwH+evBbKIOoEWxU1a3UwJMlUvbFM+cgWiQAi3RQml1XCNyrTQMN2Oh79s3bp1IAqqlN34+fIx
IOXZxfIkMmsgyqFA/GHFtm998Bs+88wzA1HWxJZHu6LASrmv3HjjjSll4Qi6IcG9z/qHJe7lJr4T
aFFSqeN3v6ytS1Sx4M0337RqumzICXS+Y0KDeFYV5U1KX23/ttx9993D32D/OcXybXnNNdek9DXJ
G9bnJPRR/Lwpf/GLl4TusA8kQAIkUHICcg+WX8aESS4vkPJlJsBDB7pvD154oRUnzpomfh3SRoUH
AJTHC7avILL95fOyhMbla1n4ACjm32n7Q4QY7E++5IT7w8OePZyJ89wAD5GIVoOHLjxcoTz+JOx7
SnumwDCFRUpmnhvVPF7re74v+8YPL7F46MYLrXypD8Q8XOmJtYByFz8CgfiVCuTrWiDm24GY/gdi
HaB5Yg2UQtpe9vHwjTbF90cgljKBhNoOlSemSBK/BYF8JQ2ggJKpJtoeXqbky2PYJl4mceyhODrr
rLO0LfQP5zJeypEnXwjD8rZiTPI9f1EfUS/sJUYsvKzJwF5SoDD99NNPw3SsiAWK9uW+++5LSbcN
609Dx6gU129D+7O++UtTAEk4Z2WAaDDydTV8USjkWi32OYH+Gm+x5gkmTpyo5yXOJfkSrccB5xjS
TWR6gqbjfBHLLkvOupSv7loPL2XiQFrLmwIIbcmX6QAvYTgncZ7jHLVzR6xvUtrH9YA6UQVQvmMR
J+Oh0h7XH65NKGvxsmwvQmKdovuWL/wa9Qf7xR+YoByu5WyC345hw4aFxRAV7aOPPgq3xbJB27IP
CGL5pNv+9YvCUBRj39GX6LChKlnJpAAytlhC+QglLu53uYjVzaVspcvkogDCy7aNCUvc/yGXXnpp
SjquFV+gULd6+HhgElUAQUmBDwhxf1CK+uIrgHBcrH0sTfki1iEp6TKNMYBiE8cav0VWR6wL/abD
dOTjesf9Qazw0hRBpsyBEsmezaxN7Eus58J2o33Bb55Yzgb222H18Ltp8o9//CPsC8pHlc5Wzpa4
T1k7WOLebOIrgPwyUXbIE0tVq6bLTAqgQsaEBsXiMqWfOJb2zOH3zfqPDy9iNZVyzKDAQJqv5Erp
dAI3bGxJ6JpFlMM1SCEBEiCBeiAg92D5hUuY2EOAmCTrCypeUu0PLyBiYhzgIQNdl2kLAR7OTWAl
gXT/wcryzEpDHEtbki5tf2J+HOCLT0N/+MrsCx5asD88CEdFTIg1D1+yTMSvhKbhBz4qsLLAF0O0
F32hMgVGMRVA1TheO1Z4oGzoOO20004peI0fXuCiL6UoiPLgHhcOG9ZbyIMVgi/2so+82267zc8K
xK+K1kGe+C1IyZOpFYE9sCOMKwQPs/gSifL+i6hVhLLRXqqjX6mMSSHHE+3bwzDax35k6ldolSZm
6dYFXeKF1x70ZfpRSp5tWH/Kff3me06YAgjMoRCEItaXQq7VYp4T6AsswtA/nOs//fST3z1dxwsS
8vfcc88wDyHbkYbjlIvywyr6LzCmODIFENp66623rGi4hBIb+5JoW4H4xwnT7Vz1r7VCxmJKLrzg
+C+Q2JFM0wpfgsw6D31Af/AnU7rC/hRrBecY2oaVUJzgSz3yZUpGXHbVpOWiADLOWOIFCooPiaiW
cYxWPmOBBGX4CiD0Gx9k7A8fe/ASbso+G9ejjz6qI8B90RSjyMP1aAJFIxS2Vsd/YY8qgKxM3BLt
+2K/J1YWHzKgoMU1Z9dgv379wv326NEjVPKiHTxTWV0oxH2xdCzxAcWOMcZpz2FWBsoME1gyWzqW
Eq1Vs/CcYy/cSIeCxa5VKN3tOQ15uI+YkhX3OGsPlqvZBPdzWPJZHTyPmdhvnuXJVGZVaiMf9z6Z
9hjWQxmZemZVgzgFUKFjwocQ3+IXbeMcgUCx6ltdmqW7dcS3HIdFXrWJsU9Cv03hlum+noQ+sg8k
QAIkUEwCcg+WX7eEib1A2g9EpiW+1tx///0pvbev3/hR9V9I8EUbljhoS5wGptTJdX+oa1+brQFM
GUA6XoD8aTL4Sm1fk3ylDaYjiD+X2JcptAkLD7QXfYEwBYbflvUh32U1jzfXvuMB0xfjBwuPOMFX
VhwX3zLMyuHBFccEyiNf7GUfbUcFL6Sog7+4Yyb+HzTPFH2wNEJZvFT455Hfrr1cil8TPzntq6nt
N24ZPX/REMZsikfxgaMP5KgrvpBS9oMNvHRbuzjH4yTXY1Tu6zd6TpgCCPcKe8nwx1PItVrMcwJ9
wUM/eIsvFr9r4br4xdB8vFRCsQgRn1Gahq/w+QiUkXZsoQSEmAJInETHNiW+ecIXWv/raZwCqJCx
WDuZpjbAahJWDPZyWWkFEKbDgSEUCNUs+SqA7LxpaIqYlakGLlEFkPU90xKWbf5926zTUB73VBNY
c1obUCaapR3yi6UAgrUorsuowGpN/MnoH+7jJuiD+JoL+4X7oS/WXyxhheMLfiMsH0ooX+EMhZnl
YYlnMwgs9fx0fzo+8qdNm5aSbx8h7DcTdcW/D4pmFTyX2b7w+2niK4Cg3I5+zID1n6/EgyLaJE4B
VOiY8MHJ+oclLDt9EV9jgfgk0z8opfzfXCqAfFKNW4fCFPztQ0LjWmNtEiABEkg+AbnnucSGgZcX
NicvMehjioiPBde2bVt11isv3yl5cCgIR4IydUCd8orvDM2Xr9sa3hfl4dAwTkaOHKnhROPyLE1e
tGxVl/vss48T6x8nX8U0JL08CGo6IpPBaSrChMoDQ1gHThPxB5EvPeqsUawu1EGhfFksqxPoah4v
HCHCSXImgSPHOJGX0LhkdbZsGXDSKQ8CDscFzpEbcvKNOnFh0OUh2ppTp7Xhxp8rYsKua6J80SUc
d0JwbsCZdJxY6FmxxIjLdoUcTzQEZ51wQAmHzhZRD9eJvHSn7cecYsJhsDzwp+X7CeW+fgs9J+Co
FE43o9KYa7UY5wT6Y+eFKDY0ClG0j/ITo8cP+fKlX52G4v4IwT0Q+fIiE60Wu43zHYLycLTsi1jg
+JvhOhyWoiyuF3lpcjjmmSTfsaBdUcxpc3BmHSc45kkSeanX7vjOqZGQ6zFI0lgK6Quc4cNRL/5E
wet69erlxKJDHe4X0l411IHTcDgFF+VX2F2MWz4q6LZYL+t5LMrMlGtYFJcu+jwRNiArYokTPiv4
6dnWEYQA12VURAGiSXDYDOftcOgM5/6iqHHm3DxaJ7odvS+IZWJYRPz/OPtdQ6JdC1ZAlBe6Cgfr
viBABpys+4LfF+vTyy+/rFEKwUOmgGqxL774wi8euy7KqBQn8agfJ2JNlPaciXHiPgqn1hBwakgK
HZPfLtjht8gXONjGH6W0BER5qzsQZWBpd8TWSYAESCBBBBKrAEIEF5mulRcqPFDJNDCNXoKHClMA
WaQfPJj5D2p+41AcxSmc/DLRdbF2UEUEIpCJDxaN0IMyiNgDies/HrwQmePWW291YvKs5fAPD0x4
6UQ0mnJINY8Xx6mhl81M/HzFjF8GD5syjUuPCx6IfcFDWSalC8qJGbxfPG1d/FKlpUUT5KunJmHf
iG7SkEBxGCeFHE9rR774O5k26WSKpSaJM0t9gbN8W5oCCBFKskm5r99inxMYX6HXajHOCUS+sjDC
YJlN7LyQr5laFEoh3EuiSvJM7UCBAwFHKAV9MaW1n2br8pVdFUBQgmeSQsZiL0dQniAKVTUIlB4Q
RNCi1A4B/yMOzkec81AciKWPRoqMKvig3EHEPighxMJGlfp77bWXk2liIRQ/jHyY6K0glLlYInkp
ua1m+l3Eb5xMo4r9wAAFuP8skmlP0Rdkf9tX/sTVN0Z2n7EyYhVlq7FLUwThY5oJ7idIh6Iok0BJ
BIWkiUzzsdWUpd0vUxJlQ6ZfhQqghu5tqFfomOwehzagcMrGEOUoxScgU/C1UfIvPlu2SAIkkFwC
iVUAFYpMpiuoAkj8sIShMu0hAy+5xRaEPTUFEMK+4sULX9jwcCQOf1N2J2bQTubfaxpCKeNlH18Q
119/fVVo4KEQiit7WEqpnJCNWhsvfvzx1RRfGmWal1qWwUoMXwxh+QClB15AMx2TTArFfA6XPUhj
f+KPpsGqcV93G6yQQyYeRP2vsOK3QsP5Ri2p7AEpl5eFHHYbW6Tc129sJySxMddqMc8J9E+ilOkL
Qqa+It1ekPwv3eLHSBXiDdWzPDv+sK6MikyHiyaF27B0hDSkJLLzG+VyHYtZJIElLJmqQXDvh+A+
4ku19N/6LBEA1TrVtnNd4lghPDasfvA7l81KMNd2K1kO932ZxptXF1q1aqW/7biHQMTXj/6+y1Qh
3YZSViIv6nqx/2HfcQKllFmX4j6O3zhYTMMqFh84TNmU6Xcurs180qxdv3/oh0zHarAZC+du9zcr
LP6N9Dyz7egS+b5E61uer4SxNCzt/oP1hu5tyC90TP7HoR9++AFNUSpAgBZAFYDOXZIACVScQM0p
gDCVBS9BmL6DqV948MBLCl7iM01laMxREL89+pVd5pGrEgFfnsRhq5NwuWnWIXj5geAlX/x6pO3W
vvinZSQoodbGi4d0KH9gHTRlyhQ9d3zcUfNuP69Y6/jaCMGLtvgRyWilVqz9+e3gKymUelDq4NiK
XxmHaXA4V8Wxq180fNCFtQkemvwX+5SCjdgo9/WbqauVvlZhEYgXC1iTQOnXv3//TF1NScf0BbzA
41wWp6yq0LSXr5SC3ob40NGpIEgSfxdezn9XzUItmoFzx6ZJYApIJilkLKY8wHmG/uF+GhXxAacv
aniRjVNcRcuXetvu36VQ0pa6741pH1YnUPpAeZvN+q0x+6mmurA2NgXQ+PHjnT+NEVbKxVAS58oD
zz++9ZH48nH+9ElMUyuX4GOXCT6+HHPMMTlZXuOehg8SNpXsvPPO0ymGdp+wNrHE89fQoUPDJPy2
+/zDDFnB77tEunTiOylMxj0Nz48m0alvlm7LQsfkTxXGfR5/vjIJxwxT5CD4rRW/dSX5zbVx1OuS
CqB6PfIcNwnUN4EmtTh8s/TBV237so2X3FIIHuTw4AvBvmz6Fx6IfcHLkvnB6Nmzp5+l6zAVtznu
Sf5iXGvjhbIDggdM33pCE+WfPRyX8pjYFBf4bcn0tRnnDKZewTqnmAIlD847WC1gCpiEM9bmYc0m
4YZTdoV+4qstWJRymks5r9+UAf65kZRr1c4L+FSJE4kIp1P18PKC+4fJhRdeqKtvvvlm1vNl9uzZ
odJHHK3GTkHE+YHpLFHBiy2UHpgSE3ft+OXzHQsUCaZMsGvQbw/TMmAxiakypbw2/X1mWzdrKPPX
la18Nedjuhv830m0IicOjJ1ExgqPVzWPq1h9hwWU+RaTkOROAjuETUM5VE7BfcK/Rvz9Ix0fykz8
cpZWjKUpoTHlyixJ0W70QxgUL126dFELJVgpSYAE3T2spjA12QSWO8iPTpmHlRV8Mdp0ZZS/5JJL
0qzyrB0sbeqzpZnSxbaxn4ak0DFFlVLw4+fLxRdfrD4I4YcQH2YyfXAxy0O/LtdzJ0AFUO6sWJIE
SKB2CDSpnaH8byT2AompX/jDD6cpaf5XKnUNDnnx5Sjbn81J92ubckkiWqgDTHzxtqleVg6KE4ny
pJs2Jc3ysG88lMW1bWWKvay38Wbih5dXCF5y4VvAF5jMR61g/PxirWMKmjkQxwOxPZBY+/AvhXML
D3rwJREnhRxPKAjOOOMMbQ4Pm3jIhtNJTOOAEgRKTHPEi0JwZAp/QRCJFKXLUvwr5PotZj+Scq1K
lCsdFhzK4lj5gikDEgZeFTCwjvG/hO+0005u55131uKYYgGrsrhpe/j6jfMOjmFxbCWKmb+LcB2K
65NPPjncxgquFYk4pmknnnhiyv5TCv65UchYhgwZorWhVMdXel/OP/98tQaA5ZH5PcF93hzrNjRt
zW+nmOumTJbQ1sVsNjFt4brAuQafelBqXHnllTXt4Lkx4OGfBj53TOz8hbLA7qGWV+pl1A8YrGNg
5QIFLj4s+ArW6G9PsfpmCiBMe7LrGm1fdNFFOk1VIqrq/QR+lRAQA/c8KK4wVd4E9xl/WyIXahAG
KK7xuwVfTfD1498r0V4260koljBFDn3BtH1YSJnAsnCPPfawzdhloWOCxa1E9wrbxG+xhKt3+Piy
zTbbpByXY489NiyHFX96NhREUGLBGT8lfwL0AZQ/M9YgARKoAQLyxSdRYmGkr7vuukb1Sx7C4ThC
/3bdddeMbdn+rGy2JcIZx4lYkIT7kxezuCIaRhXty8taIBHENNy7KI8CcbyqYerFJ5C2gZCf/vjl
AU7T40KKx+6ogcRqHq/13WfTwFDDrIb4iSVBIGbXylcezgOElsafPDgG8qUykIf4QJziar5MCwrk
ZVjbtZDf8gAd7sdW5OVIy+NYi0LRksOlhd0Va54wTR52A3lp0HoyDSo466yzAlE+BRLtLGwrLhy4
Mcl23lq+nb8IKStTIrVt9EcUPmFfEBYXYe9RB6GtfTnppJM0XaYQ+MnhuvUn32MUNvDnSr7Xb777
szDwouyK7lq3EfIY48/nWi32OYGOiDJM+4FzY8CAAQHOGbG2CBDuGf0Ty5tAlEFpY8B5Jy8zWgbl
RDkSyFQFDZuOc1r8WoR5aMMP426NWRh4sd7RsvIyFMiUDT0n7JqSF7JAlEtWRZcWvl0ik6Wk5zsW
hKjGvRD9F+V50K9fP70u5MVJ03B9ipVayj7s2sKYRKkeiKVaSn5jNkSxr/u1e4DflijvA1E+6fkS
d837ZZO+Hg0DLwo2vRfhXlmo4BjirxrEDwMviouCuyyWezpmGzuW8pIf2140DLwEiogtF5eIe5Tt
Y8yYMWlFRKkTRI+plccSx9e2RcmXcj1bOpbRtkUpHNbDPcIXUTCFeagrH73CbFzX/vOSvw9bx2/u
fffdF9axFXASpW9K21YnuhS/P4FYClnVcOmHgZfpXeHvbrS+KHYCsUAK62ElLgw80gsdkyjfwueL
6P5tWywdAxxDX+RDUBqDESNG+EUSvW5jS0InZYqgsoz7HU1C/9gHEiABEig2AbkHyy9zwqRYL5DD
hw8PfyDFgiLjKG1/9oOUbWkv0NEGhw0bFu5PzHWj2bqNl24ofPx94IFLvmAFYvociK+NAC9ZyMfS
xF62kqQAqsR47Vjl+7Kfjd+ECRMCK2PHRqY4BPJFUA8BFEL2kC3OJTWtFC/7eGGOe1AXR+HBI488
YqdDytKYWL+zLe38FesNPc/kS2IQfVHHDkaPHh2ep+LENNynTBfQdLEyCdP8FetPvsfIbwPr+V6/
+e4vmwKokGu1FOcEHvxxHkK54B9bvCBJdLBApg1G0aVsy9fhQKZSpdS1dvDgu99++2VUkpgCCOc8
Xprs2Fp9KJLEQixlf9jIpAAqZCxi2RZINMUA90nbL5a4P8ZdEzJ9I4WV+GRL61+hCQ0pgCZOnNjg
dVHoPitRD/cgKMVlilcgU7yK0gU7dkVprMSNFEsBBKWAnTM2/rh7LYZTSgUQ2hdrvzSlC46x+AkL
xDop5drCxwcT6zeWjVEASVAOa1KXuK7xEcE+evj7we+dWNOllPc3oGyF8gkKYL+ereM37eyzzw5w
D48TXwGEj4OPP/54IJZDKW1JiPtALIzSqmdSAKFgoWMSi6UAyirrvy3xzOEfC78z4rcwMMW8lacC
yCeU+7pM1VT2cb9lubfCkiRAAiRQPQTkd8Pp5y2s1Jq8+OKLGuECfiRg7mxTA5IwTkypgHkzfLrA
fNmPGiOnj0Pf0e9szgeTMJZc+lAN48VUJ3CHTwF5AVKnsma2jjFiSgkcfSNqWzRMdi4Mci2DqVdw
uotpOfIA6zDFRayRMkYhy7XdYpXD+YkpN/DVgOvK/LQUq31rJynXb1LOXfjawTkBM//llltO722i
tDRcWZeYsoOw9pimhKg2OMfht8c/x7M1Aj9AiCyGG2ejpwAAQABJREFU6YaY5oSprnEiiiKdOigv
uxrhMFqmkLHg+sT4MfUN02jgOB1TkuIEZRHFB/dXhLUvh2C6JKZhwPHvbrvtVo5dlmwfOMaYTiMv
oEXbh51nuH/Uk2A662233aZDhoN7TFuqlIA9nMPj3o2oWPBBk+kaKlcfMTUV9yTcK+A7C33KFnXL
+oYp0ZjGit9LBN8QpY1OAcN9rZBzF/dIPJeJclnbsv34S9z3EDQCIgr42GmzhYwJxwb+i8AC02sR
sGTjjTdOmerl98PWcS+FvyPUx3R23HurQZJ0P8AUPpxL+F0r5bNdNRwX9pEESKA+CMg9+L/2zbU4
3MGDB6uDQfie8CNeVPtYZ86cqf4X8hkHftT8SBX51GVZEogSuOGGG5xYZThEYvH9OUTLNWa7Vq/f
xjCplrpwfgt/ZpkUQNUyjlz7CefPUMbhpRrOWinpBJL0wpfeu9Kk4KUSygQL/z5q1Cgn0xhLszO2
WhYCUDxD6QSBDzRzuF+WndfQTpJ0P8DHYfgBwgcO30F5DeHmUEiABEgghQD0PzVpAQQrDig8cEPH
w5c5+k0ZfZVuiGmzE7PgvHoPFngZo5BAMQjga6NMJVPHvB999JHDF7RiSi1fv8XklMS28PUazu7x
IP3jjz8W/dxI4pjtngzntZ2zRAxKYv/L0ackvfCVerwIKCD+azSKIqKkQeBkHfe1arHQKDWjamsf
Vj/XXHONg7NqE5mm7PChgpI/gUrfD/CBAvdrmd6uxxUjgPW19Sv/EbEGCZAACVQPAbnXLRRvQ189
Y0jpKSLV4AEcprOYBoCvbbWk/MFgEbECL+D5/FH5k3KacKORBPCQhJC1CFsfDV3bmKbr4fptDJ+k
18X0SISkh2AKQ7EVg0kcP6JGimNuh6k+VP4k8QiVv0+YqohIW6b8QQ8QwYrKn/Ifi2LtEZHFfOUP
ps5ZpMVi7YPtlJYApgWLnySdoovpy5iqC6UeBFOFqfwpLX+2TgIkkCwCTZPVncb1Bi+kCB8Kk06E
VUdYTwoJkEDxCeAFH+Fyb7nlFv0KWgzTaV6/xT9O5WwR1pZ4MZJIXE6ciJdz1xXbF/y7iMP4WF8g
FesUd5wYAhJ9z0ngByeR+xLTJ3akcQSWX355fbbktPrGcSx1bQk6oH4dJRqfWvq89dZb4S6h7JEI
k6oE6t69u/rECzO5QgIkQAJ1QKCmpoDBaS4c+cGJYJKcPtfBecQhkkCjCfD6bTTCijZgTjT5JbWi
hyGRO7dzApartS6Y+ojpXhLhSp9FiqEcr3VmSR8fLMrxbAnLESh8KY0jUKr7AfyxPfbYY6rwkSiR
7ttvvw07KlEv1WoLCh/8wek4hQRIgATqkYDcg2vTB1A9HkyOmQRIgARIgASSSMBe+JLYN/aJBEig
MgSKoRB+5513VOEDS5/nn3/ewfLHBBEjoezBdC9YpvLDsJHhkgRIoJ4JQP9TU1PA6vlgcuwkQAIk
QAIkQAIkQAIkUKsEEF3v6aefdja1C759TJo1a+a23357VfhA6QMFEIUESIAESCCdABVA6UyYQgIk
QAIkQAIkUGQCxfjiX+QusTkSIIEyE8jXInDGjBlu/Pjxaunz5JNPOkTxMkHUyW7duqmlT9euXels
3cBwSQIkQAINEKACqAE4zCIBEiABEiABEiABEiABEigPAYRkRxQ9hGmHpc9rr70W7hjKo8033zyc
2gVnzvkqlMLGuEICJEACdUqACqA6PfAcNgmQAAmQAAkklcAXX3zhXnrpJffZZ5+5fffd16222moF
dfXf//63gwXBBhts4FZfffWC2ihVJYwP0rFjR77Elgoy260KAj/88IN7/PHHVeEDa59Zs2aF/W7R
ooXbcccdw6hdK620UpjHFRIgARIggfwJUAGUPzPWIAESIAESIAESKBEBRPKB0gfRlyAbbbRRwQqg
yy67zF133XXuiiuucMccc0yJelxYs506ddKKiIAI/yUUEqgnAtOmTQt9+Tz33HNu/vz54fDbtGmj
Vj5w4ty5c2e36KKLhnlcIQESIAESaBwBKoAax4+1SYAESIAESIAEikhg1KhRqvxZeeWVXZ8+fdza
a69dxNbZFAmQQCUIzJs3zz377LPhrmGVZ9K0aVN14GxRuzbccEPL4pIESIAESKDIBKgAKjJQNkcC
JEACJEACJFA4AZsaNXr0aHXwWnhLrEkCJFBJAl9//bU6cIYvH0zxMqs+9Gm55ZZzu+yyi07tggPn
li1bVrKr3DcJkAAJ1A0BKoDq5lBzoCRAAiRAAiSQfAII9QxZdtllk99Z9pAESCAkgEh/r776aji1
C+t+9L9NNtnEvfnmm1p+5syZrkmTJmFdrpAACZAACZSHABVA5eHMvZAACZAACZAACTRA4J577nHv
vPNOGOb5hhtucPAH1Lt3b7fWWms1UDO3rO+++84NGzbMTZ482X3zzTdu0003dXvvvbfr0aNHbAOf
fPKJGzFihJs6daqDJQMsFtZdd1138MEHu2233Ta2DhLvu+8+98ADD7gpU6aoc+d11lnHHX744Rn3
E20IL8xDhw51X331lUOY6xNOOIEvylFI3E4MAVj1PPHEExq1Cw6cca2YLL744q5Lly5h1K5VV101
dHhO5Y9R4pIESIAEyktgIXnQCMq7S+6NBEiABEiABEigXghYmOZsjxv77befgxIoKni53GmnnaLJ
OW337dtXnUAPHDjQPfnkk2769Olp9Y444gh3zTXXuIUXXjjMw5SVPffcM3RMCye0cNZscvzxx6uS
xraxhOXS0Ucf7TB1LU4OO+ww7YvlGRffCTRCYPfr10/LIdrRhAkTHP2hGDEuk0Lgww8/DMO0P/PM
Mw7+fUzWWGMNt+uuu+rULih/mjdvblm6tPM+2/0gpRI3SIAESIAEikJA7sEL0fayKCjZCAmQAAmQ
AAmQQGMIIGLX22+/7ZZeemlt5sEHH9TtrbbaqjHNat2rr77awQLoxhtvVAsFvMCeddZZao0AhQ0i
hZn8+uuv7oADDlDlz6mnnupmz57t5syZ4xBS/vTTT9di6Ovrr79uVXR53nnnqfJniSWW0PYwxQX7
hFPrRRZZxF1//fWxCi5rBMofUxKtssoq7umnn6byx+BwWVECv//+u3vqqafUGg3Om2HVdtxxx6nl
zx9//OG22WYbd+GFF+r0LljO4XqDEiiq/KnoILhzEiABEiABJUALIJ4IJEACJEACJEACJSOQ7xd/
TLWC0uXdd991fqSgQjpoFkCw7oHCBiHlfRkyZIi74IILHKxtPv74Yw03/fzzz+sUL+wbffAFShq0
gXQodmCtA/nyyy91ehiUR7fddps78MAD/WrukEMOcTfddJPr1auXu/XWWzXPuMACCP1DGeStvvrq
buLEiYx+lkKQG+UmMGvWLPfII4+opQ8cOP/www9hF5ZZZhl14IyoXd26dXOtWrUK87Kt2HlPC6Bs
pJhPAiRAAsUnIPfghegDqPhc2SIJkAAJkAAJkECCCEAhE1X+oHuwYrj00kvV384HH3zg2rVrp/6G
8OILfyVRgd8ShKeHAuiXX34Js6H0gfKndevWacofFDrxxBM1P86x9fz581X5c8cdd+i+ofxZc801
w7a5QgLlIgAl6bhx49SJ88svv+yg8DTBtWFh2rfeeuuUKZNWhksSIAESIIHkE6ACKPnHiD0kARIg
ARIgARJoBAE4fI6T5ZdfXpUu8A300UcfqQIICh78QX788UeNaoRpLbAQwjSYSZMmpTUF5REEUY7i
BMqnu+++Oy5LrYLgNBqCF+xKKn/MOiO2o0ysKwKYvtW5c2f15VPp87KuwHOwJEACJFBiAlQAlRgw
mycBEiABEiABEqgsAVPoxPUC07+gAELULZM33nhD/ZhgSpZv6QMLHrSFKV++wKcQZOONN/aTc1qH
8gfRvuAzCL5TEPVsyy23zKkuC5FAMQnA9xSUPfiD43VE8aKQAAmQAAnUFgEqgGrreHI0JEACJEAC
JEACEQIzZsyIpPxvE46aIaYkeuihh8KQ7e3bt1dfJ5tttplbf/311UII08kQrcy3loEjXIifpgk5
/Nt8883V10r//v01fDyikr366quuWbNmOdQubhH6ZSkuT7ZGAiRAAiRAAkkjwChgSTsi7A8JkAAJ
kAAJkEBRCUybNi22Pfg4+eyzzzSvTZs2ujzttNN0idDxU6dOVSfR+++/v8M0sqZNm7rvv/8+ra31
1ltP0xC5K06+/vpr969//Ssl2piVQ5j7FVZYwQ0bNswhghgioSGiEoUESIAESIAESIAEik2ACqBi
E2V7JEACJEACJEACiSIwefJkh1DWURk/frwqdDANDKGtoRCyyF89e/aMFnfz5s1zaAviW8vAQgjy
2muvqd8g3fD+QaFz/PHHq6WPl6yrLVq00CWifyE0PQSRyRB2nkICJEACJEACJEACxSRABVAxabIt
EiABEiABEiCBxBGAUufkk09O6dc333zjTjnlFE1DlC5MuUKUL/jjgYwdO1aX9m/OnDnqsBnRvqJy
6KGHatQwTAVDVDFfYGF07bXXalKPHj38rLR1RCWDI2komjAVzI/ClFaYCSRAAiRAAiRAAiSQJwEq
gPIExuIkQAIkQAIkQALVRQBRuDAFC6Gsjz32WNevXz8H3zuwsoGfnwEDBoQD6tOnj65feeWVbt99
93WXX365hmnHNK8JEyaoTyAUQOj366+/XssiYhLKYYrYeeedpw50zzzzTHfMMcc4WAdBebTLLruo
g2etkOEf6l9zzTXqS+jFF190w4cPz1CSySRAAiRAAiRAAiSQP4GFxIQ5yL8aa5AACZAACZAACZBA
dgLmGDnXx43lllvOzZ49W6dibbDBBtl30ECJvn37qt+du+66y73wwgtu9OjR7qeffgpr7Lnnnu6W
W25R3zuWCOsbKIhuuukmS1LLoE6dOmkarHz22msv984777i2bdumTNV69tlnHZxE+1HCFllkEVUw
nXvuua5ly5Zhm8blt99+S3P4DIXUqFGjQp9AlQwNH3aYKyRQBAJ23ud6PyjCLtkECZAACZDAnwTk
HrwQFUA8HUiABEiABEiABEpGIEkvfPADNGnSJLXIQah1hHXPJJg29vrrr6vSZuutt3ZLL710WBQv
r7DQad26tVtrrbXCdKwgD2Hh4cwZzp2hxGrVqlVKGW6QQL0SSNL9oF6PAcdNAiRQvwSg/6ECqH6P
P0dOAiRAAiRAAiUn0NgXvpkzZzpE0cpHMCULYdspJEACySLQ2PtBskbD3pAACZBAdRGA/qdpdXWZ
vSUBEiABEiABEqgnAvCJY9Gxch03lD/vvfdersVZjgRIgARIgARIgATqggAtgOriMHOQJEACJEAC
JFAZAvziXxnu3CsJJJEA7wdJPCrsEwmQQL0QoAVQvRxpjpMESIAESIAESIAESIAESCCRBLp37+7G
jx+fyL6xUyRAAsUjsOuuu7qHH364eA0W0BItgAqAxiokQAIkQAIkQAK5EeAX/9w4sRQJ1AMB3g/i
j7Jxic9lKgmQQC0RqGQURFoA1dKZxLGQAAmQAAmQAAmQAAmQAAlULYFKvhhWLTR2nASqhEBSFL1N
qoQXu0kCJEACJEACJEACJEACJEACJEACJEACJFAgAUYBKxAcq5EACZAACZAACZAACZAACZBAvRF4
99133eeffx47bFg5LLfccm6dddZxSy65ZGyZYiQuWLDA/fvf/3ZvvfWWe/PNN3Vfm222mWvfvr1b
eeWVi7GLvNr46aef3KuvvhrW2WKLLdwSSywRbjd25ffff3djx45177zzjps2bZr74osv3Oqrr+42
2GAD165dO9ejRw+38MILx+7mww8/DI/X0ksvrYxiC8Ykjhs3zs2aNUtzNtpoI4dxUaqbABVA1X38
2HsSIAESIAESIAESIAESIAESKBuB4cOHuxEjRmTd3//93/+5Sy65xHXp0iVr2XwKQAF16KGHupdf
fjm22pprrunuvPNO17Fjx9j8UiROnz7d7bDDDmHTb7zxhttkk03C7casTJ482fXv318VXpnaAetR
o0a5zTffPK3IVVdd5f71r39p+jbbbOMmTZqUViZTwrnnnhty/vvf/14xBRCONZR+kPXWW8+1atUq
U5eZnoUAp4BlAcRsEiABEiABEiCB8hLAl817771XH1gzfWUub48K39t3333nHn/88fABuvCWWJME
SIAEqosALGJ23HFHd8MNNxSt49dff71asGRS/mBHn3zyidt+++3drbfeWrT9Vqqhm2++2W277bYN
Kn/QN7CGwuuBBx6oVFdLut+//OUvbqutttK/iRMnlnRftd44LYBq/QhzfCRAAiRAAiRQRQQee+wx
t++++7qff/5Zew2T89VWW62KRpDaVUxN6Nq1qz604isuhQRIgARqjcBf//rXcEjff/+9KiP++OOP
MO3YY491KNPYqVlQ7AwaNMj99ttvYdsbbrihg3JgscUWc6+//rp7+umnNW/u3Lmud+/eDlPSevXq
FZavppUZM2a4o48+2vnOwWFlhFDi6667roMl1IMPPuheeOEFHRaYH3nkkW677bYrmoUMlE8rrLCC
tg/WlOonQAVQ9R9DjoAESIAESIAEaoYATNih/MGLQp8+fdzaa69dM2PjQEiABEig1ghAwQLFvS+w
fISi5vbbb9fkH3/80T311FPuoIMO8ovlvT548GA3Z86csN6JJ57oLr74YlXyWCL85OAjgimgTj31
VN1u1qyZFUlZQrny2WefOfjGadmyZUpeto158+a5TO02VBf15s+f7xZffPGGirkBAwa4H374ISxz
3nnnOYzHokntscceDgxOOukkd9lll2m5r7/+2h133HHupptuCus1tAJOmXwHod7QoUMbqp6SB+Vf
vgzRwK+//pqVRcqOuNEoApwC1ih8rEwCJEACJEACJFBMAi+99JI2N3r0aHfRRRe5Nm3aFLN5tkUC
JEACJFBiAssss4wqIfzdwFpl5syZDj5ott56a/0zpYVfDo6dLR/L559/XrMx7efhhx8Oi+6yyy7q
X8iUIZax5557ugMPPNA23aeffho7BRfTwzClCIof+AxCn+FUeZ999tEpZGEDkRVYcsICB1YxLVq0
0L7momyBRdI//vEP9QuEeksttZSuH3HEEe6jjz6K7OW/U7qi4x0yZEio/LEKUN5ASeP7/sG0sY8/
/tiKpC3xkQWKIzjMXnTRRdWRdN++fUNnz34FKJO6deumf/hdjgqsj2DluuKKKypDOABH+Ww+otBH
TA9cfvnl1Vk2FEc4HmAJh9cm55xzjuvZs2dKGvwZIe3JJ5+0YlzmQYAWQHnAYlESIAESIAESIIHS
EsBDMmTZZZct7Y7YOgmQAAmQQMkIIAoYlDM2fQmWLFASwILntdde0/3CYuT4449P6cNDDz0UTmmC
ogRKCsgrr7ySUi5az888++yzValhaWjHBNPHYJ00ZswYSwqX8DmHPyibbrzxRo2sFWbKChQgAwcO
TFFGQAGCP1isZhI4iIZiCkowXxDBDH+ItDV+/PgUJQ4UYb6cfvrp/mbaOpRDUF6ZIFrYWmutZZvh
EtZYUNj4U5IRVQx/UKigLxtvvHFYHmMzf0uINubLWWed5WCVZNZWyJs9e7Z79NFH9Q9ToK+88soU
CyP8xh922GHujjvu8JtSS6cXX3zR4e+ee+7RiGdNmjTRY/HMM8+klLW+YzrcTjvtlJLHjewEqADK
zoglSIAESIAESIAESkwAD3x4YIUpOAROQzGtAD4c4h5i8+nON9984y6//HJ9gfjggw/cqquuql8a
EdEELyRRwUvJFVdc4aZMmaJ9gg+iTTfdVL9oZ+oLXhruv/9+fXjFw7D5aYi2Hd3GV9rbbrtNfWb8
5z//0a/JcF6Kr9vRL9vRutwmARKoDAFEUYLD3UKm/1Smx+Xf69133x0qf7B3KIQg8MdjCiAoRGD9
4lt6+tPJMMXJpklBQWECq5eGIouhPShE4gTWI77yBxYoCG0OxQXu+bh/4zcAFibvv/++W2WVVbQZ
3KuPOuoonbpl7cKKB9YqUGrBosUXU3whDVY+vvIHFkf4yGFh42EZ1blzZw1njzzIe++9p0v8a9q0
qdtyyy3D7bgVWFb5gvrdu3f3k3QdCicTWD1hup4JpsL169dPf8csLdNywoQJDoo2E/QRvofA8Kef
ftLka665xi2yyCJu2LBhVkyDO/jKH1xDOF7+eKEExHGyqGPNmzd3TzzxRBgFDL/HrVu31t/ysGGu
5E5ATk4KCZAACZAACZAACZSEgDyRBPjLJuKzQctZeVvKQ1+2qg3mP/vss4H4EwrbFqVKuC5fhYO3
3347pb5MQQvkATwsIw+n4foSSywRyANtSnlsyANvIIqksJz1XaYWBBdccIGmi2l7Wr277rorkBeI
tHqof8ABBwTyUpFWhwkkUM0E7Nqo5jGg7xJyO5Aw1IFYkgRimdLo4VQbF1GEpNy3RKET2J/4+glO
OOGEtHuiWIUoJ1GWB/59WJTtIT+xTglEYRC2LdYoYZ5MBwvTRSkfpuezIkr2APdl4y1TkAKxTAqb
EMufQJxJh/liqRLmYd3qiQIqkI8UgSiLAvR5+PDhYZ6VEYfUWlfC0afkSRQzrYfMqVOnBjIFK8wX
hUq4P7EYCtPxm5RNJER6IIqSsI5M6Qqr/O1vfwvT0b9OnToFH374oebLR5FAFGAp+TL1LKwris4w
TxQymo5xizVQmC7KqeDLL7/UvF9++SU49NBDwzz8zsqUM82bNWtWym8e2gY/CK4jCe8e1ov+Zvqc
RLmodartn50bley39CGHJ7JK9pD7JgESIAESIAESqGoCuT7wyJdHVcbYw7lENtFte3AsBIL/sC9f
kgMxGw/E/F/bFSsbfdCUKGNh099++20gX0Q1HQoY+WIb4KFazPeDU045RdPFJD0Qk/iwDh568YCL
cUq0lAAKK/E5EUgo3kAcWGs68qIPsyiHdPlqGogZvT6Mi/POQByYBmussYbm4eWEQgK1RCDX+0HS
xwwFkI0FS7wMX3rppcFXX31VUNetrYIqV6BSVAFk/c+0xL0RSgMTu/+ivEQHs2S9/1kbYiETiLPk
MA9KH8sD/0Lk2muvDdvAvVysTtKaEUfTYRl8ABALHy2z5JJLhuky7Sitnlj5hPnopymADjnkkDC9
bdu2afXEIirMx2+Gia/wEv8+ltzgcqWVVgrb2n333cOyvgIIyiso4XwRK6wUpZz4/Qmz4xRAYg0V
7gdjhZLLF7HWSskX6yjNFsuflHQowHyBUm2zzTbTPyil8HttQgWQkWjcUo6X4xQwUKCQAAmQAAmQ
AAlUlICFeocZOQQhbjfYYING9Qm+CeB3AubiiEaDMMEQ+DGAL4f111/fiQWQmvljf2Kto+bwcEyJ
aVnwPwBB3oUXXujky6aTL70ameWNN97QPDjfhENNOK+E3wiYu0PgTBQm+Zj2gOkE8sim6fiHKQbm
vwJOUBHm1wRTHuQB2IliysHEHvtB/ykkQALJJQB/LXCqe/LJJ6sDXLGAUP8xnCLm9H4mL/bh/RRH
EdPAzK8LwrbjHgo/Pf70L0Tysvsp6mAqFqbaQsSSRJf5/vOnGeEejd+AqOy8887qtwbpiNaFKWqY
rmXTmpCO6VpR6dGjh/6uRNMxjcwE08X2339/29QlQtubiFWOkw8RGsIdvx3m6+aLL76wIhmXaBtT
yUxsyp1t2xJTzDAN2hdMbcZvMKaAQdCPhsQfE8rh9xXTuH3B1D2b0g0fQpjO7beL33rf1xDqirJM
//x2uF58AlQAFZ8pWyQBEiABEiABEkgAAYtYAr8NpvyxbuHhGD4i4JcBD81Q8owcOVKz5WtpysuK
1cEDLBRAcGwJv0IyBSSsc8YZZ6S8rKAOXhoQthiKKF+g2IEfBvgfgjPSqIgFkPoQgh8E+JWgAihK
iNskkEwCYjGokaoQvQn+VaDogDKoQ4cOyexwkXoFf0gm8F0mligOigax9HFQakf9mUG5g3sjlBZQ
ssC/y1577aWOg60dP5IX0nDPhoNgiFheqiIdvoDyEV8BIVODY6tG01EHjpN9QXSyqGRSuPgRvqA4
iSpPou1AaYLflg033DDMwu9NtlDpUBLh/DPJ9AEFv3VxItOvQgWQWLLFFQnT/DEhUSxXw7y4FVME
+fyhcLIPPnF1mFY6AlQAlY4tWyYBEiABEiABEqgQAZlOpV+VsftNNtkkthcIL2uC8vjCixeVTFFF
0A4eWOfPn68RU/CigC/XEJniYE2lLGWqQso2NswZKOrjxSdOEGIY4jvsjCvHNBIggWQSgHPdq666
Sv9gdQhFEJTIcF5bS4J7pvhOy2tIUHDA0T2U3BBEngIjOFqGwNoHDoV98RUXuAeLr6GM9+p7773X
QZFvAgsVWGT67GFpEyfRdNSJKip8qx1rw1duWBqWGCt+XyBQiPnKMk2M/LOPFb4CCEXEZ5yeQ5Hi
4SbyfYnWt7xM/fTHFFWCWV1bYkwmYOOztnR/aSHqbWzIg3UupTIEqACqDHfulQRIgARIgARIoIQE
7CEXLyeYTpVNEB0Mgogw4msgtjgikeCrJV5S8LUVkV8geBjG9IU4iZrao4xFs0EkHLwENSTRL88N
lWUeCZBAMglwilj6cYF1lCmAEALdV9SLD7Y0K0xMzT3zzDPDhhCBKpOyHlN2bbpYy5YtQ6WLP+UL
93Eo6WCp5YtFKEMafj9gGYPpwFi3qbyYvoZQ5r5kUuZjn4hwCYGV0CWXXOJXy7gOqzH8FiFsPQSW
pGAWN60QHy8wHdkE0cl8npaOJSyQxE+dg6WpCaZ+2W8g0jJFu7TyPkco44455pi0aWVW1l+Kj6Nw
E4o2m+5miQgfD2UdBNZd4rMpJYS8leOycQSoAGocP9YmARIgARIgARJIIAH42YHgwd0e2nPpptWL
KwsfQOYjAV9IMX0BYg/ocXV8vxGWb9MWMLVr4MCBlhy7hEKq3IIXHQoJlJJAvZ5jmaaIlZJ1UtuG
zxyJrKi+1WAhg7DfJlB0RAUWPJgmdv/992vWpEmTHBRF1113nbaDRNyT4YvJwqsjzfclBCWSKXJw
34bfN3HejWIqEjhAp/naNny7oY8QWNSYIgfKHoSNxzRfCPy8mTJLE7x/4vg57LMEN9CPB/6HgdNP
P90999xzWgNT50wBAisoKLxOPfVUzcNHDfgegq8d30IHiiyJGJbiFwlKJgmo4PUidfXGG290mLZs
Yvu0beynIYE1llnDohws3aB0M4EyqX///uGUtH/84x+ua9euaUopTLtGnsnFF1/s4BMKAgWW/VZq
gvdv7ty53hZX8ybQOD/SrE0CJEACJEACJEACmQnIgwm8H2cuEMlB5BeURwSuxgii8di+/VDCfpv3
3XdfIE6YA/k6H8gLSFhelDZ+sXBdphyEZRC1TEzmw23x0RCW81cQ1QT9QNhdk2HDhmnacsstlxIZ
x/IrvTRuXP733CUHcijFOYCIgxZG3tqv9LWf6/79KGCiUMm1Wlq5gw46KLyHGgNRLqSVswSxXkkJ
E486iMIoCguNJiYK85T21pTw6WJlYtV1efDBB6eUQYRIhHE/S6IxWgRG64soZsK60XDuYs0TiHJG
/9Bnq2NLiwKG3wa/X2JdE5x22mnBmDFjgl133TWlnihDwv1hRRRaQfv27VPKINQ7okpiHIiUhUhl
tk8sZZqZRq/0G/KjgFnZffbZJxClTSDTElMigCFSGaJfmsRFAUOeKKdS9ivOrQNRxgXiCD0QBVWY
h8ie4mfPmksJOS9KpODwww8PxHop8KOeoY/g44tYNYVtiqPuAL+tiDZWTWLsK9ln6YPQpZAACZAA
CZAACZBAiQjk+8BTLAUQhiO+G/SB8YQTTkgbHcK3W1hZiQSm+bbv6IOnVZavxdoeHuAR0hh/FrYe
LxBxIl89tY6vAJJoYeGDLELTxwnC0KPtyy+/PC6baSRQlQTyvR8kdZDRMPA2rmxLhB7v3r17cPfd
d6eEuLZ6SR1vtF/FUgCJs+zwXmgMxDIluruUbSj0xUdaWj2rb0so2KZMmZJSFxsyfTeQaV1Z6/uh
0K0Ru5/bPvxlVJljCiDUFZ9EAY69Xz66DsWNWLbYrsIlfp/atGnTYF1rS6yUArEUCuvaiq8Awu+X
ROiKbU989AQSic2q6TKTAkicdwcyTS22HesPlFX40OKLWPgESLcycUtxAJ72cUSsv9LqjBgxwm86
8es21kp2VPpABVAlDwD3TQIkQAIkQAK1TiDfBx5TwjTWAghcoZTB/sXcXq11fNb48o48PFibyFQA
TcMDMqx7fMG2mORrvvglCLPwBRXtIG/69OlhOlbwkmfj9xVAyBOn0ZqHL+DiQwFJoYiJv+ZBQSW+
GsJ0rpBAtROw66Hax5GvAkgcHAe4v8AyMU6qjUuxFEBQItg93xhIqPY4RClpsNiUKWSBTBEK77FW
HxZJ4nD7/9u7DxgtijeO42MBKwI2sCEWBFEQQ6QLf2wIWBA11qAgWCERkEiwIWgkhhixIlGxIqhY
IirYARUQQVBEbFhBRSxYse7/+Y3O5m133N3eeXvvfTe52/fd3Zmd+Sx33D0380xU0qhMVaRRnhpB
o2tDubC3nEGRRvsU2jQix/LdZJVTHQpY2NL0WXUtXbo0q4qFCxf6kaDhPmFvS91HY8eOzft/ILOw
raLlR9ZoxEwol7nX/xWWEykrqJhZPjMApEDVM888E9kqYVl1NWnSJJo3b15mMf+6pACQTloevMgW
UygYUGrTpo0fXZtXoR2wlTQjBasy+6DXGs2kkViFNltKPrJ8flllCAAVkir9mDk7P2ZPL9gQQAAB
BBBAAIHKFrAfjn2V9iNJmaq2aVE+t4JWyippGdsyVWQXKR+E8kbYD95+yXXlnFBeBeVb0FLsymFg
o3Hi1WaUE8KG2/tVurREu/JLqA3K+6BlbpX4Wcv/KkeB/dDum6FcBCpjv7Q4tb1v374+aejixYvd
1KlTfZJnJTi1AJCzH67jptsvB74uLY+rc0oGrVwTusb+YuqvU16FDeUIiivkBQI1QKC83w/S2iUl
6M3MM1OoneVZBr5YXAo5bOiYBcHdlClT/GW53yc3VFbff/X92QIKTq+Vp0c5d8qaO02rONoIG1+H
kkVrwQAlKi4p90xoj5JHW0DCL0WvNmeuihWuKWlvf0zw91TeIK18pjZrgYGybOqjkjhrIQH9f2RB
G/9/lJJLF0oOvaE6lXvJRip5M9VVaGvfvr3vq84NHz7cjR8/Pu8y5cdTonP9P6gVLJW/JzNPUV4B
O6CfCZS/SOW0zL1y4rVq1arERRhCHXKzYJsvr5xJ9erVC6dSv0/D17m14Z9Jm6nXooEIIIAAAggg
UCMFyvsDT2UGgASmH5gVRFHSSyVgDZt+SdCqKbmrcClp87nnnhv/QhKu197+6u1sSlbeD9r6gVS/
xCjQk7kNGTLEDRs2zK+oomSiNt0r87T/IV7lcn+RtL+c+oSauW3LKswbBGqgQHm/H6S1iyUFgJR0
vmfPnn65bgWcy/pLebG4lPd56fuzvhcrEKBt0qRJbtCgQeWthuurUECroCnopG3kyJFZyZ6r8LZF
WXUavs6tDQSAivJfF51CAAEEEEAgJQJp+IFHFPpLr0blrFu3zmkFk7C0b0lM+uuq/jK6atUq/wuK
/qJZ2qoqqkc/JM+fP9//NVh/FbapDSVVHx9XUEp/zVXbNALJpqQ5ywXhV6qJL+IFAkUikJbvB0k5
cwNAGslh046cJdR1lnus3NUXi0tZO65guEY6zpkzx4/QVDlL5uwsN1uNGtFR1v7WxOs0wmnixIlu
8uTJcfNtWrUbPHhw/J4X5RNIw9e5tWEjloEv33PjagQQQAABBBD4DwVs9RCnYerl2TScvnnz5llF
9MtF165ds46V9kbL9GYu1VvateGcAkv6KM+mEQOaAqAPNgQQqDkCmvZjuV984EcBIbayCyjgrRGY
mZuWb69J03ky216MrzWtLjP4o/+rbPWtYuxqresTAaBa98jpMAIIIIAAAjVHQH+BtKSQ5Wqwgj/K
RcCGAAIIVIWApoJactwyT/GqijYUS53Kt2MJmZ2t1lgsXSq6fiin0rhx4/L+sFJ0Ha0lHSIJdC15
0HQTAQQQQACB6hBIw5Dn6ug390QAgXwBvh/km+hIbXP54Ycf/HQvW47cJwtWQn62dAlo2rRG32oq
sxKasyUXSMPXubWBKWDJHyU1IIAAAggggAACCCCAAALJBMIviMlqoTQCCCBQssDGJZ/iDAIIIIAA
AggggAACCCCAAAIIIIBAMQgw3q4YniJ9QAABBBBAIOUC/GU75Q+I5iGAQLULRFFU7W2gAQggUDUC
afk5iBFAVfN8qRUBBBBAAAEETKBXr144IIAAArFA796949e8QAABBBD4bwVIAv3fenM3BBBAAAEE
EEAAAQQQQCAWCCMDyjIC6O2333arVq1yLVq0cE2aNInrqI4XH3zwgfvmm2/c7rvv7ho3blxpTVi/
fr2bM2eOq1OnjuvevXul1VtbKnr99dfdt99+69q2beuTONeWfqe9n+X5Oq+qvlgbNmIEUFXpUi8C
CCCAAAIIIIAAAgggUIkC1113nevRo4d77LHHKrHWilU1duxY16FDBzd9+vSKVVBCqa+//tr38fjj
jy/hiso7rBXJ9FGW4Fvl3bVqaxoxYoT3W7RoUdXeiNprpAABoBr52Gg0AggggAACCCCAAAIIIFB9
Attss42/edhXX0sqdufffvvN1a9f339oyXM2BGqDAAGg2vCU6SMCCCCAAAIIIIAAAgggUIkCCp5o
C/tKrJqqEECgigQIAFURLNUigAACCCCAAAIIIIAAAsUqEEb+hH2x9pN+IVBMAiwDX0xPk74ggAAC
CCCAAAIIIIBArRD47rvv3A033OBeffVVt2bNGnfAAQe4vn37umOOOaZg/z/++GN36623usWLFztN
edp+++1ds2bNXL9+/VyXLl3yyowZM8atW7fOXX755e6nn35yV155pS97zz33uJYtW7oQ+Al7VfD3
3387nX/88cedkkTr3P777+/69OnjevbsmXePshyYOXOme/jhh93ChQvdTjvt5JMbDxs2LCvB8X33
3efeeOMN17x5c3f22WcXrPaOO+5wy5cvd+3atfP90uuwqW9bbbWVu+KKK+J+6dxHH33kpkyZ4pRP
Z+3ata5Tp06uW7du7sgjj3QhqW+oI+z1LK6//nrfXhnsuuuurmPHjm748OGuUaNG4bJ4//3337sJ
EyY4JW9Wm3bbbTf/LC+88EK3xx57xNflvnjiiSfc3Llz3bJly1yrVq18wuwjjjgi97Ks9xXpT1YF
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
AElFTkSuQmCC
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/crawler-images/generator.png

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
REPEu0iPyNLIR4uNFksWd0bJR8VF1UdNRXtFl0VLl1gsWbPkRoxajCCmPRYfGxV7JHZyqffS3UuH
4+ziCuPuLjNclrPs2nK15anLz66QX8FZcSoeGx8d3xD/iRPCqeVMrvRfuXflBNeTu4f7kufGK+eN
8V34ZfyRBJeEsoTRRJfEXYljSa5JFUnjAk9BteB1sl/ygeSplJCUoykzqdGpzWmEtPi000IlYYqw
K10zPSe9L8M0ozBDuspp1e5VE6JA0ZFMKHNZZruYjv5M9UiMJJslg1kLs2qy3mdHZZ/KUcwR5vTk
muRuyx3J88n7fjVmNXd1Z752/ob8wTXuaw6thdauXNu5Tnddwbrh9b7rj20gbUjZ8MtGy41lG99u
it7UUaBRsL5gaLPv5sZCuUJR4b0tzlsObMVsFWzt3WazrWrblyJe0fViy+KK4k8l3JLr31l9V/nd
zPaE7b2l9qX7d+B2CHfc3em681iZYlle2dCu4F2t5czyovK3u1fsvlZhW3FgD2mPZI+0MqiyvUqv
akfVp+qk6oEaj5rmvep7t+2d2sfb17/fbX/TAY0DxQc+HhQcvH/I91BrrUFtxWHc4azDz+ui6rq/
Z39ff0TtSPGRz0eFR6XHwo911TvU1zeoN5Q2wo2SxrHjccdv/eD1Q3sTq+lQM6O5+AQ4ITnx4sf4
H++eDDzZeYp9qukn/Z/2ttBailqh1tzWibakNml7THvf6YDTnR3OHS0/m/989Iz2mZqzymdLz5HO
FZybOZ93fvJCxoXxi4kXhzpXdD66tOTSna6wrt7LgZevXvG5cqnbvfv8VZerZ645XTt9nX297Yb9
jdYeu56WX+x+aem172296XCz/ZbjrY6+BX3n+l37L972un3ljv+dGwOLBvruLr57/17cPel93v3R
B6kPXj/Mejj9aP1j7OOiJwpPKp6qP6391fjXZqm99Oyg12DPs4hnj4a4Qy//lfmvT8MFz6nPK0a0
RupHrUfPjPmM3Xqx9MXwy4yX0+OFvyn+tveV0auffnf7vWdiycTwa9HrmT9K3qi+OfrW9m3nZOjk
03dp76anit6rvj/2gf2h+2P0x5Hp7E/4T5WfjT93fAn88ngmbWbm3/eE8/syOll+AAAACXBIWXMA
AAsTAAALEwEAmpwYAAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxu
czp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJE
RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMi
PgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0
aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXBy
ZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50
ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8
dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlw
dGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KsOMy3QAAQABJREFUeAHs3Qm8VVP/x/Ff
SIo0qMxDhqKoKCT1mJJknkMiU0j/SJQMlccsYyIzZSpRmTImSqnIEA2mDAmZMlWE81/f9TxrP/uc
e+50Ovfec8/9rNfrOvvsce33Pl2dX7/1W9USrhkNAQQQQAABBBBAAAEEEEAAAQQQQCAvBaq5tlpe
3hk3hQACCCCAAAIIIIAAAggggAACCCAQCRAAiihYQAABBBBAAAEEEEAAAQQQQAABBPJTgABQfj5X
7goBBBBAAAEEEEAAAQQQQAABBBCIBAgARRQsIIAAAggggAACCCCAAAIIIIAAAvkpQAAoP58rd4UA
AggggAACCCCAAAIIIIAAAghEAgSAIgoWEEAAAQQQQAABBBBAAAEEEEAAgfwUIACUn8+Vu0IAAQQQ
QAABBBBAAAEEEEAAAQQiAQJAEQULCCCAAAIIIIAAAggggAACCCCAQH4KEADKz+fKXSGAAAIIIIAA
AggggAACCCCAAAKRAAGgiIIFBBBAAAEEEEAAAQQQQAABBBBAID8FCADl53PlrhBAAAEEEEAAAQQQ
QAABBBBAAIFIgABQRMECAggggAACCCCAAAIIIIAAAgggkJ8CBIDy87lyVwgggAACCCCAAAIIIIAA
AggggEAkQAAoomABAQQQQAABBBBAAAEEEEAAAQQQyE8BAkD5+Vy5KwQQQAABBBBAAAEEEEAAAQQQ
QCASIAAUUbCAAAIIIIAAAggggAACCCCAAAII5KcAAaD8fK7cFQIIIIAAAggggAACCCCAAAIIIBAJ
EACKKFhAAAEEEEAAAQQQQAABBBBAAAEE8lOAAFB+PlfuCgEEEEAAAQQQQAABBBBAAAEEEIgECABF
FCwggAACCCCAAAIIIIAAAggggAAC+SlAACg/nyt3hQACCCCAAAIIIIAAAggggAACCEQCBIAiChYQ
QAABBBBAAAEEEEAAAQQQQACB/BQgAJSfz5W7QgABBBBAAAEEEEAAAQQQQAABBCIBAkARBQsIIIAA
AggggAACCCCAAAIIIIBAfgoQAMrP58pdIYAAAggggAACCCCAAAIIIIAAApEAAaCIggUEEEAAAQQQ
QAABBBBAAAEEEEAgPwUIAOXnc+WuEEAAAQQQQAABBBBAAAEEEEAAgUiAAFBEwQICCCCAAAIIIIAA
AggggAACCCCQnwIEgPLzuXJXCCCAAAIIIIAAAggggAACCCCAQCSwRrTEAgIIIIAAAghEAgsXLrQl
S5ZYnTp1bNttt43Wp1tYunSpLViwwG/aeeedbbXV+PeVdE6sQwABBBBAAAEEEKg4Af6GWnH2XBkB
BBBAIIcFrrjiCmvbtq316tWr2F5OmTLF76v9ly1bVuz+7IAAAggggAACCCCAQHkLEAAqb3GuhwAC
CCCAAAIIIIAAAggggAACCJSzAAGgcgbncggggAACCCCAAAIIIIAAAggggEB5CxAAKm9xrocAAggg
gAACCCCAAAIIIIAAAgiUswBFoMsZnMshgAACCFQ9ARWUfvjhh+2tt96y77//3tq1a2d77LGHde7c
2apVq5YW5LPPPrPbb7/dZs+ebd988401aNDAttlmG+vevbu1b98+6ZhffvnFbrrpJqtZs6adf/75
9t5779lTTz1lL7zwgtWqVcvXJzrnnHN8QeukA4t4M3DgQPvjjz/soosushUrVti4cePs6aeftoYN
G9rBBx9sXbp08ef+8ssv7f7777dp06bZP//8Y7vuuquddtpptummm6Y9e2ksXn31VXvyySetTZs2
dswxx9jLL7/s72vOnDnWsWNHO+yww6xZs2b+Oo899pi9+OKL9v7779t2221nnTp18sek64SKdt98
88325ptv2ty5c31fW7ZsaTJq3Lhx0iEzZsywMWPGeMOjjjrKRo4caQ8++KAvDL7LLrvY22+/bU2b
NrXTTz896bjw5p577vHX0L66BxoCCCCAAAIIIFBhAgkaAggggAACCBQQOOWUUxLuf86Jvffeu8C2
1BUuSOH31f6//vpr0mYXPEisu+660XbtE35cQCCxfPnypP31xgVaEmussUa0X40aNaJlHdu3b9+k
Y7744gu/vV69eon77rsv4WYhS9pfx2y55ZaJd955J+m4ot6ss846/hzqv84b+hxe999//8S7776b
2GijjQps22qrrRJfffVVgdOX1mLo0KH+3Mcff3zipJNOKnAdGbkgUaJPnz4Ftqmf11xzTYE+uIBO
Yosttoj2X3PNNaPltddeOzFixIikY+666y6//dRTT01cfPHF0b66f1nrOrJK9xxdAC3hZpHz+4we
PTrpvLxBAAEEEEAAAQTKU8D9ncX9rYWGAAIIIIAAAgUEQgBo991398EMBTQK+wmBAP1vNR4Achkp
/su/AhWDBw9OfPLJJwmXzZMYP358YvPNN/fb9tlnn6Rr//777wkFInQul4WT+OGHHxIusybxwQcf
JC655BK/Xttc5kl0XAgAKfDjMooSRx99dGLy5MkJl22UePzxxxMtWrTwx7lsmcTKlSuj44paCAEg
BUgUBHMznSVcVlLCZRpFAabq1asntt5668TYsWMTH374YeKBBx5INGrUyF+rf//+SafPxCIEgNQH
9UfXluGsWbMSLivIX0d90D337t074bKlEm+88UbihBNO8Nvk8dtvv0X9+PHHH6NgloJv8+bN87bq
+4ABA6Jjpk+fHh0TAkC6T11Hn4fLLrvMB+lc5lXCZV354/RMU5sCeXpWCgCmCxCl7s97BBBAAAEE
EECgrATc30nc30poCCCAAAIIIFBAIASA9L/K0vyEANBff/2V2GGHHfyxt9xyS4HzK5gSgizxzJyp
U6f6Y7bddtsCx/z9998JN7zJb7/zzjuj7SEApH7utNNOiT///DPapoWPP/44ykK64447krYV9ib0
TUEj3Uu87bjjjr4PCn58+umn8U0JNwTNb9tvv/2i9ZlahACQ7ssNoYvOp4UJEyb462hbz549k7Yp
0BMye+LBnH79+vljFHSTZWpTEEnnU8AstBAA0vqzzjrLB4zCNr0qkKRtylJKbSFrqUePHqmbeI8A
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
7gk0bNjQ7rrrLmvatGnudY4eIYAAAgjkrAA1gHL20dAxBBBAAAEEEChrgXytDfLLL7/Y4sWLTTNc
qaCxpi+nVW6B3377zVQkWrO61atXr3LfTDn3Pl//nJczI5dDAIFKLkANoEr+AOk+AggggAACVUVA
U4N//fXXpqmuNbuSXsNP+HK3KhbZOMeqXJ9jEUAAAQQQQACBshbgn4PKWpjzI4AAAggggMAqC6je
SYcOHaKCxvETKrslBIPSBYhSA0bhffv27eOnYRkBBBBAAAEEEMhrAYaA5fXj5eYQQAABBBDIH4GL
LrrIrrzyyqzckGbDUkHdmjVr+vMlEomsnJeTIIBA7gmEDD/+nOfes6FHCCBQfgIaAkYR6PLz5koI
IIAAAgggsAoCxx133Coc/b9DhwwZYo888oittdZa/1vJEgIIIIAAAgggkOcCZADl+QPm9hBAAAEE
EMgngZYtW5qmw86kKeAzcuRIO+qoo6LDM8kMWLRokc2YMcO++OILO/LII23TTTeNzleahe+++84+
/fRTq1u3bs7M5qQiw59//rkvMtykSZPS3A77IpCzApn8Oc/Zm6FjCCCAQIYCZABlCMdhCCCAAAII
IFAxAplmAW244YY2ZcqUpOBPJnfw/PPP23bbbecDP3379rX58+dnchp/zIQJE6xt27Z27rnnZnyO
TA/8448/TDOFrVixIukUDz30kO/TBRdckLSeNwgggAACCCBQ+QUYAlb5nyF3gAACCCCAQJUROPbY
Y0t9rzvttJPNmjXL2rRpU+pjUw+48847TdNxa2r1/v3721ZbbZW6S6V4P3jwYKtTp4716dOnUvSX
TiKAAAIIIIDAqgswC9iqG3IGBBBAAAEEEChjgY8//tgeffRRe/DBB0t1pSOOOMIP+6pVq1apjits
Zw39Urv77rtt//33L2y3Srv+xBNPtP32289q165dae+BjiOAAAIIIIBAegECQOldWIsAAggggAAC
FSygejQK+ugnBF7UJQUnfv3112J7p1nD/v3vf1uo/1HsASXYIQyZWm+99Uqwd+XbpUGDBqYfGgII
IIAAAgjknwABoPx7ptwRAggggAAClVbg559/tnHjxtnDDz9sL7/8sv3zzz/+XtZdd1075JBDTDWA
dtxxR9t4443t77//Tnufa665pp/iPdN6QelOOnbsWJs7d64tW7bMb77//vtN9YC6detmjRs3TnfI
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
AggggAACCCCAAAIIIIAAAgggkJcCa+TlXXFTCCCQ1wLffPONff7551avXj1r0qRJpb/Xn376yWbN
mmV169a1XXbZpdLfDzeAAAIIIIAAAggggAACuSdABlDuPRN6hAACxQg89NBD1rZtW7vggguK2bNy
bH7vvfdsv/32s3POOadydJheIoAAAggggAACCCCAQKUTIABU6R4ZHUYAAQQQQAABBBBAAAEEEEAA
AQRKJ8AQsNJ5sTcCCOSAwIknnugzZmrXrp0DvaELCCCAAAIIIIAAAggggEDuCxAAyv1nRA8RQCBF
oEGDBqYfGgIIIIAAAggggAACCCCAQMkECACVzIm9EECgjAW+++47GzlypL3xxhu29tprW+fOna1T
p072xx9/2JgxY2yLLbawQw45xPdi+vTp9uKLL1rTpk3tmGOOyUrPlixZYjfddJMvxvzxxx/bJpts
Yrvttpudd955tv766xe4xtKlS+3mm2+2N9980+bOnWubbrqptWzZ0tfxady4cYH9teLLL7+0cePG
+Xv8+++/ba+99rIuXbqk3Te+cuHChfbwww/bW2+9Zd9//721a9fO9thjD29UrVq1+K4sI4AAAggg
gAACCCCAAAJpBaolXEu7hZUIIIBAhgIhKFHSXy8zZsywI4880hYtWpR0xfXWW88uu+wy69Wrlw92
TJw40W+//vrrrV+/fj4gNH78+KRjMnkzZcoU69q1qy1evNgfrv6Hvq+zzjo+YNO8efPo1DNnzvSB
p88++8yvW3PNNe3PP//0ywpeqX89e/aM9teCgjcHHHCAffvtt0nr69SpY/3797eBAwf6gNO0adOS
tj/22GN26qmn2i+//JK0Xm8U/Lr//vttrbXWKrCNFdkTKO3nOXtX5kwIIIAAAggggAACCGRHwP2d
thpFoLNjyVkQQCBDAWW0aAYsBX+UDaOAx4IFC3zGS82aNa13794Znrlkh/3www920EEH+eCPMowU
gFmxYoW9//77Psvmt99+88GhcDZN2a7sJAV/FICZN2+e3//DDz+0AQMG2O+//25nnXWWDxqFY77+
+mvbc889ffCnffv2PntJ09hPmDDBD2VT8Cdde+mll+zoo4+2ZcuW2eDBg+2TTz6xb775xhT02nzz
zW306NF24IEHpjuUdQgggAACCCCAAAIIIIBAkgBDwJI4eIMAAuUtcPnll9vPP/9sbdq08cOjlE2j
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
AB5AdY6UCSEAAQhAAAIQaIgElItm7Nix7sUXX3Srr76623fffV23bt2cQocmTpzoNtlkE3fAAQfk
bF1l5idMmOCeffZZN3v2bJ9jZ9ddd3X7779/0Xw75557rp/v8ssvd0rge/vtt/skzTpXcmUlalY+
l9rYpEmT3Jw5c9z333/vpxk9erRTPqAjjzzSbbrppu6pp55yU6dOdXvssYdfp86nTZvmXnvtNbfR
Rhv5ZML9+/d3q6yySs4yJP7kC0AffvihGzZsmHvzzTfdP/7xD/fLX/7StW/f3g0cONAnJs6ZoJoX
jzzyiNMelNxYYVodO3Z0gwYNyhGy7rjjDr/eNm3auBNOOKHozKNGjfIclBx50aJF/jx0vOSSS/w7
vuiii3L2pP2MHz/ezZo1y+9np512crvvvrv/WagoZ9CXX37p/vznP/v1vvfee26DDTbw73Dw4MFu
3XXXDY+Mj99884277rrr3MyZM/2alJg7MNP7KWYLFixwkydP9j+by5Yt88mye/ToUaykxsqPAAAV
Q0lEQVRrTltN9pMzARcQgAAEIJAtAvYPEwwCEIAABCAAAQiUFQH711qkr+qaiT6RfXD3Y8JYHc17
Jrrpppt8uwlCOdN99dVX0a9//euCMRrXvHnz6Iknnsjpr4s11ljD97eqV0WfZ6JLZGJMwbg0DSYi
FV3TY4895qcZOnSov3/qqadG+kruN5xbyFhkHkQ5j23dunVkIlLcZsJRtPLKK8fjmzRpEp+bkBGZ
IBb3rezEKpT5cVbJKrr44osjE1riecJ61l9//ei5556LpzHhzPcRT6tQFreHExPtIgtX831MoIv2
2Wefgjk196effhqGRCbyRSZwFe3Xp0+fos/Re7QcS/GY5Nq1trfeeiueXycWlheZkBj3T/Iz0TEa
MWJETn9dmFAUmZAUjwlMtD8TEn27iYYF42qyn4JJSrwhsCjxZbI8CEAAAvVCwP4mpviXT70siYdA
AAIQgAAEIACB5U8gzQdD8/yJxQLzqojuueeeaN68eZF5gniRZqWVVvIfsvMFoF122cW3b7vtttH0
6dMj8+yIXn311ci8X3y7hU359uRugwAkoWezzTaLHnjggchKtUcSEswLxI8zr5foP//5T3JYqnMJ
KhIeggAioUbXlhDazxMEIK1BgsUpp5wSvf3229H7778fXXHFFX4N4jd8+PCc555++unRzTff7NvM
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
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/crawler-images/yield-from.png

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
REPEu0iPyNLIR4uNFksWd0bJR8VF1UdNRXtFl0VLl1gsWbPkRoxajCCmPRYfGxV7JHZyqffS3UuH
4+ziCuPuLjNclrPs2nK15anLz66QX8FZcSoeGx8d3xD/iRPCqeVMrvRfuXflBNeTu4f7kufGK+eN
8V34ZfyRBJeEsoTRRJfEXYljSa5JFUnjAk9BteB1sl/ygeSplJCUoykzqdGpzWmEtPi000IlYYqw
K10zPSe9L8M0ozBDuspp1e5VE6JA0ZFMKHNZZruYjv5M9UiMJJslg1kLs2qy3mdHZZ/KUcwR5vTk
muRuyx3J88n7fjVmNXd1Z752/ob8wTXuaw6thdauXNu5Tnddwbrh9b7rj20gbUjZ8MtGy41lG99u
it7UUaBRsL5gaLPv5sZCuUJR4b0tzlsObMVsFWzt3WazrWrblyJe0fViy+KK4k8l3JLr31l9V/nd
zPaE7b2l9qX7d+B2CHfc3em681iZYlle2dCu4F2t5czyovK3u1fsvlZhW3FgD2mPZI+0MqiyvUqv
akfVp+qk6oEaj5rmvep7t+2d2sfb17/fbX/TAY0DxQc+HhQcvH/I91BrrUFtxWHc4azDz+ui6rq/
Z39ff0TtSPGRz0eFR6XHwo911TvU1zeoN5Q2wo2SxrHjccdv/eD1Q3sTq+lQM6O5+AQ4ITnx4sf4
H++eDDzZeYp9qukn/Z/2ttBailqh1tzWibakNml7THvf6YDTnR3OHS0/m/989Iz2mZqzymdLz5HO
FZybOZ93fvJCxoXxi4kXhzpXdD66tOTSna6wrt7LgZevXvG5cqnbvfv8VZerZ645XTt9nX297Yb9
jdYeu56WX+x+aem172296XCz/ZbjrY6+BX3n+l37L972un3ljv+dGwOLBvruLr57/17cPel93v3R
B6kPXj/Mejj9aP1j7OOiJwpPKp6qP6391fjXZqm99Oyg12DPs4hnj4a4Qy//lfmvT8MFz6nPK0a0
RupHrUfPjPmM3Xqx9MXwy4yX0+OFvyn+tveV0auffnf7vWdiycTwa9HrmT9K3qi+OfrW9m3nZOjk
03dp76anit6rvj/2gf2h+2P0x5Hp7E/4T5WfjT93fAn88ngmbWbm3/eE8/syOll+AAAACXBIWXMA
AAsTAAALEwEAmpwYAAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxu
czp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJE
RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMi
PgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0
aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXBy
ZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50
ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8
dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlw
dGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KsOMy3QAAQABJREFUeAHs3Qe4HFXdOOBz
QwhFpQSBQERAimIiUoJUKaIfJBEFe2IBfewV26eABRARRVRsiPohAgIitmiwoqJYgMSaqCiKAiEB
FBCREjH7n998/5lv997N3bu37c7ue57nsjNzzsyc855Lbu4vpwzUspQkAgQIECBAgAABAgQIECBA
gACBnhQYyNKUnmyZRhEgQIAAAQIECBAgQIAAAQIECJQCAkAlhQMCBAgQIECAAAECBAgQIECAQG8K
CAD1Zr9qFQECBAgQIECAAAECBAgQIECgFBAAKikcECBAgAABAgQIECBAgAABAgR6U0AAqDf7VasI
ECBAgAABAgQIECBAgAABAqWAAFBJ4YAAAQIECBAgQIAAAQIECBAg0JsCAkC92a9aRYAAAQIECBAg
QIAAAQIECBAoBQSASgoHBAgQIECAAAECBAgQIECAAIHeFBAA6s1+1SoCBAgQIECAAAECBAgQIECA
QCkgAFRSOCBAgAABAgQIECBAgAABAgQI9KaAAFBv9qtWESBAgAABAgQIECBAgAABAgRKAQGgksIB
AQIECBAgQIAAAQIECBAgQKA3BQSAerNftYoAAQIECBAgQIAAAQIECBAgUAoIAJUUDggQIECAAAEC
BAgQIECAAAECvSkgANSb/apVBAgQIECAAAECBAgQIECAAIFSQACopHBAgAABAgQIECBAgAABAgQI
EOhNAQGg3uxXrSJAgAABAgQIECBAgAABAgQIlAICQCWFAwIECBAgQIAAAQIECBAgQIBAbwoIAPVm
v2oVAQIECBAgQIAAAQIECBAgQKAUEAAqKRwQIECAAAECBAgQIECAAAECBHpTQACoN/tVqwgQIECA
AAECBAgQIECAAAECpYAAUEnhgAABAgQIECBAgAABAgQIECDQmwICQL3Zr1pFgAABAgQIECBAgAAB
AgQIECgFBIBKCgcECBAgQIAAAQIECBAgQIAAgd4UEADqzX7VKgIECBAgQIAAAQIECBAgQIBAKSAA
VFI4IECAAAECBAgQIECAAAECBAj0poAAUG/2q1YRIECAAAECBAgQIECAAAECBEqBqeWRAwIECBDo
uMD8+fPTZZdd1vF6qAABAgQIEBgvgXnz5qXFixeP1+M8hwABAgRGKTBQy9Io73UbAQIECIyzwMDA
wDg/0eMIECBAgEDnBfzK0fk+UAMCBPpbIPs9Y8AIoP7+HtB6AgS6VMBflLu0Y1SLAAECBNoS8A8b
bXEpTIAAgQkVsAbQhPJ6OAECBAgQIECAAAECBAgQIECg8wICQJ3vAzUgQIAAAQIECBAgQIAAAQIE
CEyogADQhPJ6OAECBAgQIECAAAECBAgQIECg8wICQJ3vAzUgQIAAAQIECBAgQIAAAQIECEyogADQ
hPJ6OAECBAgQIECAAAECBAgQIECg8wICQJ3vAzUgQIAAAQIECBAgQIAAAQIECEyogADQhPJ6OAEC
BAgQIECAAAECBAgQIECg8wICQJ3vAzUgQIAAAQIECBAgQIAAAQIECEyogADQhPJ6OAECBAgQIECA
AAECBAgQIECg8wICQJ3vAzUgQIAAAQIECBAgQIAAAQIECEyogADQhPJ6OAECBAgQIECAAAECBAgQ
IECg8wICQJ3vAzUgQIAAAQIECBAgQIAAAQIECEyogADQhPJ6OAECBAgQIECAAAECBAgQIECg8wIC
QJ3vAzUgQIAAAQIECBAgQIAAAQIECEyogADQhPJ6OAECBAgQIECAAAECBAgQIECg8wICQJ3vAzUg
QIAAAQIECBAgQIAAAQIECEyogADQhPJ6OAECBAgQIECAAAECBAgQIECg8wICQJ3vAzUgQIAAAQIE
CBAgQIAAAQIECEyogADQhPJ6OAECBAgQIECAAAECBAgQIECg8wICQJ3vAzUgQIAAAQIECBAgQIAA
AQIECEyogADQhPJ6OAECBAgQIECAAAECBAgQIECg8wICQJ3vAzUgQIAAAQIECBAgQIAAAQIECEyo
gADQhPJ6OAECBAgQIECAAAECBAgQIECg8wJTO18FNSBAgAABAgS6UeD+++9PV1xxRdtV22CDDdLj
H//4tu8bzQ0333xzuvHGG/NbH/SgB6XZs2eP5jHuIUCAAAECBAj0vMBALUs930oNJECAQEUEBgYG
8pr6o7kiHdbj1bzpppvSNtts03Yrt9122/SXv/yl7ftGc8N73vOedPzxx+e37rHHHmnp0qWjecyY
77n66qvTmjVr8ufsvPPOafr06WN+pgcQ6AUBP9d6oRe1gQCBXhDI/jweMAKoF3pSGwgQIECAAIGO
Chx44IEpRkxF+sIXvpCe8YxndLQ+Xk6AAAECBAgQGCwgADRYxDkBAgQIECCQC0ybNi3tvffeQzRi
lM0DDzyQX994443Tox71qIYyM2bMaDh3QoAAAQIECBAg0HkBAaDO94EaECBAgACBrhTYYost0s9+
9rMhddt8883T3/72t/z6/vvvnxYvXjykzOAL99xzT4q1gYrpIIPzm53ffvvtKaZDbrbZZs2yJ+Va
BLpuueWWFG2OgNh4pTvvvDNtsskmo3rcf/7znzRlypS2LEf1IjcRIECAAAECPSVgF7Ce6k6NIUCA
AAEC3SNw1llnpYMOOihtueWWKRZoXn/99VOsj/OWt7xlrWsE/fGPf0xPf/rT8zV0IvDz0Ic+NG24
4Ybp0EMPTV/60pfaalwsYD137tzy601velMeUGr1kAiwfOITn0iPfOQj86DVwx72sLzu8Rl1j4Wn
i3TyySen5zznOenf//53cSl98IMfzK9997vfLa/FwU9/+tN02GGH5R6bbrpp3raoXzgNTqtXr077
7bdf+RVrKn3rW99K++yzT+4R9x9yyCHpa1/72uBbnRMgQIAAAQIEmgvEItASAQIECHSHQPYndSzM
3x2VUQsCaxHIgjL592l8r86bN29IqWzUTH69+H5u9plNE6stX7684d4f/vCHtWyUTfnsZvedeuqp
DffEeVEuWwS6zPvd735Xy4IkZd7DH/7wWrZbWJm/toNsIeeWdd9uu+1qWRAof0QW4CrfUdSj+MyC
SOVr3vnOd9bWWWedtZZ9+ctfXgu3It17770NZaOd2aifhmvFe97whjcUt/kk0HUCxfdp11VMhQgQ
INBnAtmfx8kIoFCQCBAgQIAAgXET+MEPfpAuu+yy8nkxkicWRd5zzz3zqUuRsWrVqnTKKaeUZWIE
zYIFC1KMfIm06667pre+9a3ppS99aYrRLkWKHb/+9Kc/FadNP2+99dY0f/78dMcdd+T5MYooRs/E
CJ5WKUb+FHVfb7310vOe97wUo3xi5E2RYjTOf//3f+ene+21Vz6qJ6ZkFemxj31sfq143+WXX55O
OumkFCOLIk2dOjUfvfOQhzykuCUfcfT617++PB98cMIJJ+S7jMUoqhgRVZ8+8IEPpMGjjerzHRMg
QIAAAQIEQuD//rbCgwABAgQIECAwDgKf//zny6c85SlPSStXrsx3xlqyZEkeUCkyr7nmmuIw/eY3
v0krVqwoz2O6V2zxfvbZZ6ds5E7aaKONyrxvf/vb5fHgg2zkTIp3/vnPf86zHvzgB+drFA1eqHrw
fcX5N77xjeIwPetZz0rnn39+evvb355P34pAUJG+853v5NPJTj/99PTNb34zrbvuukVWetvb3pZf
iyBUbA3/ute9rsyLRbVvuOGG9L3vfS8Pgh1zzDFl3mc+85n0r3/9qzyvP8j+kTK3iHWR7rrrrnTu
uefmgaSizJvf/Obi0CcBAgQIECBAoKmAAFBTFhcJECBAgACB0QocccQR6bzzzsu/zjjjjDI4EqN8
YvRMkWKkTpFuu+224jD/fO1rX5siGHP33Xfn6wf94Q9/SH/961/zrxgp1CxFsCVG7Fx11VV5dgRl
vvjFL6bHPe5xzYo3vVZfj6985Sv5ej7x7kgRZCnqcPXVVze9f/DFCPZkU93Ky9l0rbTVVlvl5zGS
57jjjivzoq1f/vKXy/P6gxe+8IX5aKhYSDubSpaOPvro9OQnP7ks8qtf/SrFQtsSAQIECBAgQGBt
AnYBW5uM6wQIECBAgMCoBCIAFOnnP/95WrRoUYrgREzb+sUvfrHWIMXuu++eL7gcI3gixTSs+Ipg
R+Rlaw3lCyvvsssueX6z//zyl79M8VWkHXfcMV88ujgfyWcsvFzsfPbPf/4zRcAmvmJHtIMPPjhf
oDpGGMVUrJGkWNS6Pl100UXp0ksvrb+UT+kqgjcRWIog1uAUCz4PTk94whNSBKkixQihGPU0e/bs
wcWcEyBAgAABAgRyAQEg3wgECBAgQIDAuApEMOPII49MMU1qcIrdwJpNc4oAy//8z/+kl73sZSkC
L0WKdXNi6lh8vetd70qvec1rUqx5E4GhVilbCDrfYevVr351q6Jl/oknnpgHqr7//e+X1+IgRitd
cskl+dcOO+yQLrzwwhGNLCqmohUPKwI2xfngzyIQNPh67J42ONWvSxR5MdVOAGiwknMCBAgQIECg
EBAAKiR8EiBAgAABAuMiEAs+F8GfWPA4Rs7E9uf77rtvvtbPK17xivw9AwMDDe+LqV1R9nOf+1w+
dSvWCCoWTo6CMcrlwx/+cNp6663z7dgbbv7/JzEyJ9thrJxqFuv3PPvZz06bb755s+JDrsXCzLE+
T6zrEwGfr3/966l+WljcEKOZIsD129/+Nm2yySZDnlF/Yfr06eVpWAy30HMUzHYyK8vXH9x///31
p/nx73//+4Zr4SIRIECAAAECBNYmIAC0NhnXCRAgQIAAgbYFYuetCJ4UKda4qV88OXYIa5ZiYePY
ASzW7YlRQG9605vSP/7xj3TFFVekr371q+mCCy4odwiLaVRvectbhjwm20I+DxxFoCUCTpHuvPPO
fJ2dT3/600PKD76QbcOel4/rc+bMSU960pPyXcuWLVuWB7RikeY4jhSjbaItEQgaLj3ykY8ss+P5
sbZRsTtYmTGCg1hH6MADD2woGYGq+pRtT19/6pgAAQIECBAg0CBgEegGDicECBAgQIDAWARiDZ4Y
qVOkhQsXFof59frtyuvLxTo7MUonvnbbbbf8no033jjf0SumhsWix0Va2zSpmP4UawX913/9V5o7
d25RPJ1zzjmpfsexCCpFUKr4Kraej63pizrEZ4xEilFKj3nMY/J1gCKwVT9qaW31uO+++8p377TT
Tg27dX3sYx8r8+LguuuuS7GWT4x8iq/Yrr5Zih3Rim3tIz+mpNWXjSliMb1OIkCAAAECBAisTcAI
oLXJuE6AAAECBAi0LTBz5syGe2IXsJiGFSNnPvvZz+ajZooC9dO7YnpYBHoixbo5L3nJS9Jzn/vc
tOmmm+ZTrWIx6SLttddexeFaP2N79tguPt4RgaZYBygWd44ATozcOTFb66dIEXyK0UMxMie+brrp
pjwr6h0pAkAxkihGHtUHrWKUUJHWW2+9VEzTih3Q4r3RpgjMnHDCCemkk07Ki5522ml5+w4//PB0
7bXX5tvM33zzzXleBLxiwetm6cYbb0yPfvSj01Of+tQUW9t/4QtfyEchFWWLuhbnPgkQIECAAAEC
QwSyv8hIBAgQINAlAtkf0jF0oktqoxoEmgs89KEPzb9P43s1G3HTUCgLfNT23HPPMr/4ni4+Z82a
VeZNmTKlli0Ind+fbRFf23///cu8ovzgz4022qiW7axVvvPUU08t78nWzymvx0E2lazMi+dk08Dy
/Cz403A9W3S6vG/x4sW1LEjUkD+4DnH+yle+srwnDo466qgh95x11ll5mWyEUS0LFg3Jr39utnZR
7Utf+lL5zGw3tIby2eimhvP6ew844IBauEsEulGg+F7txrqpEwECBPpJIPvzOJkCFgoSAQIECBAg
MC4CWVAnXXzxxfkaOvUPjMWQs2BNvrV7cX3NmjUpRupEinV7YoesGKkTo3GapdgKPaaQxfbuI0kx
xSsWdS5SrEcUI3mGSzGFLNYcWttuWrHoc4zm+eAHP9jwmHj22u6JdY1+9KMf5VPONtxww4b74iSm
vC1dujRlQaQhecWF973vffnaSDEiqkhhHV6XX355vlZRcd0nAQIECBAgQKCZwEBEvJpluEaAAAEC
ky9QrC/ij+bJt/fG8RWI7+HYuj3WuNlll13SrrvuOuIgxd/+9rd8etRf//rXlI2ESdtss03afvvt
U6ynM1kpglOxjXzUIaaEReDl4Q9/eD4Nqz6oNLg+EWCKXcOi/VtttVVDACrKZiOeUizoHDt4bbHF
FrlLs927Yh2hDTbYoHx87Kr2xCc+McVC0j/5yU9yy5guZt2fkshBlwr4udalHaNaBAj0nUD253E2
xtlvGX3X8RpMgED3CviLcvf2jZoRmEyBtQWAJrMO3kVgPAT8XBsPRc8gQIDA2AUi/mMK2NgdPYEA
AQIECBAgQIAAAQIECBAg0NUCAkBd3T0qR4AAAQIECBAgQIAAAQIECBAYu4AA0NgNPYEAAQIECBAg
QIAAAQIECBAg0NUC1gDq6u5ROQIE+k3AWgn91uPaS2DtAtn28WVm7CRW/PlQXnRAoAICxfetZUcr
0FmqSIBATwtkfx4PTO3pFmocAQIECBAgQKCiAtOmTatozVWbAAECBAgQ6EYBU8C6sVfUiQABAgQI
ECBAgAABAgQIECAwjgICQOOI6VEECBAgQIAAAQIECBAgQIAAgW4UEADqxl5RJwIECBAgQIAAAQIE
CBAgQIDAOAoIAI0jpkcRIECAAAECBAgQIECAAAECBLpRQACoG3tFnQgQIECAAAECBAgQIECAAAEC
4yggADSOmB5FgAABAgQIECBAgAABAgQIEOhGAQGgbuwVdSJAgAABAgQIECBAgAABAgQIjKOAANA4
YnoUAQIECBAgQIAAAQIECBAgQKAbBQSAurFX1IkAAQIECBAgQIAAAQIECBAgMI4CAkDjiOlRBAgQ
IECAAAECBAgQIECAAIFuFBAA6sZeUScCBAgQIECAAAECBAgQIECAwDgKCACNI6ZHESBAgAABAgQI
ECBAgAABAgS6UUAAqBt7RZ0IECBAgAABAgQIECBAgAABAuMoIAA0jpgeRYAAAQIECBAgQIAAAQIE
CBDoRgEBoG7sFXUiQIAAAQIECBAgQIAAAQIECIyjgADQOGJ6FAECBAgQIECAAAECBAgQIECgGwUE
gLqxV9SJAAECBAgQIECAAAECBAgQIDCOAgJA44jpUQQIECBAgAABAgQIECBAgACBbhQQAOrGXlEn
AgQIECBAgAABAgQIECBAgMA4CggAjSOmRxEgQIAAAQIECBAgQIAAAQIEulFAAKgbe0WdCBAgQIAA
AQIECBAgQIAAAQLjKDB1HJ/lUQQIECAwTgIDAwPj9CSPIUCAAAECBAgQIECAQEpGAPkuIECAQBcJ
zJs3r4tqoyoECBAgQGDsAvPnzx/7QzyBAAECBMYsMFDL0pif4gEECBAgQGCCBZYsWZK/Yc6cORP8
Jo8nQIBAewLFqE1/rW7PTWkCBAgQmDyB7GfVgClgk+ftTQQIECAwBoFzzz03v1sAaAyIbiVAgAAB
AgQIEOhbASOA+rbrNZwAAQLVEVi9enWaMWNGXuFVq1aladOmVafyakqAQM8LGAHU812sgQQIEKi8
QIwAsgZQ5btRAwgQIND7AosWLUp33HFH/hXHEgECBAgQIECAAAEC7QkIALXnpTQBAgQIdECgmP4V
r64/7kBVvJIAAQIECBAgQIBAJQVMAatkt6k0AQIE+kcgpnzNnDkzrVmzJm/0lClT0ooVK8opYf0j
oaUECHSrgClg3doz6kWAAAEChYApYIWETwIECBDoWoELLrigDP5EJSMQFNckAgQIECBAgAABAgRG
LmAE0MitlCRAgACBDgjMnj07LV++vOHNs2bNSsuWLWu45oQAAQKdEjACqFPy3kuAAAECIxUwAmik
UsoRIECAQEcElixZMiT4ExWJgFDkSQQIECBAgAABAgQIjEzAItAjc1KKAAECBDogMNyCz8PldaCq
XkmAAAECBAgQIECgqwVMAevq7lE5AgQI9K/A6tWr84WeY/v3ZmnTTTdNsUD0tGnTmmW7RoAAgUkT
MAVs0qi9iAABAgRGKWAK2Cjh3EaAAAECEy+waNGitLbgT7w98qKMRIAAAQIECBAgQIBAawFTwFob
KUGAAAECHRAYyRSvkZTpQNW9kgABAgQIECBAgEDXCZgC1nVdokIECBAgEFO7Zs6c2bD9ezOVKVOm
pBUrVuRTxZrlu0aAAIHJEDAFbDKUvYMAAQIExiJgCthY9NxLgAABAhMmcMEFF7QM/sTL16xZk6Ks
RIAAAQIECBAgQIDA8AJGAA3vI5cAAQIEOiAwe/bsptu/N6vKrFmz0rJly5pluUaAAIFJETACaFKY
vYQAAQIExiBgBNAY8NxKgAABAhMjsGTJkhEHf6IGy5cvT3GPRIAAAQIECBAgQIDA2gUsAr12GzkE
CBAg0AGB0SzsPJp7OtA0ryRAgAABAgQIECDQMQFTwDpG78UECBAgMFhg9erVaauttkq333774Kxh
z6dPn55WrlyZpk2bNmw5mQQIEJgIAVPAJkLVMwkQIEBgPAViCtjU8XygZxEgQIAAgbEIXH311Wn7
7bfPvwY/Z+nSpfmlPffcc3BWfh73HnDAAU3zXCRAgAABAgQIECDQ7wJGAPX7d4D2EyBAoCIC/oW9
Ih2lmgT6UMCfT33Y6ZpMgACBiglkP6sGrAFUsU5TXQIECBAgQIAAAQIECBAgQIBAuwICQO2KKU+A
AAECBAgQIECAAAECBAgQqJiAAFDFOkx1CRAgQIAAAQIECBAgQIAAAQLtCggAtSumPAECBAgQIECA
AAECBAgQIECgYgICQBXrMNUlQIAAAQIECBAgQIAAAQIECLQrIADUrpjyBAgQIECAAAECBAgQIECA
AIGKCQgAVazDVJcAAQIECBAgQIAAAQIECBAg0K6AAFC7YsoTIECAAAECBAgQIECAAAECBComIABU
sQ5TXQIECBAgQIAAAQIECBAgQIBAuwICQO2KKU+AAAECBAgQIECAAAECBAgQqJiAAFDFOkx1CRAg
QIAAAQIECBAgQIAAAQLtCggAtSumPAECBAgQIECAAAECBAgQIECgYgICQBXrMNUlQIAAAQIECBAg
QIAAAQIECLQrIADUrpjyBAgQIECAAAECBAgQIECAAIGKCQgAVazDVJcAAQIECBAgQIAAAQIECBAg
0K6AAFC7YsoTIECAAAECBAgQIECAAAECBComIABUsQ5TXQIECBAgQIAAAQIECBAgQIBAuwICQO2K
KU+AAAECBAgQIECAAAECBAgQqJiAAFDFOkx1CRAgQIAAAQIECBAgQIAAAQLtCggAtSumPAECBAgQ
IECAAAECBAgQIECgYgICQBXrMNUlQIAAAQIECBAgQIAAAQIECLQrIADUrpjyBAgQIECAAAECBAgQ
IECAAIGKCQgAVazDVJcAAQIECEyUwG233ZauuuqqdO211w55Ra1WS1dccUX65Cc/mS655JIh+S50
t8Add9yRvv3tb6err756rRX9/ve/n97znvekNWvWrLVMVTKG+14e3IZ77rknnXzyyenXv/714Czn
BAgQIECgpwQEgHqqOzWGAAECBAiMXuCrX/1q2meffdLrX//6hodE8Ofwww9PBx98cHrZy16Wzjzz
zIZ8J90vEMGNww47LB177LFNK/uPf/wjLViwIF133XVpypTq//Vwbd/Ld911V4qv+J4u0oYbbpgH
xp7//OenBx54oLjskwABAgQI9JxA9X/C91yXaBABAgQIEOgugWXLluWjRwYGBtIRRxyRXvrSl3ZX
BdVmzALveMc70t/+9rd0/PHHj/lZ3fqA+++/P2288cb516pVqxqq+c53vjMfAfShD32o4boTAgQI
ECDQSwJTe6kx2kKAAAECBAiMv0BMC4u01157pUWLFo3/CzyxowIR4PvYxz6WnvOc56Qddtiho3Xp
1MvjeztGSJ144om5w8Me9rBOVcV7CRAgQIDAhAkYATRhtB5MgAABAgR6Q+C+++7LG7LZZpv1RoO0
okHgpJNOSv/5z3/Sq1/96obr/Xbyqle9Kv3rX/9Kp5xySr81XXsJECBAoE8EjADqk47WTAIECBCo
vsD111+fzjjjjPSb3/wmn66z8847p8c+9rH5ui6bbLJJ0wbGPRdeeGFaunRpfs9+++2XDjrooHxN
n5jSNVyKhXTPOuusfGHoKBfPete73pW22WabdMwxxwx3a5n3pS99KcV6LEuWLEnxvh133DG96EUv
Sk95ylPKMvUH3/jGN9KXv/zl9Itf/CLdfffdadddd83rGu8bXN8YmRQLUse6Rc985jPTeeedly64
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
CggAlRQOCBAgQIAAAQIECBAgQIAAAQK9KSAA1Jv9qlUECBAgQIAAAQIECBAgQIAAgVJAAKikcECA
AAECBAgQIECAAAECBAgQ6E0BAaDe7FetIkCAAAECBAgQIECAAAECBAiUAgJAJYUDAgQIECBAgAAB
AgQIECBAgEBvCggA9Wa/ahUBAgQIECBAgAABAgQIECBAoBQQACopHBAgQIAAAQIECBAgQIAAAQIE
elNAAKg3+1WrCBAgQIAAAQIECBAgQIAAAQKlgABQSeGAAAECBAgQIECAAAECBAgQINCbAgJAvdmv
WkWAAAECBAgQIECAAAECBAgQKAUEgEoKBwQIECBAgAABAgQIECBAgACB3hQQAOrNftUqAgQIECBA
gAABAgQIECBAgEApIABUUjggQIAAAQIECBAgQIAAAQIECPSmgABQb/arVhEgQIAAAQIECBAgQIAA
AQIESgEBoJLCAQECBAgQIECAAAECBAgQIECgNwUEgHqzX7WKAAECBAgQIECAAAECBAgQIFAKCACV
FA4IECBAgAABAgQIECBAgAABAr0pIADUm/2qVQQIECBAgAABAgQIECBAgACBUmBqeeSAAAECBAgQ
IECAAIGmAldeeWU69thjm+YVF+fMmVMcNnyeeeaZaf/992+45oQAAQIECEy2wEAtS5P9Uu8jQIAA
AQLtCgwMDOS3+LHVrpzyBAiMh8D999+ftt5663T77be39bjp06enlStXpmnTprV1n8IECBAgQGA8
BbK/Sw+YAjaeop5FgAABAgQIECDQkwLrrbdeWrBgQdtti3sEf9pmcwMBAgQITICAANAEoHokAQIE
CBAgQIBA7wkcc8wxbTdqNPe0/RI3ECBAgACBEQiYAjYCJEUIECBAoPMCpoB1vg/UgACBlGbPnp2W
L18+IopZs2alZcuWjaisQgQIECBAYCIFTAGbSF3PJkCAAAECBAgQ6DmBdkb0tFO256A0iAABAgS6
TsAIoK7rEhUiQIAAgWYCRgA1U3GNAIHJFli1alWaOXNmWrNmzbCvnjJlSlqxYkWaMWPGsOVkEiBA
gACByRAwAmgylL2DAAECBAgQIECgZwQioDN37tyW7Ykygj8tmRQgQIAAgUkUsAj0JGJ7FQECBAgQ
IECAQPUFRjK1ayRlqi+hBQQIECBQJQFTwKrUW+pKgACBPhYwBayPO1/TCXSZwOrVq/PRPXfccUfT
mm266aYpporZ/r0pj4sECBAg0AEBU8A6gO6VBAgQIECAAAEC1RaIwM7ChQvX2ojIE/xZK48MAgQI
EOiQgClgHYL3WgIECBAgQIAAgeoKDDfFa7i86rZYzQkQIECg6gKmgFW9B9WfAAECfSJgClifdLRm
EqiQwOzZs9Py5csbajxr1qy0bNmyhmtOCBAgQIBApwVMAet0D3g/AQIECBAgQIBAZQWajfRpdq2y
DVRxAgQIEOgpASOAeqo7NYYAAQK9K2AEUO/2rZYRqKpALPQ8c+bMtGbNmrwJU6ZMSStWrLD9e1U7
VL0JECDQwwJGAPVw52oaAQIECBAgQIDAxArMmDEjzZ07t3xJHMc1iQABAgQIdKOARaC7sVfUiQAB
AgQIECBAoBIC9VO+6o8rUXmVJECAAIG+EjAFrK+6W2MJECBQXQFTwKrbd2pOoJcFVq9eXY76iSlh
tn/v5d7WNgIECFRXIKaATa1u9dWcAAECBAgQIECAQGcFIuCzcOHCvBKCP53tC28nQIAAgeEFBICG
95FLgAABAgQIECBAYFgBU7+G5ZFJgAABAl0iIADUJR2hGgQIEAiB+fPnp8suuwzGMALFVLBhisgi
QIAAgS4SmDdvXlq8eHEX1UhVCBAg0J8C1gDqz37XagIEulRAcKNLO0a1CBAgQGBMArVabUz3u5kA
AQIExiZgDaCx+bmbAAECEybgL8oTRuvBBAgQIDCJAv5hYxKxvYoAAQItBGwD3wJINgECBAgQIECA
AAECBAgQIECg6gICQFXvQfUnQIAAAQIECBAgQIAAAQIECLQQEABqASSbAAECBAgQIECAAAECBAgQ
IFB1AQGgqveg+hMgQIAAAQIECBAgQIAAAQIEWggIALUAkk2AAAECBAgQIECAAAECBAgQqLqAAFDV
e1D9CRAgQIAAAQIECBAgQIAAAQItBASAWgDJJkCAAAECBAgQIECAAAECBAhUXUAAqOo9qP4ECBAg
QIAAAQIECBAgQIAAgRYCAkAtgGQTIECAAAECBAgQIECAAAECBKouIABU9R5UfwIECBAgQIAAAQIE
CBAgQIBACwEBoBZAsgkQIECAAAECBAgQIECAAAECVRcQAKp6D6o/AQIECBAgQIAAAQIECBAgQKCF
gABQCyDZBAgQIECAAAECBAgQIECAAIGqCwgAVb0H1Z8AAQIECBAgQIAAAQIECBAg0EJAAKgFkGwC
BAgQIECAAAECBAgQIECAQNUFBICq3oPqT4AAAQIECBAgQIAAAQIECBBoISAA1AJINgECBAgQIECA
AAECBAgQIECg6gICQFXvQfUnQIAAAQIECBAgQIAAAQIECLQQEABqASSbAAECBAgQIECAAAECBAgQ
IFB1AQGgqveg+hMgQIAAAQIECBAgQIAAAQIEWggIALUAkk2AAAECBAgQIECAAAECBAgQqLqAAFDV
e1D9CRAgQIAAAQIECBAgQIAAAQItBASAWgDJJkCAAAECBAgQIECAAAECBAhUXWBq1Rug/gQIECBA
gEDvCDzwwAPpmmuuSX/5y1/SrbfemvbZZ5+09957d1UDo17XX399Xqd111037bHHHl1VP5UhQIAA
AQIECDQTEABqpuIaAQIECBAgMOkCN910UzrqqKPSkiVLyne/8Y1vHFMA6Oabb0433HBD/rwNN9ww
7brrruWzR3tw6aWXple96lX57VtuuWVatWrVaB/lPgIECBAgQIDApAmYAjZp1F5EgAABAgQIDCdw
0kknNQR/his70rzzzjsv7bvvvvnXwoULR3qbcgQIECBAgACBnhMwAqjnulSDCBAgQIBANQWuuuqq
suKPecxj0nHHHZdmz55dXnNAgAABAgQIECAwegEBoNHbuZMAAQIECBAYR4FbbrmlfNrRRx+dFixY
UJ43O7jzzjvTJpts0ixrTNfuueeeFNPFRpPuvvvu9OAHP3g0t7qHAAECBAgQIDChAqaATSivhxMg
QIAAAQKtBE4++eT0nOc8J0VAp0if+9zn8mtnnXVWcSn//OlPf5oOO+ywFGvvbLrppumhD31omjt3
bhpc7re//W1+/0UXXVTef+ONN+bXXv7yl5fXioPzzz8/HXrooWnzzTdPD3rQg/LAUkwdiylk//73
v4tiTT9rtVp629velnbcccf0kIc8JG222Wbp8MMPT9dee23T8i4SIECAAAECBDohMJD9paXWiRd7
JwECBAgMFRgYGMgv+qN5qI0rvStw8MEHpyuuuKJpA2Mk0LnnnpvnnXjiiemUU05J//nPf5qWjcDO
Rz/60bTOOuukH/zgB+mQQw5pWm7GjBlp5cqVed59992XXvjCF6aLL764adm4eMQRR6SvfOUracqU
//13s49//OPlItAR7ImA1IUXXjjk/o022igtXrw4HXDAAUPyXCDQLwJ+rvVLT2snAQLdLpD9eTxg
BFC395L6ESBAgACBHhfYb7/98iDL+uuvX7Z01qxZ+bXddtstv3b55ZenWCS6CP5MnTo1D/DEiJsi
feITn0ivf/3r89Pp06fngZmddtqpyM5H9kSwJgJORfrgBz/YEPyZNm1aetSjHlVk559f+9rXUpRr
lv7+97/nwZ8IKj3pSU9K2267bVnsrrvuykcGlRccECBAgAABAgQ6KGAEUAfxvZoAAQKDBfxL6WAR
5/0ksM0226TYCj7Shz70ofS6170uP16zZk2+ffvy5cvz87333jt9+ctfTltttVWK9XpiS/ZilFCs
vxPbssc0rkinnXZavph0HEdQadmyZXGYp7/97W9phx12SBGoifS4xz0uffe7382nccVW9M997nPT
H/7whzwvpoP95Cc/yY/rRwDFhSc+8Ylp0aJFaYMNNkirV6/OA0wxVa1IMcpovfXWK059EugrAT/X
+qq7NZYAgS4WMAKoiztH1QgQIECAAIH/FbjhhhtSEfyJK294wxvy4E8cx2LNsVtYkWIR5ggOjSTF
qKIi+BPlYwRRMaJozpw56fjjj08xAim+HnjggTy40+y5L37xi/PgT+TFCKIjjzyyodg///nPhnMn
BAgQIECAAIFOCNgFrBPq3kmAAAECBAiMWOCPf/xjQ9lY2PnSSy9tuBaBoBgNFOnqq69Oz3ve8xry
m5386U9/Ki/HlLLYer4+xfpD8TVcinWBYgRQfdp5553rT1suIt1Q2AkBAgQIECBAYIIEBIAmCNZj
CRAgQIAAgfER+POf/9zwoFiQebhUBIKGKxN59QGgmH4WQaB2U+xCFgtB16disej6a44JECBAgAAB
Ap0WaP9vOp2usfcTIECAAAECfSUQCzoXKYI0xULPxbXBn3vsscfgS03PY82eIv3jH/8oDtv6LNY3
aesmhQkQIECAAAECHRAQAOoAulcSIECAAAECIxd45CMfWRaOtXhe+9rXpoc97GHltdEexALQRbr9
9ttTfNUHm775zW+mmG4WKbaW/9SnPpV/Fvf4JECAAAECBAhUScA28FXqLXUlQIAAAQJ9KBBbuddP
z/rYxz7WoHDdddelJzzhCfnuWwdnW7x/61vfasgvTmI3rvq066671p+ms88+u+H8ve99bzrvvPPy
r6VLlwr+NOg4IUCAAAECBKomYARQ1XpMfQkQIECAQJ8JxFStE044IZ100kl5y2Nr91gX6PDDD0/X
XnttOv/889PNN9+c52288cZp9913L4Xqt1+//vrr04c//OG09dZbp2c84xnp0EMPTXvttVe65ppr
8vLveMc7UgSTYrv4L37xi+W275FZbElfPtgBAQIECBAgQKBiAgJAFesw1SVAgAABAv0oEAGgxYsX
pyVLluTNv+SSS1J81af1118/feYzn0lbbLFFeTmCPEVas2ZNHsjZcsst8wBQXD/99NPzQFKMDorp
Zeecc05RvPxcsGBBOuaYY8pzBwQIECBAgACBKgqYAlbFXlNnAgQIECDQZwLrrrtu+tGPfpROPvnk
FFu+D0677bZbimlaRx11VENWTPM69thj07Rp0xquFycHHXRQvm38LrvsUlwqP+OeE088MV144YXJ
zl4liwMCBAgQIECgogIDtSxVtO6qTYAAgZ4TKHYU8kdzz3WtBo2jwL/+9a+0fPny9Pvf/z4f7RNB
npjWNVxavXp1uu2229Jdd92VB5C23XbbhuLx/1xMEYvn3nrrremxj31sesxjHpPqp5A13OCEAIER
Cfi5NiImhQgQIDDhAiVCGLEAAEAASURBVNmfxwMCQBPO7AUECBAYuYC/KI/cSkkCBAgQ6H4BP9e6
v4/UkACB/hCI+I8pYP3R11pJgAABAgQIECBAgAABAgQI9LGAAFAfd76mEyBAgAABAgQIECBAgAAB
Av0hIADUH/2slQQIECBAgAABAgQIECBAgEAfCwgA9XHnazoBAgQIECBAgAABAgQIECDQHwICQP3R
z1pJgAABAgQIECBAgAABAgQI9LGAAFAfd76mEyBAgAABAgQIECBAgAABAv0hIADUH/2slQQIECBA
gAABAgQIECBAgEAfCwgA9XHnazoBAgQIECBAgAABAgQIECDQHwICQP3Rz1pJgAABAgQIECBAgAAB
AgQI9LGAAFAfd76mEyBAgAABAgQIECBAgAABAv0hIADUH/2slQQIECBAgAABAgQIECBAgEAfCwgA
9XHnazoBAgQIECBAgAABAgQIECDQHwICQP3Rz1pJgAABAgQIECBAgAABAgQI9LGAAFAfd76mEyBA
gAABAgQIECBAgAABAv0hIADUH/2slQQIECBAgAABAgQIECBAgEAfCwgA9XHnazoBAgQIECBAgAAB
AgQIECDQHwICQP3Rz1pJgAABAgQIECBAgAABAgQI9LGAAFAfd76mEyBAgAABAgQIECBAgAABAv0h
IADUH/2slQQIECBAgAABAgQIECBAgEAfCwgA9XHnazoBAgQIECBAgAABAgQIECDQHwICQP3Rz1pJ
gAABAgQIECBAgAABAgQI9LGAAFAfd76mEyBAgAABAgQIECBAgAABAv0hIADUH/2slQQIECBAgAAB
AgQIECBAgEAfCwgA9XHnazoBAgQIECBAgAABAgQIECDQHwICQP3Rz1pJgAABAgQIECBAgAABAgQI
9LGAAFAfd76mEyBAgAABAgQIECBAgAABAv0hMLU/mqmVBAgQqJbAwMBAtSqstgQIECBAgAABAgQI
dLWAEUBd3T0qR4BAvwnMmzev35qsvQQIECDQ4wLz58/v8RZqHgECBKohMFDLUjWqqpYECBAg0M8C
S5YsyZs/Z86cfmbQdgIEulCgGLXpr9Vd2DmqRIAAAQK5QPazasAUMN8MBAgQIFAJgXPPPTevpwBQ
JbpLJQkQIECAAAECBLpMwAigLusQ1SFAgACBoQKrV69OM2bMyDNWrVqVpk2bNrSQKwQIEOiQgBFA
HYL3WgIECBAYsUCMALIG0Ii5FCRAgACBTgksWrQo3XHHHflXHEsECBAgQIAAAQIECLQnIADUnpfS
BAgQINABgWL6V7y6/rgDVfFKAgQIECBAgAABApUUMAWskt2m0gQIEOgfgZjyNXPmzLRmzZq80VOm
TEkrVqwop4T1j4SWEiDQrQKmgHVrz6gXAQIECBQCpoAVEj4JECBAoGsFLrjggjL4E5WMQFBckwgQ
IECAAAECBAgQGLmAEUAjt1KSAAECBDogMHv27LR8+fKGN8+aNSstW7as4ZoTAgQIdErACKBOyXsv
AQIECIxUwAigkUopR4AAAQIdEViyZMmQ4E9UJAJCkScRIECAAAECBAgQIDAyAYtAj8xJKQIECBDo
gMBwCz4Pl9eBqnolAQIECBAgQIAAga4WMAWsq7tH5QgQINC/AqtXr84Xeo7t35ulTTfdNMUC0dOm
TWuW7RoBAgQmTcAUsEmj9iICBAgQGKWAKWCjhHMbAQIECEy8wKJFi9Lagj/x9siLMhIBAgQIECBA
gAABAq0FTAFrbaQEAQIECHRAYCRTvEZSpgNV90oCBAgQIECAAAECXSdgCljXdYkKESBAgEBM7Zo5
c2bD9u/NVKZMmZJWrFiRTxVrlu8aAQIEJkPAFLDJUPYOAgQIEBiLgClgY9FzLwECBAhMmMAFF1zQ
MvgTL1+zZk2KshIBAgQIECBAgAABAsMLGAE0vI9cAgQIEOiAwOzZs5tu/96sKrNmzUrLli1rluUa
AQIEJkXACKBJYfYSAgQIEBiDgBFAY8BzKwECBAhMjMCSJUtGHPyJGixfvjzFPRIBAgQIECBAgAAB
AmsXsAj02m3kECBAgEAHBEazsPNo7ulA07ySAAECBAgQIECAQMcETAHrGL0XEyBAgMBggdWrV6et
ttoq3X777YOzhj2fPn16WrlyZZo2bdqw5WQSIEBgIgRMAZsIVc8kQIAAgfEUiClgU8fzgZ5FgAAB
AgTGInD11Ven7bffPv8a/JylS5fml/bcc8/BWfl53HvAAQc0zXORAAECBAgQIECAQL8LGAHU798B
2k+AAIGKCPgX9op0lGoS6EMBfz71YadrMgECBComkP2sGrAGUMU6TXUJECBAgAABAgQIECBAgAAB
Au0KCAC1K6Y8AQIECBAgQIAAAQIECBAgQKBiAgJAFesw1SVAgAABAgQIECBAgAABAgQItCsgANSu
mPIECBAgQIAAAQIECBAgQIAAgYoJCABVrMNUlwABAgQIECBAgAABAgQIECDQroAAULtiyhMgQIAA
AQIECBAgQIAAAQIEKiYgAFSxDlNdAgQIECBAgAABAgQIECBAgEC7AgJA7YopT4AAAQIECBAgQIAA
AQIECBComIAAUMU6THUJECBAgAABAgQIECBAgAABAu0KCAC1K6Y8AQIECBAgQIAAAQIECBAgQKBi
AgJAFesw1SVAgAABAgQIECBAgAABAgQItCsgANSumPIECBAgQIAAAQIECBAgQIAAgYoJCABVrMNU
lwABAgQIECBAgAABAgQIECDQroAAULtiyhMgQIAAAQIECBAgQIAAAQIEKiYgAFSxDlNdAgQIECBA
gAABAgQIECBAgEC7AgJA7YopT4AAAQIECBAgQIAAAQIECBComIAAUMU6THUJECBAgAABAgQIECBA
gAABAu0KCAC1K6Y8AQIECBAgQIAAAQIECBAgQKBiAgJAFesw1SVAgAABAgQIECBAgAABAgQItCsg
ANSumPIECBAgQIAAAQIECBAgQIAAgYoJCABVrMNUlwABAgQIECBAgAABAgQIECDQroAAULtiyhMg
QIAAAQIECBAgQIAAAQIEKiYgAFSxDlNdAgQIECBAgAABAgQIECBAgEC7AgJA7YopT4AAAQIECBAg
QIAAAQIECBComIAAUMU6THUJECBAgAABAgQIECBAgAABAu0KCAC1K6Y8AQIECBAgQIAAAQIECBAg
QKBiAgJAFesw1SVAgAABAgQIECBAgAABAgQItCsgANSumPIECBAgQIAAAQIECBAgQIAAgYoJCABV
rMNUlwABAgQIECBAgAABAgQIECDQroAAULtiyhMgQIAAAQIECBAgQIAAAQIEKiYgAFSxDlNdAgQI
ECBAgAABAgQIECBAgEC7AgJA7YopT4AAAQIECBAgQIAAAQIECBComIAAUMU6THUJECBAgAABAgQI
ECBAgAABAu0KCAC1K6Y8AQIECBAgQIAAAQIECBAgQKBiAgJAFesw1SVAgAABAgQIECBAgAABAgQI
tCsgANSumPIECBAgQIAAAQIECBAgQIAAgYoJCABVrMNUlwABAgQIECBAgAABAgQIECDQroAAULti
yhMgQIAAAQIECBAgQIAAAQIEKiYgAFSxDlNdAgQIECBAgAABAgQIECBAgEC7AgJA7YopT4AAAQIE
CBAgQIAAAQIECBComIAAUMU6THUJECBAgAABAgQIECBAgAABAu0KCAC1K6Y8AQIECBAgQIAAAQIE
CBAgQKBiAgJAFesw1SVAgAABAgQIECBAgAABAgQItCsgANSumPIECBAgQIAAAQIECBAgQIAAgYoJ
CABVrMNUlwABAgQIECBAgAABAgQIECDQroAAULtiyhMgQIAAAQIECBAgQIAAAQIEKiYgAFSxDlNd
AgQIECBAgAABAgQIECBAgEC7AgJA7YopT4AAAQIECBAgQIAAAQIECBComIAAUMU6THUJECBAgAAB
AgQIECBAgAABAu0KCAC1K6Y8AQIECBAgQIAAAQIECBAgQKBiAgJAFesw1SVAgAABAgQIECBAgAAB
AgQItCsgANSumPIECBAgQIAAAQIECBAgQIAAgYoJCABVrMNUlwABAgQIECBAgAABAgQIECDQroAA
ULtiyhMgQIAAAQIECBAgQIAAAQIEKiYgAFSxDlNdAgQIECBAgAABAgQIECBAgEC7AgJA7YopT4AA
AQIECBAgQIAAAQIECBComIAAUMU6THUJECBAgAABAgQIECBAgAABAu0KCAC1K6Y8AQIECBAgQIAA
AQIECBAgQKBiAgJAFesw1SVAgAABAgQIECBAgAABAgQItCsgANSumPIECBAgQIAAAQIECBAgQIAA
gYoJCABVrMNUlwABAgQIECBAgAABAgQIECDQroAAULtiyhMgQIAAAQIECBAgQIAAAQIEKiYgAFSx
DlNdAgQIECBAgAABAgQIECBAgEC7AgJA7YopT4AAAQIECBAgQIAAAQIECBComIAAUMU6THUJECBA
gAABAgQIECBAgAABAu0KCAC1K6Y8AQIECBAgQIAAAQIECBAgQKBiAgJAFesw1SVAgAABAgQIECBA
gAABAgQItCswtd0blCdAgAABAgQIECDQbwJXXnllOvbYY4dt9pw5c5rmn3nmmWn//fdvmuciAQIE
CBCYLIGBWpYm62XeQ4AAAQIERiswMDCQ3+rH1mgF3UeAwFgE7r///rT11lun22+/va3HTJ8+Pa1c
uTJNmzatrfsUJkCAAAEC4ymQ/V16wBSw8RT1LAIECBAgQIAAgZ4UWG+99dKCBQvablvcI/jTNpsb
CBAgQGACBASAJgDVIwkQIECAAAECBHpP4Jhjjmm7UaO5p+2XuIEAAQIECIxAwBSwESApQoAAAQKd
FzAFrPN9oAYECKQ0e/bstHz58hFRzJo1Ky1btmxEZRUiQIAAAQITKWAK2ETqejYBAgQIECBAgEDP
CbQzoqedsj0HpUEECBAg0HUCRgB1XZeoEAECBAg0EzACqJmKawQITLbAqlWr0syZM9OaNWuGffWU
KVPSihUr0owZM4YtJ5MAAQIECEyGgBFAk6HsHQQIECBAgAABAj0jEAGduXPntmxPlBH8acmkAAEC
BAhMooBFoCcR26sIECBAgAABAgSqLzCSqV0jKVN9CS0gQIAAgSoJmAJWpd5SVwIECPSxgClgfdz5
mk6gywRWr16dj+654447mtZs0003TTFVzPbvTXlcJECAAIEOCJgC1gF0ryRAgAABAgQIEKi2QAR2
Fi5cuNZGRJ7gz1p5ZBAgQIBAhwRMAesQvNcSIECAAAECBAhUV2C4KV7D5VW3xWpOgAABAlUXMAWs
6j2o/gQIEOgTAVPA+qSjNZNAhQRmz56dli9f3lDjWbNmpWXLljVcc0KAAAECBDotYApYp3vA+wkQ
IECAAAECBCor0GykT7NrlW2gihMgQIBATwkYAdRT3akxBAgQ6F0BI4B6t2+1jEBVBWKh55kzZ6Y1
a9bkTZgyZUpasWKF7d+r2qHqTYAAgR4WMAKohztX0wgQIECAAAECBCZWYMaMGWnu3LnlS+I4rkkE
CBAgQKAbBSwC3Y29ok4ECBAgQIAAAQKVEKif8lV/XInKqyQBAgQI9JWAKWB91d0aS4AAgeoKmAJW
3b5TcwK9LLB69epy1E9MCbP9ey/3trYRIECgugIxBWxqdauv5gQIECBAgAABAgQ6KxABn4ULF+aV
EPzpbF94OwECBAgMLyAANLyPXAIECBAgQIAAAQLDCpj6NSyPTAIECBDoEgEBoC7pCNUgQIBACMyf
Pz9ddtllMIYRKKaCDVNEFgECBAh0kcC8efPS4sWLu6hGqkKAAIH+FLAGUH/2u1YTINClAoIbXdox
qkWAAAECYxKo1Wpjut/NBAgQIDA2AWsAjc3P3QQIEJgwAX9RnjBaDyZAgACBSRTwDxuTiO1VBAgQ
aCFgG/gWQLIJECBAgAABAgQIECBAgAABAlUXEACqeg+qPwECBAgQIECAAAECBAgQIECghYAAUAsg
2QQIECBAgAABAgQIECBAgACBqgsIAFW9B9WfAAECBAgQIECAAAECBAgQINBCQACoBZBsAgQIECBA
gAABAgQIECBAgEDVBQSAqt6D6k+AAAECBAgQIECAAAECBAgQaCEgANQCSDYBAgQIECBAgAABAgQI
ECBAoOoCAkBV70H1J0CAAAECBAgQIECAAAECBAi0EBAAagEkmwABAgQIECBAgAABAgQIECBQdQEB
oKr3oPoTIECAAAECBAgQIECAAAECBFoICAC1AJJNgAABAgQIECBAgAABAgQIEKi6gABQ1XtQ/QkQ
IECAAAECBAgQIECAAAECLQQEgFoAySZAgAABAgQIECBAgAABAgQIVF1AAKjqPaj+BAgQIECAAAEC
BAgQIECAAIEWAgJALYBkEyBAgAABAgQIECBAgAABAgSqLiAAVPUeVH8CBAgQIECAAAECBAgQIECA
QAsBAaAWQLIJECBAgAABAgQIECBAgAABAlUXEACqeg+qPwECBAgQIECAAAECBAgQIECghYAAUAsg
2QQIECBAgAABAgQIECBAgACBqgsIAFW9B9WfAAECBAgQIECAAAECBAgQINBCQACoBZBsAgQIECBA
gAABAgQIECBAgEDVBQSAqt6D6k+AAAECBAgQIECAAAECBAgQaCEgANQCSDYBAgQIECBAgAABAgQI
ECBAoOoCU6veAPUnQIAAAQIECLQr8Jvf/Cb9/e9/z2/bfPPN06xZs9p9xJjLr1y5MkU9Iq2zzjrp
0EMPLZ955ZVXpnvuuSc/33nnndN2221X5jkgQIAAAQIECIxGYKCWpdHc6B4CBAgQGH+BgYGB/KH+
aB5/W08kUC9wxBFHpK9//ev5paOOOip96Utfqs+elOPzzjsvHX300fm71l9//XTvvfeW733EIx6R
rr/++vz8tNNOS295y1vKPAcEqiTg51qVektdCRDoZYHsz+MBU8B6uYe1jQABAgQIECBAgAABAgQI
ECCQCQgA+TYgQIAAAQIECBAgQIAAAQIECPS4gABQj3ew5hEgQIAAgU4KrFmzJt1///1Nq7B69epy
nZumBdZyMdbGaXeaZLxrMtN//vOfhildk/lu7yJAgAABAgQINBMQAGqm4hoBAgQIECDQlsBBBx2U
9ttvv/zrd7/7XVq6dGl6+ctfnrbeeuv08Y9/vHzWfffdl4477ri06667pgc/+MFpo402yo9f/OIX
pz//+c9lucEHZ511Vop3bLnllulBD3pQijVzYnHkWBvnL3/5y+Di+XkEfd761rem3XbbLb9n5syZ
6fnPf3667bbbmpYf68W//vWvaeHChfmC0htuuGGKr8022yzNmzcvXXzxxWN9vPsJECBAgAABAmMS
sAvYmPjcTIAAAQIECITAz372s1SMsvnpT3+aXvva16Z//etfDTh/+MMf0pFHHpkiQFSfYies+IpF
mS+77LK0xx57lNkxkuYpT3lKfr28mB3Eu/74xz+m973vfSkWU7788svTox/96LLIrbfemp761Kfm
9Sou3nzzzemCCy7Ig1MRfBrP9K1vfSs961nPSnfddVfDY2+//fb0jW98I/8KlzPPPLMh3wkBAgQI
ECBAYLIEjACaLGnvIUCAAAECfSLwpje9aUjwJ5oeo3zqgz+xtfmee+5Zqtxyyy3p4IMPbhjR84Mf
/KAh+BMjap7xjGfk902Z8r9/jVm1alU65ZRTyufEwfHHH98Q/ImdiLbYYou8TNThmmuuKcu3O52s
vLHuIN5fBH/iXTEaav78+eU7o+iHP/zhFEEwiQABAgQIECDQCQEBoE6oeycBAgQIEOhhgTvuuCPt
tNNO6cQTT0yXXHJJPgUqPn/0ox+Vrf7MZz6T/vSnP6UlS5akn//852m99dbL8/75z3/mI3qKgp//
/OeLw3wk0MqVK9MXvvCF/L7nPe95ZV59QCee+9nPfrbM22effVLcFwGmeFecj2e66aab0o9//OPy
kTHSJ85jRNOVV16Z1llnnTKvvp7lRQcECBAgQIAAgUkQMAVsEpC9ggABAgQI9JPAtttumwdANt98
87LZ73nPe8rjmKp1zDHHlOe77757evrTn54uvPDC/FpM6XrHO96RHx9xxBHp8Y9/fH687777pnXX
XTc//ve//90wUiimfBXpq1/9anrggQeK0/T+978/XzsoLsS7YhrYrFmz1ro4dXnjCA9imloRcIp1
f/bee+/yzuuuuy7FQthFqq9ncc0nAQIECBAgQGAyBASAJkPZOwgQIECAQB8JHHLIIak++BNNj/V6
ihTBm1gvpz7VL+QcI3hi7Zzp06enCABFipE7ixYtSr/61a/ykUO/+MUv1rqD2PXXX18+OgIyj3vc
48rzONhhhx3yAFA8czxSBLxicekYvbR48eL05je/OV177bVp+fLlwy5sPR7v9gwCBAgQIECAwEgF
BIBGKqUcAQIECBAgMCKBGF0zONXv8BXBoPqA0OCycR5bvUcAKD5j4ejvfOc7Q4rFbmCDF5qOQvUB
oDlz5pSjhuofsOOOO+ZBpfprYzn+8pe/nF7wgheku+++u+Ex06ZNy0cA1Y9IaijghAABAgQIECAw
SQICQJME7TUECBAgQKBfBCJwMzjFtVisOVJs5z54VM7g8htssEF+KRZ8LoI/U6dOzReJPuyww1JM
B4udw17xilfk5WLh5SIV6wnFef3IoiI/PmOU0XilWOfn2c9+doqRTZG22WabfL2i/fffPz3hCU/I
dzWLHcgi1dczv+A/BAgQIECAAIFJEhAAmiRoryFAgAABAv0s8MhHPjL99re/zQli9E1s394qxWLS
3/zmN8tixx13XDr55JPL89ghrFnaeeedy8s33HBDHgSKHceK9Pe//z3FFLLxSl/84hfL4M8mm2yS
fvnLX+ajl+L5sT5QTGeTCBAgQIAAAQKdFrALWKd7wPsJECBAgEAfCMTCz0WKtXxi56z69Pa3vz0f
3RPbwC9YsCDPikBK/RbtCxcuLG+J69/97ncbzouTPfbYozjMPy+++OKG81gEun5h5obMUZzUryUU
o5PqR0DFzmf33Xdf+dT69pQXHRAgQIAAAQIEJkHACKBJQPYKAgQIECDQ7wKve93r0ic/+cl02223
5V8HHnhgeu5zn5u23377FCNoLrvsspIoRvpEmjlzZnktDs4444wUgaJly5blu27VjwCKkTZFih3F
Zs+enZeLa8cff3z69a9/nR772MfmnxdddFFRdFw+6+v5jW98I11xxRV53WM3sg984AMN76ivZ0OG
EwIECBAgQIDABAsIAE0wsMcTIECAAAECKd8V7BOf+ER65jOfmY++iYWaTznllCE0sT7QO9/5zvx6
TBXbc88909KlS/PzT3/60ym+ihSLTcdOW5HuvffefMHo2PVrypQp6SMf+UiaO3duPvomRt1E0KcI
/DzkIQ9Ju+22W4rROeORYv2f4tl33XVXPpKpeG5MCdt6661TsQZQTD+TCBAgQIAAAQKdEDAFrBPq
3kmAAAECBPpQ4GlPe1q66qqr0j777DOk9euuu25617velS6//PJULOIcgZyYvhU7edWnmGJ16qmn
Nowaiildp59+elksppLF4syxRXt9intjlE4Eloo01oWZn/rUp6bTTjstrb/++sUj8yDUfvvtl665
5pp0+OGHl9fPOeecdOutt5bnDggQIECAAAECkyUwkP2rWG2yXuY9BAgQIDC8QPGLqD+ah3eSW32B
2J0rpnLdeeedKUby7LLLLg0BlPoWxv8PS5YsSdddd11ebtddd80DLPVl1nYcgaHf/e53+btiHaJ4
VwSWJiLdcsst+Wil2A3s8Y9/fMNaQBPxPs8kUAUBP9eq0EvqSIBAPwhkfx4PCAD1Q09rIwEClRHw
F+XKdJWK9qDAr371q7ZbFSOMYpqXRIBAcwE/15q7uEqAAIHJFoj4jwDQZKt7HwECBIYR8BflYXBk
EZhggeL/v3ZeE2v/POc5z2nnFmUJ9JVA8f+Vka191e0aS4BAFwpkfx4PWAS6CztGlQgQIECAAIHJ
F/AL6uSbeyMBAgQIECAweQITMwl+8urvTQQIECBAgAABAgQIECBAgAABAi0EBIBaAMkmQIAAAQIE
CBAgQIAAAQIECFRdQACo6j2o/gQIECBAgAABAgQIECBAgACBFgICQC2AZBMgQIAAAQIECBAgQIAA
AQIEqi4gAFT1HlR/AgQIECBAgAABAgQIECBAgEALAQGgFkCyCRAgQIAAAQIECBAgQIAAAQJVFxAA
qnoPqj8BAgQIECBAgAABAgQIECBAoIWAAFALINkECBAgQIAAAQIECBAgQIAAgaoLCABVvQfVnwAB
AgQIECBAgAABAgQIECDQQkAAqAWQbAIECBAgQIAAAQIECBAgQIBA1QUEgKreg+pPgAABAgQIECBA
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
AgQIEEhMQAIosQ4TLgECBAgQIECAAAECBAgQIECgWgEJoGrFtCdAgAABAgQIECBAgAABAgQIJCYg
AZRYhwmXAAECBAgQIECAAAECBAgQIFCtgARQtWLaEyBAgAABAgQIECBAgAABAgQSE5AASqzDhEuA
AAECBAgQIECAAAECBAgQqFZAAqhaMe0JECBAgAABAgQIECBAgAABAokJSAAl1mHCJUCAAAECBAgQ
IECAAAECBAhUKyABVK2Y9gQIECBAgAABAgQIECBAgACBxAQGJxavcAkQIECAQE0KtLa2hh07doS3
ve1t4YADDtjjGDdt2hSefPLJcMghh4Rjjz224uvE+2/ZsiW0tLSEQw89tKLzdu7cGf7617+GRx99
NLvfhRdeWNF5GhEgQIAAAQIECKQnYARQen0mYgIECBCoQYHTTz89TJo0Kaxbt26vorvzzjuz61xx
xRVVXeeqq64KZ5xxRli1alVF58Xkz/ve974wderU8LGPfSwsWLCgovM0IkCAAAECBAgQSFPACKA0
+03UBAgQIEBgrwTa2trCn//859DQ0BDe//73h/PPP3+vrudkAgQIECBAgACB2haQAKrt/hEdAQIE
CCQisHLlytDZ2RmOPvroJCKO8cZy0kknhSVLliQRsyAJECBAgAABAgT2XEACaM/tnEmAAAECBIoC
xx13XHE7hY1t27ZlYVa6XlAKzyRGAgQIECBAgACBvgUkgPq2UUOAAAECORSIizB/4xvfyJ78M5/5
TDjyyCN3U3juuefCt7/97ez4nDlzsgWU4zkdHR3hox/9aBg9enS3c5566qlw2223ZevzvPjii2Hy
5MlhypQp2Ro8cQpWNeV3v/tdWL58eYhTuOKC03Htofe+970VXyI+38033xwKI4BibNdff31405ve
FGbNmlXxdTQkQIAAAQIECBBIS6Bh1yKQO9MKWbQECBAgkEeBQqJkX//aitc/6qijwtNPPx1uuOGG
8OUvf3k37rlz54arr746jB8/PjzyyCNZ/UEHHRRefvnlsHr16jBx4sTiObfffnu47LLLwr/+9a/i
scLGhz70ofDjH/84DBs2rHAo/OAHPwiXX355mDZtWli6dGnxeHzD2Cc/+clwyy23FI8VNmbMmBGe
eeaZcN9994W77rqrZEKovb09NDc3F04tfp5yyilhxYoVxX0bBAhULtBfP58qj0hLAgQIECDQXWDX
76oGbwHrbmKPAAECBHIuEP8iN3PmzEzh17/+da8aMakTyyWXXNJrfeHgPffcE+Kr1V955ZVw3XXX
hSeeeCJs3Lgx/Pa3vw1HHHFEWLRoUbYAc6F9qc8vfelLWfJn6NChYd68eVni6aGHHgpf+MIXstFF
MflTSYlrFMXRQ7Nnz86axzeBxf2f/exnlZyuDQECBAgQIECAQKICpoAl2nHCJkCAAIF9J3DxxReH
r33tayEmWB5//PFuCzvHkUGtra3Z27PiyJu+ShyxE5MzscyfPz/E6WSFcs4552SjhOJInGXLloWH
H344HH/88YXq3T5feOGFbNpWrIhJqfjWrkK56aabwoEHHphN44rHyo2QigmkpqamMGbMmOwSb3jD
G7L9wvV8EiBAgAABAgQI1KeAEUD12a+eigABAgT2QuCtb31raGlpya7QcxRQYf/UU0/NRvH0dZuY
2FmzZk0YNWpU+NSnPrVbszgCKK7fE0u50Tc//OEPw3/+85/wjne8o1vyp3DRL37xi1kSqLDvkwAB
AgQIECBAgEBPASOAeorYJ0CAAAECuwTiKKBVq1ZlI26uueaaoklh+lesL1XWrl2bVceRNnfffXev
TQ877LDseEwUlSpx3Z5YTjvttF6bxVE8cWpXHEmkECBAgAABAgQIEOhNQAKoNxXHCBAgQCD3Ah/+
8IfDlVdemSWB4puyxo4dmy20/MADD4QhQ4aECy64oKTRo48+mtXHRaHjOjulSm8LRHdtH9cOiuXN
b35z18Pdtg8//HAJoG4idggQIECAAAECBLoKSAB11bBNgAABAgT+XyC+yv3d73539latOO3rqquu
ykYDxerp06eH4cOHl7R63etel9XHtX3i27tKlZEjR5aqDoMG/XfG9vbt2/tst3Xr1j7rVBAgQIAA
AQIECBCQAPIdIECAAAECfQjEaV7xteqFBFCl07/i5caNG5dddf369dlr4AtJnD5uVfLwMccck73i
PY5E6qs8++yzfVU5ToAAAQIECBAgQCBYBNqXgAABAgQI9CFw3nnnZYsrx2lfK1asCPEzjvzp+hau
Pk4N8Q1fsbz44oth5cqVvTaL08wOOeSQsGDBgl7rCwcL11q8eHF49dVXC4eLn/fff3+IbydTCBAg
QIAAAQIECPQlIAHUl4zjBAgQIJB7gfh69XPPPTdzuPTSS7NXrMekTXyVerkS3/AV3xQWy/e+970Q
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
q692GykUp3wVyp133hlee+21wm6YN29etnZQPBDvdeutt4ampqY+F6cunmiDAAECBAgQIDCAAhJA
A4jv1gQIECBAgEB5gdNPP71b8iee8dhjjxVPjMmbCy+8sLgfN57uspBzHMGzZcuWMGLEiBATQLHE
kTtLliwJDz/8cDZyaPXq1X2+Qeypp57Kzon/c8ABB4STTz65uB833vKWt2QJoHhNhQABAgQIECBQ
qwISQLXaM+IiQIAAAQIEMoE4uqZn6fqGr5gM6poQ6tk27sdXvccEUPyMC0fffffduzWLbwMrLDTd
tbJrAujEE08sjhrq2uboo4/Okkpdj9kmQIAAAQIECNSSgARQLfWGWAgQIECAAIHdBGLipmeJx+Ji
zbHE17n3HJXTs/3++++fHYoLPheSP4MHD84WiT7jjDNCnA62Zs2a8IlPfCJrV3hzUdwprCcUt7uO
LIr7hRJHGSkECBAgQIAAgVoWkACq5d4RGwECBAgQINCrwLHHHhseeeSRrC6Ovpk7d26v7boejItJ
/+lPfyoemj17dvjqV79a3I9vCOutjBs3rnj42WefzZJA8Y1jhbJ58+YQp5ApBAgQIECAAIFaFvAW
sFruHbERIECAAAECvQrEhZ8LJa7l89xzzxV2s885c+Zko3via+Avuuii7NhDDz3U7RXtM2bMKJ4T
X91+zz33dNsv7JxwwgmFzezzl7/8Zbf9uAh0Z2dnt2N2CBAgQIAAAQK1JmAEUK31iHgIECBAgACB
sgKf+9znwi233BI2bdqU/XnXu94VZs6cGcaOHRvuuOOOsHTp0uI14kifWBobG4vH4sZNN90UYqKo
ra0te8171xFAO3bsKLaNbxRrbm7O2sWD1157bfjHP/4Rjj/++OzzF7/4RbGtDQIECBAgQIBArQo0
7PoXr521Gpy4CBAgkDeBwrojfjTnrec9b0+BuO5OR0dHdnjhwoXh0ksv7dkkLF68OFxwwQUlR9/E
9YHuuuuubB2fOEonrhW0atWq3a4VD8TFptvb27O6QYMGha1bt2Zv/YoHYnJo2rRpYdu2bVl91/85
6KCDwsSJE8Py5cuzw3GR6d/85jddm9gmkFsBv9dy2/UenACBGhPY9fO4wRSwGusU4RAgQIAAAQKV
CXzgAx8IK1euDJMmTdrthP322y9cf/31YdmyZcVFnGNSJ07fim/y6lrigtJf//rXu40aismib33r
W8VmcSrZihUrwhFHHFE8FjfiuX/84x9DS0tL8XjhL7zFAzYIECBAgAABAjUgYARQDXSCEAgQIFAQ
KPzF0QiggohPApUJxLdzxalc//znP7ORPOPHjw/Dhg3r9eT4/6/W1tbw+OOPh9huwoQJISaHKikx
MbR27drsXnEdojhqqNJzK7m+NgTqTcDvtXrrUc9DgECqArt+HjdIAKXae+ImQKAuBfyHcl12q4ci
QIBAbgX8Xstt13twAgRqTCDmfyr7564aC1w4BAgQIECAAAECBAgQIECAAAEClQtIAFVupSUBAgQI
ECBAgAABAgQIECBAIEkBCaAku03QBAgQIECAAAECBAgQIECAAIHKBSSAKrfSkgABAgQIECBAgAAB
AgQIECCQpIAEUJLdJmgCBAgQIECAAAECBAgQIECAQOUCEkCVW2lJgAABAgQIECBAgAABAgQIEEhS
QAIoyW4TNAECBAgQIECAAAECBAgQIECgcgEJoMqttCRAgAABAgQIECBAgAABAgQIJCmKWoRqAAAF
i0lEQVQgAZRktwmaAAECBAgQIECAAAECBAgQIFC5gARQ5VZaEiBAgAABAgQIECBAgAABAgSSFJAA
SrLbBE2AAAECBAgQIECAAAECBAgQqFxAAqhyKy0JECBAgAABAgQIECBAgAABAkkKSAAl2W2CJkCA
AAECBAgQIECAAAECBAhULiABVLmVlgQIECBAgAABAgQIECBAgACBJAUkgJLsNkETIECAAAECBAgQ
IECAAAECBCoXkACq3EpLAgQIECBAgAABAgQIECBAgECSAhJASXaboAkQIECAAAECBAgQIECAAAEC
lQtIAFVupSUBAgQIECBAgAABAgQIECBAIEkBCaAku03QBAgQIECAAAECBAgQIECAAIHKBSSAKrfS
kgABAgQIECBAgAABAgQIECCQpIAEUJLdJmgCBAgQIECAAAECBAgQIECAQOUCEkCVW2lJgAABAgQI
ECBAgAABAgQIEEhSQAIoyW4TNAECBAgQIECAAAECBAgQIECgcgEJoMqttCRAgAABAgQIECBAgAAB
AgQIJCkgAZRktwmaAAECBAgQIECAAAECBAgQIFC5gARQ5VZaEiBAgAABAgQIECBAgAABAgSSFBic
ZNSCJkCAQJ0LNDQ01PkTejwCBAgQIECAAAECBPpTwAig/tR2LwIECJQRmD59epkWqgkQIECAQFoC
Z555ZloBi5YAAQJ1KtCwc1ep02fzWAQIECBAgAABAgQIECBAgACB3AvsmmHQYARQ7r8GAAgQIECA
AAECBAgQIECAAIF6F5AAqvce9nwECBAgQIAAAQIECBAgQIBA7gUkgHL/FQBAgAABAgQIECBAgAAB
AgQI1LuABFC997DnI0CAAAECBAgQIECAAAECBHIvIAGU+68AAAIECBAgQIAAAQIECBAgQKDeBSSA
6r2HPR8BAgQIECBAgAABAgQIECCQewEJoNx/BQAQIECAAAECBAgQIECAAAEC9S4gAVTvPez5CBAg
QIAAAQIECBAgQIAAgdwLSADl/isAgAABAgQIECBAgAABAgQIEKh3AQmgeu9hz0eAAAECBAgQIECA
AAECBAjkXkACKPdfAQAECBAgQIAAAQIECBAgQIBAvQtIANV7D3s+AgQIECBAgAABAgQIECBAIPcC
EkC5/woAIECAAAECBAgQIECAAAECBOpdQAKo3nvY8xEgQIAAAQIECBAgQIAAAQK5F5AAyv1XAAAB
AgQIECBAgAABAgQIECBQ7wISQPXew56PAAECBAgQIECAAAECBAgQyL2ABFDuvwIACBAgQIAAAQIE
CBAgQIAAgXoXkACq9x72fAQIECBAgAABAgQIECBAgEDuBSSAcv8VAECAAAECBAgQIECAAAECBAjU
u4AEUL33sOcjQIAAAQIECBAgQIAAAQIEci8gAZT7rwAAAgQIECBAgAABAgQIECBAoN4FJIDqvYc9
HwECBAgQIECAAAECBAgQIJB7AQmg3H8FABAgQIAAAQIECBAgQIAAAQL1LiABVO897PkIECBAgAAB
AgQIECBAgACB3AtIAOX+KwCAAAECBAgQIECAAAECBAgQqHcBCaB672HPR4AAAQIECBAgQIAAAQIE
COReQAIo918BAAQIECBAgAABAgQIECBAgEC9C0gA1XsPez4CBAgQIECAAAECBAgQIEAg9wISQLn/
CgAgQIAAAQIECBAgQIAAAQIE6l1AAqjee9jzESBAgAABAgQIECBAgAABArkXkADK/VcAAAECBAgQ
IECAAAECBAgQIFDvAhJA9d7Dno8AAQIECBAgQIAAAQIECBDIvYAEUO6/AgAIECBAgAABAgQIECBA
gACBeheQAKr3HvZ8BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC9S3wf2FySHtS
OCLHAAAAAElFTkSuQmCC
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/crawler-images/redirects.png

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
REPEu0iPyNLIR4uNFksWd0bJR8VF1UdNRXtFl0VLl1gsWbPkRoxajCCmPRYfGxV7JHZyqffS3UuH
4+ziCuPuLjNclrPs2nK15anLz66QX8FZcSoeGx8d3xD/iRPCqeVMrvRfuXflBNeTu4f7kufGK+eN
8V34ZfyRBJeEsoTRRJfEXYljSa5JFUnjAk9BteB1sl/ygeSplJCUoykzqdGpzWmEtPi000IlYYqw
K10zPSe9L8M0ozBDuspp1e5VE6JA0ZFMKHNZZruYjv5M9UiMJJslg1kLs2qy3mdHZZ/KUcwR5vTk
muRuyx3J88n7fjVmNXd1Z752/ob8wTXuaw6thdauXNu5Tnddwbrh9b7rj20gbUjZ8MtGy41lG99u
it7UUaBRsL5gaLPv5sZCuUJR4b0tzlsObMVsFWzt3WazrWrblyJe0fViy+KK4k8l3JLr31l9V/nd
zPaE7b2l9qX7d+B2CHfc3em681iZYlle2dCu4F2t5czyovK3u1fsvlZhW3FgD2mPZI+0MqiyvUqv
akfVp+qk6oEaj5rmvep7t+2d2sfb17/fbX/TAY0DxQc+HhQcvH/I91BrrUFtxWHc4azDz+ui6rq/
Z39ff0TtSPGRz0eFR6XHwo911TvU1zeoN5Q2wo2SxrHjccdv/eD1Q3sTq+lQM6O5+AQ4ITnx4sf4
H++eDDzZeYp9qukn/Z/2ttBailqh1tzWibakNml7THvf6YDTnR3OHS0/m/989Iz2mZqzymdLz5HO
FZybOZ93fvJCxoXxi4kXhzpXdD66tOTSna6wrt7LgZevXvG5cqnbvfv8VZerZ645XTt9nX297Yb9
jdYeu56WX+x+aem172296XCz/ZbjrY6+BX3n+l37L972un3ljv+dGwOLBvruLr57/17cPel93v3R
B6kPXj/Mejj9aP1j7OOiJwpPKp6qP6391fjXZqm99Oyg12DPs4hnj4a4Qy//lfmvT8MFz6nPK0a0
RupHrUfPjPmM3Xqx9MXwy4yX0+OFvyn+tveV0auffnf7vWdiycTwa9HrmT9K3qi+OfrW9m3nZOjk
03dp76anit6rvj/2gf2h+2P0x5Hp7E/4T5WfjT93fAn88ngmbWbm3/eE8/syOll+AAAACXBIWXMA
AAsTAAALEwEAmpwYAAAB1WlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxu
czp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJE
RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMi
PgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp0
aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx0aWZmOkNvbXBy
ZXNzaW9uPjU8L3RpZmY6Q29tcHJlc3Npb24+CiAgICAgICAgIDx0aWZmOlBob3RvbWV0cmljSW50
ZXJwcmV0YXRpb24+MjwvdGlmZjpQaG90b21ldHJpY0ludGVycHJldGF0aW9uPgogICAgICAgICA8
dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlw
dGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KsOMy3QAAQABJREFUeAHs3QeYVEXa9vEi
SVbJSBIEAQUUVEBERAGRjCBiwoCY45pW9NvV1XWNa1h1dV0jKEFBDAQJKoqiIiJIEBEEAypBkmQF
z1d3ve+pt2eme6aHSd1n/nVds336hDpVvzP02s9UPVUisMVQEEAAAQQQQAABBBBAAAEEEEAAAQQi
KVDClpKR7BmdQgABBBBAAAEEEEAAAQQQQAABBBDwAgSAPAUbCCCAAAIIIIAAAggggAACCCCAQDQF
CABF87nSKwQQQAABBBBAAAEEEEAAAQQQQMALEADyFGwggAACCCCAAAIIIIAAAggggAAC0RQgABTN
50qvEEAAAQQQQAABBBBAAAEEEEAAAS9AAMhTsIEAAggggAACCCCAAAIIIIAAAghEU4AAUDSfK71C
AAEEEEAAAQQQQAABBBBAAAEEvAABIE/BBgIIIIAAAggggAACCCCAAAIIIBBNAQJA0Xyu9AoBBBBA
AAEEEEAAAQQQQAABBBDwAgSAPAUbCCCAAAIIIIAAAggggAACCCCAQDQFCABF87nSKwQQQAABBBBA
AAEEEEAAAQQQQMALEADyFGwggAACCCCAAAIIIIAAAggggAAC0RQgABTN50qvEEAAAQQQQAABBBBA
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
jygH0BNPPOHfly5d2hxzzDGmTZs22QaTNOrgxRdfNF9++aWbKla3bl13zbnnnmtq1arl60u08dtv
v5k333zTTJ8+3SgfUZkyZUyjRo3cqKNu3bple+9EdbJ/3wV27tzpnoGefzJFo8WWLVtmateubfS7
l9uikStK+tygQQOXeDy31xf0+ZpaVbly5aRuk1eL8CYafbd27VrTtGnTpO8dXssrAggggAACCCCA
AAL7JGBXBqIggEAaCJx33nmB/Ufufh544IFsW/zoo4/6c8NrsnsdOXJk3Po2b94cnH322YGdohO3
PhvICW644YbATkmJe712Tpw4MbCBg7jXq012OlpgVyZLeD0HcifwxhtvBHakjHOVrZ025SuYMmVK
cMoppwTlypULbOAuuO666wIb/PDHM2/o98KOEnPP364Q516rVasWDBs2LLBBncynZ3m/ePHioGfP
nu46m+Q5KFWqlGvbLbfcEtigYGADi+73ItHvjw0aBUcddZTvi/qjH5s8Osu9Eu3o0aNHhut1XxX9
but3t3HjxkHJkiWDk046KZg6dWqiaoK8WqjiDRs2BBdccEFQpUoVd0+Z6t+ADYYGzz33XGCDvMHl
l1+epQ0yVL9t/h93vl01LUOfQhf1wQZ/s1zPDgQQQAABBBBAAAEE7H93muT+/KszKQggUGQCP/zw
gxkzZoy7/wEHHGAuueSSbNtiv2hnezzzQfsFOPMuY7+smvbt27ucI1kO/u+O33//3Tz44IPmo48+
ciONMq/k9PDDD5vrr78+0eVu/1dffWU6duxoxo4da0477bRsz+VgzgLHH3+8ueuuu4xGgT3++ONu
xJae0zXXXGNsEMO93nvvvW4EkA1GGBsEMU899VSGirUql1bp+uKLL8ydd95pevXqZQ466CCXN0qj
yu644w6j6Vjjx483WokuXtFz1XTDPn36uATkhx9+uMtdo5FpWs5d9dx///3xLvX7lLNKfdGIJRXl
qrryyiv98WQ2brvtNvPzzz+b9evXm8suu8y5fPzxx2bw4MFuRJL60rVrV/fv69RTTzXLly839erV
81Xnh4UqU/4uJWPXiDcbaHJ+NgBkNDrKBuacsw1KGf37zlz++te/ZujD7bffHnfVtJo1azKaLjMe
7xFAAAEEEEAAAQT+T4A4GAIIpL7An/70Jz+Cxn55zrHBGgVgl8x2owo0gsf+i3c/Gn3wzDPP+J/n
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
d+7cGRsbG2N7+FPXnT59erx582ZcuXJl523z89mzZ394BOzEiRPj/v37M/ypix48eLCnLetrBVA9
pib8+Sm1LwkQIECAAAECBAgQIBARsAIowqgIgZzAu3fvFoHMmTNn5uNau+3ktduvf//+fbx//358
+vRprrapsKhe7nz06NHdbp2rjz58+DAfFzt16tSo8Gc/K412/SEXECBAgAABAgQIECBAgMCBCNQK
IAHQgdAqSmD/Auvr6+Pp06ezQP1dK2kcBAgQIECAAAECBAgQIEBgvwKV/9gGfr967iNwQALLy8uL
VTp37949oF9RlgABAgQIECBAgAABAgT+JAErgP6kafu3/jYCX758GfX+nsOHD/82PWuUAAECBAgQ
IECAAAECBHoK1AogAVDP2eiKAAECBAgQIECAAAECBAgQIBARqPzHLmARSkUIECBAgAABAgQIECBA
gAABAn0FBEB9Z6MzAgQIECBAgAABAgQIECBAgEBEQAAUYVSEAAECBAgQIECAAAECBAgQINBXQADU
dzY6I0CAAAECBAgQIECAAAECBAhEBARAEUZFCBAgQIAAAQIECBAgQIAAAQJ9BQRAfWejMwIECBAg
QIAAAQIECBAgQIBAREAAFGFUhAABAgQIECBAgAABAgQIECDQV0AA1Hc2OiNAgAABAgQIECBAgAAB
AgQIRAQEQBFGRQgQIECAAAECBAgQIECAAAECfQUEQH1nozMCBAgQIECAAAECBAgQIECAQERAABRh
VIQAAQIECBAgQIAAAQIECBAg0FdAANR3NjojQIAAAQIECBAgQIAAAQIECEQEBEARRkUIECBAgAAB
AgQIECBAgAABAn0FBEB9Z6MzAgQIECBAgAABAgQIECBAgEBEQAAUYVSEAAECBAgQIECAAAECBAgQ
INBXQADUdzY6I0CAAAECBAgQIECAAAECBAhEBARAEUZFCBAgQIAAAQIECBAgQIAAAQJ9BQRAfWej
MwIECBAgQIAAAQIECBAgQIBAREAAFGFUhAABAgQIECBAgAABAgQIECDQV0AA1Hc2OiNAgAABAgQI
ECBAgAABAgQIRAQEQBFGRQgQIECAAAECBAgQIECAAAECfQUEQH1nozMCBAgQIECAAAECBAgQIECA
QERAABRhVIQAAQIECBAgQIAAAQIECBAg0FdAANR3NjojQIAAAQIECBAgQIAAAQIECEQEBEARRkUI
ECBAgAABAgQIECBAgAABAn0FBEB9Z6MzAgQIECBAgAABAgQIECBAgEBEQAAUYVSEAAECBAgQIECA
AAECBAgQINBXQADUdzY6I0CAAAECBAgQIECAAAECBAhEBARAEUZFCBAgQIAAAQIECBAgQIAAAQJ9
BQRAfWejMwIECBAgQIAAAQIECBAgQIBAREAAFGFUhAABAgQIECBAgAABAgQIECDQV0AA1Hc2OiNA
gAABAgQIECBAgAABAgQIRAQEQBFGRQgQIECAAAECBAgQIECAAAECfQUEQH1nozMCBAgQIECAAAEC
BAgQIECAQERAABRhVIQAAQIECBAgQIAAAQIECBAg0FdAANR3NjojQIAAAQIECBAgQIAAAQIECEQE
BEARRkUIECBAgAABAgQIECBAgAABAn0FBEB9Z6MzAgQIECBAgAABAgQIECBAgEBEQAAUYVSEAAEC
BAgQIECAAAECBAgQINBXQADUdzY6I0CAAAECBAgQIECAAAECBAhEBARAEUZFCBAgQIAAAQIECBAg
QIAAAQJ9BQRAfWejMwIECBAgQIAAAQIECBAgQIBAREAAFGFUhAABAgQIECBAgAABAgQIECDQV0AA
1Hc2OiNAgAABAgQIECBAgAABAgQIRAQEQBFGRQgQIECAAAECBAgQIECAAAECfQUEQH1nozMCBAgQ
IECAAAECBAgQIECAQERAABRhVIQAAQIECBAgQIAAAQIECBAg0FdAANR3NjojQIAAAQIECBAgQIAA
AQIECEQEBEARRkUIECBAgAABAgQIECBAgAABAn0FBEB9Z6MzAgQIECBAgAABAgQIECBAgEBEQAAU
YVSEAAECBAgQIECAAAECBAgQINBXQADUdzY6I0CAAAECBAgQIECAAAECBAhEBARAEUZFCBAgQIAA
AQIECBAgQIAAAQJ9BQRAfWejMwIECBAgQIAAAQIECBAgQIBAREAAFGFUhAABAgQIECBAgAABAgQI
ECDQV0AA1Hc2OiNAgAABAgQIECBAgAABAgQIRAQEQBFGRQgQIECAAAECBAgQIECAAAECfQUEQH1n
ozMCBAgQIECAAAECBAgQIECAQERAABRhVIQAAQIECBAgQIAAAQIECBAg0FdAANR3NjojQIAAAQIE
CBAgQIAAAQIECEQEBEARRkUIECBAgAABAgQIECBAgAABAn0FBEB9Z6MzAgQIECBAgAABAgQIECBA
gEBEQAAUYVSEAAECBAgQIECAAAECBAgQINBXQADUdzY6I0CAAAECBAgQIECAAAECBAhEBARAEUZF
CBAgQIAAAQIECBAgQIAAAQJ9BQRAfWejMwIECBAgQIAAAQIECBAgQIBAREAAFGFUhAABAgQIECBA
gAABAgQIECDQV0AA1Hc2OiNAgAABAgQIECBAgAABAgQIRAQEQBFGRQgQIECAAAECBAgQIECAAAEC
fQUEQH1nozMCBAgQIECAAAECBAgQIECAQERAABRhVIQAAQIECBAgQIAAAQIECBAg0FdAANR3Njoj
QIAAAQIECBAgQIAAAQIECEQEBEARRkUIECBAgAABAgQIECBAgAABAn0FBEB9Z6MzAgQIECBAgAAB
AgQIECBAgEBEQAAUYVSEAAECBAgQIECAAAECBAgQINBXQADUdzY6I0CAAAECBAgQIECAAAECBAhE
BARAEUZFCBAgQIAAAQIECBAgQIAAAQJ9BQRAfWejMwIECBAgQIAAAQIECBAgQIBAREAAFGFUhAAB
AgQIECBAgAABAgQIECDQV0AA1Hc2OiNAgAABAgQIECBAgAABAgQIRAQEQBFGRQgQIECAAAECBAgQ
IECAAAECfQUEQH1nozMCBAgQIECAAAECBAgQIECAQERAABRhVIQAAQIECBAgQIAAAQIECBAg0FdA
ANR3NjojQIAAAQIECBAgQIAAAQIECEQEBEARRkUIECBAgAABAgQIECBAgAABAn0FBEB9Z6MzAgQI
ECBAgAABAgQIECBAgEBEQAAUYVSEAAECBAgQIECAAAECBAgQINBXQADUdzY6I0CAAAECBAgQIECA
AAECBAhEBARAEUZFCBAgQIAAAQIECBAgQIAAAQJ9BQRAfWejMwIECBAgQIAAAQIECBAgQIBAREAA
FGFUhAABAgQIECBAgAABAgQIECDQV0AA1Hc2OiNAgAABAgQIECBAgAABAgQIRAQEQBFGRQgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAj8TwJ/A8KAHRxN2fckAAAAAElFTkSuQmCC
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z----
Content-Type: text/html
Content-ID: <frame-88-8c12fb24-2bd9-4271-8b00-8d414b9e34a5@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--G4ISYBDorEimBcvO4vLyqZQcS5OXUkWL0yMRSOYJ1Z------
