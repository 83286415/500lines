From: <Saved by Blink>
Subject: 500 Lines or Less | A Template Engine
Date: Tue, 11 Feb 2019 01:57:20 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK----"

------MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK----
Content-Type: text/html
Content-ID: <frame-60-53a30285-cdab-4efd-9d67-67a8c31c16ba@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/a-template-engine.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | A Template Engine</title>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div id=3D"MathJax_Message" style=3D"display: none;"></div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>A Template Engine</h1>
          <h2 class=3D"author">Ned Batchelder</h2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em>Ned Batchelder is a software engineer with a long career, =
currently working at edX to build open source software to educate the world=
. He's the maintainer of coverage.py, an organizer of Boston Python, and ha=
s spoken at many PyCons. He blogs at <a href=3D"http://nedbatchelder.com/">=
http://nedbatchelder.com</a>. He once had dinner at the White House.</em></=
p>

<h2 id=3D"introduction">Introduction</h2>

<p>Most programs contain a lot of logic, and a little bit of literal textua=
l data. Programming languages are designed to be good for this sort of prog=
ramming. But some programming tasks involve only a little bit of logic, and=
 a great deal of textual data. For these tasks, we'd like to have a tool be=
tter suited to these text-heavy problems. A template engine is such a tool.=
 In this chapter, we build a simple template engine.</p>

<p>The most common example of one of these text-heavy tasks is in web appli=
cations. An important phase in any web application is generating HTML to be=
 served to the browser. Very few HTML pages are completely static: they inv=
olve at least a small amount of dynamic data, such as the user's name. Usua=
lly, they contain a great deal of dynamic data: product listings, friends' =
news updates, and so on.</p>

<p>At the same time, every HTML page contains large swaths of static text. =
And these pages are large, containing tens of thousands of bytes of text. T=
he web application developer has a problem to solve: how best to generate a=
 large string containing a mix of static and dynamic data? To add to the pr=
oblem, the static text is actually HTML markup that is authored by another =
member of the team, the front-end designer, who wants to be able to work wi=
th it in familiar ways.</p>

<p>For purposes of illustration, let's imagine we want to produce this toy =
HTML:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Welcome, Charlie!<span class=3D"kw">&lt;/p&gt;</spa=
n>
<span class=3D"kw">&lt;p&gt;</span>Products:<span class=3D"kw">&lt;/p&gt;</=
span>
<span class=3D"kw">&lt;ul&gt;</span>
    <span class=3D"kw">&lt;li&gt;</span>Apple: $1.00<span class=3D"kw">&lt;=
/li&gt;</span>
    <span class=3D"kw">&lt;li&gt;</span>Fig: $1.50<span class=3D"kw">&lt;/l=
i&gt;</span>
    <span class=3D"kw">&lt;li&gt;</span>Pomegranate: $3.25<span class=3D"kw=
">&lt;/li&gt;</span>
<span class=3D"kw">&lt;/ul&gt;</span></code></pre>

<p>Here, the user's name will be dynamic, as will the names and prices of t=
he products. Even the number of products isn't fixed: at another moment, th=
ere could be more or fewer products to display.</p>

<p>One way to make this HTML would be to have string constants in our code,=
 and join them together to produce the page. Dynamic data would be inserted=
 with string substitution of some sort. Some of our dynamic data is repetit=
ive, like our lists of products. This means we'll have chunks of HTML that =
repeat, so those will have to be handled separately and combined with the r=
est of the page.</p>

<p>Producing our toy page in this way might look like this:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># The main HTML for the whole page.</span>
PAGE_HTML =3D <span class=3D"st">"""</span>
<span class=3D"st">&lt;p&gt;Welcome, </span><span class=3D"ot">{name}</span=
><span class=3D"st">!&lt;/p&gt;</span>
<span class=3D"st">&lt;p&gt;Products:&lt;/p&gt;</span>
<span class=3D"st">&lt;ul&gt;</span>
<span class=3D"ot">{products}</span>
<span class=3D"st">&lt;/ul&gt;</span>
<span class=3D"st">"""</span>

<span class=3D"co"># The HTML for each product displayed.</span>
PRODUCT_HTML =3D <span class=3D"st">"&lt;li&gt;</span><span class=3D"ot">{p=
rodname}</span><span class=3D"st">: </span><span class=3D"ot">{price}</span=
><span class=3D"st">&lt;/li&gt;</span><span class=3D"ch">\n</span><span cla=
ss=3D"st">"</span>

<span class=3D"kw">def</span> make_page(username, products):
    product_html =3D <span class=3D"st">""</span>
    <span class=3D"kw">for</span> prodname, price in products:
        product_html +=3D PRODUCT_HTML.<span class=3D"dt">format</span>(
            prodname=3Dprodname, price=3Dformat_price(price))
    html =3D PAGE_HTML.<span class=3D"dt">format</span>(name=3Dusername, pr=
oducts=3Dproduct_html)
    <span class=3D"kw">return</span> html</code></pre>

<p>This works, but we have a mess on our hands. The HTML is in multiple str=
ing constants embedded in our application code. The logic of the page is ha=
rd to see because the static text is broken into separate pieces. The detai=
ls of how data is formatted is lost in the Python code. In order to modify =
the HTML page, our front-end designer would need to be able to edit Python =
code to make HTML changes. Imagine what the code would look like if the pag=
e were ten (or one hundred) times more complicated; it would quickly become=
 unworkable.</p>

<h2 id=3D"templates">Templates</h2>

<p>The better way to produce HTML pages is with <em>templates</em>. The HTM=
L page is authored as a template, meaning that the file is mostly static HT=
ML, with dynamic pieces embedded in it using special notation. Our toy page=
 above could look like this as a template:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Welcome, {{user_name}}!<span class=3D"kw">&lt;/p&gt=
;</span>
<span class=3D"kw">&lt;p&gt;</span>Products:<span class=3D"kw">&lt;/p&gt;</=
span>
<span class=3D"kw">&lt;ul&gt;</span>
{% for product in product_list %}
    <span class=3D"kw">&lt;li&gt;</span>{{ product.name }}:
        {{ product.price|format_price }}<span class=3D"kw">&lt;/li&gt;</spa=
n>
{% endfor %}
<span class=3D"kw">&lt;/ul&gt;</span></code></pre>

<p>Here the focus is on the HTML text, with logic embedded in the HTML. Con=
trast this document-centric approach with our logic-centric code above. Our=
 earlier program was mostly Python code, with HTML embedded in the Python l=
ogic. Here our program is mostly static HTML markup.</p>

<p>The mostly-static style used in templates is the opposite of how most pr=
ogramming languages work. For example, with Python, most of the source file=
 is executable code, and if you need literal static text, you embed it in a=
 string literal:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> hello():
    <span class=3D"dt">print</span>(<span class=3D"st">"Hello, world!"</spa=
n>)

hello()</code></pre>

<p>When Python reads this source file, it interprets text like <code>def he=
llo():</code> as instructions to be executed. The double quote character in=
 <code>print("Hello, world!")</code> indicates that the following text is m=
eant literally, until the closing double quote. This is how most programmin=
g languages work: mostly dynamic, with some static pieces embedded in the i=
nstructions. The static pieces are indicated by the double-quote notation.<=
/p>

<p>A template language flips this around: the template file is mostly stati=
c literal text, with special notation to indicate the executable dynamic pa=
rts.</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Welcome, {{user_name}}!<span class=3D"kw">&lt;/p&gt=
;</span></code></pre>

<p>Here the text is meant to appear literally in the resulting HTML page, u=
ntil the '<code>{{</code>' indicates a switch into dynamic mode, where the =
<code>user_name</code> variable will be substituted into the output.</p>

<p>String formatting functions such as Python's <code>"foo =3D {foo}!".form=
at(foo=3D17)</code> are examples of mini-languages used to create text from=
 a string literal and the data to be inserted. Templates extend this idea t=
o include constructs like conditionals and loops, but the difference is onl=
y of degree.</p>

<p>These files are called templates because they are used to produce many p=
ages with similar structure but differing details.</p>

<p>To use HTML templates in our programs, we need a <em>template engine</em=
>: a function that takes a static template describing the structure and sta=
tic content of the page, and a dynamic <em>context</em> that provides the d=
ynamic data to plug into the template. The template engine combines the tem=
plate and the context to produce a complete string of HTML. The job of a te=
mplate engine is to interpret the template, replacing the dynamic pieces wi=
th real data.</p>

<p>By the way, there's often nothing particular about HTML in a template en=
gine, it could be used to produce any textual result. For example, they are=
 also used to produce plain-text email messages. But usually they are used =
for HTML, and occasionally have HTML-specific features, such as escaping, w=
hich makes it possible to insert values into the HTML without worrying abou=
t which characters are special in HTML.</p>

<h2 id=3D"supported-syntax">Supported Syntax</h2>

<p>Template engines vary in the syntax they support. Our template syntax is=
 based on Django, a popular web framework. Since we are implementing our en=
gine in Python, some Python concepts will appear in our syntax. We've alrea=
dy seen some of this syntax in our toy example at the top of the chapter, b=
ut this is a quick summary of all of the syntax we'll implement.</p>

<p>Data from the context is inserted using double curly braces:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Welcome, {{user_name}}!<span class=3D"kw">&lt;/p&gt=
;</span></code></pre>

<p>The data available to the template is provided in the context when the t=
emplate is rendered. More on that later.</p>

<p>Template engines usually provide access to elements within data using a =
simplified and relaxed syntax. In Python, these expressions all have differ=
ent effects:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"dt">dict</span>[<span class=3D"st">"key"</span>]
obj.attr
obj.method()</code></pre>

<p>In our template syntax, all of these operations are expressed with a dot=
:</p>

<pre><code>dict.key
obj.attr
obj.method</code></pre>

<p>The dot will access object attributes or dictionary values, and if the r=
esulting value is callable, it's automatically called. This is different th=
an the Python code, where you need to use different syntax for those operat=
ions. This results in simpler template syntax:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>The price is: {{product.price}}, with a {{product.d=
iscount}}% discount.<span class=3D"kw">&lt;/p&gt;</span></code></pre>

<p>You can use functions called <em>filters</em> to modify values. Filters =
are invoked with a pipe character:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Short name: {{story.subject|slugify|lower}}<span cl=
ass=3D"kw">&lt;/p&gt;</span></code></pre>

<p>Building interesting pages usually requires at least a small amount of d=
ecision-making, so conditionals are available:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html">{% if user.i=
s_logged_in %}
    <span class=3D"kw">&lt;p&gt;</span>Welcome, {{ user.name }}!<span class=
=3D"kw">&lt;/p&gt;</span>
{% endif %}</code></pre>

<p>Looping lets us include collections of data in our pages:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Products:<span class=3D"kw">&lt;/p&gt;</span>
<span class=3D"kw">&lt;ul&gt;</span>
{% for product in product_list %}
    <span class=3D"kw">&lt;li&gt;</span>{{ product.name }}: {{ product.pric=
e|format_price }}<span class=3D"kw">&lt;/li&gt;</span>
{% endfor %}
<span class=3D"kw">&lt;/ul&gt;</span></code></pre>

<p>As with other programming languages, conditionals and loops can be neste=
d to build complex logical structures.</p>

<p>Lastly, so that we can document our templates, comments appear between b=
race-hashes:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html">{# This is t=
he best template ever! #}</code></pre>

<h2 id=3D"implementation-approaches">Implementation Approaches</h2>

<p>In broad strokes, the template engine will have two main phases: <em>par=
sing</em> the template, and then <em>rendering</em> the template.</p>

<p>Rendering the template specifically involves:</p>

<ul>
<li>Managing the dynamic context, the source of the data</li>
<li>Executing the logic elements</li>
<li>Implementing dot access and filter execution</li>
</ul>

<p>The question of what to pass from the parsing phase to the rendering pha=
se is key. What does parsing produce that can be rendered? There are two ma=
in options; we'll call them <em>interpretation</em> and <em>compilation</em=
>, using the terms loosely from other language implementations.</p>

<p>In an interpretation model, parsing produces a data structure representi=
ng the structure of the template. The rendering phase walks that data struc=
ture, assembling the result text based on the instructions it finds. For a =
real-world example, the Django template engine uses this approach.</p>

<p>In a compilation model, parsing produces some form of directly executabl=
e code. The rendering phase executes that code, producing the result. Jinja=
2 and Mako are two examples of template engines that use the compilation ap=
proach.</p>

<p>Our implementation of the engine uses compilation: we compile the templa=
te into Python code. When run, the Python code assembles the result.</p>

<p>The template engine described here was originally written as part of cov=
erage.py, to produce HTML reports. In coverage.py, there are only a few tem=
plates, and they are used over and over to produce many files from the same=
 template. Overall, the program ran faster if the templates were compiled t=
o Python code, because even though the compilation process was a bit more c=
omplicated, it only had to run once, while the execution of the compiled co=
de ran many times, and was faster than interpreting a data structure many t=
imes.</p>

<p>It's a bit more complicated to compile the template to Python, but it's =
not as bad as you might think. And besides, as any developer can tell you, =
it's more fun to write a program to write a program than it is to write a p=
rogram!</p>

<p>Our template compiler is a small example of a general technique called c=
ode generation. Code generation underlies many powerful and flexible tools,=
 including programming language compilers. Code generation can get complex,=
 but is a useful technique to have in your toolbox.</p>

<p>Another application of templates might prefer the interpreted approach, =
if templates will be used only a few times each. Then the effort to compile=
 to Python won't pay off in the long run, and a simpler interpretation proc=
ess might perform better overall.</p>

<h2 id=3D"compiling-to-python">Compiling to Python</h2>

<p>Before we get to the code of the template engine, let's look at the code=
 it produces. The parsing phase will convert a template into a Python funct=
ion. Here is our small template again:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Welcome, {{user_name}}!<span class=3D"kw">&lt;/p&gt=
;</span>
<span class=3D"kw">&lt;p&gt;</span>Products:<span class=3D"kw">&lt;/p&gt;</=
span>
<span class=3D"kw">&lt;ul&gt;</span>
{% for product in product_list %}
    <span class=3D"kw">&lt;li&gt;</span>{{ product.name }}:
        {{ product.price|format_price }}<span class=3D"kw">&lt;/li&gt;</spa=
n>
{% endfor %}
<span class=3D"kw">&lt;/ul&gt;</span></code></pre>

<p>Our engine will compile this template to Python code. The resulting Pyth=
on code looks unusual, because we've chosen some shortcuts that produce sli=
ghtly faster code. Here is the Python (slightly reformatted for readability=
):</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> render_function(context, do_dots):
    c_user_name =3D context[<span class=3D"st">'user_name'</span>]
    c_product_list =3D context[<span class=3D"st">'product_list'</span>]
    c_format_price =3D context[<span class=3D"st">'format_price'</span>]

    result =3D []
    append_result =3D result.append
    extend_result =3D result.extend
    to_str =3D <span class=3D"dt">str</span>

    extend_result([
        <span class=3D"st">'&lt;p&gt;Welcome, '</span>,
        to_str(c_user_name),
        <span class=3D"st">'!&lt;/p&gt;</span><span class=3D"ch">\n</span><=
span class=3D"st">&lt;p&gt;Products:&lt;/p&gt;</span><span class=3D"ch">\n<=
/span><span class=3D"st">&lt;ul&gt;</span><span class=3D"ch">\n</span><span=
 class=3D"st">'</span>
    ])
    <span class=3D"kw">for</span> c_product in c_product_list:
        extend_result([
            <span class=3D"st">'</span><span class=3D"ch">\n</span><span cl=
ass=3D"st">    &lt;li&gt;'</span>,
            to_str(do_dots(c_product, <span class=3D"st">'name'</span>)),
            <span class=3D"co">':\n        '</span>,
            to_str(c_format_price(do_dots(c_product, <span class=3D"st">'pr=
ice'</span>))),
            <span class=3D"co">'&lt;/li&gt;\n'</span>
        ])
    append_result(<span class=3D"st">'</span><span class=3D"ch">\n</span><s=
pan class=3D"st">&lt;/ul&gt;</span><span class=3D"ch">\n</span><span class=
=3D"st">'</span>)
    <span class=3D"kw">return</span> <span class=3D"st">''</span>.join(resu=
lt)</code></pre>

<p>Each template is converted into a <code>render_function</code> function =
that takes a dictionary of data called the context. The body of the functio=
n starts by unpacking the data from the context into local names, because t=
hey are faster for repeated use. All the context data goes into locals with=
 a <code>c_</code> prefix so that we can use other local names without fear=
 of collisions.</p>

<p>The result of the template will be a string. The fastest way to build a =
string from parts is to create a list of strings, and join them together at=
 the end. <code>result</code> will be the list of strings. Because we're go=
ing to add strings to this list, we capture its <code>append</code> and <co=
de>extend</code> methods in the local names <code>result_append</code> and =
<code>result_extend</code>. The last local we create is a <code>to_str</cod=
e> shorthand for the <code>str</code> built-in.</p>

<p>These kinds of shortcuts are unusual. Let's look at them more closely. I=
n Python, a method call on an object like <code>result.append("hello")</cod=
e> is executed in two steps. First, the append attribute is fetched from th=
e result object: <code>result.append</code>. Then the value fetched is invo=
ked as a function, passing it the argument <code>"hello"</code>. Although w=
e're used to seeing those steps performed together, they really are separat=
e. If you save the result of the first step, you can perform the second ste=
p on the saved value. So these two Python snippets do the same thing:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># The way we're used to seeing it:</span>
result.append(<span class=3D"st">"hello"</span>)

<span class=3D"co"># But this works the same:</span>
append_result =3D result.append
append_result(<span class=3D"st">"hello"</span>)</code></pre>

<p>In the template engine code, we've split it out this way so that we only=
 do the first step once, no matter how many times we do the second step. Th=
is saves us a small amount of time, because we avoid taking the time to loo=
k up the append attribute.</p>

<p>This is an example of a micro-optimization: an unusual coding technique =
that gains us tiny improvements in speed. Micro-optimizations can be less r=
eadable, or more confusing, so they are only justified for code that is a p=
roven performance bottleneck. Developers disagree on how much micro-optimiz=
ation is justified, and some beginners overdo it. The optimizations here we=
re added only after timing experiments showed that they improved performanc=
e, even if only a little bit. Micro-optimizations can be instructive, as th=
ey make use of some exotic aspects of Python, but don't over-use them in yo=
ur own code.</p>

<p>The shortcut for <code>str</code> is also a micro-optimization. Names in=
 Python can be local to a function, global to a module, or built-in to Pyth=
on. Looking up a local name is faster than looking up a global or a built-i=
n. We're used to the fact that <code>str</code> is a builtin that is always=
 available, but Python still has to look up the name <code>str</code> each =
time it is used. Putting it in a local saves us another small slice of time=
 because locals are faster than builtins.</p>

<p>Once those shortcuts are defined, we're ready for the Python lines creat=
ed from our particular template. Strings will be added to the result list u=
sing the <code>append_result</code> or <code>extend_result</code> shorthand=
s, depending on whether we have one string to add, or more than one. Litera=
l text in the template becomes a simple string literal.</p>

<p>Having both append and extend adds complexity, but remember we're aiming=
 for the fastest execution of the template, and using extend for one item m=
eans making a new list of one item so that we can pass it to extend.</p>

<p>Expressions in <code>{{ ... }}</code> are computed, converted to strings=
, and added to the result. Dots in the expression are handled by the <code>=
do_dots</code> function passed into our function, because the meaning of th=
e dotted expressions depends on the data in the context: it could be attrib=
ute access or item access, and it could be a callable.</p>

<p>The logical structures <code>{% if ... %}</code> and <code>{% for ... %}=
</code> are converted into Python conditionals and loops. The expression in=
 the <code>{% if/for ... %}</code> tag will become the expression in the <c=
ode>if</code> or <code>for</code> statement, and the contents up until the =
<code>{% end... %}</code> tag will become the body of the statement.</p>

<!-- [[[cog from cogutil import include ]]] -->

<!-- [[[end]]] -->

<h2 id=3D"writing-the-engine">Writing the Engine</h2>

<p>Now that we understand what the engine will do, let's walk through the i=
mplementation.</p>

<h3 id=3D"the-templite-class">The Templite class</h3>

<p>The heart of the template engine is the Templite class. (Get it? It's a =
template, but it's lite!)</p>

<p>The Templite class has a small interface. You construct a Templite objec=
t with the text of the template, then later you can use the <code>render</c=
ode> method on it to render a particular context, the dictionary of data, t=
hrough the template:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co"># Make a Templite object.</span>
templite =3D Templite(<span class=3D"st">'''</span>
<span class=3D"st">    &lt;h1&gt;Hello </span><span class=3D"ot">{{</span><=
span class=3D"st">name|upper</span><span class=3D"ot">}}</span><span class=
=3D"st">!&lt;/h1&gt;</span>
<span class=3D"st">    {</span><span class=3D"ot">% f</span><span class=3D"=
st">or topic in topics %}</span>
<span class=3D"st">        &lt;p&gt;You are interested in </span><span clas=
s=3D"ot">{{</span><span class=3D"st">topic</span><span class=3D"ot">}}</spa=
n><span class=3D"st">.&lt;/p&gt;</span>
<span class=3D"st">    {</span><span class=3D"ot">% e</span><span class=3D"=
st">ndfor %}</span>
<span class=3D"st">    '''</span>,
    {<span class=3D"st">'upper'</span>: <span class=3D"dt">str</span>.upper=
},
)

<span class=3D"co"># Later, use it to render some data.</span>
text =3D templite.render({
    <span class=3D"st">'name'</span>: <span class=3D"st">"Ned"</span>,
    <span class=3D"co">'topics'</span>: [<span class=3D"st">'Python'</span>=
, <span class=3D"st">'Geometry'</span>, <span class=3D"st">'Juggling'</span=
>],
})</code></pre>

<p>We pass the text of the template when the object is created so that we c=
an do the compile step just once, and later call <code>render</code> many t=
imes to reuse the compiled results.</p>

<p>The constructor also accepts a dictionary of values, an initial context.=
 These are stored in the Templite object, and will be available when the te=
mplate is later rendered. These are good for defining functions or constant=
s we want to be available everywhere, like <code>upper</code> in the previo=
us example.</p>

<p>Before we discuss the implementation of Templite, we have a helper to de=
fine first: CodeBuilder.</p>

<h3 id=3D"codebuilder">CodeBuilder</h3>

<p>The bulk of the work in our engine is parsing the template and producing=
 the necessary Python code. To help with producing the Python, we have the =
CodeBuilder class, which handles the bookkeeping for us as we construct the=
 Python code. It adds lines of code, manages indentation, and finally gives=
 us values from the compiled Python.</p>

<p>One CodeBuilder object is responsible for a complete chunk of Python cod=
e. As used by our template engine, the chunk of Python is always a single c=
omplete function definition. But the CodeBuilder class makes no assumption =
that it will only be one function. This keeps the CodeBuilder code more gen=
eral, and less coupled to the rest of the template engine code.</p>

<p>As we'll see, we also use nested CodeBuilders to make it possible to put=
 code at the beginning of the function even though we don't know what it wi=
ll be until we are nearly done.</p>

<p>A CodeBuilder object keeps a list of strings that will together be the f=
inal Python code. The only other state it needs is the current indentation =
level:</p>

<!-- [[[cog include("templite.py", first=3D"class CodeBuilder", numblanks=
=3D2) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> CodeBuilder(<span class=3D"dt">object</span>):
    <span class=3D"co">"""Build source code conveniently."""</span>

    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>, indent=3D<span class=3D"dv">0</span>):
        <span class=3D"ot">self</span>.code =3D []
        <span class=3D"ot">self</span>.indent_level =3D indent</code></pre>

<!-- [[[end]]] -->

<p>CodeBuilder doesn't do much. <code>add_line</code> adds a new line of co=
de, which automatically indents the text to the current indentation level, =
and supplies a newline:</p>

<!-- [[[cog include("templite.py", first=3D"def add_line", numblanks=3D3, d=
edent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> add_line(<span class=3D"ot">self</span>, line):
        <span class=3D"co">"""Add a line of source to the code.</span>

<span class=3D"co">        Indentation and newline will be added for you, d=
on't provide them.</span>

<span class=3D"co">        """</span>
        <span class=3D"ot">self</span>.code.extend([<span class=3D"st">" "<=
/span> * <span class=3D"ot">self</span>.indent_level, line, <span class=3D"=
st">"</span><span class=3D"ch">\n</span><span class=3D"st">"</span>])</code=
></pre>

<!-- [[[end]]] -->

<p><code>indent</code> and <code>dedent</code> increase or decrease the ind=
entation level:</p>

<!-- [[[cog include("templite.py", first=3D"INDENT_STEP =3D 4", numblanks=
=3D3, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    INDE=
NT_STEP =3D <span class=3D"dv">4</span>      <span class=3D"co"># PEP8 says=
 so!</span>

    <span class=3D"kw">def</span> indent(<span class=3D"ot">self</span>):
        <span class=3D"co">"""Increase the current indent for following lin=
es."""</span>
        <span class=3D"ot">self</span>.indent_level +=3D <span class=3D"ot"=
>self</span>.INDENT_STEP

    <span class=3D"kw">def</span> dedent(<span class=3D"ot">self</span>):
        <span class=3D"co">"""Decrease the current indent for following lin=
es."""</span>
        <span class=3D"ot">self</span>.indent_level -=3D <span class=3D"ot"=
>self</span>.INDENT_STEP</code></pre>

<!-- [[[end]]] -->

<p><code>add_section</code> is managed by another CodeBuilder object. This =
lets us keep a reference to a place in the code, and add text to it later. =
The <code>self.code</code> list is mostly a list of strings, but will also =
hold references to these sections:</p>

<!-- [[[cog include("templite.py", first=3D"def add_section", numblanks=3D1=
, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> add_section(<span class=3D"ot">self</span>):
        <span class=3D"co">"""Add a section, a sub-CodeBuilder."""</span>
        section =3D CodeBuilder(<span class=3D"ot">self</span>.indent_level=
)
        <span class=3D"ot">self</span>.code.append(section)
        <span class=3D"kw">return</span> section</code></pre>

<!-- [[[end]]] -->

<p><code>__str__</code> produces a single string with all the code. This si=
mply joins together all the strings in <code>self.code</code>. Note that be=
cause <code>self.code</code> can contain sections, this might call other <c=
ode>CodeBuilder</code> objects recursively:</p>

<!-- [[[cog include("templite.py", first=3D"def __str__", numblanks=3D1, de=
dent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> <span class=3D"ot">__str__</span>(<span class=3D"=
ot">self</span>):
        <span class=3D"kw">return</span> <span class=3D"st">""</span>.join(=
<span class=3D"dt">str</span>(c) <span class=3D"kw">for</span> c in <span c=
lass=3D"ot">self</span>.code)</code></pre>

<!-- [[[end]]] -->

<p><code>get_globals</code> yields the final values by executing the code. =
This stringifies the object, executes it to get its definitions, and return=
s the resulting values:</p>

<!-- [[[cog include("templite.py", first=3D"def get_globals", numblanks=3D1=
, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> get_globals(<span class=3D"ot">self</span>):
        <span class=3D"co">"""Execute the code, and return a dict of global=
s it defines."""</span>
        <span class=3D"co"># A check that the caller really finished all th=
e blocks they started.</span>
        <span class=3D"kw">assert</span> <span class=3D"ot">self</span>.ind=
ent_level =3D=3D <span class=3D"dv">0</span>
        <span class=3D"co"># Get the Python source as a single string.</spa=
n>
        python_source =3D <span class=3D"dt">str</span>(<span class=3D"ot">=
self</span>)
        <span class=3D"co"># Execute the source, defining globals, and retu=
rn them.</span>
        global_namespace =3D {}
        <span class=3D"dt">exec</span>(python_source, global_namespace)
        <span class=3D"kw">return</span> global_namespace</code></pre>

<!-- [[[end]]] -->

<p>This last method uses some exotic features of Python. The <code>exec</co=
de> function executes a string containing Python code. The second argument =
to <code>exec</code> is a dictionary that will collect up the globals defin=
ed by the code. So for example, if we do this:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">python_s=
ource =3D <span class=3D"st">"""\</span>
<span class=3D"st">SEVENTEEN =3D 17</span>

<span class=3D"st">def three():</span>
<span class=3D"st">    return 3</span>
<span class=3D"st">"""</span>
global_namespace =3D {}
<span class=3D"dt">exec</span>(python_source, global_namespace)</code></pre=
>

<p>then <code>global_namespace['SEVENTEEN']</code> is 17, and <code>global_=
namespace['three']</code> is an actual function named <code>three</code>.</=
p>

<p>Although we only use CodeBuilder to produce one function, there's nothin=
g here that limits it to that use. This makes the class simpler to implemen=
t, and easier to understand.</p>

<p>CodeBuilder lets us create a chunk of Python source code, and has no spe=
cific knowledge about our template engine at all. We could use it in such a=
 way that three different functions would be defined in the Python, and the=
n <code>get_globals</code> would return a dict of three values, the three f=
unctions. As it happens, our template engine only needs to define one funct=
ion. But it's better software design to keep that implementation detail in =
the template engine code, and out of our CodeBuilder class.</p>

<p>Even as we're actually using it=E2=80=94to define a single function=E2=
=80=94having <code>get_globals</code> return the dictionary keeps the code =
more modular because it doesn't need to know the name of the function we've=
 defined. Whatever function name we define in our Python source, we can ret=
rieve that name from the dict returned by <code>get_globals</code>.</p>

<p>Now we can get into the implementation of the Templite class itself, and=
 see how and where CodeBuilder is used.</p>

<h3 id=3D"the-templite-class-implementation">The Templite class implementat=
ion</h3>

<p>Most of our code is in the Templite class. As we've discussed, it has bo=
th a compilation and a rendering phase.</p>

<h4 id=3D"compiling">Compiling</h4>

<p>All of the work to compile the template into a Python function happens i=
n the Templite constructor. First the contexts are saved away:</p>

<!-- [[[cog include("templite.py", first=3D"def __init__(self, text, ", num=
blanks=3D3, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span class=3D=
"ot">self</span>, text, *contexts):
        <span class=3D"co">"""Construct a Templite with the given `text`.</=
span>

<span class=3D"co">        `contexts` are dictionaries of values to use for=
 future renderings.</span>
<span class=3D"co">        These are good for filters and global values.</s=
pan>

<span class=3D"co">        """</span>
        <span class=3D"ot">self</span>.context =3D {}
        <span class=3D"kw">for</span> context in contexts:
            <span class=3D"ot">self</span>.context.update(context)</code></=
pre>

<!-- [[[end]]] -->

<p>Notice we used <code>*contexts</code> as the parameter. The asterisk den=
otes that any number of positional arguments will be packed into a tuple an=
d passed in as <code>contexts</code>. This is called argument unpacking, an=
d means that the caller can provide a number of different context dictionar=
ies. Now any of these calls are valid:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">t =3D Te=
mplite(template_text)
t =3D Templite(template_text, context1)
t =3D Templite(template_text, context1, context2)</code></pre>

<p>The context arguments (if any) are supplied to the constructor as a tupl=
e of contexts. We can then iterate over the <code>contexts</code> tuple, de=
aling with each of them in turn. We simply create one combined dictionary c=
alled <code>self.context</code> which has the contents of all of the suppli=
ed contexts. If duplicate names are provided in the contexts, the last one =
wins.</p>

<p>To make our compiled function as fast as possible, we extract context va=
riables into Python locals. We'll get those names by keeping a set of varia=
ble names we encounter, but we also need to track the names of variables de=
fined in the template, the loop variables:</p>

<!-- [[[cog include("templite.py", first=3D"self.all_vars", numblanks=3D1, =
dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"ot">self</span>.all_vars =3D <span class=3D"dt">set</span>()
        <span class=3D"ot">self</span>.loop_vars =3D <span class=3D"dt">set=
</span>()</code></pre>

<!-- [[[end]]] -->

<p>Later we'll see how these get used to help construct the prologue of our=
 function. First, we'll use the CodeBuilder class we wrote earlier to start=
 to build our compiled function:</p>

<!-- [[[cog include("templite.py", first=3D"code =3D CodeBuilder", numblank=
s=3D2, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
code =3D CodeBuilder()

        code.add_line(<span class=3D"st">"def render_function(context, do_d=
ots):"</span>)
        code.indent()
        vars_code =3D code.add_section()
        code.add_line(<span class=3D"st">"result =3D []"</span>)
        code.add_line(<span class=3D"st">"append_result =3D result.append"<=
/span>)
        code.add_line(<span class=3D"st">"extend_result =3D result.extend"<=
/span>)
        code.add_line(<span class=3D"st">"to_str =3D str"</span>)</code></p=
re>

<!-- [[[end]]] -->

<p>Here we construct our CodeBuilder object, and start writing lines into i=
t. Our Python function will be called <code>render_function</code>, and wil=
l take two arguments: <code>context</code> is the data dictionary it should=
 use, and <code>do_dots</code> is a function implementing dot attribute acc=
ess.</p>

<p>The context here is the combination of the data context passed to the Te=
mplite constructor, and the data context passed to the render function. It'=
s the complete set of data available to the template that we made in the Te=
mplite constructor.</p>

<p>Notice that CodeBuilder is very simple: it doesn't "know" about function=
 definitions, just lines of code. This keeps CodeBuilder simple, both in it=
s implementation, and in its use. We can read our generated code here witho=
ut having to mentally interpolate too many specialized CodeBuilder.</p>

<p>We create a section called <code>vars_code</code>. Later we'll write the=
 variable extraction lines into that section. The <code>vars_code</code> ob=
ject lets us save a place in the function that can be filled in later when =
we have the information we need.</p>

<p>Then four fixed lines are written, defining a result list, shortcuts for=
 the methods to append to or extend that list, and a shortcut for the <code=
>str()</code> builtin. As we discussed earlier, this odd step squeezes just=
 a little bit more performance out of our rendering function.</p>

<p>The reason we have both the <code>append</code> and the <code>extend</co=
de> shortcut is so we can use the most effective method, depending on wheth=
er we have one line to add to our result, or more than one.</p>

<p>Next we define an inner function to help us with buffering output string=
s:</p>

<!-- [[[cog include("templite.py", first=3D"buffered =3D", numblanks=3D1, d=
edent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
buffered =3D []
        <span class=3D"kw">def</span> flush_output():
            <span class=3D"co">"""Force `buffered` to the code builder."""<=
/span>
            <span class=3D"kw">if</span> <span class=3D"dt">len</span>(buff=
ered) =3D=3D <span class=3D"dv">1</span>:
                code.add_line(<span class=3D"st">"append_result(</span><spa=
n class=3D"ot">%s</span><span class=3D"st">)"</span> % buffered[<span class=
=3D"dv">0</span>])
            <span class=3D"kw">elif</span> <span class=3D"dt">len</span>(bu=
ffered) &gt; <span class=3D"dv">1</span>:
                code.add_line(<span class=3D"st">"extend_result([</span><sp=
an class=3D"ot">%s</span><span class=3D"st">])"</span> % <span class=3D"st"=
>", "</span>.join(buffered))
            <span class=3D"kw">del</span> buffered[:]</code></pre>

<!-- [[[end]]] -->

<p>As we create chunks of output that need to go into our compiled function=
, we need to turn them into function calls that append to our result. We'd =
like to combine repeated append calls into one extend call. This is another=
 micro-optimization. To make this possible, we buffer the chunks.</p>

<p>The <code>buffered</code> list holds strings that are yet to be written =
to our function source code. As our template compilation proceeds, we'll ap=
pend strings to <code>buffered</code>, and flush them to the function sourc=
e when we reach control flow points, like if statements, or the beginning o=
r ends of loops.</p>

<p>The <code>flush_output</code> function is a <em>closure</em>, which is a=
 fancy word for a function that refers to variables outside of itself. Here=
 <code>flush_output</code> refers to <code>buffered</code> and <code>code</=
code>. This simplifies our calls to the function: we don't have to tell <co=
de>flush_output</code> what buffer to flush, or where to flush it; it knows=
 all that implicitly.</p>

<p>If only one string has been buffered, then the <code>append_result</code=
> shortcut is used to append it to the result. If more than one is buffered=
, then the <code>extend_result</code> shortcut is used, with all of them, t=
o add them to the result. Then the buffered list is cleared so more strings=
 can be buffered.</p>

<p>The rest of the compiling code will add lines to the function by appendi=
ng them to <code>buffered</code>, and eventually call <code>flush_output</c=
ode> to write them to the CodeBuilder.</p>

<p>With this function in place, we can have a line of code in our compiler =
like this:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">buffered=
.append(<span class=3D"st">"'hello'"</span>)</code></pre>

<p>which will mean that our compiled Python function will have this line:</=
p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">append_r=
esult(<span class=3D"st">'hello'</span>)</code></pre>

<p>which will add the string <code>hello</code> to the rendered output of t=
he template. We have multiple levels of abstraction here which can be diffi=
cult to keep straight. The compiler uses <code>buffered.append("'hello'")</=
code>, which creates <code>append_result('hello')</code> in the compiled Py=
thon function, which when run, appends <code>hello</code> to the template r=
esult.</p>

<p>Back to our Templite class. As we parse control structures, we want to c=
heck that they are properly nested. The <code>ops_stack</code> list is a st=
ack of strings:</p>

<!-- [[[cog include("templite.py", first=3D"ops_stack", numblanks=3D1, dede=
nt=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
ops_stack =3D []</code></pre>

<!-- [[[end]]] -->

<p>When we encounter an <code>{% if .. %}</code> tag (for example), we'll p=
ush <code>'if'</code> onto the stack. When we find an <code>{% endif %}</co=
de> tag, we can pop the stack and report an error if there was no <code>'if=
'</code> at the top of the stack.</p>

<p>Now the real parsing begins. We split the template text into a number of=
 tokens using a regular expression, or <em>regex</em>. Regexes can be daunt=
ing: they are a very compact notation for complex pattern matching. They ar=
e also very efficient, since the complexity of matching the pattern is impl=
emented in C in the regular expression engine, rather than in your own Pyth=
on code. Here's our regex:</p>

<!-- [[[cog include("templite.py", first=3D"tokens =3D", numblanks=3D1, ded=
ent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
tokens =3D re.split(<span class=3D"st">r"(?s)(</span><span class=3D"ot">{{<=
/span><span class=3D"st">.*?</span><span class=3D"ot">}}</span><span class=
=3D"st">|{%.*?%}|{#.*?#})"</span>, text)</code></pre>

<!-- [[[end]]] -->

<p>This looks complicated; let's break it down.</p>

<p>The <code>re.split</code> function will split a string using a regex. Ou=
r pattern is parenthesized, so the matches will be used to split the string=
, and will also be returned as pieces in the split list. Our pattern will m=
atch our tag syntaxes, but we've parenthesized it so that the string will b=
e split at the tags, and the tags will also be returned.</p>

<p>The <code>(?s)</code> flag in the regex means that a dot should match ev=
en a newline. Next we have our parenthesized group of three alternatives: <=
code>{{.*?}}</code> matches an expression, <code>{%.*?%}</code> matches a t=
ag, and <code>{#.*?#}</code> matches a comment. In all of these, we use <co=
de>.*?</code> to match any number of characters, but the shortest sequence =
that matches.</p>

<p>The result of <code>re.split</code> is a list of strings. For example, t=
his template text:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Topics for {{name}}: {% for t in topics %}{{t}}, {%=
 endfor %}<span class=3D"kw">&lt;/p&gt;</span></code></pre>

<p>would be split into these pieces:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">[
    <span class=3D"st">'&lt;p&gt;Topics for '</span>,               <span c=
lass=3D"co"># literal</span>
    <span class=3D"co">'{{name}}'</span>,                     <span class=
=3D"co"># expression</span>
    <span class=3D"co">': '</span>,                           <span class=
=3D"co"># literal</span>
    <span class=3D"co">'{% for t in topics %}'</span>,        <span class=
=3D"co"># tag</span>
    <span class=3D"co">''</span>,                             <span class=
=3D"co"># literal (empty)</span>
    <span class=3D"co">'{{t}}'</span>,                        <span class=
=3D"co"># expression</span>
    <span class=3D"co">', '</span>,                           <span class=
=3D"co"># literal</span>
    <span class=3D"co">'{% endfor %}'</span>,                 <span class=
=3D"co"># tag</span>
    <span class=3D"co">'&lt;/p&gt;'</span>                          <span c=
lass=3D"co"># literal</span>
]</code></pre>

<p>Once the text is split into tokens like this, we can loop over the token=
s, and deal with each in turn. By splitting them according to their type, w=
e can handle each type separately.</p>

<p>The compilation code is a loop over these tokens:</p>

<!-- [[[cog include("templite.py", first=3D"for token", numlines=3D1, deden=
t=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">for</span> token in tokens:</code></pre>

<!-- [[[end]]] -->

<p>Each token is examined to see which of the four cases it is. Just lookin=
g at the first two characters is enough. The first case is a comment, which=
 is easy to handle: just ignore it and move on to the next token:</p>

<!-- [[[cog include("templite.py", first=3D"if token.", numlines=3D3, deden=
t=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"kw">if</span> token.startswith(<span class=3D"st">'{#'</=
span>):
                <span class=3D"co"># Comment: ignore it and move on.</span>
                <span class=3D"kw">continue</span></code></pre>

<!-- [[[end]]] -->

<p>For the case of <code>{{...}}</code> expressions, we cut off the two bra=
ces at the front and back, strip off the white space, and pass the entire e=
xpression to <code>_expr_code</code>:</p>

<!-- [[[cog include("templite.py", first=3D"elif token.startswith('{{')", n=
umlines=3D4, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"kw">elif</span> token.startswith(<span class=3D"st">'</s=
pan><span class=3D"ot">{{</span><span class=3D"st">'</span>):
                <span class=3D"co"># An expression to evaluate.</span>
                expr =3D <span class=3D"ot">self</span>._expr_code(token[<s=
pan class=3D"dv">2</span>:-<span class=3D"dv">2</span>].strip())
                buffered.append(<span class=3D"st">"to_str(</span><span cla=
ss=3D"ot">%s</span><span class=3D"st">)"</span> % expr)</code></pre>

<!-- [[[end]]] -->

<p>The <code>_expr_code</code> method will compile the template expression =
into a Python expression. We'll see that function later. We use the <code>t=
o_str</code> function to force the expression's value to be a string, and a=
dd that to our result.</p>

<p>The third case is the big one: <code>{% ... %}</code> tags. These are co=
ntrol structures that will become Python control structures. First we have =
to flush our buffered output lines, then we extract a list of words from th=
e tag:</p>

<!-- [[[cog include("templite.py", first=3D"elif token.startswith('{%')", n=
umlines=3D4, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"kw">elif</span> token.startswith(<span class=3D"st">'{%'=
</span>):
                <span class=3D"co"># Action tag: split into words and parse=
 further.</span>
                flush_output()
                words =3D token[<span class=3D"dv">2</span>:-<span class=3D=
"dv">2</span>].strip().split()</code></pre>

<!-- [[[end]]] -->

<p>Now we have three sub-cases, based on the first word in the tag: <code>i=
f</code>, <code>for</code>, or <code>end</code>. The <code>if</code> case s=
hows our simple error handling and code generation:</p>

<!-- [[[cog include("templite.py", first=3D"if words[0] =3D=3D 'if'", numli=
nes=3D7, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
        <span class=3D"kw">if</span> words[<span class=3D"dv">0</span>] =3D=
=3D <span class=3D"st">'if'</span>:
                    <span class=3D"co"># An if statement: evaluate the expr=
ession to determine if.</span>
                    <span class=3D"kw">if</span> <span class=3D"dt">len</sp=
an>(words) !=3D <span class=3D"dv">2</span>:
                        <span class=3D"ot">self</span>._syntax_error(<span =
class=3D"st">"Don't understand if"</span>, token)
                    ops_stack.append(<span class=3D"st">'if'</span>)
                    code.add_line(<span class=3D"st">"if </span><span class=
=3D"ot">%s</span><span class=3D"st">:"</span> % <span class=3D"ot">self</sp=
an>._expr_code(words[<span class=3D"dv">1</span>]))
                    code.indent()</code></pre>

<!-- [[[end]]] -->

<p>The <code>if</code> tag should have a single expression, so the <code>wo=
rds</code> list should have only two elements in it. If it doesn't, we use =
the <code>_syntax_error</code> helper method to raise a syntax error except=
ion. We push <code>'if'</code> onto <code>ops_stack</code> so that we can c=
heck the <code>endif</code> tag. The expression part of the <code>if</code>=
 tag is compiled to a Python expression with <code>_expr_code</code>, and i=
s used as the conditional expression in a Python <code>if</code> statement.=
</p>

<p>The second tag type is <code>for</code>, which will be compiled to a Pyt=
hon <code>for</code> statement:</p>

<!-- [[[cog include("templite.py", first=3D"elif words[0] =3D=3D 'for'", nu=
mlines=3D13, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
        <span class=3D"kw">elif</span> words[<span class=3D"dv">0</span>] =
=3D=3D <span class=3D"st">'for'</span>:
                    <span class=3D"co"># A loop: iterate over expression re=
sult.</span>
                    <span class=3D"kw">if</span> <span class=3D"dt">len</sp=
an>(words) !=3D <span class=3D"dv">4</span> or words[<span class=3D"dv">2</=
span>] !=3D <span class=3D"st">'in'</span>:
                        <span class=3D"ot">self</span>._syntax_error(<span =
class=3D"st">"Don't understand for"</span>, token)
                    ops_stack.append(<span class=3D"st">'for'</span>)
                    <span class=3D"ot">self</span>._variable(words[<span cl=
ass=3D"dv">1</span>], <span class=3D"ot">self</span>.loop_vars)
                    code.add_line(
                        <span class=3D"st">"for c_</span><span class=3D"ot"=
>%s</span><span class=3D"st"> in </span><span class=3D"ot">%s</span><span c=
lass=3D"st">:"</span> % (
                            words[<span class=3D"dv">1</span>],
                            <span class=3D"ot">self</span>._expr_code(words=
[<span class=3D"dv">3</span>])
                        )
                    )
                    code.indent()</code></pre>

<!-- [[[end]]] -->

<p>We do a check of the syntax and push <code>'for'</code> onto the stack. =
The <code>_variable</code> method checks the syntax of the variable, and ad=
ds it to the set we provide. This is how we collect up the names of all the=
 variables during compilation. Later we'll need to write the prologue of ou=
r function, where we'll unpack all the variable names we get from the conte=
xt. To do that correctly, we need to know the names of all the variables we=
 encountered, <code>self.all_vars</code>, and the names of all the variable=
s defined by loops, <code>self.loop_vars</code>.</p>

<p>We add one line to our function source, a <code>for</code> statement. Al=
l of our template variables are turned into Python variables by prepending =
<code>c_</code> to them, so that we know they won't collide with other name=
s we're using in our Python function. We use <code>_expr_code</code> to com=
pile the iteration expression from the template into an iteration expressio=
n in Python.</p>

<p>The last kind of tag we handle is an <code>end</code> tag; either <code>=
{% endif %}</code> or <code>{% endfor %}</code>. The effect on our compiled=
 function source is the same: simply unindent to end the <code>if</code> or=
 <code>for</code> statement that was started earlier:</p>

<!-- [[[cog include("templite.py", first=3D"elif words[0].startswith('end')=
", numlines=3D11, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
        <span class=3D"kw">elif</span> words[<span class=3D"dv">0</span>].s=
tartswith(<span class=3D"st">'end'</span>):
                    <span class=3D"co"># Endsomething.  Pop the ops stack.<=
/span>
                    <span class=3D"kw">if</span> <span class=3D"dt">len</sp=
an>(words) !=3D <span class=3D"dv">1</span>:
                        <span class=3D"ot">self</span>._syntax_error(<span =
class=3D"st">"Don't understand end"</span>, token)
                    end_what =3D words[<span class=3D"dv">0</span>][<span c=
lass=3D"dv">3</span>:]
                    <span class=3D"kw">if</span> not ops_stack:
                        <span class=3D"ot">self</span>._syntax_error(<span =
class=3D"st">"Too many ends"</span>, token)
                    start_what =3D ops_stack.pop()
                    <span class=3D"kw">if</span> start_what !=3D end_what:
                        <span class=3D"ot">self</span>._syntax_error(<span =
class=3D"st">"Mismatched end tag"</span>, end_what)
                    code.dedent()</code></pre>

<!-- [[[end]]] -->

<p>Notice here that the actual work needed for the end tag is one line: uni=
ndent the function source. The rest of this clause is all error checking to=
 make sure that the template is properly formed. This isn't unusual in prog=
ram translation code.</p>

<p>Speaking of error handling, if the tag isn't an <code>if</code>, a <code=
>for</code>, or an <code>end</code>, then we don't know what it is, so rais=
e a syntax error:</p>

<!-- [[[cog include("templite.py", first=3D"else:", numlines=3D2, dedent=3D=
False) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
        <span class=3D"kw">else</span>:
                    <span class=3D"ot">self</span>._syntax_error(<span clas=
s=3D"st">"Don't understand tag"</span>, words[<span class=3D"dv">0</span>])=
</code></pre>

<!-- [[[end]]] -->

<p>We're done with the three different special syntaxes (<code>{{...}}</cod=
e>, <code>{#...#}</code>, and <code>{%...%}</code>). What's left is literal=
 content. We'll add the literal string to the buffered output, using the <c=
ode>repr</code> built-in function to produce a Python string literal for th=
e token:</p>

<!-- [[[cog include("templite.py", first=3D"else:", after=3D"Don't understa=
nd tag", numblanks=3D1, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"kw">else</span>:
                <span class=3D"co"># Literal content.  If it isn't empty, o=
utput it.</span>
                <span class=3D"kw">if</span> token:
                    buffered.append(<span class=3D"dt">repr</span>(token))<=
/code></pre>

<!-- [[[end]]] -->

<p>If we didn't use <code>repr</code>, then we'd end up with lines like thi=
s in our compiled function:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">append_r=
esult(abc)      <span class=3D"co"># Error! abc isn't defined</span></code>=
</pre>

<p>We need the value to be quoted like this:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">append_r=
esult(<span class=3D"st">'abc'</span>)</code></pre>

<p>The <code>repr</code> function supplies the quotes around the string for=
 us, and also provides backslashes where needed:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">append_r=
esult(<span class=3D"st">'"Don</span><span class=3D"ch">\'</span><span clas=
s=3D"st">t you like my hat?" he asked.'</span>)</code></pre>

<p>Notice that we first check if the token is an empty string with <code>if=
 token:</code>, since there's no point adding an empty string to the output=
. Because our regex is splitting on tag syntax, adjacent tags will have an =
empty token between them. The check here is an easy way to avoid putting us=
eless <code>append_result("")</code> statements into our compiled function.=
</p>

<p>That completes the loop over all the tokens in the template. When the lo=
op is done, all of the template has been processed. We have one last check =
to make: if <code>ops_stack</code> isn't empty, then we must be missing an =
end tag. Then we flush the buffered output to the function source:</p>

<!-- [[[cog include("templite.py", first=3D"if ops_stack:", numblanks=3D2, =
dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">if</span> ops_stack:
            <span class=3D"ot">self</span>._syntax_error(<span class=3D"st"=
>"Unmatched action tag"</span>, ops_stack[-<span class=3D"dv">1</span>])

        flush_output()</code></pre>

<!-- [[[end]]] -->

<p>We had created a section at the beginning of the function. Its role was =
to unpack template variables from the context into Python locals. Now that =
we've processed the entire template, we know the names of all the variables=
, so we can write the lines in this prologue.</p>

<p>We have to do a little work to know what names we need to define. Lookin=
g at our sample template:</p>

<pre class=3D"sourceCode html"><code class=3D"sourceCode html"><span class=
=3D"kw">&lt;p&gt;</span>Welcome, {{user_name}}!<span class=3D"kw">&lt;/p&gt=
;</span>
<span class=3D"kw">&lt;p&gt;</span>Products:<span class=3D"kw">&lt;/p&gt;</=
span>
<span class=3D"kw">&lt;ul&gt;</span>
{% for product in product_list %}
    <span class=3D"kw">&lt;li&gt;</span>{{ product.name }}:
        {{ product.price|format_price }}<span class=3D"kw">&lt;/li&gt;</spa=
n>
{% endfor %}
<span class=3D"kw">&lt;/ul&gt;</span></code></pre>

<p>There are two variables used here, <code>user_name</code> and <code>prod=
uct</code>. The <code>all_vars</code> set will have both of those names, be=
cause both are used in <code>{{...}}</code> expressions. But only <code>use=
r_name</code> needs to be extracted from the context in the prologue, becau=
se <code>product</code> is defined by the loop.</p>

<p>All the variables used in the template are in the set <code>all_vars</co=
de>, and all the variables defined in the template are in <code>loop_vars</=
code>. All of the names in <code>loop_vars</code> have already been defined=
 in the code because they are used in loops. So we need to unpack any name =
in <code>all_vars</code> that isn't in <code>loop_vars</code>:</p>

<!-- [[[cog include("templite.py", first=3D"for var_name", numblanks=3D1, d=
edent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">for</span> var_name in <span class=3D"ot">self</span>.al=
l_vars - <span class=3D"ot">self</span>.loop_vars:
            vars_code.add_line(<span class=3D"st">"c_</span><span class=3D"=
ot">%s</span><span class=3D"st"> =3D context[</span><span class=3D"ot">%r</=
span><span class=3D"st">]"</span> % (var_name, var_name))</code></pre>

<!-- [[[end]]] -->

<p>Each name becomes a line in the function's prologue, unpacking the conte=
xt variable into a suitably named local variable.</p>

<p>We're almost done compiling the template into a Python function. Our fun=
ction has been appending strings to <code>result</code>, so the last line o=
f the function is simply to join them all together and return them:</p>

<!-- [[[cog include("templite.py", first=3D'code.add_line("return', numline=
s=3D2, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
code.add_line(<span class=3D"st">"return ''.join(result)"</span>)
        code.dedent()</code></pre>

<!-- [[[end]]] -->

<p>Now that we've finished writing the source for our compiled Python funct=
ion, we need to get the function itself from our CodeBuilder object. The <c=
ode>get_globals</code> method executes the Python code we've been assemblin=
g. Remember that our code is a function definition (starting with <code>def=
 render_function(..):</code>), so executing the code will define <code>rend=
er_function</code>, but not execute the body of <code>render_function</code=
>.</p>

<p>The result of <code>get_globals</code> is the dictionary of values defin=
ed in the code. We grab the <code>render_function</code> value from it, and=
 save it as an attribute in our Templite object:</p>

<!-- [[[cog include("templite.py", first=3D"self._render_function =3D", num=
lines=3D1, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"ot">self</span>._render_function =3D code.get_globals()[<spa=
n class=3D"st">'render_function'</span>]</code></pre>

<!-- [[[end]]] -->

<p>Now <code>self._render_function</code> is a callable Python function. We=
'll use it later, during the rendering phase.</p>

<h4 id=3D"compiling-expressions">Compiling Expressions</h4>

<p>We haven't yet seen a significant piece of the compiling process: the <c=
ode>_expr_code</code> method that compiles a template expression into a Pyt=
hon expression. Our template expressions can be as simple as a single name:=
</p>

<pre><code>{{user_name}}</code></pre>

<p>or can be a complex sequence of attribute accesses and filters:</p>

<pre><code>{{user.name.localized|upper|escape}}</code></pre>

<p>Our <code>_expr_code</code> method will handle all of these possibilitie=
s. As with expressions in any language, ours are built recursively: big exp=
ressions are composed of smaller expressions. A full expression is pipe-sep=
arated, where the first piece is dot-separated, and so on. So our function =
naturally takes a recursive form:</p>

<!-- [[[cog include("templite.py", first=3D"def _expr_code", numlines=3D2, =
dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> _expr_code(<span class=3D"ot">self</span>, expr):
        <span class=3D"co">"""Generate a Python expression for `expr`."""</=
span></code></pre>

<!-- [[[end]]] -->

<p>The first case to consider is that our expression has pipes in it. If it=
 does, then we split it into a list of pipe-pieces. The first pipe-piece is=
 passed recursively to <code>_expr_code</code> to convert it into a Python =
expression.</p>

<!-- [[[cog include("templite.py", first=3D"if ", after=3D"def _expr_code",=
 numlines=3D6, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">if</span> <span class=3D"st">"|"</span> in expr:
            pipes =3D expr.split(<span class=3D"st">"|"</span>)
            code =3D <span class=3D"ot">self</span>._expr_code(pipes[<span =
class=3D"dv">0</span>])
            <span class=3D"kw">for</span> func in pipes[<span class=3D"dv">=
1</span>:]:
                <span class=3D"ot">self</span>._variable(func, <span class=
=3D"ot">self</span>.all_vars)
                code =3D <span class=3D"st">"c_</span><span class=3D"ot">%s=
</span><span class=3D"st">(</span><span class=3D"ot">%s</span><span class=
=3D"st">)"</span> % (func, code)</code></pre>

<!-- [[[end]]] -->

<p>Each of the remaining pipe pieces is the name of a function. The value i=
s passed through the function to produce the final value. Each function nam=
e is a variable that gets added to <code>all_vars</code> so that we can ext=
ract it properly in the prologue.</p>

<p>If there were no pipes, there might be dots. If so, split on the dots. T=
he first part is passed recursively to <code>_expr_code</code> to turn it i=
nto a Python expression, then each dot name is handled in turn:</p>

<!-- [[[cog include("templite.py", first=3D"elif ", after=3D"def _expr_code=
", numlines=3D5, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">elif</span> <span class=3D"st">"."</span> in expr:
            dots =3D expr.split(<span class=3D"st">"."</span>)
            code =3D <span class=3D"ot">self</span>._expr_code(dots[<span c=
lass=3D"dv">0</span>])
            args =3D <span class=3D"st">", "</span>.join(<span class=3D"dt"=
>repr</span>(d) <span class=3D"kw">for</span> d in dots[<span class=3D"dv">=
1</span>:])
            code =3D <span class=3D"st">"do_dots(</span><span class=3D"ot">=
%s</span><span class=3D"st">, </span><span class=3D"ot">%s</span><span clas=
s=3D"st">)"</span> % (code, args)</code></pre>

<!-- [[[end]]] -->

<p>To understand how dots get compiled, remember that <code>x.y</code> in t=
he template could mean either <code>x['y']</code> or <code>x.y</code> in Py=
thon, depending on which works; if the result is callable, it's called. Thi=
s uncertainty means that we have to try those possibilities at run time, no=
t compile time. So we compile <code>x.y.z</code> into a function call, <cod=
e>do_dots(x, 'y', 'z')</code>. The dot function will try the various access=
 methods and return the value that succeeded.</p>

<p>The <code>do_dots</code> function is passed into our compiled Python fun=
ction at run time. We'll see its implementation in just a bit.</p>

<p>The last clause in the <code>_expr_code</code> function handles the case=
 that there was no pipe or dot in the input expression. In that case, it's =
just a name. We record it in <code>all_vars</code>, and access the variable=
 using its prefixed Python name:</p>

<!-- [[[cog include("templite.py", first=3D"else:", after=3D"def _expr_code=
", numlines=3D4, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">else</span>:
            <span class=3D"ot">self</span>._variable(expr, <span class=3D"o=
t">self</span>.all_vars)
            code =3D <span class=3D"st">"c_</span><span class=3D"ot">%s</sp=
an><span class=3D"st">"</span> % expr
        <span class=3D"kw">return</span> code</code></pre>

<!-- [[[end]]] -->

<h4 id=3D"helper-functions">Helper Functions</h4>

<p>During compilation, we used a few helper functions. The <code>_syntax_er=
ror</code> method simply puts together a nice error message and raises the =
exception:</p>

<!-- [[[cog include("templite.py", first=3D"def _syntax_error", numblanks=
=3D1, dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> _syntax_error(<span class=3D"ot">self</span>, msg=
, thing):
        <span class=3D"co">"""Raise a syntax error using `msg`, and showing=
 `thing`."""</span>
        <span class=3D"kw">raise</span> TempliteSyntaxError(<span class=3D"=
st">"</span><span class=3D"ot">%s</span><span class=3D"st">: </span><span c=
lass=3D"ot">%r</span><span class=3D"st">"</span> % (msg, thing))</code></pr=
e>

<!-- [[[end]]] -->

<p>The <code>_variable</code> method helps us with validating variable name=
s and adding them to the sets of names we collected during compilation. We =
use a regex to check that the name is a valid Python identifier, then add t=
he name to the set:</p>

<!-- [[[cog include("templite.py", first=3D"def _variable", numblanks=3D4, =
dedent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> _variable(<span class=3D"ot">self</span>, name, v=
ars_set):
        <span class=3D"co">"""Track that `name` is used as a variable.</spa=
n>

<span class=3D"co">        Adds the name to `vars_set`, a set of variable n=
ames.</span>

<span class=3D"co">        Raises an syntax error if `name` is not a valid =
name.</span>

<span class=3D"co">        """</span>
        <span class=3D"kw">if</span> not re.match(<span class=3D"st">r"[_a-=
zA-Z][_a-zA-Z0-9]*$"</span>, name):
            <span class=3D"ot">self</span>._syntax_error(<span class=3D"st"=
>"Not a valid name"</span>, name)
        vars_set.add(name)</code></pre>

<!-- [[[end]]] -->

<p>With that, the compilation code is done!</p>

<h4 id=3D"rendering">Rendering</h4>

<p>All that's left is to write the rendering code. Since we've compiled our=
 template to a Python function, the rendering code doesn't have much to do.=
 It has to get the data context ready, and then call the compiled Python co=
de:</p>

<!-- [[[cog include("templite.py", first=3D"def render(", numblanks=3D3, de=
dent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> render(<span class=3D"ot">self</span>, context=3D=
<span class=3D"ot">None</span>):
        <span class=3D"co">"""Render this template by applying it to `conte=
xt`.</span>

<span class=3D"co">        `context` is a dictionary of values to use in th=
is rendering.</span>

<span class=3D"co">        """</span>
        <span class=3D"co"># Make the complete context we'll use.</span>
        render_context =3D <span class=3D"dt">dict</span>(<span class=3D"ot=
">self</span>.context)
        <span class=3D"kw">if</span> context:
            render_context.update(context)
        <span class=3D"kw">return</span> <span class=3D"ot">self</span>._re=
nder_function(render_context, <span class=3D"ot">self</span>._do_dots)</cod=
e></pre>

<!-- [[[end]]] -->

<p>Remember that when we constructed the <code>Templite</code> object, we s=
tarted with a data context. Here we copy it, and merge in whatever data has=
 been passed in for this rendering. The copying is so that successive rende=
ring calls won't see each others' data, and the merging is so that we have =
a single dictionary to use for data lookups. This is how we build one unifi=
ed data context from the contexts provided when the template was constructe=
d, with the data provided now at render time.</p>

<p>Notice that the data passed to <code>render</code> could overwrite data =
passed to the Templite constructor. That tends not to happen, because the c=
ontext passed to the constructor has global-ish things like filter definiti=
ons and constants, and the context passed to <code>render</code> has specif=
ic data for that one rendering.</p>

<p>Then we simply call our compiled <code>render_function</code>. The first=
 argument is the complete data context, and the second argument is the func=
tion that will implement the dot semantics. We use the same implementation =
every time: our own <code>_do_dots</code> method.</p>

<!-- [[[cog include("templite.py", first=3D"def _do_dots", numblanks=3D1, d=
edent=3DFalse) ]]] -->

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> _do_dots(<span class=3D"ot">self</span>, value, *=
dots):
        <span class=3D"co">"""Evaluate dotted expressions at runtime."""</s=
pan>
        <span class=3D"kw">for</span> dot in dots:
            <span class=3D"kw">try</span>:
                value =3D <span class=3D"dt">getattr</span>(value, dot)
            <span class=3D"kw">except</span> <span class=3D"ot">AttributeEr=
ror</span>:
                value =3D value[dot]
            <span class=3D"kw">if</span> <span class=3D"dt">callable</span>=
(value):
                value =3D value()
        <span class=3D"kw">return</span> value</code></pre>

<!-- [[[end]]] -->

<p>During compilation, a template expression like <code>x.y.z</code> gets t=
urned into <code>do_dots(x, 'y', 'z')</code>. This function loops over the =
dot-names, and for each one tries it as an attribute, and if that fails, tr=
ies it as a key. This is what gives our single template syntax the flexibil=
ity to act as either <code>x.y</code> or <code>x['y']</code>. At each step,=
 we also check if the new value is callable, and if it is, we call it. Once=
 we're done with all the dot-names, the value in hand is the value we want.=
</p>

<p>Here we used Python argument unpacking again (<code>*dots</code>) so tha=
t <code>_do_dots</code> could take any number of dot names. This gives us a=
 flexible function that will work for any dotted expression we encounter in=
 the template.</p>

<p>Note that when calling <code>self._render_function</code>, we pass in a =
function to use for evaluating dot expressions, but we always pass in the s=
ame one. We could have made that code part of the compiled template, but it=
's the same eight lines for every template, and those eight lines are part =
of the definition of how templates work, not part of the details of a parti=
cular template. It feels cleaner to implement it like this than to have tha=
t code be part of the compiled template.</p>

<h2 id=3D"testing">Testing</h2>

<p>Provided with the template engine is a suite of tests that cover all of =
the behavior and edge cases. I'm actually a little bit over my 500-line lim=
it: the template engine is 252 lines, and the tests are 275 lines. This is =
typical of well-tested code: you have more code in your tests than in your =
product.</p>

<h2 id=3D"whats-left-out">What's Left Out</h2>

<p>Full-featured template engines provide much more than we've implemented =
here. To keep this code small, we're leaving out interesting ideas like:</p=
>

<ul>
<li>Template inheritance and inclusion</li>
<li>Custom tags</li>
<li>Automatic escaping</li>
<li>Arguments to filters</li>
<li>Complex conditional logic like else and elif</li>
<li>Loops with more than one loop variable</li>
<li>Whitespace control</li>
</ul>

<p>Even so, our simple template engine is useful. In fact, it is the templa=
te engine used in coverage.py to produce its HTML reports.</p>

<h2 id=3D"summing-up">Summing up</h2>

<p>In 252 lines, we've got a simple yet capable template engine. Real templ=
ate engines have many more features, but this code lays out the basic ideas=
 of the process: compile the template to a Python function, then execute th=
e function to produce the text result.</p>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div id=3D"qb-sougou-search" style=
=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D"last-b=
tn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-120-2bec5009-cb45-4e2a-a=
86a-1dfe8b5c354d@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK----
Content-Type: text/html
Content-ID: <frame-120-2bec5009-cb45-4e2a-a86a-1dfe8b5c354d@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--JtlS4yn3quw3hqXq8rjPwPCXus66OrwlrmV66qmxXK------
