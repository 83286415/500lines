From: <Saved by Blink>
Subject: 500 Lines or Less | A Python Interpreter Written in Python
Date: Tue, 11 Feb 2019 01:54:19 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----"

------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: text/html
Content-ID: <frame-60-f876e57b-8d4e-421c-8862-876d0b578665@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/a-python-interpreter-written-in-python.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | A Python Interpreter Written in Python</titl=
e>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div id=3D"MathJax_Message" style=3D"display: none;"></div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>A Python Interpreter Written in Python</h1>
          <h2 class=3D"author">Allison Kaptur</h2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em>Allison is an engineer at Dropbox, where she helps maintai=
n one of the largest networks of Python clients in the world. Before Dropbo=
x, she was a facilitator at the Recurse Center, a writers retreat for progr=
ammers in New York. She's spoken at PyCon North America about Python intern=
als and loves weird bugs. She blogs at <a href=3D"http://akaptur.com/">akap=
tur.com</a>.</em></p>

<p><em>(This chapter is also available in <a href=3D"http://qingyunha.githu=
b.io/taotao/">Simplified Chinese</a>)</em>.</p>

<h2 id=3D"introduction">Introduction</h2>

<p>Byterun is a Python interpreter implemented in Python. Through my work o=
n Byterun, I was surprised and delighted to discover that the fundamental s=
tructure of the Python interpreter fits easily into the 500-line size restr=
iction. This chapter will walk through the structure of the interpreter and=
 give you enough context to explore it further. The goal is not to explain =
everything there is to know about interpreters=E2=80=94like so many interes=
ting areas of programming and computer science, you could devote years to d=
eveloping a deep understanding of the topic.</p>

<p>Byterun was written by Ned Batchelder and myself, building on the work o=
f Paul Swartz. Its structure is similar to the primary implementation of Py=
thon, CPython, so understanding Byterun will help you understand interprete=
rs in general and the CPython interpreter in particular. (If you don't know=
 which Python you're using, it's probably CPython.) Despite its short lengt=
h, Byterun is capable of running most simple Python programs<a href=3D"http=
://aosabook.org/en/500L/a-python-interpreter-written-in-python.html#fn1" cl=
ass=3D"footnoteRef" id=3D"fnref1"><sup>1</sup></a>.</p>

<h3 id=3D"a-python-interpreter">A Python Interpreter</h3>

<p>Before we begin, let's narrow down what we mean by "a Python interpreter=
". The word "interpreter" can be used in a variety of different ways when d=
iscussing Python. Sometimes interpreter refers to the Python REPL, the inte=
ractive prompt you get by typing <code>python</code> at the command line. S=
ometimes people use "the Python interpreter" more or less interchangeably w=
ith "Python" to talk about executing Python code from start to finish. In t=
his chapter, "interpreter" has a more narrow meaning: it's the last step in=
 the process of executing a Python program.</p>

<p>Before the interpreter takes over, Python performs three other steps: le=
xing, parsing, and compiling. Together, these steps transform the programme=
r's source code from lines of text into structured <em>code objects</em> co=
ntaining instructions that the interpreter can understand. The interpreter'=
s job is to take these code objects and follow the instructions.</p>

<p>You may be surprised to hear that compiling is a step in executing Pytho=
n code at all. Python is often called an "interpreted" language like Ruby o=
r Perl, as opposed to a "compiled" language like C or Rust. However, this t=
erminology isn't as precise as it may seem. Most interpreted languages, inc=
luding Python, do involve a compilation step. The reason Python is called "=
interpreted" is that the compilation step does relatively less work (and th=
e interpreter does relatively more) than in a compiled language. As we'll s=
ee later in the chapter, the Python compiler has much less information abou=
t the behavior of a program than a C compiler does.</p>

<h3 id=3D"a-python-python-interpreter">A Python Python Interpreter</h3>

<p>Byterun is a Python interpreter written in Python. This may strike you a=
s odd, but it's no more odd than writing a C compiler in C. (Indeed, the wi=
dely used C compiler gcc is written in C.) You could write a Python interpr=
eter in almost any language.</p>

<p>Writing a Python interpreter in Python has both advantages and disadvant=
ages. The biggest disadvantage is speed: executing code via Byterun is much=
 slower than executing it in CPython, where the interpreter is written in C=
 and carefully optimized. However, Byterun was designed originally as a lea=
rning exercise, so speed is not important to us. The biggest advantage to u=
sing Python is that we can more easily implement <em>just</em> the interpre=
ter, and not the rest of the Python run-time, particularly the object syste=
m. For example, Byterun can fall back to "real" Python when it needs to cre=
ate a class. Another advantage is that Byterun is easy to understand, partl=
y because it's written in a high-level language (Python!) that many people =
find easy to read. (We also exclude interpreter optimizations in Byterun=E2=
=80=94once again favoring clarity and simplicity over speed.)</p>

<h2 id=3D"building-an-interpreter">Building an Interpreter</h2>

<p>Before we start to look at the code of Byterun, we need some higher-leve=
l context on the structure of the interpreter. How does the Python interpre=
ter work?</p>

<p>The Python interpreter is a <em>virtual machine</em>, meaning that it is=
 software that emulates a physical computer. This particular virtual machin=
e is a stack machine: it manipulates several stacks to perform its operatio=
ns (as contrasted with a register machine, which writes to and reads from p=
articular memory locations).</p>

<p>The Python interpreter is a <em>bytecode interpreter</em>: its input is =
instruction sets called <em>bytecode</em>. When you write Python, the lexer=
, parser, and compiler generate code objects for the interpreter to operate=
 on. Each code object contains a set of instructions to be executed=E2=80=
=94that's the bytecode=E2=80=94plus other information that the interpreter =
will need. Bytecode is an <em>intermediate representation</em> of Python co=
de: it expresses the source code that you wrote in a way the interpreter ca=
n understand. It's analogous to the way that assembly language serves as an=
 intermediate representation between C code and a piece of hardware.</p>

<h3 id=3D"a-tiny-interpreter">A Tiny Interpreter</h3>

<p>To make this concrete, let's start with a very minimal interpreter. This=
 interpreter can only add numbers, and it understands just three instructio=
ns. All code it can execute consists of these three instructions in differe=
nt combinations. The three instructions are these:</p>

<ul>
<li><code>LOAD_VALUE</code></li>
<li><code>ADD_TWO_VALUES</code></li>
<li><code>PRINT_ANSWER</code></li>
</ul>

<p>Since we're not concerned with the lexer, parser, and compiler in this c=
hapter, it doesn't matter how the instruction sets are produced. You can im=
agine writing <code>7 + 5</code> and having a compiler emit a combination o=
f these three instructions. Or, if you have the right compiler, you can wri=
te Lisp syntax that's turned into the same combination of instructions. The=
 interpreter doesn't care. All that matters is that our interpreter is give=
n a well-formed arrangement of the instructions.</p>

<p>Suppose that</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"dv">7</span> + <span class=3D"dv">5</span></code></pre>

<p>produces this instruction set:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">what_to_=
execute =3D {
    <span class=3D"st">"instructions"</span>: [(<span class=3D"st">"LOAD_VA=
LUE"</span>, <span class=3D"dv">0</span>),  <span class=3D"co"># the first =
number</span>
                     (<span class=3D"st">"LOAD_VALUE"</span>, <span class=
=3D"dv">1</span>),  <span class=3D"co"># the second number</span>
                     (<span class=3D"st">"ADD_TWO_VALUES"</span>, <span cla=
ss=3D"ot">None</span>),
                     (<span class=3D"st">"PRINT_ANSWER"</span>, <span class=
=3D"ot">None</span>)],
    <span class=3D"co">"numbers"</span>: [<span class=3D"dv">7</span>, <spa=
n class=3D"dv">5</span>] }</code></pre>

<p>The Python interpreter is a <em>stack machine</em>, so it must manipulat=
e stacks to add two numbers (<a href=3D"http://aosabook.org/en/500L/a-pytho=
n-interpreter-written-in-python.html#figure-12.1">Figure 12.1</a>.) The int=
erpreter will begin by executing the first instruction, <code>LOAD_VALUE</c=
ode>, and pushing the first number onto the stack. Next it will push the se=
cond number onto the stack. For the third instruction, <code>ADD_TWO_VALUES=
</code>, it will pop both numbers off, add them together, and push the resu=
lt onto the stack. Finally, it will pop the answer back off the stack and p=
rint it.</p>

<div class=3D"center figure">
<a name=3D"figure-12.1"></a><img src=3D"http://aosabook.org/en/500L/interpr=
eter-images/interpreter-stack.png" alt=3D"Figure 12.1 - A stack machine" ti=
tle=3D"Figure 12.1 - A stack machine">
</div>

<p class=3D"center figcaption">
<small>Figure 12.1 - A stack machine</small>
</p>

<p>The <code>LOAD_VALUE</code> instruction tells the interpreter to push a =
number on to the stack, but the instruction alone doesn't specify which num=
ber. Each instruction needs an extra piece of information, telling the inte=
rpreter where to find the number to load. So our instruction set has two pi=
eces: the instructions themselves, plus a list of constants the instruction=
s will need. (In Python, what we're calling "instructions" is the bytecode,=
 and the "what to execute" object below is the <em>code object</em>.)</p>

<p>Why not just put the numbers directly in the instructions? Imagine if we=
 were adding strings together instead of numbers. We wouldn't want to have =
the strings stuffed in with the instructions, since they could be arbitrari=
ly large. This design also means we can have just one copy of each object t=
hat we need, so for example to add <code>7 + 7</code>, <code>"numbers"</cod=
e> could be just <code>[7]</code>.</p>

<p>You may be wondering why instructions other than <code>ADD_TWO_VALUES</c=
ode> were needed at all. Indeed, for the simple case of adding two numbers,=
 the example is a little contrived. However, this instruction is a building=
 block for more complex programs. For example, with just the instructions w=
e've defined so far, we can already add together three values=E2=80=94or an=
y number of values=E2=80=94given the right set of these instructions. The s=
tack provides a clean way to keep track of the state of the interpreter, an=
d it will support more complexity as we go along.</p>

<p>Now let's start to write the interpreter itself. The interpreter object =
has a stack, which we'll represent with a list. The object also has a metho=
d describing how to execute each instruction. For example, for <code>LOAD_V=
ALUE</code>, the interpreter will push the value onto the stack.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Interpreter:
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.stack =3D []

    <span class=3D"kw">def</span> LOAD_VALUE(<span class=3D"ot">self</span>=
, number):
        <span class=3D"ot">self</span>.stack.append(number)

    <span class=3D"kw">def</span> PRINT_ANSWER(<span class=3D"ot">self</spa=
n>):
        answer =3D <span class=3D"ot">self</span>.stack.pop()
        <span class=3D"dt">print</span>(answer)

    <span class=3D"kw">def</span> ADD_TWO_VALUES(<span class=3D"ot">self</s=
pan>):
        first_num =3D <span class=3D"ot">self</span>.stack.pop()
        second_num =3D <span class=3D"ot">self</span>.stack.pop()
        total =3D first_num + second_num
        <span class=3D"ot">self</span>.stack.append(total)</code></pre>

<p>These three functions implement the three instructions our interpreter u=
nderstands. The interpreter needs one more piece: a way to tie everything t=
ogether and actually execute it. This method, <code>run_code</code>, takes =
the <code>what_to_execute</code> dictionary defined above as an argument. I=
t loops over each instruction, processes the arguments to that instruction =
if there are any, and then calls the corresponding method on the interprete=
r object.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> run_code(<span class=3D"ot">self</span>, what_to_=
execute):
        instructions =3D what_to_execute[<span class=3D"st">"instructions"<=
/span>]
        numbers =3D what_to_execute[<span class=3D"st">"numbers"</span>]
        <span class=3D"kw">for</span> each_step in instructions:
            instruction, argument =3D each_step
            <span class=3D"kw">if</span> instruction =3D=3D <span class=3D"=
st">"LOAD_VALUE"</span>:
                number =3D numbers[argument]
                <span class=3D"ot">self</span>.LOAD_VALUE(number)
            <span class=3D"kw">elif</span> instruction =3D=3D <span class=
=3D"st">"ADD_TWO_VALUES"</span>:
                <span class=3D"ot">self</span>.ADD_TWO_VALUES()
            <span class=3D"kw">elif</span> instruction =3D=3D <span class=
=3D"st">"PRINT_ANSWER"</span>:
                <span class=3D"ot">self</span>.PRINT_ANSWER()</code></pre>

<p>To test it out, we can create an instance of the object and then call th=
e <code>run_code</code> method with the instruction set for adding 7 + 5 de=
fined above.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    inte=
rpreter =3D Interpreter()
    interpreter.run_code(what_to_execute)</code></pre>

<p>Sure enough, it prints the answer: 12.</p>

<p>Although this interpreter is quite limited, this process is almost exact=
ly how the real Python interpreter adds numbers. There are a couple of thin=
gs to note even in this small example.</p>

<p>First of all, some instructions need arguments. In real Python bytecode,=
 about half of instructions have arguments. The arguments are packed in wit=
h the instructions, much like in our example. Notice that the arguments to =
the <em>instructions</em> are different than the arguments to the methods t=
hat are called.</p>

<p>Second, notice that the instruction for <code>ADD_TWO_VALUES</code> did =
not require any arguments. Instead, the values to be added together were po=
pped off the interpreter's stack. This is the defining feature of a stack-b=
ased interpreter.</p>

<p>Remember that given valid instruction sets, without any changes to our i=
nterpreter, we can add more than two numbers at a time. Consider the instru=
ction set below. What do you expect to happen? If you had a friendly compil=
er, what code could you write to generate this instruction set? </p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    what=
_to_execute =3D {
        <span class=3D"st">"instructions"</span>: [(<span class=3D"st">"LOA=
D_VALUE"</span>, <span class=3D"dv">0</span>),
                         (<span class=3D"st">"LOAD_VALUE"</span>, <span cla=
ss=3D"dv">1</span>),
                         (<span class=3D"st">"ADD_TWO_VALUES"</span>, <span=
 class=3D"ot">None</span>),
                         (<span class=3D"st">"LOAD_VALUE"</span>, <span cla=
ss=3D"dv">2</span>),
                         (<span class=3D"st">"ADD_TWO_VALUES"</span>, <span=
 class=3D"ot">None</span>),
                         (<span class=3D"st">"PRINT_ANSWER"</span>, <span c=
lass=3D"ot">None</span>)],
        <span class=3D"co">"numbers"</span>: [<span class=3D"dv">7</span>, =
<span class=3D"dv">5</span>, <span class=3D"dv">8</span>] }</code></pre>

<p>At this point, we can begin to see how this structure is extensible: we =
can add methods on the interpreter object that describe many more operation=
s (as long as we have a compiler to hand us well-formed instruction sets).<=
/p>

<h4 id=3D"variables">Variables</h4>

<p>Next let's add variables to our interpreter. Variables require an instru=
ction for storing the value of a variable, <code>STORE_NAME</code>; an inst=
ruction for retrieving it, <code>LOAD_NAME</code>; and a mapping from varia=
ble names to values. For now, we'll ignore namespaces and scoping, so we ca=
n store the variable mapping on the interpreter object itself. Finally, we'=
ll have to make sure that <code>what_to_execute</code> has a list of the va=
riable names, in addition to its list of constants.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> s():
...     a =3D <span class=3D"dv">1</span>
...     b =3D <span class=3D"dv">2</span>
...     <span class=3D"dt">print</span>(a + b)
<span class=3D"co"># a friendly compiler transforms `s` into:</span>
    what_to_execute =3D {
        <span class=3D"st">"instructions"</span>: [(<span class=3D"st">"LOA=
D_VALUE"</span>, <span class=3D"dv">0</span>),
                         (<span class=3D"st">"STORE_NAME"</span>, <span cla=
ss=3D"dv">0</span>),
                         (<span class=3D"st">"LOAD_VALUE"</span>, <span cla=
ss=3D"dv">1</span>),
                         (<span class=3D"st">"STORE_NAME"</span>, <span cla=
ss=3D"dv">1</span>),
                         (<span class=3D"st">"LOAD_NAME"</span>, <span clas=
s=3D"dv">0</span>),
                         (<span class=3D"st">"LOAD_NAME"</span>, <span clas=
s=3D"dv">1</span>),
                         (<span class=3D"st">"ADD_TWO_VALUES"</span>, <span=
 class=3D"ot">None</span>),
                         (<span class=3D"st">"PRINT_ANSWER"</span>, <span c=
lass=3D"ot">None</span>)],
        <span class=3D"co">"numbers"</span>: [<span class=3D"dv">1</span>, =
<span class=3D"dv">2</span>],
        <span class=3D"co">"names"</span>:   [<span class=3D"st">"a"</span>=
, <span class=3D"st">"b"</span>] }</code></pre>

<p>Our new implementation is below. To keep track of what names are bound t=
o what values, we'll add an <code>environment</code> dictionary to the <cod=
e>__init__</code> method. We'll also add <code>STORE_NAME</code> and <code>=
LOAD_NAME</code>. These methods first look up the variable name in question=
 and then use the dictionary to store or retrieve its value.</p>

<p>The arguments to an instruction can now mean two different things: They =
can either be an index into the "numbers" list, or they can be an index int=
o the "names" list. The interpreter knows which it should be by checking wh=
at instruction it's executing. We'll break out this logic=E2=80=94and the m=
apping of instructions to what their arguments mean=E2=80=94into a separate=
 method. </p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Interpreter:
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.stack =3D []
        <span class=3D"ot">self</span>.environment =3D {}

    <span class=3D"kw">def</span> STORE_NAME(<span class=3D"ot">self</span>=
, name):
        val =3D <span class=3D"ot">self</span>.stack.pop()
        <span class=3D"ot">self</span>.environment[name] =3D val

    <span class=3D"kw">def</span> LOAD_NAME(<span class=3D"ot">self</span>,=
 name):
        val =3D <span class=3D"ot">self</span>.environment[name]
        <span class=3D"ot">self</span>.stack.append(val)

    <span class=3D"kw">def</span> parse_argument(<span class=3D"ot">self</s=
pan>, instruction, argument, what_to_execute):
        <span class=3D"co">""" Understand what the argument to each instruc=
tion means."""</span>
        numbers =3D [<span class=3D"st">"LOAD_VALUE"</span>]
        names =3D [<span class=3D"st">"LOAD_NAME"</span>, <span class=3D"st=
">"STORE_NAME"</span>]

        <span class=3D"kw">if</span> instruction in numbers:
            argument =3D what_to_execute[<span class=3D"st">"numbers"</span=
>][argument]
        <span class=3D"kw">elif</span> instruction in names:
            argument =3D what_to_execute[<span class=3D"st">"names"</span>]=
[argument]

        <span class=3D"kw">return</span> argument

    <span class=3D"kw">def</span> run_code(<span class=3D"ot">self</span>, =
what_to_execute):
        instructions =3D what_to_execute[<span class=3D"st">"instructions"<=
/span>]
        <span class=3D"kw">for</span> each_step in instructions:
            instruction, argument =3D each_step
            argument =3D <span class=3D"ot">self</span>.parse_argument(inst=
ruction, argument, what_to_execute)

            <span class=3D"kw">if</span> instruction =3D=3D <span class=3D"=
st">"LOAD_VALUE"</span>:
                <span class=3D"ot">self</span>.LOAD_VALUE(argument)
            <span class=3D"kw">elif</span> instruction =3D=3D <span class=
=3D"st">"ADD_TWO_VALUES"</span>:
                <span class=3D"ot">self</span>.ADD_TWO_VALUES()
            <span class=3D"kw">elif</span> instruction =3D=3D <span class=
=3D"st">"PRINT_ANSWER"</span>:
                <span class=3D"ot">self</span>.PRINT_ANSWER()
            <span class=3D"kw">elif</span> instruction =3D=3D <span class=
=3D"st">"STORE_NAME"</span>:
                <span class=3D"ot">self</span>.STORE_NAME(argument)
            <span class=3D"kw">elif</span> instruction =3D=3D <span class=
=3D"st">"LOAD_NAME"</span>:
                <span class=3D"ot">self</span>.LOAD_NAME(argument)</code></=
pre>

<p>Even with just five instructions, the <code>run_code</code> method is st=
arting to get tedious. If we kept this structure, we'd need one branch of t=
he <code>if</code> statement for each instruction. Here, we can make use of=
 Python's dynamic method lookup. We'll always define a method called <code>=
FOO</code> to execute the instruction called <code>FOO</code>, so we can us=
e Python's <code>getattr</code> function to look up the method on the fly i=
nstead of using the big <code>if</code> statement. The <code>run_code</code=
> method then looks like this: </p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> execute(<span class=3D"ot">self</span>, what_to_e=
xecute):
        instructions =3D what_to_execute[<span class=3D"st">"instructions"<=
/span>]
        <span class=3D"kw">for</span> each_step in instructions:
            instruction, argument =3D each_step
            argument =3D <span class=3D"ot">self</span>.parse_argument(inst=
ruction, argument, what_to_execute)
            bytecode_method =3D <span class=3D"dt">getattr</span>(<span cla=
ss=3D"ot">self</span>, instruction)
            <span class=3D"kw">if</span> argument is <span class=3D"ot">Non=
e</span>:
                bytecode_method()
            <span class=3D"kw">else</span>:
                bytecode_method(argument)</code></pre>

<h2 id=3D"real-python-bytecode">Real Python Bytecode</h2>

<p>At this point, we'll abandon our toy instruction sets and switch to real=
 Python bytecode. The structure of bytecode is similar to our toy interpret=
er's verbose instruction sets, except that it uses one byte instead of a lo=
ng name to identify each instruction. To understand this structure, we'll w=
alk through the bytecode of a short function. Consider the example below:</=
p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> cond():
...     x =3D <span class=3D"dv">3</span>
...     <span class=3D"kw">if</span> x &lt; <span class=3D"dv">5</span>:
...         <span class=3D"kw">return</span> <span class=3D"st">'yes'</span=
>
...     <span class=3D"kw">else</span>:
...         <span class=3D"kw">return</span> <span class=3D"st">'no'</span>
...</code></pre>

<p>Python exposes a boatload of its internals at run time, and we can acces=
s them right from the REPL. For the function object <code>cond</code>, <cod=
e>cond.__code__</code> is the code object associated it, and <code>cond.__c=
ode__.co_code</code> is the bytecode. There's almost never a good reason to=
 use these attributes directly when you're writing Python code, but they do=
 allow us to get up to all sorts of mischief=E2=80=94and to look at the int=
ernals in order to understand them.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; cond.__code__.co_code  <span class=3D"co"># the bytecode as raw bytes<=
/span>
b<span class=3D"st">'d</span><span class=3D"ch">\x01\x00</span><span class=
=3D"st">}</span><span class=3D"ch">\x00\x00</span><span class=3D"st">|</spa=
n><span class=3D"ch">\x00\x00d\x02\x00</span><span class=3D"st">k</span><sp=
an class=3D"ch">\x00\x00</span><span class=3D"st">r</span><span class=3D"ch=
">\x16\x00d\x03\x00</span><span class=3D"st">Sd</span><span class=3D"ch">\x=
04\x00</span><span class=3D"st">Sd</span><span class=3D"ch">\x00</span>
<span class=3D"st">   </span><span class=3D"ch">\x00</span><span class=3D"s=
t">S'</span>
&gt;&gt;&gt; <span class=3D"dt">list</span>(cond.__code__.co_code)  <span c=
lass=3D"co"># the bytecode as numbers</span>
[<span class=3D"dv">100</span>, <span class=3D"dv">1</span>, <span class=3D=
"dv">0</span>, <span class=3D"dv">125</span>, <span class=3D"dv">0</span>, =
<span class=3D"dv">0</span>, <span class=3D"dv">124</span>, <span class=3D"=
dv">0</span>, <span class=3D"dv">0</span>, <span class=3D"dv">100</span>, <=
span class=3D"dv">2</span>, <span class=3D"dv">0</span>, <span class=3D"dv"=
>107</span>, <span class=3D"dv">0</span>, <span class=3D"dv">0</span>, <spa=
n class=3D"dv">114</span>, <span class=3D"dv">22</span>, <span class=3D"dv"=
>0</span>, <span class=3D"dv">100</span>, <span class=3D"dv">3</span>, <spa=
n class=3D"dv">0</span>, <span class=3D"dv">83</span>,=20
 <span class=3D"dv">100</span>, <span class=3D"dv">4</span>, <span class=3D=
"dv">0</span>, <span class=3D"dv">83</span>, <span class=3D"dv">100</span>,=
 <span class=3D"dv">0</span>, <span class=3D"dv">0</span>, <span class=3D"d=
v">83</span>]</code></pre>

<p>When we just print the bytecode, it looks unintelligible=E2=80=94all we =
can tell is that it's a series of bytes. Luckily, there's a powerful tool w=
e can use to understand it: the <code>dis</code> module in the Python stand=
ard library.</p>

<p><code>dis</code> is a bytecode disassembler. A disassembler takes low-le=
vel code that is written for machines, like assembly code or bytecode, and =
prints it in a human-readable way. When we run <code>dis.dis</code>, it out=
puts an explanation of the bytecode it has passed. </p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; dis.dis(cond)
  <span class=3D"dv">2</span>           <span class=3D"dv">0</span> LOAD_CO=
NST               <span class=3D"dv">1</span> (<span class=3D"dv">3</span>)
              <span class=3D"dv">3</span> STORE_FAST               <span cl=
ass=3D"dv">0</span> (x)

  <span class=3D"dv">3</span>           <span class=3D"dv">6</span> LOAD_FA=
ST                <span class=3D"dv">0</span> (x)
              <span class=3D"dv">9</span> LOAD_CONST               <span cl=
ass=3D"dv">2</span> (<span class=3D"dv">5</span>)
             <span class=3D"dv">12</span> COMPARE_OP               <span cl=
ass=3D"dv">0</span> (&lt;)
             <span class=3D"dv">15</span> POP_JUMP_IF_FALSE       <span cla=
ss=3D"dv">22</span>

  <span class=3D"dv">4</span>          <span class=3D"dv">18</span> LOAD_CO=
NST               <span class=3D"dv">3</span> (<span class=3D"st">'yes'</sp=
an>)
             <span class=3D"dv">21</span> RETURN_VALUE

  <span class=3D"dv">6</span>     &gt;&gt;   <span class=3D"dv">22</span> L=
OAD_CONST               <span class=3D"dv">4</span> (<span class=3D"st">'no=
'</span>)
             <span class=3D"dv">25</span> RETURN_VALUE
             <span class=3D"dv">26</span> LOAD_CONST               <span cl=
ass=3D"dv">0</span> (<span class=3D"ot">None</span>)
             <span class=3D"dv">29</span> RETURN_VALUE</code></pre>

<p>What does all this mean? Let's look at the first instruction <code>LOAD_=
CONST</code> as an example. The number in the first column (<code>2</code>)=
 shows the line number in our Python source code. The second column is an i=
ndex into the bytecode, telling us that the <code>LOAD_CONST</code> instruc=
tion appears at position zero. The third column is the instruction itself, =
mapped to its human-readable name. The fourth column, when present, is the =
argument to that instruction. The fifth column, when present, is a hint abo=
ut what the argument means.</p>

<p>Consider the first few bytes of this bytecode: [100, 1, 0, 125, 0, 0]. T=
hese six bytes represent two instructions with their arguments. We can use =
<code>dis.opname</code>, a mapping from bytes to intelligible strings, to f=
ind out what instructions 100 and 125 map to:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; dis.opname[<span class=3D"dv">100</span>]
<span class=3D"co">'LOAD_CONST'</span>
&gt;&gt;&gt; dis.opname[<span class=3D"dv">125</span>]
<span class=3D"co">'STORE_FAST'</span></code></pre>

<p>The second and third bytes=E2=80=941, 0=E2=80=94are arguments to <code>L=
OAD_CONST</code>, while the fifth and sixth bytes=E2=80=940, 0=E2=80=94are =
arguments to <code>STORE_FAST</code>. Just like in our toy example, <code>L=
OAD_CONST</code> needs to know where to find its constant to load, and <cod=
e>STORE_FAST</code> needs to find the name to store. (Python's <code>LOAD_C=
ONST</code> is the same as our toy interpreter's <code>LOAD_VALUE</code>, a=
nd <code>LOAD_FAST</code> is the same as <code>LOAD_NAME</code>.) So these =
six bytes represent the first line of code, <code>x =3D 3</code>. (Why use =
two bytes for each argument? If Python used just one byte to locate constan=
ts and names instead of two, you could only have 256 names/constants associ=
ated with a single code object. Using two bytes, you can have up to 256 squ=
ared, or 65,536.)</p>

<h3 id=3D"conditionals-and-loops">Conditionals and Loops</h3>

<p>So far, the interpreter has executed code simply by stepping through the=
 instructions one by one. This is a problem; often, we want to execute cert=
ain instructions many times, or skip them under certain conditions. To allo=
w us to write loops and if statements in our code, the interpreter must be =
able to jump around in the instruction set. In a sense, Python handles loop=
s and conditionals with <code>GOTO</code> statements in the bytecode! Look =
at the disassembly of the function <code>cond</code> again: </p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; dis.dis(cond)
  <span class=3D"dv">2</span>           <span class=3D"dv">0</span> LOAD_CO=
NST               <span class=3D"dv">1</span> (<span class=3D"dv">3</span>)
              <span class=3D"dv">3</span> STORE_FAST               <span cl=
ass=3D"dv">0</span> (x)

  <span class=3D"dv">3</span>           <span class=3D"dv">6</span> LOAD_FA=
ST                <span class=3D"dv">0</span> (x)
              <span class=3D"dv">9</span> LOAD_CONST               <span cl=
ass=3D"dv">2</span> (<span class=3D"dv">5</span>)
             <span class=3D"dv">12</span> COMPARE_OP               <span cl=
ass=3D"dv">0</span> (&lt;)
             <span class=3D"dv">15</span> POP_JUMP_IF_FALSE       <span cla=
ss=3D"dv">22</span>

  <span class=3D"dv">4</span>          <span class=3D"dv">18</span> LOAD_CO=
NST               <span class=3D"dv">3</span> (<span class=3D"st">'yes'</sp=
an>)
             <span class=3D"dv">21</span> RETURN_VALUE

  <span class=3D"dv">6</span>     &gt;&gt;   <span class=3D"dv">22</span> L=
OAD_CONST               <span class=3D"dv">4</span> (<span class=3D"st">'no=
'</span>)
             <span class=3D"dv">25</span> RETURN_VALUE
             <span class=3D"dv">26</span> LOAD_CONST               <span cl=
ass=3D"dv">0</span> (<span class=3D"ot">None</span>)
             <span class=3D"dv">29</span> RETURN_VALUE</code></pre>

<p>The conditional <code>if x &lt; 5</code> on line 3 of the code is compil=
ed into four instructions: <code>LOAD_FAST</code>, <code>LOAD_CONST</code>,=
 <code>COMPARE_OP</code>, and <code>POP_JUMP_IF_FALSE</code>. <code>x &lt; =
5</code> generates code to load <code>x</code>, load 5, and compare the two=
 values. The instruction <code>POP_JUMP_IF_FALSE</code> is responsible for =
implementing the <code>if</code>. This instruction will pop the top value o=
ff the interpreter's stack. If the value is true, then nothing happens. (Th=
e value can be "truthy"=E2=80=94it doesn't have to be the literal <code>Tru=
e</code> object.) If the value is false, then the interpreter will jump to =
another instruction.</p>

<p>The instruction to land on is called the jump target, and it's provided =
as the argument to the <code>POP_JUMP</code> instruction. Here, the jump ta=
rget is 22. The instruction at index 22 is <code>LOAD_CONST</code> on line =
6. (<code>dis</code> marks jump targets with <code>&gt;&gt;</code>.) If the=
 result of <code>x &lt; 5</code> is False, then the interpreter will jump s=
traight to line 6 (<code>return "no"</code>), skipping line 4 (<code>return=
 "yes"</code>). Thus, the interpreter uses jump instructions to selectively=
 skip over parts of the instruction set.</p>

<p>Python loops also rely on jumping. In the bytecode below, notice that th=
e line <code>while x &lt; 5</code> generates almost identical bytecode to <=
code>if x &lt; 10</code>. In both cases, the comparison is calculated and t=
hen <code>POP_JUMP_IF_FALSE</code> controls which instruction is executed n=
ext. At the end of line 4=E2=80=94the end of the loop's body=E2=80=94the in=
struction <code>JUMP_ABSOLUTE</code> always sends the interpreter back to i=
nstruction 9 at the top of the loop. When x &lt; 5 becomes false, then <cod=
e>POP_JUMP_IF_FALSE</code> jumps the interpreter past the end of the loop, =
to instruction 34.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> loop():
...      x =3D <span class=3D"dv">1</span>
...      <span class=3D"kw">while</span> x &lt; <span class=3D"dv">5</span>=
:
...          x =3D x + <span class=3D"dv">1</span>
...      <span class=3D"kw">return</span> x
...
&gt;&gt;&gt; dis.dis(loop)
  <span class=3D"dv">2</span>           <span class=3D"dv">0</span> LOAD_CO=
NST               <span class=3D"dv">1</span> (<span class=3D"dv">1</span>)
              <span class=3D"dv">3</span> STORE_FAST               <span cl=
ass=3D"dv">0</span> (x)

  <span class=3D"dv">3</span>           <span class=3D"dv">6</span> SETUP_L=
OOP              <span class=3D"dv">26</span> (to <span class=3D"dv">35</sp=
an>)
        &gt;&gt;    <span class=3D"dv">9</span> LOAD_FAST                <s=
pan class=3D"dv">0</span> (x)
             <span class=3D"dv">12</span> LOAD_CONST               <span cl=
ass=3D"dv">2</span> (<span class=3D"dv">5</span>)
             <span class=3D"dv">15</span> COMPARE_OP               <span cl=
ass=3D"dv">0</span> (&lt;)
             <span class=3D"dv">18</span> POP_JUMP_IF_FALSE       <span cla=
ss=3D"dv">34</span>

  <span class=3D"dv">4</span>          <span class=3D"dv">21</span> LOAD_FA=
ST                <span class=3D"dv">0</span> (x)
             <span class=3D"dv">24</span> LOAD_CONST               <span cl=
ass=3D"dv">1</span> (<span class=3D"dv">1</span>)
             <span class=3D"dv">27</span> BINARY_ADD
             <span class=3D"dv">28</span> STORE_FAST               <span cl=
ass=3D"dv">0</span> (x)
             <span class=3D"dv">31</span> JUMP_ABSOLUTE            <span cl=
ass=3D"dv">9</span>
        &gt;&gt;   <span class=3D"dv">34</span> POP_BLOCK

  <span class=3D"dv">5</span>     &gt;&gt;   <span class=3D"dv">35</span> L=
OAD_FAST                <span class=3D"dv">0</span> (x)
             <span class=3D"dv">38</span> RETURN_VALUE</code></pre>

<h3 id=3D"explore-bytecode">Explore Bytecode</h3>

<p>I encourage you to try running <code>dis.dis</code> on functions you wri=
te. Some questions to explore:</p>

<ul>
<li>What's the difference between a for loop and a while loop to the Python=
 interpreter?</li>
<li>How can you write different functions that generate identical bytecode?=
</li>
<li>How does <code>elif</code> work? What about list comprehensions?</li>
</ul>

<h2 id=3D"frames">Frames</h2>

<p>So far, we've learned that the Python virtual machine is a stack machine=
. It steps and jumps through instructions, pushing and popping values on an=
d off a stack. There are still some gaps in our mental model, though. In th=
e examples above, the last instruction is <code>RETURN_VALUE</code>, which =
corresponds to the <code>return</code> statement in the code. But where doe=
s the instruction return to?</p>

<p>To answer this question, we must add a layer of complexity: the frame. A=
 frame is a collection of information and context for a chunk of code. Fram=
es are created and destroyed on the fly as your Python code executes. There=
's one frame corresponding to each <em>call</em> of a function=E2=80=94so w=
hile each frame has one code object associated with it, a code object can h=
ave many frames. If you had a function that called itself recursively ten t=
imes, you'd have eleven frames=E2=80=94one for each level of recursion and =
one for the module you started from. In general, there's a frame for each s=
cope in a Python program. For example, each module, each function call, and=
 each class definition has a frame.</p>

<p>Frames live on the <em>call stack</em>, a completely different stack fro=
m the one we've been discussing so far. (The call stack is the stack you're=
 most familiar with already=E2=80=94you've seen it printed out in the trace=
backs of exceptions. Each line in a traceback starting with "File 'program.=
py', line 10" corresponds to one frame on the call stack.) The stack we've =
been examining=E2=80=94the one the interpreter is manipulating while it exe=
cutes bytecode=E2=80=94we'll call the <em>data stack</em>. There's also a t=
hird stack, called the <em>block stack</em>. Blocks are used for certain ki=
nds of control flow, particularly looping and exception handling. Each fram=
e on the call stack has its own data stack and block stack.</p>

<p>Let's make this concrete with an example. Suppose the Python interpreter=
 is currently executing the line marked 3 below. The interpreter is in the =
middle of a call to <code>foo</code>, which is in turn calling <code>bar</c=
ode>. The diagram shows a schematic of the call stack of frames, the block =
stacks, and the data stacks. (This code is written like a REPL session, so =
we've first defined the needed functions.) At the moment we're interested i=
n, the interpreter is executing <code>foo()</code>, at the bottom, which th=
en reaches in to the body of <code>foo</code> and then up into <code>bar</c=
ode>. </p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> bar(y):
...     z =3D y + <span class=3D"dv">3</span>     <span class=3D"co"># &lt;=
--- (3) ... and the interpreter is here.</span>
...     <span class=3D"kw">return</span> z
...
&gt;&gt;&gt; <span class=3D"kw">def</span> foo():
...     a =3D <span class=3D"dv">1</span>
...     b =3D <span class=3D"dv">2</span>
...     <span class=3D"kw">return</span> a + bar(b) <span class=3D"co"># &l=
t;--- (2) ... which is returning a call to bar ...</span>
...
&gt;&gt;&gt; foo()             <span class=3D"co"># &lt;--- (1) We're in th=
e middle of a call to foo ...</span>
<span class=3D"dv">3</span></code></pre>

<div class=3D"center figure">
<a name=3D"figure-12.2"></a><img src=3D"http://aosabook.org/en/500L/interpr=
eter-images/interpreter-callstack.png" alt=3D"Figure 12.2 - The call stack"=
 title=3D"Figure 12.2 - The call stack">
</div>

<p class=3D"center figcaption">
<small>Figure 12.2 - The call stack</small>
</p>

<p>At this point, the interpreter is in the middle of the function call to =
<code>bar</code>. There are three frames on the call stack: one for the mod=
ule level, one for the function <code>foo</code>, and one for <code>bar</co=
de> (<a href=3D"http://aosabook.org/en/500L/a-python-interpreter-written-in=
-python.html#figure-12.2">Figure 12.2</a>.) Once <code>bar</code> returns, =
the frame associated with it is popped off the call stack and discarded.</p=
>

<p>The bytecode instruction <code>RETURN_VALUE</code> tells the interpreter=
 to pass a value between frames. First it will pop the top value off the da=
ta stack of the top frame on the call stack. Then it pops the entire frame =
off the call stack and throws it away. Finally, the value is pushed onto th=
e data stack on the next frame down.</p>

<p>When Ned Batchelder and I were working on Byterun, for a long time we ha=
d a significant error in our implementation. Instead of having one data sta=
ck on each frame, we had just one data stack on the entire virtual machine.=
 We had dozens of tests made up of little snippets of Python code which we =
ran through Byterun and through the real Python interpreter to make sure th=
e same thing happened in both interpreters. Nearly all of these tests were =
passing. The only thing we couldn't get working was generators. Finally, re=
ading the CPython code more carefully, we realized the mistake<a href=3D"ht=
tp://aosabook.org/en/500L/a-python-interpreter-written-in-python.html#fn2" =
class=3D"footnoteRef" id=3D"fnref2"><sup>2</sup></a>. Moving a data stack o=
nto each frame fixed the problem.</p>

<p>Looking back on this bug, I was amazed at how little of Python relied on=
 each frame having a different data stack. Nearly all operations in the Pyt=
hon interpreter carefully clean up the data stack, so the fact that the fra=
mes were sharing the same stack didn't matter. In the example above, when <=
code>bar</code> finishes executing, it'll leave its data stack empty. Even =
if <code>foo</code> shared the same stack, the values would be lower down. =
However, with generators, a key feature is the ability to pause a frame, re=
turn to some other frame, and then return to the generator frame later and =
have it be in exactly the same state that you left it. </p>

<h2 id=3D"byterun">Byterun</h2>

<p>We now have enough context about the Python interpreter to begin examini=
ng Byterun.</p>

<p>There are four kinds of objects in Byterun:</p>

<ul>
<li>A <code>VirtualMachine</code> class, which manages the highest-level st=
ructure, particularly the call stack of frames, and contains a mapping of i=
nstructions to operations. This is a more complex version of the <code>Inte=
preter</code> object above.</li>
<li>A <code>Frame</code> class. Every <code>Frame</code> instance has one c=
ode object and manages a few other necessary bits of state, particularly th=
e global and local namespaces, a reference to the calling frame, and the la=
st bytecode instruction executed.</li>
<li>A <code>Function</code> class, which will be used in place of real Pyth=
on functions. Recall that calling a function creates a new frame in the int=
erpreter. We implement Function so that we control the creation of new Fram=
es.</li>
<li>A <code>Block</code> class, which just wraps the three attributes of bl=
ocks. (The details of blocks aren't central to the Python interpreter, so w=
e won't spend much time on them, but they're included here so that Byterun =
can run real Python code.)</li>
</ul>

<h3 id=3D"the-virtualmachine-class">The <code>VirtualMachine</code> Class</=
h3>

<p>Only one instance of <code>VirtualMachine</code> will be created each ti=
me the program is run, because we only have one Python interpreter. <code>V=
irtualMachine</code> stores the call stack, the exception state, and return=
 values while they're being passed between frames. The entry point for exec=
uting code is the method <code>run_code</code>, which takes a compiled code=
 object as an argument. It starts by setting up and running a frame. This f=
rame may create other frames; the call stack will grow and shrink as the pr=
ogram executes. When the first frame eventually returns, execution is finis=
hed.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> VirtualMachineError(<span class=3D"ot">Exception</s=
pan>):
    <span class=3D"kw">pass</span>

<span class=3D"kw">class</span> VirtualMachine(<span class=3D"dt">object</s=
pan>):
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.frames =3D []   <span class=3D"co">#=
 The call stack of frames.</span>
        <span class=3D"ot">self</span>.frame =3D <span class=3D"ot">None</s=
pan>  <span class=3D"co"># The current frame.</span>
        <span class=3D"ot">self</span>.return_value =3D <span class=3D"ot">=
None</span>
        <span class=3D"ot">self</span>.last_exception =3D <span class=3D"ot=
">None</span>

    <span class=3D"kw">def</span> run_code(<span class=3D"ot">self</span>, =
code, global_names=3D<span class=3D"ot">None</span>, local_names=3D<span cl=
ass=3D"ot">None</span>):
        <span class=3D"co">""" An entry point to execute code using the vir=
tual machine."""</span>
        frame =3D <span class=3D"ot">self</span>.make_frame(code, global_na=
mes=3Dglobal_names,=20
                                local_names=3Dlocal_names)
        <span class=3D"ot">self</span>.run_frame(frame)</code></pre>

<h3 id=3D"the-frame-class">The <code>Frame</code> Class</h3>

<p>Next we'll write the <code>Frame</code> object. The frame is a collectio=
n of attributes with no methods. As mentioned above, the attributes include=
 the code object created by the compiler; the local, global, and builtin na=
mespaces; a reference to the previous frame; a data stack; a block stack; a=
nd the last instruction executed. (We have to do a little extra work to get=
 to the builtin namespace because Python treats this namespace differently =
in different modules; this detail is not important to the virtual machine.)=
</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Frame(<span class=3D"dt">object</span>):
    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>, code_obj, global_names, local_names, prev_frame):
        <span class=3D"ot">self</span>.code_obj =3D code_obj
        <span class=3D"ot">self</span>.global_names =3D global_names
        <span class=3D"ot">self</span>.local_names =3D local_names
        <span class=3D"ot">self</span>.prev_frame =3D prev_frame
        <span class=3D"ot">self</span>.stack =3D []
        <span class=3D"kw">if</span> prev_frame:
            <span class=3D"ot">self</span>.builtin_names =3D prev_frame.bui=
ltin_names
        <span class=3D"kw">else</span>:
            <span class=3D"ot">self</span>.builtin_names =3D local_names[<s=
pan class=3D"st">'__builtins__'</span>]
            <span class=3D"kw">if</span> <span class=3D"dt">hasattr</span>(=
<span class=3D"ot">self</span>.builtin_names, <span class=3D"st">'__dict__'=
</span>):
                <span class=3D"ot">self</span>.builtin_names =3D <span clas=
s=3D"ot">self</span>.builtin_names.__dict__

        <span class=3D"ot">self</span>.last_instruction =3D <span class=3D"=
dv">0</span>
        <span class=3D"ot">self</span>.block_stack =3D []</code></pre>

<p>Next, we'll add frame manipulation to the virtual machine. There are thr=
ee helper functions for frames: one to create new frames (which is responsi=
ble for sorting out the namespaces for the new frame) and one each to push =
and pop frames on and off the frame stack. A fourth function, <code>run_fra=
me</code>, does the main work of executing a frame. We'll come back to this=
 soon.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> VirtualMachine(<span class=3D"dt">object</span>):
    [... snip ...]

    <span class=3D"co"># Frame manipulation</span>
    <span class=3D"kw">def</span> make_frame(<span class=3D"ot">self</span>=
, code, callargs=3D{}, global_names=3D<span class=3D"ot">None</span>, local=
_names=3D<span class=3D"ot">None</span>):
        <span class=3D"kw">if</span> global_names is not <span class=3D"ot"=
>None</span> and local_names is not <span class=3D"ot">None</span>:
            local_names =3D global_names
        <span class=3D"kw">elif</span> <span class=3D"ot">self</span>.frame=
s:
            global_names =3D <span class=3D"ot">self</span>.frame.global_na=
mes
            local_names =3D {}
        <span class=3D"kw">else</span>:
            global_names =3D local_names =3D {
                <span class=3D"st">'__builtins__'</span>: __builtins__,
                <span class=3D"co">'__name__'</span>: <span class=3D"st">'_=
_main__'</span>,
                <span class=3D"co">'__doc__'</span>: <span class=3D"ot">Non=
e</span>,
                <span class=3D"co">'__package__'</span>: <span class=3D"ot"=
>None</span>,
            }
        local_names.update(callargs)
        frame =3D Frame(code, global_names, local_names, <span class=3D"ot"=
>self</span>.frame)
        <span class=3D"kw">return</span> frame

    <span class=3D"kw">def</span> push_frame(<span class=3D"ot">self</span>=
, frame):
        <span class=3D"ot">self</span>.frames.append(frame)
        <span class=3D"ot">self</span>.frame =3D frame

    <span class=3D"kw">def</span> pop_frame(<span class=3D"ot">self</span>)=
:
        <span class=3D"ot">self</span>.frames.pop()
        <span class=3D"kw">if</span> <span class=3D"ot">self</span>.frames:
            <span class=3D"ot">self</span>.frame =3D <span class=3D"ot">sel=
f</span>.frames[-<span class=3D"dv">1</span>]
        <span class=3D"kw">else</span>:
            <span class=3D"ot">self</span>.frame =3D <span class=3D"ot">Non=
e</span>

    <span class=3D"kw">def</span> run_frame(<span class=3D"ot">self</span>)=
:
        <span class=3D"kw">pass</span>
        <span class=3D"co"># we'll come back to this shortly</span></code><=
/pre>

<h3 id=3D"the-function-class">The <code>Function</code> Class</h3>

<p>The implementation of the <code>Function</code> object is somewhat twist=
y, and most of the details aren't critical to understanding the interpreter=
. The important thing to notice is that calling a function=E2=80=94invoking=
 the <code>__call__</code> method=E2=80=94creates a new <code>Frame</code> =
object and starts running it.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> Function(<span class=3D"dt">object</span>):
    <span class=3D"co">"""</span>
<span class=3D"co">    Create a realistic function object, defining the thi=
ngs the interpreter expects.</span>
<span class=3D"co">    """</span>
    __slots__ =3D [
        <span class=3D"st">'func_code'</span>, <span class=3D"st">'func_nam=
e'</span>, <span class=3D"st">'func_defaults'</span>, <span class=3D"st">'f=
unc_globals'</span>,
        <span class=3D"co">'func_locals'</span>, <span class=3D"st">'func_d=
ict'</span>, <span class=3D"st">'func_closure'</span>,
        <span class=3D"co">'__name__'</span>, <span class=3D"st">'__dict__'=
</span>, <span class=3D"st">'__doc__'</span>,
        <span class=3D"co">'_vm'</span>, <span class=3D"st">'_func'</span>,
    ]

    <span class=3D"kw">def</span> <span class=3D"ot">__init__</span>(<span =
class=3D"ot">self</span>, name, code, globs, defaults, closure, vm):
        <span class=3D"co">"""You don't need to follow this closely to unde=
rstand the interpreter."""</span>
        <span class=3D"ot">self</span>._vm =3D vm
        <span class=3D"ot">self</span>.func_code =3D code
        <span class=3D"ot">self</span>.func_name =3D <span class=3D"ot">sel=
f</span>.<span class=3D"ot">__name__</span> =3D name or code.co_name
        <span class=3D"ot">self</span>.func_defaults =3D <span class=3D"dt"=
>tuple</span>(defaults)
        <span class=3D"ot">self</span>.func_globals =3D globs
        <span class=3D"ot">self</span>.func_locals =3D <span class=3D"ot">s=
elf</span>._vm.frame.f_locals
        <span class=3D"ot">self</span>.__dict__ =3D {}
        <span class=3D"ot">self</span>.func_closure =3D closure
        <span class=3D"ot">self</span>.__doc__ =3D code.co_consts[<span cla=
ss=3D"dv">0</span>] <span class=3D"kw">if</span> code.co_consts <span class=
=3D"kw">else</span> <span class=3D"ot">None</span>

        <span class=3D"co"># Sometimes, we need a real Python function.  Th=
is is for that.</span>
        kw =3D {
            <span class=3D"st">'argdefs'</span>: <span class=3D"ot">self</s=
pan>.func_defaults,
        }
        <span class=3D"kw">if</span> closure:
            kw[<span class=3D"st">'closure'</span>] =3D <span class=3D"dt">=
tuple</span>(make_cell(<span class=3D"dv">0</span>) <span class=3D"kw">for<=
/span> _ in closure)
        <span class=3D"ot">self</span>._func =3D types.FunctionType(code, g=
lobs, **kw)

    <span class=3D"kw">def</span> <span class=3D"ot">__call__</span>(<span =
class=3D"ot">self</span>, *args, **kwargs):
        <span class=3D"co">"""When calling a Function, make a new frame and=
 run it."""</span>
        callargs =3D inspect.getcallargs(<span class=3D"ot">self</span>._fu=
nc, *args, **kwargs)
        <span class=3D"co"># Use callargs to provide a mapping of arguments=
: values to pass into the new </span>
        <span class=3D"co"># frame.</span>
        frame =3D <span class=3D"ot">self</span>._vm.make_frame(
            <span class=3D"ot">self</span>.func_code, callargs, <span class=
=3D"ot">self</span>.func_globals, {}
        )
        <span class=3D"kw">return</span> <span class=3D"ot">self</span>._vm=
.run_frame(frame)

<span class=3D"kw">def</span> make_cell(value):
    <span class=3D"co">"""Create a real Python closure and grab a cell."""<=
/span>
    <span class=3D"co"># Thanks to Alex Gaynor for help with this bit of tw=
istiness.</span>
    fn =3D (<span class=3D"kw">lambda</span> x: <span class=3D"kw">lambda</=
span>: x)(value)
    <span class=3D"kw">return</span> fn.__closure__[<span class=3D"dv">0</s=
pan>]</code></pre>

<p>Next, back on the <code>VirtualMachine</code> object, we'll add some hel=
per methods for data stack manipulation. The bytecodes that manipulate the =
stack always operate on the current frame's data stack. This will make our =
implementations of <code>POP_TOP</code>, <code>LOAD_FAST</code>, and all th=
e other instructions that touch the stack more readable.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> VirtualMachine(<span class=3D"dt">object</span>):
    [... snip ...]

    <span class=3D"co"># Data stack manipulation</span>
    <span class=3D"kw">def</span> top(<span class=3D"ot">self</span>):
        <span class=3D"kw">return</span> <span class=3D"ot">self</span>.fra=
me.stack[-<span class=3D"dv">1</span>]

    <span class=3D"kw">def</span> pop(<span class=3D"ot">self</span>):
        <span class=3D"kw">return</span> <span class=3D"ot">self</span>.fra=
me.stack.pop()

    <span class=3D"kw">def</span> push(<span class=3D"ot">self</span>, *val=
s):
        <span class=3D"ot">self</span>.frame.stack.extend(vals)

    <span class=3D"kw">def</span> popn(<span class=3D"ot">self</span>, n):
        <span class=3D"co">"""Pop a number of values from the value stack.<=
/span>
<span class=3D"co">        A list of `n` values is returned, the deepest va=
lue first.</span>
<span class=3D"co">        """</span>
        <span class=3D"kw">if</span> n:
            ret =3D <span class=3D"ot">self</span>.frame.stack[-n:]
            <span class=3D"ot">self</span>.frame.stack[-n:] =3D []
            <span class=3D"kw">return</span> ret
        <span class=3D"kw">else</span>:
            <span class=3D"kw">return</span> []</code></pre>

<p>Before we get to running a frame, we need two more methods.</p>

<p>The first, <code>parse_byte_and_args</code>, takes a bytecode, checks if=
 it has arguments, and parses the arguments if so. This method also updates=
 the frame's attribute <code>last_instruction</code>, a reference to the la=
st instruction executed. A single instruction is one byte long if it doesn'=
t have an argument, and three bytes if it does have an argument; the last t=
wo bytes are the argument. The meaning of the argument to each instruction =
depends on which instruction it is. For example, as mentioned above, for <c=
ode>POP_JUMP_IF_FALSE</code>, the argument to the instruction is the jump t=
arget. For <code>BUILD_LIST</code>, it is the number of elements in the lis=
t. For <code>LOAD_CONST</code>, it's an index into the list of constants.</=
p>

<p>Some instructions use simple numbers as their arguments. For others, the=
 virtual machine has to do a little work to discover what the arguments mea=
n. The <code>dis</code> module in the standard library exposes a cheatsheet=
 explaining what arguments have what meaning, which makes our code more com=
pact. For example, the list <code>dis.hasname</code> tells us that the argu=
ments to <code>LOAD_NAME</code>, <code>IMPORT_NAME</code>, <code>LOAD_GLOBA=
L</code>, and nine other instructions have the same meaning: for these inst=
ructions, the argument represents an index into the list of names on the co=
de object.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> VirtualMachine(<span class=3D"dt">object</span>):
    [... snip ...]

    <span class=3D"kw">def</span> parse_byte_and_args(<span class=3D"ot">se=
lf</span>):
        f =3D <span class=3D"ot">self</span>.frame
        opoffset =3D f.last_instruction
        byteCode =3D f.code_obj.co_code[opoffset]
        f.last_instruction +=3D <span class=3D"dv">1</span>
        byte_name =3D dis.opname[byteCode]
        <span class=3D"kw">if</span> byteCode &gt;=3D dis.HAVE_ARGUMENT:
            <span class=3D"co"># index into the bytecode</span>
            arg =3D f.code_obj.co_code[f.last_instruction:f.last_instructio=
n<span class=3D"dv">+2</span>] =20
            f.last_instruction +=3D <span class=3D"dv">2</span>   <span cla=
ss=3D"co"># advance the instruction pointer</span>
            arg_val =3D arg[<span class=3D"dv">0</span>] + (arg[<span class=
=3D"dv">1</span>] * <span class=3D"dv">256</span>)
            <span class=3D"kw">if</span> byteCode in dis.hasconst:   <span =
class=3D"co"># Look up a constant</span>
                arg =3D f.code_obj.co_consts[arg_val]
            <span class=3D"kw">elif</span> byteCode in dis.hasname:  <span =
class=3D"co"># Look up a name</span>
                arg =3D f.code_obj.co_names[arg_val]
            <span class=3D"kw">elif</span> byteCode in dis.haslocal: <span =
class=3D"co"># Look up a local name</span>
                arg =3D f.code_obj.co_varnames[arg_val]
            <span class=3D"kw">elif</span> byteCode in dis.hasjrel:  <span =
class=3D"co"># Calculate a relative jump</span>
                arg =3D f.last_instruction + arg_val
            <span class=3D"kw">else</span>:
                arg =3D arg_val
            argument =3D [arg]
        <span class=3D"kw">else</span>:
            argument =3D []

        <span class=3D"kw">return</span> byte_name, argument</code></pre>

<p>The next method is <code>dispatch</code>, which looks up the operations =
for a given instruction and executes them. In the CPython interpreter, this=
 dispatch is done with a giant switch statement that spans 1,500 lines! Luc=
kily, since we're writing Python, we can be more compact. We'll define a me=
thod for each byte name and then use <code>getattr</code> to look it up. Li=
ke in the toy interpreter above, if our instruction is named <code>FOO_BAR<=
/code>, the corresponding method would be named <code>byte_FOO_BAR</code>. =
For the moment, we'll leave the content of these methods as a black box. Ea=
ch bytecode method will return either <code>None</code> or a string, called=
 <code>why</code>, which is an extra piece of state the interpreter needs i=
n some cases. These return values of the individual instruction methods are=
 used only as internal indicators of interpreter state=E2=80=94don't confus=
e these with return values from executing frames.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> VirtualMachine(<span class=3D"dt">object</span>):
    [... snip ...]

    <span class=3D"kw">def</span> dispatch(<span class=3D"ot">self</span>, =
byte_name, argument):
        <span class=3D"co">""" Dispatch by bytename to the corresponding me=
thods.</span>
<span class=3D"co">        Exceptions are caught and set on the virtual mac=
hine."""</span>

        <span class=3D"co"># When later unwinding the block stack,</span>
        <span class=3D"co"># we need to keep track of why we are doing it.<=
/span>
        why =3D <span class=3D"ot">None</span>
        <span class=3D"kw">try</span>:
            bytecode_fn =3D <span class=3D"dt">getattr</span>(<span class=
=3D"ot">self</span>, <span class=3D"st">'byte_</span><span class=3D"ot">%s<=
/span><span class=3D"st">'</span> % byte_name, <span class=3D"ot">None</spa=
n>)
            <span class=3D"kw">if</span> bytecode_fn is <span class=3D"ot">=
None</span>:
                <span class=3D"kw">if</span> byte_name.startswith(<span cla=
ss=3D"st">'UNARY_'</span>):
                    <span class=3D"ot">self</span>.unaryOperator(byte_name[=
<span class=3D"dv">6</span>:])
                <span class=3D"kw">elif</span> byte_name.startswith(<span c=
lass=3D"st">'BINARY_'</span>):
                    <span class=3D"ot">self</span>.binaryOperator(byte_name=
[<span class=3D"dv">7</span>:])
                <span class=3D"kw">else</span>:
                    <span class=3D"kw">raise</span> VirtualMachineError(
                        <span class=3D"st">"unsupported bytecode type: </sp=
an><span class=3D"ot">%s</span><span class=3D"st">"</span> % byte_name
                    )
            <span class=3D"kw">else</span>:
                why =3D bytecode_fn(*argument)
        <span class=3D"kw">except</span>:
            <span class=3D"co"># deal with exceptions encountered while exe=
cuting the op.</span>
            <span class=3D"ot">self</span>.last_exception =3D sys.exc_info(=
)[:<span class=3D"dv">2</span>] + (<span class=3D"ot">None</span>,)
            why =3D <span class=3D"st">'exception'</span>

        <span class=3D"kw">return</span> why

    <span class=3D"kw">def</span> run_frame(<span class=3D"ot">self</span>,=
 frame):
        <span class=3D"co">"""Run a frame until it returns (somehow).</span=
>
<span class=3D"co">        Exceptions are raised, the return value is retur=
ned.</span>
<span class=3D"co">        """</span>
        <span class=3D"ot">self</span>.push_frame(frame)
        <span class=3D"kw">while</span> <span class=3D"ot">True</span>:
            byte_name, arguments =3D <span class=3D"ot">self</span>.parse_b=
yte_and_args()

            why =3D <span class=3D"ot">self</span>.dispatch(byte_name, argu=
ments)

            <span class=3D"co"># Deal with any block management we need to =
do</span>
            <span class=3D"kw">while</span> why and frame.block_stack:
                why =3D <span class=3D"ot">self</span>.manage_block_stack(w=
hy)

            <span class=3D"kw">if</span> why:
                <span class=3D"kw">break</span>

        <span class=3D"ot">self</span>.pop_frame()

        <span class=3D"kw">if</span> why =3D=3D <span class=3D"st">'excepti=
on'</span>:
            exc, val, tb =3D <span class=3D"ot">self</span>.last_exception
            e =3D exc(val)
            e.__traceback__ =3D tb
            <span class=3D"kw">raise</span> e

        <span class=3D"kw">return</span> <span class=3D"ot">self</span>.ret=
urn_value</code></pre>

<h3 id=3D"the-block-class">The <code>Block</code> Class</h3>

<p>Before we implement the methods for each bytecode instruction, we'll bri=
efly discuss blocks. A block is used for certain kinds of flow control, spe=
cifically exception handling and looping. The block is reponsible for makin=
g sure that the data stack is in the appropriate state when the operation i=
s finished. For example, in a loop, a special iterator object remains on th=
e stack while the loop is running, but is popped off when it is finished. T=
he interpreter must keep track of whether the loop is continuing or is fini=
shed.</p>

<p>To keep track of this extra piece of information, the interpreter sets a=
 flag to indicate its state. We implement this flag as a variable called <c=
ode>why</code>, which can be <code>None</code> or one of the strings <code>=
"continue"</code>, <code>"break"</code>, <code>"exception"</code>, or <code=
>"return"</code>. This indicates what kind of manipulation of the block sta=
ck and data stack should happen. To return to the iterator example, if the =
top of the block stack is a <code>loop</code> block and the <code>why</code=
> code is <code>continue</code>, the iterator object should remain on the d=
ata stack, but if the <code>why</code> code is <code>break</code>, it shoul=
d be popped off.</p>

<p>The precise details of block manipulation are rather fiddly, and we won'=
t spend more time on this, but interested readers are encouraged to take a =
careful look.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">Block =
=3D collections.namedtuple(<span class=3D"st">"Block"</span>, <span class=
=3D"st">"type, handler, stack_height"</span>)

<span class=3D"kw">class</span> VirtualMachine(<span class=3D"dt">object</s=
pan>):
    [... snip ...]

    <span class=3D"co"># Block stack manipulation</span>
    <span class=3D"kw">def</span> push_block(<span class=3D"ot">self</span>=
, b_type, handler=3D<span class=3D"ot">None</span>):
        stack_height =3D <span class=3D"dt">len</span>(<span class=3D"ot">s=
elf</span>.frame.stack)
        <span class=3D"ot">self</span>.frame.block_stack.append(Block(b_typ=
e, handler, stack_height))

    <span class=3D"kw">def</span> pop_block(<span class=3D"ot">self</span>)=
:
        <span class=3D"kw">return</span> <span class=3D"ot">self</span>.fra=
me.block_stack.pop()

    <span class=3D"kw">def</span> unwind_block(<span class=3D"ot">self</spa=
n>, block):
        <span class=3D"co">"""Unwind the values on the data stack correspon=
ding to a given block."""</span>
        <span class=3D"kw">if</span> block.<span class=3D"dt">type</span> =
=3D=3D <span class=3D"st">'except-handler'</span>:
            <span class=3D"co"># The exception itself is on the stack as ty=
pe, value, and traceback.</span>
            offset =3D <span class=3D"dv">3</span> =20
        <span class=3D"kw">else</span>:
            offset =3D <span class=3D"dv">0</span>

        <span class=3D"kw">while</span> <span class=3D"dt">len</span>(<span=
 class=3D"ot">self</span>.frame.stack) &gt; block.level + offset:
            <span class=3D"ot">self</span>.pop()

        <span class=3D"kw">if</span> block.<span class=3D"dt">type</span> =
=3D=3D <span class=3D"st">'except-handler'</span>:
            traceback, value, exctype =3D <span class=3D"ot">self</span>.po=
pn(<span class=3D"dv">3</span>)
            <span class=3D"ot">self</span>.last_exception =3D exctype, valu=
e, traceback

    <span class=3D"kw">def</span> manage_block_stack(<span class=3D"ot">sel=
f</span>, why):
        <span class=3D"co">""" """</span>
        frame =3D <span class=3D"ot">self</span>.frame
        block =3D frame.block_stack[-<span class=3D"dv">1</span>]
        <span class=3D"kw">if</span> block.<span class=3D"dt">type</span> =
=3D=3D <span class=3D"st">'loop'</span> and why =3D=3D <span class=3D"st">'=
continue'</span>:
            <span class=3D"ot">self</span>.jump(<span class=3D"ot">self</sp=
an>.return_value)
            why =3D <span class=3D"ot">None</span>
            <span class=3D"kw">return</span> why

        <span class=3D"ot">self</span>.pop_block()
        <span class=3D"ot">self</span>.unwind_block(block)

        <span class=3D"kw">if</span> block.<span class=3D"dt">type</span> =
=3D=3D <span class=3D"st">'loop'</span> and why =3D=3D <span class=3D"st">'=
break'</span>:
            why =3D <span class=3D"ot">None</span>
            <span class=3D"ot">self</span>.jump(block.handler)
            <span class=3D"kw">return</span> why

        <span class=3D"kw">if</span> (block.<span class=3D"dt">type</span> =
in [<span class=3D"st">'setup-except'</span>, <span class=3D"st">'finally'<=
/span>] and why =3D=3D <span class=3D"st">'exception'</span>):
            <span class=3D"ot">self</span>.push_block(<span class=3D"st">'e=
xcept-handler'</span>)
            exctype, value, tb =3D <span class=3D"ot">self</span>.last_exce=
ption
            <span class=3D"ot">self</span>.push(tb, value, exctype)
            <span class=3D"ot">self</span>.push(tb, value, exctype) <span c=
lass=3D"co"># yes, twice</span>
            why =3D <span class=3D"ot">None</span>
            <span class=3D"ot">self</span>.jump(block.handler)
            <span class=3D"kw">return</span> why

        <span class=3D"kw">elif</span> block.<span class=3D"dt">type</span>=
 =3D=3D <span class=3D"st">'finally'</span>:
            <span class=3D"kw">if</span> why in (<span class=3D"st">'return=
'</span>, <span class=3D"st">'continue'</span>):
                <span class=3D"ot">self</span>.push(<span class=3D"ot">self=
</span>.return_value)

            <span class=3D"ot">self</span>.push(why)

            why =3D <span class=3D"ot">None</span>
            <span class=3D"ot">self</span>.jump(block.handler)
            <span class=3D"kw">return</span> why
        <span class=3D"kw">return</span> why</code></pre>

<h2 id=3D"the-instructions">The Instructions</h2>

<p>All that's left is to implement the dozens of methods for instructions. =
The actual instructions are the least interesting part of the interpreter, =
so we show only a handful here, but the full implementation is <a href=3D"h=
ttps://github.com/nedbat/byterun">available on GitHub</a>. (Enough instruct=
ions are included here to execute all the code samples that we disassembled=
 above.)</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> VirtualMachine(<span class=3D"dt">object</span>):
    [... snip ...]

    <span class=3D"co">## Stack manipulation</span>

    <span class=3D"kw">def</span> byte_LOAD_CONST(<span class=3D"ot">self</=
span>, const):
        <span class=3D"ot">self</span>.push(const)

    <span class=3D"kw">def</span> byte_POP_TOP(<span class=3D"ot">self</spa=
n>):
        <span class=3D"ot">self</span>.pop()

    <span class=3D"co">## Names</span>
    <span class=3D"kw">def</span> byte_LOAD_NAME(<span class=3D"ot">self</s=
pan>, name):
        frame =3D <span class=3D"ot">self</span>.frame
        <span class=3D"kw">if</span> name in frame.f_locals:
            val =3D frame.f_locals[name]
        <span class=3D"kw">elif</span> name in frame.f_globals:
            val =3D frame.f_globals[name]
        <span class=3D"kw">elif</span> name in frame.f_builtins:
            val =3D frame.f_builtins[name]
        <span class=3D"kw">else</span>:
            <span class=3D"kw">raise</span> <span class=3D"ot">NameError</s=
pan>(<span class=3D"st">"name '</span><span class=3D"ot">%s</span><span cla=
ss=3D"st">' is not defined"</span> % name)
        <span class=3D"ot">self</span>.push(val)

    <span class=3D"kw">def</span> byte_STORE_NAME(<span class=3D"ot">self</=
span>, name):
        <span class=3D"ot">self</span>.frame.f_locals[name] =3D <span class=
=3D"ot">self</span>.pop()

    <span class=3D"kw">def</span> byte_LOAD_FAST(<span class=3D"ot">self</s=
pan>, name):
        <span class=3D"kw">if</span> name in <span class=3D"ot">self</span>=
.frame.f_locals:
            val =3D <span class=3D"ot">self</span>.frame.f_locals[name]
        <span class=3D"kw">else</span>:
            <span class=3D"kw">raise</span> <span class=3D"ot">UnboundLocal=
Error</span>(
                <span class=3D"st">"local variable '</span><span class=3D"o=
t">%s</span><span class=3D"st">' referenced before assignment"</span> % nam=
e
            )
        <span class=3D"ot">self</span>.push(val)

    <span class=3D"kw">def</span> byte_STORE_FAST(<span class=3D"ot">self</=
span>, name):
        <span class=3D"ot">self</span>.frame.f_locals[name] =3D <span class=
=3D"ot">self</span>.pop()

    <span class=3D"kw">def</span> byte_LOAD_GLOBAL(<span class=3D"ot">self<=
/span>, name):
        f =3D <span class=3D"ot">self</span>.frame
        <span class=3D"kw">if</span> name in f.f_globals:
            val =3D f.f_globals[name]
        <span class=3D"kw">elif</span> name in f.f_builtins:
            val =3D f.f_builtins[name]
        <span class=3D"kw">else</span>:
            <span class=3D"kw">raise</span> <span class=3D"ot">NameError</s=
pan>(<span class=3D"st">"global name '</span><span class=3D"ot">%s</span><s=
pan class=3D"st">' is not defined"</span> % name)
        <span class=3D"ot">self</span>.push(val)

    <span class=3D"co">## Operators</span>

    BINARY_OPERATORS =3D {
        <span class=3D"st">'POWER'</span>:    <span class=3D"dt">pow</span>=
,
        <span class=3D"co">'MULTIPLY'</span>: operator.mul,
        <span class=3D"co">'FLOOR_DIVIDE'</span>: operator.floordiv,
        <span class=3D"co">'TRUE_DIVIDE'</span>:  operator.truediv,
        <span class=3D"co">'MODULO'</span>:   operator.mod,
        <span class=3D"co">'ADD'</span>:      operator.add,
        <span class=3D"co">'SUBTRACT'</span>: operator.sub,
        <span class=3D"co">'SUBSCR'</span>:   operator.getitem,
        <span class=3D"co">'LSHIFT'</span>:   operator.lshift,
        <span class=3D"co">'RSHIFT'</span>:   operator.rshift,
        <span class=3D"co">'AND'</span>:      operator.and_,
        <span class=3D"co">'XOR'</span>:      operator.xor,
        <span class=3D"co">'OR'</span>:       operator.or_,
    }

    <span class=3D"kw">def</span> binaryOperator(<span class=3D"ot">self</s=
pan>, op):
        x, y =3D <span class=3D"ot">self</span>.popn(<span class=3D"dv">2</=
span>)
        <span class=3D"ot">self</span>.push(<span class=3D"ot">self</span>.=
BINARY_OPERATORS[op](x, y))

    COMPARE_OPERATORS =3D [
        operator.lt,
        operator.le,
        operator.eq,
        operator.ne,
        operator.gt,
        operator.ge,
        <span class=3D"kw">lambda</span> x, y: x in y,
        <span class=3D"kw">lambda</span> x, y: x not in y,
        <span class=3D"kw">lambda</span> x, y: x is y,
        <span class=3D"kw">lambda</span> x, y: x is not y,
        <span class=3D"kw">lambda</span> x, y: <span class=3D"dt">issubclas=
s</span>(x, <span class=3D"ot">Exception</span>) and <span class=3D"dt">iss=
ubclass</span>(x, y),
    ]

    <span class=3D"kw">def</span> byte_COMPARE_OP(<span class=3D"ot">self</=
span>, opnum):
        x, y =3D <span class=3D"ot">self</span>.popn(<span class=3D"dv">2</=
span>)
        <span class=3D"ot">self</span>.push(<span class=3D"ot">self</span>.=
COMPARE_OPERATORS[opnum](x, y))

    <span class=3D"co">## Attributes and indexing</span>

    <span class=3D"kw">def</span> byte_LOAD_ATTR(<span class=3D"ot">self</s=
pan>, attr):
        obj =3D <span class=3D"ot">self</span>.pop()
        val =3D <span class=3D"dt">getattr</span>(obj, attr)
        <span class=3D"ot">self</span>.push(val)

    <span class=3D"kw">def</span> byte_STORE_ATTR(<span class=3D"ot">self</=
span>, name):
        val, obj =3D <span class=3D"ot">self</span>.popn(<span class=3D"dv"=
>2</span>)
        <span class=3D"dt">setattr</span>(obj, name, val)

    <span class=3D"co">## Building</span>

    <span class=3D"kw">def</span> byte_BUILD_LIST(<span class=3D"ot">self</=
span>, count):
        elts =3D <span class=3D"ot">self</span>.popn(count)
        <span class=3D"ot">self</span>.push(elts)

    <span class=3D"kw">def</span> byte_BUILD_MAP(<span class=3D"ot">self</s=
pan>, size):
        <span class=3D"ot">self</span>.push({})

    <span class=3D"kw">def</span> byte_STORE_MAP(<span class=3D"ot">self</s=
pan>):
        the_map, val, key =3D <span class=3D"ot">self</span>.popn(<span cla=
ss=3D"dv">3</span>)
        the_map[key] =3D val
        <span class=3D"ot">self</span>.push(the_map)

    <span class=3D"kw">def</span> byte_LIST_APPEND(<span class=3D"ot">self<=
/span>, count):
        val =3D <span class=3D"ot">self</span>.pop()
        the_list =3D <span class=3D"ot">self</span>.frame.stack[-count] <sp=
an class=3D"co"># peek</span>
        the_list.append(val)

    <span class=3D"co">## Jumps</span>

    <span class=3D"kw">def</span> byte_JUMP_FORWARD(<span class=3D"ot">self=
</span>, jump):
        <span class=3D"ot">self</span>.jump(jump)

    <span class=3D"kw">def</span> byte_JUMP_ABSOLUTE(<span class=3D"ot">sel=
f</span>, jump):
        <span class=3D"ot">self</span>.jump(jump)

    <span class=3D"kw">def</span> byte_POP_JUMP_IF_TRUE(<span class=3D"ot">=
self</span>, jump):
        val =3D <span class=3D"ot">self</span>.pop()
        <span class=3D"kw">if</span> val:
            <span class=3D"ot">self</span>.jump(jump)

    <span class=3D"kw">def</span> byte_POP_JUMP_IF_FALSE(<span class=3D"ot"=
>self</span>, jump):
        val =3D <span class=3D"ot">self</span>.pop()
        <span class=3D"kw">if</span> not val:
            <span class=3D"ot">self</span>.jump(jump)

    <span class=3D"co">## Blocks</span>

    <span class=3D"kw">def</span> byte_SETUP_LOOP(<span class=3D"ot">self</=
span>, dest):
        <span class=3D"ot">self</span>.push_block(<span class=3D"st">'loop'=
</span>, dest)

    <span class=3D"kw">def</span> byte_GET_ITER(<span class=3D"ot">self</sp=
an>):
        <span class=3D"ot">self</span>.push(<span class=3D"dt">iter</span>(=
<span class=3D"ot">self</span>.pop()))

    <span class=3D"kw">def</span> byte_FOR_ITER(<span class=3D"ot">self</sp=
an>, jump):
        iterobj =3D <span class=3D"ot">self</span>.top()
        <span class=3D"kw">try</span>:
            v =3D <span class=3D"dt">next</span>(iterobj)
            <span class=3D"ot">self</span>.push(v)
        <span class=3D"kw">except</span> <span class=3D"ot">StopIteration</=
span>:
            <span class=3D"ot">self</span>.pop()
            <span class=3D"ot">self</span>.jump(jump)

    <span class=3D"kw">def</span> byte_BREAK_LOOP(<span class=3D"ot">self</=
span>):
        <span class=3D"kw">return</span> <span class=3D"st">'break'</span>

    <span class=3D"kw">def</span> byte_POP_BLOCK(<span class=3D"ot">self</s=
pan>):
        <span class=3D"ot">self</span>.pop_block()

    <span class=3D"co">## Functions</span>

    <span class=3D"kw">def</span> byte_MAKE_FUNCTION(<span class=3D"ot">sel=
f</span>, argc):
        name =3D <span class=3D"ot">self</span>.pop()
        code =3D <span class=3D"ot">self</span>.pop()
        defaults =3D <span class=3D"ot">self</span>.popn(argc)
        globs =3D <span class=3D"ot">self</span>.frame.f_globals
        fn =3D Function(name, code, globs, defaults, <span class=3D"ot">Non=
e</span>, <span class=3D"ot">self</span>)
        <span class=3D"ot">self</span>.push(fn)

    <span class=3D"kw">def</span> byte_CALL_FUNCTION(<span class=3D"ot">sel=
f</span>, arg):
        lenKw, lenPos =3D <span class=3D"dt">divmod</span>(arg, <span class=
=3D"dv">256</span>) <span class=3D"co"># KWargs not supported here</span>
        posargs =3D <span class=3D"ot">self</span>.popn(lenPos)

        func =3D <span class=3D"ot">self</span>.pop()
        frame =3D <span class=3D"ot">self</span>.frame
        retval =3D func(*posargs)
        <span class=3D"ot">self</span>.push(retval)

    <span class=3D"kw">def</span> byte_RETURN_VALUE(<span class=3D"ot">self=
</span>):
        <span class=3D"ot">self</span>.return_value =3D <span class=3D"ot">=
self</span>.pop()
        <span class=3D"kw">return</span> <span class=3D"st">"return"</span>=
</code></pre>

<h2 id=3D"dynamic-typing-what-the-compiler-doesnt-know">Dynamic Typing: Wha=
t the Compiler Doesn't Know</h2>

<p>One thing you've probably heard is that Python is a "dynamic" language=
=E2=80=94particularly that it's "dynamically typed". The work we've done to=
 this point sheds some light on this description.</p>

<p>One of the things "dynamic" means in this context is that a lot of work =
is done at run time. We saw earlier that the Python compiler doesn't have m=
uch information about what the code actually does. For example, consider th=
e short function <code>mod</code> below. <code>mod</code> takes two argumen=
ts and returns the first modulo the second. In the bytecode, we see that th=
e variables <code>a</code> and <code>b</code> are loaded, then the bytecode=
 <code>BINARY_MODULO</code> performs the modulo operation itself.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; <span class=3D"kw">def</span> mod(a, b):
...    <span class=3D"kw">return</span> a % b
&gt;&gt;&gt; dis.dis(mod)
  <span class=3D"dv">2</span>           <span class=3D"dv">0</span> LOAD_FA=
ST                <span class=3D"dv">0</span> (a)
              <span class=3D"dv">3</span> LOAD_FAST                <span cl=
ass=3D"dv">1</span> (b)
              <span class=3D"dv">6</span> BINARY_MODULO
              <span class=3D"dv">7</span> RETURN_VALUE
&gt;&gt;&gt; mod(<span class=3D"dv">19</span>, <span class=3D"dv">5</span>)
<span class=3D"dv">4</span></code></pre>

<p>Calculating 19 <code>%</code> 5 yields 4=E2=80=94no surprise there. What=
 happens if we call it with different arguments?</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">&gt;&gt;=
&gt; mod(<span class=3D"st">"by</span><span class=3D"ot">%s</span><span cla=
ss=3D"st">de"</span>, <span class=3D"st">"teco"</span>)
<span class=3D"co">'bytecode'</span></code></pre>

<p>What just happened? You've probably seen this syntax before, but in a di=
fferent context:</p>

<pre><code>&gt;&gt;&gt; print("by%sde" % "teco")
bytecode</code></pre>

<p>Using the symbol <code>%</code> to format a string for printing means in=
voking the instruction <code>BINARY_MODULO</code>. This instruction mods to=
gether the top two values on the stack when the instruction executes=E2=80=
=94regardless of whether they're strings, integers, or instances of a class=
 you defined yourself. The bytecode was generated when the function was com=
piled (effectively, when it was defined) and the same bytecode is used with=
 different types of arguments.</p>

<p>The Python compiler knows relatively little about the effect the bytecod=
e will have. It's up to the interpreter to determine the type of the object=
 that <code>BINARY_MODULO</code> is operating on and do the right thing for=
 that type. This is why Python is described as <em>dynamically typed</em>: =
you don't know the types of the arguments to this function until you actual=
ly run it. By contrast, in a language that's statically typed, the programm=
er tells the compiler up front what type the arguments will be (or the comp=
iler figures them out for itself).</p>

<p>The compiler's ignorance is one of the challenges to optimizing Python o=
r analyzing it statically=E2=80=94just looking at the bytecode, without act=
ually running the code, you don't know what each instruction will do! In fa=
ct, you could define a class that implements the <code>__mod__</code> metho=
d, and Python would invoke that method if you use <code>%</code> on your ob=
jects. So <code>BINARY_MODULO</code> could run any code at all!</p>

<p>Just looking at the following code, the first calculation of <code>a % b=
</code> seems wasteful.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> mod(a,b):
    a % b
    <span class=3D"kw">return</span> a %b</code></pre>

<p>Unfortunately, a static analysis of this code=E2=80=94the kind of you ca=
n do without running it=E2=80=94can't be certain that the first <code>a % b=
</code> really does nothing. Calling <code>__mod__</code> with <code>%</cod=
e> might write to a file, or interact with another part of your program, or=
 do literally anything else that's possible in Python. It's hard to optimiz=
e a function when you don't know what it does! In Russell Power and Alex Ru=
binsteyn's great paper "How fast can we make interpreted Python?", they not=
e, "In the general absence of type information, each instruction must be tr=
eated as <code>INVOKE_ARBITRARY_METHOD</code>."</p>

<h2 id=3D"conclusion">Conclusion</h2>

<p>Byterun is a compact Python interpreter that's easier to understand than=
 CPython. Byterun replicates CPython's primary structural details: a stack-=
based interpreter operating on instruction sets called bytecode. It steps o=
r jumps through these instructions, pushing to and popping from a stack of =
data. The interpreter creates, destroys, and jumps between frames as it cal=
ls into and returns from functions and generators. Byterun shares the real =
interpreter's limitations, too: because Python uses dynamic typing, the int=
erpreter must work hard at run time to determine the correct behavior of a =
program.</p>

<p>I encourage you to disassemble your own programs and to run them using B=
yterun. You'll quickly run into instructions that this shorter version of B=
yterun doesn't implement. The full implementation can be found at https://g=
ithub.com/nedbat/byterun=E2=80=94or, by carefully reading the real CPython =
interpreter's <code>ceval.c</code>, you can implement it yourself!</p>

<h2 id=3D"acknowledgements">Acknowledgements</h2>

<p>Thanks to Ned Batchelder for originating this project and guiding my con=
tributions, Michael Arntzenius for his help debugging the code and editing =
the prose, Leta Montopoli for her edits, and the entire Recurse Center comm=
unity for their support and interest. Any errors are my own.</p>

<div class=3D"footnotes">
<hr>
<ol>
<li id=3D"fn1"><p>This chapter is based on bytecode produced by Python 3.5 =
or earlier, as there were some changes to the bytecode specification in Pyt=
hon 3.6.<a href=3D"http://aosabook.org/en/500L/a-python-interpreter-written=
-in-python.html#fnref1">=E2=86=A9</a></p></li>
<li id=3D"fn2"><p>My thanks to Michael Arntzenius for his insight on this b=
ug.<a href=3D"http://aosabook.org/en/500L/a-python-interpreter-written-in-p=
ython.html#fnref2">=E2=86=A9</a></p></li>
</ol>
</div>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div id=3D"qb-sougou-search" style=
=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D"last-b=
tn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-102-f118a412-9b93-44af-a=
991-9d889150d9af@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/interpreter-images/interpreter-stack.png

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
dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRp
b24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5j
b20vdGlmZi8xLjAvIj4KICAgICAgICAgPHRpZmY6Q29tcHJlc3Npb24+NTwvdGlmZjpDb21wcmVz
c2lvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAg
ICAgICAgPHRpZmY6UGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvbj4yPC90aWZmOlBob3RvbWV0cmlj
SW50ZXJwcmV0YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+Cjwv
eDp4bXBtZXRhPgqLTwSyAABAAElEQVR4Ae3dD5Rc1X0g6B8Z/YNEEHCEY2QsMTKsIKjwyPERToyd
FjhBJnazM9g7sZU5EM80rDfHtE8SM3LGmmz7jFnlZBbaJ8crtJsjn2OJs1kYrxvbK+JYKBYeI4YI
m1Z20djSSISIiaVY2FKMJFqT2vckVfV7r6u7qruruqu6vsd51Ptz3333fvf11atfvboVYSJAgAAB
AgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQI
ECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBA
gAABAgQIECBAgACBWRG4aFbO6qQECBAgQIAAAQLtLPDvksL9bjIvaOdCKhsBAg0LvJ6k/KNk/v2G
j5CQAAECBAgQIEBgxgUE62ec3AkJECBAgAABAm0vcCYpoUB92zeTAhKYlEAasF84qSMkJkCAAAEC
BAgQmFEBwfoZ5XYyAgQIECBAgEBHCJQ7opQKSYDAZAW8/5usmPQECBAgQIAAgRkUmDeD53IqAgQI
ECBAgACBDhMol8XtO6zJFJdATuCii8TncyBWCBAgQIAAAQJtLPBTbVw2RSNAgAABAgQIECBAgAAB
AgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQI
ECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspG
gAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC
9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQI
ECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBA
gAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAAB
AgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQI
ECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjf
Fc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAAB
Al0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQI
ECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBA
gAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAAB
AgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3c
OspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQ
zgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQIECBAgAAB
AgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBAgAABAgQI
ECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2skgQIECBA
gAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0hIFjfFc2s
kgQIECBAgAABAgQIECBAgAABAgQIECDQzgKC9e3cOspGgAABAgQIECBAgAABAgQIECBAgAABAl0h
IFjfFc2skgQIECBAgAABAgQIECBAgAABAgQIECDQzgLz2rlwykaAAAECBAgQINBNAmfj9OmzSYXn
xbxzd6mV124yUFcCBAgQIECAAAECBLpVQLC+W1tevQkQIECAAAECbSFwOvY//dV4bNu2eHzLUAwX
ylTq6Y21Pevi/XfeHu9etSwJ45vaReDVg0/Hzu+8GgsWJCW6/Lp43y0rtU+7NI5yECBAgAABAgQI
ECBAgAABAgQIECAwJwTKSS3OzeUWTkf3PlZeXzp/nsr5JnwtrS9v33O4hSWS9WQE9g72VK+TKA2W
j0/mYGlnTKDwN5WsmggQIECAAAECBNpVwJj17doyykWAAAECBAgQmMMCz3/h3rjy7R+MbcVH6Seq
8/C2+MjNy+OmTzweJydKZ9+MCMxfuHT0PG9Y6Kn6UQ1LBAgQIECAAAECBKYk4JvEU2JzEAECBAgQ
IECAwFQFXn32c/H2e7aMObzU2x8fvfMdsfyKBfH3x38YB7/3fOx6cEvsKqQcfviD8bGbhuOLd68q
7LFKgAABAgQIECBAgAABAgQIECBAgAABAgTmjkB1eJOmj9UxcqC84cIQOwnX+fP09Jd3HxhvEJWR
8oHdW8s9lbTV157yzqNNL50MJyEwvHl99TqJns3lE5M4VtKZE6j+nZ3/25k7vZSaECBAgAABAgTm
oIBhcOZgo6oSAQIECBAgQKBdBU4Ofy0ezBWuPw58/aG4ZcXlua2jK/NixS13x9eP7Ize0Y3J0q74
028ezG2xQoAAAQIECBAgQIAAgU4WEKzv5NZTdgIECBAgQIBAhwkcHn4uV+JNuz8VKxoYmHHeVWvj
f9nelzt2y59/J07ntlghQIAAAQIECBAgQIBA5wo08Naocyun5AQIECBAgAABAm0mcKZQngWN346+
9ZffmxycGet+zytxKtmyqJBldvX0K/vjq195Iv78W9+OHyS/Srt48eK45JKr4xfeeXP09NwSq5aN
90R/NpcLy2ePxdNf/lJs2/ansWcoGUm/VIrh5AdySz2luOPOdXFX77pY3VB+J+P5J/9DfHH7l+Op
bUMxHKUkq/SXdnvi5jvujP/+rt64bfWyCX6w9Wy8tG9v/PVrEQtefz0uW/G2WHnV4uT4ZPvzu+PJ
b3wjnt/3ciS7z00/d9074td+9Y74lTUrJrS6kPz8y9lXY98zT8e3n3kh9v/X4+e2XXzFm+LGd7wn
3vsra2LJROi5jOqtNLsup+Pg8y/E342k53095l+2MlavXDJBIU7H/iT9j9P0ieUlb3lbck2klpUp
X75L3nLjhWsmOe7pr8YTX/rz2HfoteQHj0/G4jfeEO+6ozc+9L41cXnmsj59bH98/Wtfj13PPBd/
lzRK+uPIb7x6Vbz3tnXxa2tXRfZslbN6JUCAAAECBAgQIECAAAECBAgQIECAQCpQHYu82SNr58Y5
T84zuGe8seprnDkZ735TX1+5v7+/3J+8bti6pzxSI9n5TcfLQ5syY6pn6pStX2n9QHnPkVPj5lLZ
cXTvY+VkGJ6qSzaP7HJP/+by4QmyO/HijvL6BvKJ3g0TlOtEebA0WpaezcPlkeN7yv2ZbdkyVZdL
/eXhBgaWP7BjsFyasIyl8uY9h8svbu8b9ZjymPVNrsuJPfnfNygNlie8wgrpS5v2VJr8wmuhfIPD
5fKJvXWs15d3HkmvzJHyzsGMUU3T9eXdR8e/iguFmdJqtf3Pnz9ZNREgQIAAAQIECBAgQIAAAQIE
CBAg0CkC1SDslKKDExw0vLm3mneCkSz3l/dOGE2dILPxdp14sTzQMxrMPn+eidZL5e0TRLFfHNpQ
KPNEeSX7SpvKR2qU7fCOTZPLJ/HZvLtWTifKW3uzZejJB6hrBoUvpO8ZLE/0u7wvbu+fdBnP+U4j
WN/Uupzam/8wpLfOD98W0vcO7i20XMG6t6+hD22itL480F+81rNtllkuDdS8XgoFmfJq4fpPVk0E
CBAgQIAAAQIECBAgQIAAAQIECHSKQDVgO+UI4TgHHt8zWM07wagu92/aXt7z4pHyBA+lj5NjYfPI
4fKGTL6Vc/Ss31De+thQeWj71vJAX60gak95Z40nnGuXt1TeMLi1vGP37vLOoa3lvhofDPRtfzFX
sBN7N1frWilTMuxNeWDzY+Xde/aW9+zeUd48UPsp7KHDxSevCwHkQn17+zaUBzdvLg8O9Nd8Qn5g
d+1w/fGaZYxyb99AefPWrUl+fTXzO1efpgXrR6+JNN9J16UQfI965Sqkrxusz1mXyn0bBsvbt2+u
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
hJKMAAECBAgQIECAAAECBAgQIECAAAECBAi0SkCwvlWy8iVAgAABAgQIECBAgAABAgQIECBAgAAB
Ag0KCNY3CCUZAQIECBAgQIAAAQIECBAgQIAAAQIECBBolYBgfatk5UuAAAECBAgQIECAAAECBAgQ
IECAAAECBBoUEKxvEEoyAgQIECBAgAABAgQIECBAgAABAgQIECDQKgHB+lbJypcAAQIECBAgQIAA
AQIECBAgQIAAAQIECDQoIFjfIJRkBAgQIECAAAECBAgQIECAAAECBAgQIECgVQKC9a2SlS8BAgQI
ECBAgAABAgQIECBAgAABAgQIEGhQQLC+QSjJCBAgQIAAAQIECBAgQIAAAQIECBAgQIBAqwQE61sl
K18CBAgQIECAAAECBAgQIECAAAECBAgQINCggGB9g1CSESBAgAABAgQIECBAgAABAgQIECBAgACB
VgkI1rdKVr4ECBAgQIAAAQIECBAgQIAAAQIECBAgQKBBAcH6BqEkI0CAAAECBAgQIECAAAECBAgQ
IECAAAECrRIQrG+VrHwJECBAgAABAgQIECBAgAABAgQIECBAgECDAoL1DUJJRoAAAQIECBAgQIAA
AQIECBAgQIAAAQIEWiUgWN8qWfkSIECAAAECBAgQIECAAAECBAgQIECAAIEGBQTrG4SSjAABAgQI
ECBAgAABAgQIECBAgAABAgQItEpAsL5VsvIlQIAAAQIECBAgQIAAAQIECBAgQIAAAQINCgjWNwgl
GQECBAgQIECAAAECBAgQIECAAAECBAgQaJWAYH2rZOVLgAABAgQIECBAgAABAgQIECBAgAABAgQa
FBCsbxBKMgIECBAgQIAAAQIECBAgQIAAAQIECBAg0CoBwfpWycqXAAECBAgQIECAAAECBAgQIECA
AAECBAg0KCBY3yCUZAQIECBAgAABAgQIECBAgAABAgQIECBAoFUCgvWtkpUvAQIECBAgQIAAAQIE
CBAgQIAAAQIECBBoUECwvkEoyQgQIECAAAECBAgQIECAAAECBAgQIECAQKsEBOtbJStfAgQIECBA
gAABAgQIECBAgAABAgQIECDQoIBgfYNQkhEgQIAAAQIECBAgQIAAAQIECBAgQIAAgVYJCNa3Sla+
BAgQIECAAAECBAgQIECAAAECBAgQIECgQQHB+gahJCNAgAABAgQIECBAgAABAgQIECBAgAABAq0S
EKxvlax8CRAgQIAAAQIECBAgQIAAAQIECBAgQIBAgwKC9Q1CSUaAAAECBAgQIECAAAECBAgQIECA
AAECBFolIFjfKln5EiBAgAABAgQIECBAgAABAgQIECBAgACBBgUE6xuEkowAAQIECBAgQIAAAQIE
CBAgQIAAAQIECLRKQLC+VbLyJUCAAAECBAgQIECAAAECBAgQIECAAAECDQoI1jcIJRkBAgQIECBA
gAABAgQIECBAgAABAgQIEGiVgGB9q2TlS4AAAQIECBAgQIAAAQIECBAgQIAAAQIEGhQQrG8QSjIC
BAgQIECAAAECBAgQIECAAAECBAgQINAqAcH6VsnKlwABAgQIECBAgAABAgQIECBAgAABAgQINChw
UYPpJCNAgACB6Qn8u+Tw303mBdPLxtEECLSBwOtJGf4omX+/DcrSqiKUW5WxfAkQmFWBufz+z73W
rF5aTk6gqQLdcK/VVDCZESAwdwTm8s3a3GklNSFAYC4InEkqIVA/F1pSHQicF0jfRC6cwxiC9XO4
cVWtqwXm8vs/91pdfWmr/BwUmOv3WnOwyVSJAIFmCMzlm7Vm+MiDAAECzRIQ+GqWpHwItI/AXL6P
0me1z3WmJASaKaDfaqamvAgQaLXAXO6zWm0nfwIEOlRgXoeWW7EJECDQsQLlshhYxzaegne9wEUX
dd97Rn1W11/2ADpcQL/V4Q2o+AS6TKAb+6wua2LVJUCgjoAfmK0DZDcBAgQIECBAgAABAgQIECBA
gAABAgQIEGi1gGB9q4XlT4AAAQIECBAgQIAAAQIECBAgQIAAAQIE6ggI1tcBspsAAQIECBAgQIAA
AQIECBAgQIAAAQIECLRaQLC+1cLyJ0CAAAECBAgQIECAAAECBAgQIECAAAECdQQE6+sA2U2AAAEC
BAgQIECAAAECBAgQIECAAAECBFotIFjfamH5EyBAgAABAgQIECBAgAABAgQIECBAgACBOgKC9XWA
7CZAgAABAgQIECBAgAABAgQIECBAgAABAq0WEKxvtbD8CRAgQIAAAQIECBAgQIAAAQIECBAgQIBA
HQHB+jpAdhMgQIAAAQIECBAgQIAAAQIECBAgQIAAgVYLCNa3Wlj+BAgQIECAAAECBAgQIECAAAEC
BAgQIECgjoBgfR0guwkQIECAAAECBAgQIECAAAECBAgQIECAQKsFBOtbLSx/AgQIECBAgAABAgQI
ECBAgAABAgQIECBQR0Cwvg6Q3QQIECBAgAABAgQIECBAgAABAgQIECBAoNUCgvWtFpY/AQIECBAg
QIAAAQIECBAgQIAAAQIECBCoIyBYXwfIbgIECBAgQIAAAQIECBAgQIAAAQIECBAg0GoBwfpWC8uf
AAECBAgQIECAAAECBAgQIECAAAECBAjUERCsrwNkNwECBAgQIECAAAECBAgQIECAAAECBAgQaLWA
YH2rheVPgAABAgQIECBAgAABAgQIECBAgAABAgTqCAjW1wGymwABAgQIECBAgAABAgQIECBAgAAB
AgQItFpAsL7VwvInQIAAAQIECBAgQIAAAQIECBAgQIAAAQJ1BATr6wDZTYAAAQIECBAgQIAAAQIE
CBAgQIAAAQIEWi0gWN9qYfkTIECAAAECBAgQIECAAAECBAgQIECAAIE6AoL1dYDsJkCAAAECBAgQ
IECAAAECBAgQIECAAAECrRYQrG+1sPwJECBAgAABAgQIECBAgAABAgQIECBAgEAdAcH6OkB2EyBA
gAABAgQIECBAgAABAgQIECBAgACBVgsI1rdaWP4ECBAgQIAAAQIECBAgQIAAAQIECBAgQKCOgGB9
HSC7CRAgQIAAAQIECBAgQIAAAQIECBAgQIBAqwUE61stLH8CBAgQIECAAAECBAgQIECAAAECBAgQ
IFBHQLC+DpDdBAgQIECAAAECBAgQIECAAAECBAgQIECg1QKC9a0Wlj8BAgQIECBAgAABAgQIECBA
gAABAgQIEKgjIFhfB8huAgQIECBAgAABAgQIECBAgAABAgQIECDQagHB+lYLy58AAQIECBAgQIAA
AQIECBAgQIAAAQIECNQREKyvA2Q3AQIECBAgQIAAAQIECBAgQIAAAQIECBBotYBgfauF5U+AAAEC
BAgQIECAAAECBAgQIECAAAECBOoICNbXAbKbAAECBAgQIECAAAECBAgQIECAAAECBAi0WkCwvtXC
8idAgAABAgQIECBAgAABAgQIECBAgAABAnUEBOvrANlNgAABAgQIECBAgAABAgQIECBAgAABAgRa
LTCv1SeQPwECBAjMFYGTse/Z78ZrsWBaFXr99fmx8h2rY8miNJuz8dK+vfHXr0WS6+sx/7KVsXrl
kmnl72ACBAicF9BnuRIIECBAYHoCr+x/Pg7+eOTcfWpctiLWrLxqehk6mgABAgQI1BG4qM5+uwkQ
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
IECAAAECBAgQIECAAAECBATrXQMECBAgQIAAAQIECBAgQIAAAQIECBAgQGCWBQTrZ7kBnJ4AAQIE
CBAgQIAAAQIECBAgQIAAAQIECAjWuwYIECBAgAABAgQIECBAgAABAgQIECBAgMAsCwjWz3IDOD0B
AgQIECBAgAABAgQIECBAgAABAgQIEBCsdw0QIECAAAECBAgQIECAAAECBAgQIECAAIFZFhCsn+UG
cHoCBAgQIECAAAECBAgQIECAAAECBAgQICBY7xogQIAAAQIECBAgQIAAAQIECBAgQIAAAQKzLCBY
P8sN4PQECBAgQIAAAQIECBAgQIAAAQIECBAgQECw3jVAgAABAgQIECBAgAABAgQIECBAgAABAgRm
WUCwfpYbwOkJECBAgAABAgQIECBAgAABAgQIECBAgIBgvWuAAAECBAgQIECAAAECBAgQIECAAAEC
BAjMsoBg/Sw3gNMTIECAAAECBAgQIECAAAECBAgQIECAAAHBetcAAQIECBAgQIAAAQIECBAgQIAA
AQIECBCYZQHB+lluAKcnQIAAAQIECBAgQIAAAQIECBAgQIAAAQKC9a4BAgQIECBAgAABAgQIECBA
gAABAgQIECAwywKC9bPcAE5PgAABAgQIECBAgAABAgQIECBAgAABAgQE610DBAgQIECAAAECBAgQ
IECAAAECBAgQIEBglgUE62e5AZyeAAECBAgQIECAAAECBAgQIECAAAECBAgI1rsGCBAgQIAAAQIE
CBAgQIAAAQIECBAgQIDALAsI1s9yAzg9AQIECBAgQIAAAQIECBAgQIAAAQIECBAQrHcNECBAgAAB
AgQIECBAgAABAgQIECBAgACBWRYQrJ/lBnB6AgQIECBAgAABAgQIECBAgAABAgQIECAgWO8aIECA
AAECBAgQIECAAAECBAgQIECAAAECsywgWD/LDeD0BAgQIECAAAECBAgQIECAAAECBAgQIEBAsN41
QIAAAQIECBAgQIAAAQIECBAgQIAAAQIEZlngogbO/5+SNO9oIJ0kBAgQIECAAAECBAgQIECAAAEC
BAgQIECAQG2BR5PNH6m9K8KT9ePJ2E6AAAECBAgQIECAAAECBAgQIECAAAECBGZIQLB+hqCdhgAB
AgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQI
ECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBA
gAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAAB
AgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQI
ECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBA
gAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAAB
AgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIhKFH5AAAD29J
REFUECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQI
ECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBA
gAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAAB
AgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQI
ECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBA
gAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAAB
AgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQI
ECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBA
gAABAgQIECBAgAABAgQIECBAgAABAgQIECAwFYF5yUGLa8yXTCUzxxAgQKANBH4qKcOHkvm7yVwu
zOm29yfzRclsIkCAQLMFLk8y/INkfjWZs/3PoWT995J5YTKbCBAg0C0CjyYVTe+9TAQIEJiKwHjx
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
l5S40tmln2iaCBAg0M4C6XiElT6rWa+C9e3c4spGoH0FsvdQjfRHhr5p37ZUMgIEpi+QfTrW+8rp
e8qBQDcJpN90Th9oaOR+Kk2T9jHpD9SaCMyogK/kzyh3V58s/ar2mmQ+ncw/TuZ9yWwiQIBAuwqk
X4dc1OTCfavJ+cmOAIHuEUi/mr0hmf/tOFX+UbL995N5czL/wzhpbCZAgMBcEFieVOKtFypyIHk9
fGHZCwECBBoVWJokTO+Zfn2cA15Itv/LZP7LcfbbTKClAoL1LeWVOQECBAgQIECAAIGmCqSB+wXJ
/N+S+R8l86lkPpvMJgIECBAgQIAAgckJpPdV6f1UOqfTT5LZgw/nKPyPAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECA
AAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC
BAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ
IECAAAECBAgQIECAQCsF/n+qzF209JYA1AAAAABJRU5ErkJggg==
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/interpreter-images/interpreter-callstack.png

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
dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRp
b24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5j
b20vdGlmZi8xLjAvIj4KICAgICAgICAgPHRpZmY6Q29tcHJlc3Npb24+NTwvdGlmZjpDb21wcmVz
c2lvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAg
ICAgICAgPHRpZmY6UGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvbj4yPC90aWZmOlBob3RvbWV0cmlj
SW50ZXJwcmV0YXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+Cjwv
eDp4bXBtZXRhPgqLTwSyAABAAElEQVR4Aey9D1hU5533/c37MoDuQoopNsWm6BKzaGVMobkwf9QO
2lbiVcenj6ZbnTyPNBt0vXIJbo2WWEkWG3lIfaqTq28W7dMXtwF3W0zWsdsHmwZIMY14uZA4ZAO1
skItPC1WaWAbwGHf895nYGbOOTNnZoAZmD/fkxzn/n//fp9zOPe5z/277xvgQQIkQAIkQAIkQAIk
QAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIk
QAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIkQAIRQuBFIceYOKXJU3bLYcEc
zBv9rLTX0HUf8NfzN0EWZMF7gPdAPNwDU2n/g3lHYBrfBNju8nkSD88T6sj7fC7uAa927C7fz2Fn
5zdRGWcwGMbu3LlTqQzz5U5MTCxzOBxJyjjmVdLwuCOVVUJCwqH//M///L89ktJFAiRAAiQQxwTu
CN1V7XocswiX6vILmuq9K1wVsVwSIAESiEMCQbVjqt656KhJzz33nBTMIaeT0wuwzpN59alFKivX
teOv2wLCfT+TCZnwHuA9EKf3gFCbRxgJsJ3hyBjvAd4DvAfCew+4H+F6I8DyBXAeovvmcvI3Tgjc
dZfntuD1j5OLTjVJgARIQENA2RaIKE/DoElHb0gIuF+22O6GhCcLIQESIAHotWP/lw4beZgYYvRW
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
3WlVpAn26+167ZiKobxgWF1bDxxXmnDsyH7s3LENGwqEVVFWhtOazKHZWklVeAxxV+lFT1gJsAMc
VrwsnAQijYAZFdY6MdenAXVW5fYLE3I2lxei7Fy3l9DDHSewTttDNRWLPQxbYO+0o7WlATVVZWIR
DfVRW7QPTTfVYVpf7YEi786vnGhIm3Ia/tQkyJtHhPIIRt5w8oLtpGKtTiOKy6yoq6uG13uJvRbl
KjM2I0orqmAV10k9Z07QsZfje+d9dIHHe/Fc6jKv62OylKGm3gZbXY14IdKWZsd2o1lcd703uVBe
DZZFAiQQ7wRuX+9VI1iUgulszGM/3oxrQTy2rjWrzYM9TZWmtbG9jV/rfVGelPjmxeNYtHgxFi8S
5+JF+Pu2QbUukz7z7q/Dvc1vSi6+LfbiVR728nU4Ne0Pj6PoaDqPc+fP4/y5c7jQ4d1oJ6dlIEd0
iA+daMJQZ73orqqPILApMozi/YvqL7jVba9hW26m7kfv8Y8+VOTXOqOVu1YP+iOCgBjPfj6ix7Qp
XNgIiBvQbV4TtkpYcPgIaExlXNez2NroZY7lGBCmtIrrPZG2TOrRSNdmNbvvCTmNuapR8mno6uiR
rGbP/SOnVZkqOcvVmKQp6i+tbpB6bg9JjpERaWRkGjZdXroXSw2tbVJra2twZ0uL1Dmg1Wzq8s4G
L2NxjdSjEnVIspVpTeMmroW5yiaprZyHpIYK9TU1ljZ4may3VavTiK/0Ul1bn+buEIbWA63eJtnF
9V7leWVkQEQTcD07Jn/FD48wEnA/YyP6pgiDcCpTTZ9thp9KhTmytg0z1yhNmTXPb5Up6JAktvR1
cxfX1suc17vmAalKYxJcd831IB6R6izq8soavJ+XnjIdUn2xMr1RanBOXREpNG2Zt8nrbS/ZAe+2
21OXH9dQq8p021jR4iexHKWeFqSdahTYBFrL3SLZXQh1am7RmH2r3yuilLuOrj6DA94P3rlUf1eq
+947bSyHyH/XijPwI1zAeD6WgVA3fQKKG0U/EWMil4DmQSlfz+K6Tn15NfOg5PRlDcousOYFIkAj
O6KZj6VuqGQxtOXJDyejVGef8oxfb5186K68n4NxG6taNeVOVV5tev8vJdPipTe3zGFXzWmT9TWW
NWj0mfSKlx7l/Df1vDmRRjvPTVyjeveLno8iBxpVL1GAWWqb9gQ4H+UzaNYJaP5ehJdHGAm4X9Jm
/ULPcYWqF3XxzKoO1BualPd2Z4OPeaRGqVE1JVXzPNZ0BHoaytzcxbUVbjGf1k9nrMemSa+abyxJ
Ay1VmvKKJbvOc3Cks06TVtFWaNoy7w6w+PDYY9PkFx+ng5gb6n25BySrag0OhRzeiUWI+AigTK9h
4N0B1gLQdoBNouPvsyJnYE9DhZee1RqoEct9pE9qFR/WW1ynWJNlGp/2g/gg4s1P9Xelue+9U8du
yMTftbsT7H6E0wTajYIOEohVAhV4flu2vnJp+ThcY1HFt169pfAbsGC5MHgyGuX/Ya5Yr57npEgp
OxMMQc6/UuSz1PwI23JmvoqloshpO5cka8ypfJTkX97w86o5+BXfKzcLOzTlth7iouHwM+t9aCCC
Uh5Aocp6Wb1lR/fr31PN0TJVncSWLD+bZKYXwFqtvI9sePM9b1M638IwlARIgAQmCPzo/z2J06dP
4dQp7/P06TM4I+Kee7IAC5YVqp5Rcm75OVWQHjzJzPVPQT0Z6DiW5e/FhX6t7fI4ui+cwGLFatNy
LRXf2qJa6Tl9tQUVqrlAYquiVO/yekVZ+cu2qwS11HwNmaoQ/56EzE0Q1kaqRLaSPJzp1squSuLD
k44VJqVRcyUWbz6MDl/TWMZv4tzhp3Gg2VOMcdUKdbujWUy75MRr6B8dx/i4y1A6BQ8WKOVuRqHl
MLoGPWXKrtHBXpx7eScWF8qbEauP3uu3VQGRyn34gzNYtWYN1rjOItuU50urFKUn/ATEt4DnY/d7
ADXzR0DcXe6vbf7SMS5CCWi+HFtq/Iz+ulToa1Cv7uxa1dIVH+yv47ZUrzHDDTwCbJZatR+Ig61P
m06ju/JeDtZt8vqCrhlBECObIZN3OryMVeL7u96hkdVY4WXO7smpSav6QjwiTPOM7ueAPELfoF+p
u0iHZqVOb5bupHREAQHN34zw8ggjAfffWxTcGiEVUTVSpXj/EKzdTIJyF9cpVn92iejvOTeRxnv0
cKJeS2mVVFNTI1krdFZC1rHEGbLX+JTbXFwqVVSU6qyqrBl11bRluiO7YgcFrQm4+Argp41wcdH8
Cgse0W/3kttSZpXqbQ2Srb5GqirztZuESTPiPjEy7ass+Rq6Rm71GFnKKqSqqgqp2Ox7Oo/nPjBJ
FotFsjZ6rNX0ypxL7trRcPeK4Rr8Ab3B3g+KglR/V6r2XZEoDpyee8Z5fwvvxOFnp05XEv6SAAlE
M4HH8hYFFn/hUhSIVO5lKTyrenjnFatW9vb24VZ/P3574zfo+e0NXO++iiut9uA2rdeWaC7EcvWw
pTbF9P3GMtgb9uIeh/gkHXhgFw6RLvUTAXhNVd5Q81pyN/yMw6pZLVmIBeqQIH0O3Pq9+24Qeez4
2U/PQS7sjl4JiYlA70VVbKrKRw8JkAAJhIeAWOMC1j0FPp+NY5oqXeOQruD01ftxrQG4v/CAK8j5
W3v8gNcIszuBqQo9NdvUI5+TkSk5OzDQCixcVeROLjtsJ48rFjBURlnQ0lehHv0VTVYQa0gLk6ss
lLdacXxViafA5gP421OFeHVHjicskEtY8LxeX4b7t1aqUtZWlugzECkrGmq8RtwTMlfjKdEDLlE2
IZOljjkm6MuMWqrOYs0B9YJitZXeo71yVmtDI0ZfWqcYeW5Grdjcou+hvdhTkOksPSq4D02C4M+c
E2AHeM4vAQUggfAScDU4fmtJWIiVskWSui1SZxntxZmXj2DrgUDb6qizBfSFs0FYkonFGek+X1IC
yqWXIFh5I4FXsLJ66ap9RQSOF5lx3CsdA0iABEhgZgQMSfOnXIDRaIJx1Sqs21gI0+qHkZmm/zqb
ovzAukg91cNVcdaG/Ri69jmUP70OYjFov0eptQHlezaoTJ+1GdLzd8DRtwyVu1eh3E+7Kpf13O4N
SNeKb5iPTygKTUnV/4Kbll8MW+kPYFbsjVdb9D0ctJxAtrZcRZlaZ9aWI+hpzETRul0IgEDYmpei
8ZVyFGT7mrqUht1ih4jrhWv8bte3ev8ZtH2qEnnbfXd6ZflMxVWofO5vkJ+ZgsGFNTiQp/6ocEtj
7R1p3A0G5c0nFBI7U/CIDAJ6fxovJiYmfuPZZ5/Fiy++GBmSUgoSIIE5IzDcdQbmZVsDN4rOjZDs
cyanV8XT7gB6lTSlgKjl5dJy+Coa/Ly0uZIF+r3+4Z8CJWE8CZBAnBPI3nECkjjDc6Rg26uSOAOX
npJVgGNNDpR2XERz80Vc/d0fMW+evKFSEhbe9yksNebis8uzkRakCU5CRj4OnZWwq7cDbZc78Lv/
AGRDGST+Oe77iwewwl9Zydk4IUkIjkoyNh27AulYYB0Dpcgs2IkmxzZ0d36Adzvew793D+CPIyOA
OEfE5lKfzF6BtWs/j/zsDL9FJWSsxrErDjzbfQ1DDgMM8xIwb/4CLBT7GHuOBORuOwTpy0/hQvNb
eLfnDxNRSalYvHQZVuasRGa6B3ZarviocHs12t4XW/YJkIb5H8eSpROjv54yxaB4BHFPzt4GSdqm
FI/uCCGg1wHeJ0wBE48ePcoOcIRcKIpBAtMlkGTQ+zNXljiMAU1n0T0GONyO3b46v+ILfOnGDch+
4FPI/PR9WJSZhcWZGTBcO4V5y9RfaZU1xbw7Fnil3Ic8YcJmU3zLKLbW4OHU4K/e2NgY7ln+6eAz
MCUJkAAJzDmBBGTmrMYOcYbqSM/MwQZxRs2RkIKsnHznOTOZE5CRlQ3/XWVRQ0oGVm/ahmCIJ6Rl
IX91VlBiRR33oLRiolAR0Hszlr9R4c6dO6Gqh+WQAAnMEYHevttAjvKrqw9Bhm/gHaXN06IU94b0
Xa8d08wBMqGurQZP6GxaP+wY81FB/ATFBq8U3LdEXDN3B9iCvbt3TMmcLn6uODUlARIgARIgARKI
JgLcBimarhZlJYFpEPhpS2fAXMO/vqSa/mt6KHty3uwo3r/o7gU5y6luew3bdDq/coLxjz4MWF/s
JohVXrV4v1cz2crXRRzuxvlz53D+/HmcO3debGvhtiPwlZphJEACJEACJEACUyQwJKYXiY2lMDo6
Kk5XO+vyjzrjPhoLahm1KdYcO8n1OsDOoV8xDzh2NKUmJBCnBOyV1bjk9zk4juZXf6Ciszn/vkm/
djVgCx5Z7mvRC0/299847/HEnStWeKXAqNqnEXjl9OWAV7Pj9DfE3sJmFBYWwixWyz531e+NF7A8
JiABEiABEiABElATaC5fA8NdBucc9XnzDDjRMYzhjh9M+uc541aVhGAhD3W1MeXT6wAfNRgMY/v2
7YspZakMCcQnARuKK8+JL4K+j/4L31WtHik2NsCW/HTfidEH2aJa7+g9fxhrypW21GL5kKDmIOuV
GO3h0cvLaP66c0kz1xVoLn8GZ7r1R4HHe8+jZJeywTVjfYCPJa6y+UsCJEACJEACJKBPwN/n5GB2
+9B7B9SvMbZj9DrAB8X830quAB3bF5/axQMBI4xiMSN7pRlbnjuN7kFlB2YcXedewqI16r0Pi+u3
KRatSMGDqpHAZhRaDgvTVjW70cFenHt5JxYXem9n0HvdT49ZXUwM+GKHV0Lm46gqFTeP+7Bj6/2P
4/QlsQKn6hhHd9MJ5C0uVK0SbraWIzfA1HNVMfSQAAmQAAmQAAn4IGDwu51jwIGGVLE6to9S4zmI
POL56lP3OCBgh11M4ZU7wbbK7eIUbrMFBUs+jutNx1Wr/DphmKz49hb1CovLTZtFlGJkr7kcyxaU
w1JWgZyPAd1i9ayTNvWorxJspbkINyyL8FDRt90b1ivjY80dO7wSsKHiJCzHVykWQWvG9lWLUGUu
xvaCXCSLvY4v11WiVj1NXFzSClj35MbapaU+JEACJEACJDD7BJJzUOMYwfd9DuMmIDlZ7s49JXar
+u8+ZUtISGYHWEOGHWANEHpJIBYIqExlRO/XLveCJw+7rdazuK8r0Plbhs7/vQda4+eUnB1oqTqL
NQcUnWCRvrbSe7RXLsba0IjRl9bhgLtP3IzaWqDvob3uDrB2nWifz3SnTFP/R6W7yB6Ksqci71zz
moqs2rRetFPyUTPQgvkL1+CkItJuOwm7+nZQxJai7fYhZCpC6CSBKCUgPvFhgzjPilNpPhOl6lBs
EiCBaCXg7MT67bW5OsLRquHsyq1nAj27UrA2EiCBEBJQmsoYUX/ubfQ0WlXzObWVmcvq0OM4gmzP
nvOqJKv3n0FbXYUqTOsxFVehtWcIezYU4OmjNdpo3FK8PqYoTWMXJYXwy6RSdyFCiMqeqryh5pWk
5LU0BfO86HoCVGkD6K9Km5rkKUThSkhfjROOPtRXWBShvp3FVTYMOI4hN813PENJIMoICMNB/KM4
/484q8W5Spw8SIAESIAEopzAXXryS5L0vIh7QS+e4bFL4K67PLeFuA9iV9F402x8EB0XL6GjuxfD
YugvSfR+7hWb1BtXGJGR5vezoofUcD8uNL+Fd3v+MBGWlIrFS5dhZc5KZKare8/jg91oe1/MFxWr
yRvmfxxLlmYizWmm4yku5l0xxkue6/3OhWb8a9cNjI0liXsIuHvhp7B0WQ5yli9DekqQ91HMX/jY
UFDZFgiNPA1DbKgXjBafFol6NQm7hP8fxPmqOPs0cTPxuhtbtrszwci8JEACJOAhoNeO6TZo7AB7
4MWbS3mzsCGOt6tPfUmABEhggoCyLRAhuu8LMczLVwfYpe7/Jxw/F+cpcYbCRJodYAGSBwmQAAmE
koBeO0YT6FBSZlkkQAIkQAIkQALxQEB+f/qSOGkiHQ9XmzqSAAnEFAF2gGPqclIZEiABEiABEiCB
EBFwj8oGKE9eLGunOC+Ks1Oc3xTnInHyIAESIAESiEAC7ABH4EWhSCRAAiRAAiRAAlFJIFtIXSnO
34jzvDj/SpzqBRJEAA8SIAESIIG5I6DXAX4xMTGx7ODBg3MnGWsmARIgARIgARIggegkIL9ffUmc
/yjO/yPOanGuEicPEiABEiCBOSagt6iFvD2k6AMnipU+A+4UOccqsPpQE1BOGOciWKGmy/JIgARI
IDoIKNsCIbHe+0J0KDM9Ke8T2eSR3FAeXaKwfxCndhVpt7k1291Q4mZZJEAC8UxArx3Ta9D4II7j
u0V5s7AhjuMbgaqTAAnENQFlWyBA6L0vxDKjcHSAXby0q0iPuCLY7rpI8JcESIAEZkZArx3Ta9DY
AZ4Z76jOrbxZ2BBH9aWk8CRAAiQwbQLKtkAU4n4vmHaB0ZlR7z0plNr8URQmL6TFgwRIgARIIHwE
3M/zBJ067ohwpwm0TjyDSYAESIAESIAE4oeA+8UhflSeNU3Z+Z011KyIBEiABAC9RbCOGgyGsX37
9pERCZAACZAACZAACZAACZAACZAACcQEAd0vusL09Xmh4QsxoSWVmBIBpdkbTaCnhI6JSYAESCBm
CCjbAqGU3gfzmNHXhyKfEmGhXgRLWc1vheeH4vwHcf7KFcF210WCvyRAAiQwMwKadszd79UzgZ5Z
bcxNAiRAAiRAAiQQSwTidQ5wqK+hvNjVP4vzlDgbxSkvhsWDBEiABEhgFgmwAzyLsFkVCZAACZAA
CZBAXBJ4R2h9Spw/EueQOHmQAAmQAAnMEQF2gOcIPKslARIgARIgARKIaQJKE+erMa0plSMBEiCB
KCLADnAUXSyKSgJzQmC0C4ef/ibahsWgxfJS/NORTUieE0FYaegJ9OPlJ3ejaRhIWW7BK0e2ICX0
lbBEEognAjRxjqerTV1JgASikgA7wFF52Sg0Ccwegabv7EZ5bbOzQstmKzu/s4d+FmpaiBUPDKGk
XFxfmw0PrO/DoYKMWaiXVZBAVBBwL5gShLQ0cQ4CEpOQAAmQQCQQ0H24cxXoSLg8cyODcsU0rkY5
N9cgUmod7TqFecuKJsUpRafjGLL52SxSLk9AOcZvXsJ3j70BfCwJY38EHt25BwWZmvH7wQsoWLAG
E584imEfOYEcTZKAFTFBTBJQtgVCQd33hZhUfkKpT4ufXj/6hdLE2b3IGNtdP8QZRQIkQAJTIKDX
jvFVdgoQmZQE4ovAIE7udnV+geK6nez8RtkNMHLjEg5Ulrultm552rsDnLYalVUmrDogd4FPwvKd
r+LKoQJ3HjpIgARUBGjirMJBDwmQAAlEH4F43Ncv+q4SJSaBOSBws+l7KJkYFhS1W/DMV7LnQApW
OSMChqSgsucXfQvGyZT28nU43T0aVD4mIoE4IiCbOBeL815xbhfnz8XJLYwEBB4kQAIkEG0E9DrA
LyYmJpYdPHgw2vShvCRAAiEh0I/qvZ6RQ1PVMzSLDQnXCC0kfQ0Ol7q6wOLt/umTGIxQUSkWCcwi
AXm094g4/1Kcj4rz++LkFkYCAg8SIAESiGYCeh3gfQ6HI+no0aPRrBtlJwESmCaB/vPfQ7ndldmI
/ZY8l4e/UURgnmYEOMkwT0f6BHxx515PXHMJvn+JXWAPELrilMBNobc8EsAtjOL0BqDaJEACsUlA
bw5woqzunTt3YlNrakUCJOCHQD9+cKDSE285gM9n+HpUjKO3ow2/+QhIFM+Ku7MeRHaGvImOCG9v
wfk330R7xw2IaOfx8Qcewpe+uBGfz88KeiXp0f4u/MtPzuHnb7+D38tb9aSkYP78+/CZh1fBZFqN
nMy0ydLVP/0dl9AtyyWC79yZjxWrc+Az5XA/Lr3XLRI6UwKGDKzM1ZFvfBDtF9+HQ04rHo13Z69E
drrv1aKmK7daC9k3jI6mn+HsT2xovmLHLdwj/gNSU5di+SO5WL9+PR7xIW9/Vzu6PwT+9N5FVZHt
77yFdkca/vQn4NMP5iEzxXNdk7M3QkwFhnMqsMh1oNKGvzm7g9siqQjSQwIkQAIkQAIkEKsE5NUI
nadYjZBHnBFwXXv5l0f8EbjdanX//cv3QFXLgA6EIclqnHhOyOlM1XbJcbtVEpa0qvzK+8npNpZK
9iGdIt3BtyVblcV/OaJOo6VCau0bceeacKjlkuus6dSmmUg50FKhqcMotdzWFDfpHbKruZhrOn0k
nInc6uIG2uols5Ddi582TPBsHXAoMnvr76uMqlZvRa/VlyrqM0q2PmW5iirojAsCmvtGeHmEkYD7
by8ubi4qSQIkQAKzQEA8s93PVuXzW88E2jn0K+YBK9PSTQIkEPMExnHJ9gOFlhasfyhd4Vc7U5d4
/M27SvDFBatw3G067YlTuezHYTS/DNm20Ocx3IXDBQtgPlDrM1oZaK8tx6pF+TjdIYaH3UcKTHst
bp/suNjeo/K7PF1vNbuck792XLzq2/T31+80KdIa8XXT/Qq/cM5Ybk9xg5dexsK8rbB5gvRdgueq
hUVQWiwnycPEAY5kg3eCrEe+5F4MC7Cj/o1O70QMIQESIAESIAESIIEoJqDXAT5qMBjG9u3bF8Wq
UXQSIIGpE+hDS6WiB2t+DEt9W/n6KLp5ci/ZiShzcRms1dWwVpQqOlWT2cQc0+oLPrrA4714LnUZ
yjX9UpOlDDX1NtjqalBRLMZFVYcd241mNN0cd4cuXV3odsuOk794H97rGt/ExTOaikTa87/wNd1v
EJcbFN1R4xZ8LtNjPowQye0UergD31xV4nS6/zGVosbWiDa7HW2tjaiuUHfwgVqs+uaZSR0NWLq5
DMWlpbAIk2blYTQXo1SEF1tKsfhuH/OBM5Zho2ctLNSefUcYYfMgARIgARIgARIggdghcJeeKmJU
+nkR94JePMNjl4By02hxH8SuotTMm0D/eaxcVCjG/iYOk7UVTXvyvdM5Q4ZxanMqihT9QmewqQL2
18qQk6boII524/Dj96s6tsaKRq/9ZttPbEbeLmWBJtS11WJbboZKhvGbl/Dses1oc3E9HCe2YKLW
buy9634cd+cqxTXHMWQpRMJgEwoWrJvstMu9vkmtTVbcbtqjnjM8fAmbU1e5R2RNVYLLfg+X0Mkt
BpLbX0ZqnqcDbKpowBuHNkzq5VYIo71NKFm8Tuzc6zpMaBwQOikG7Me7TsGwrMiVANX2EezM8fdF
YxRnds7DVnehFrSNvIpcf1ncpdMRawSUbYHQTfd9Idb0niN93I1txLW7o2KthMuutRKCoWPA3R+/
B59YtAhpycqHbjB5mSa+CIyiu/0K/uAQWjvXEnlIrCUSCQ3OIJpO2/CbO95XY2wsEY888YT6Hcc7
WcyFjN9sR+3rl4Ek7faKY0i89xE8sSHH6z0lEiBMuR2TO8Di5BGHBMQNKzfEzjMO1Y9rlXsaytzX
Xr4HKhr7/PAYkmrMnnvFec+YqiTdHH0Nkuhmeso3WSXVLNQRuyTGNT3xMEr113zP3XUKNdAoiQFO
RXqz1KaYW9xYZlTEwausgZaqiXivOctmr3nA2nnR1jaF5CGW216tnvtcd01/Hm6f5npp5/UO2atV
DFRy61zZzrpiVZ6aTgVUnTwMjk0CrnZg8lf88AgjAfffXaTdTUNt6vUPBAO3rIHcwnpHqm+5Juk/
xSJNW8ozqwSGWlXtuLGqdVar161MI5f2Pte2tZ5yHFJfZ6tUV10llRZbJLPZ7DwtFotUWlYl1TW0
SD23/bzXeAoKi8sx1Ce1NtRLVRVlUnFxsTgtkixbcWmZVF3XIHX26bf3fp8DRs37XFikn16hmmsn
vBMHP825SPCXBEgAt65+oKJw98d8mMmqUqg9Na/sgXqsVhG/cCk2Cq9rdBmpSaqvhd2vf08Y8noO
U9VJbMny8yU4vUCYWFtg3OXKZcOb791E7uqJIdCcwu2Awpz7l+/2ifKy3BV0XTw/4XYL5IqyOecB
r85PcwXg6i+U838tMC33xIVabseY2ui44YId27Jy3bIoHQvzv4YaaybGBEsMjWH5vVO7XsqyXO5F
Oeq6rrw/AGTLq3vzIAESiEsCmu3UpsKgubYS8gmzsAx69RByZvFRIlsKfffYG8DHkjD2R7GR8849
KMj006ZMRbEIShvVehoMWKRgucTX4hSK+FlzauQKpt7BrnPY81Uzar3eKRS5xZ+CfFisDXhlz4ZZ
3GVhGOdf3ofCErd514Qgqn8nhDMVW2H99m7kpE+hi3iP+n1OVWyEeqagXYRqQLFIgARCRsCQpHw7
MWHFfUp/gGqE6fDGbD8vFwkL8YA8fddl4TykLG8U7/6iVREg9h4u8pgYKyJUzmVr1wm/qwMs5u++
ewP7JzvA6Q+uhbK647/8N3xnS9Zkp1vM/z3f7C6rrL4B814pdJtoy/OA9+e76r+JX5x3CS2yiDnI
nnnRoZf7nsXLRSWe+mqL8jB8ow6HnypEToan4y0Ln5CWgx17cmRn2I7r/R+GrWwWTAIkECcEbOUw
pl5F68CryFdM0win9iM3Lont3MrdVVi3PB2THeB40dN9IefCYSxGzYG1TjNtpwn0A+p3o8H2U1iQ
55luFEjE2pJC1P5bHW6f2KaebhUo47TixdSmvY9ha8AVSicKbz5ZAuPJH6Cu821sU3z8nnffY6gR
67rIJtDyGsnv//gYKm3+evvTEnbWMrEDPGuoWREJRD4B9ehjKj42lflbYhTST/c3gPIO3Pq98kFq
x89+eg5Y4Nxy13de+Qnce1EVl6r0pSzHZtEDtrn6kseb0fudTRPzgAe74On/GrFm7efxZ+3CQLt5
Qobm85cwKOb4Orubgx2KtEDpxocUeoZe7kWfWyMWDav0jJQLnWzl28UpHEYTijduwBfWPIzPGlcg
U3SI+RBXXnS6SYAEwk1AXpfgtdJ8jI96Fh6U60xISMD4yBB+97tutL35Exw7cFz1HHMu1rfw4+gc
OQZ/30pDJv8MRq5DJsNsFBQves4GS506zLv3Yse2bN+xYo2QIl+dX7E4Z+mWR7DkbuD65fM4Xuv5
6O4s6OR27Hk4B6/uCO9H7O4zZT47vyZLMUwPfAojt6+i8rhnIGFCSbG46LJKPCodQeak1gnpudix
M9fNoOtOIzvAbhp0kAAJRDGBYVxucvUWp6HG0DTyuLOoX6Tk4ONFZsUiVu6EU3CkYNUTxaL36DL5
acK/9Y0jS6zePPj+RcWK1RuxLD0Z89dv8ZhMNzfh/cE9WC16wDff/aUirRFf+pyrOZBFCb3cCRkb
0NBYhUXrDnjram/GSfmcNKMS+0mhYvfXse2Jx5GlXHTMO2fQIYb5QeyhFHRpTEgCJBBrBFIXLkRa
ing4qgfBJtRMS0N6RiZycguEdcqzOFVWiCLVyNNxfPU7X/ZaADHWGFGfGCMw9pGuQhf+vkxhsyUn
M6Km9Rws+ZmKD9T7Uf5CE775FbFw5cR3dmd5tUWHsPe/nkWur78l3RqnEDHehZe2epYDlXMai2vw
+lELslI8n8+PVH5XmEj/LQpV209W4vi5nTi2SfnO46nbMeZxR6NLbxukaNSFMpMACcyQQNIM8087
+/BVKHcZmm451z/8kyrr/flfUPjtaL7S5/Rfdc3/lX2lq5xzkNJzHlVs1zQxD1iO7vil4qutcTvy
lJOcwyR3RsF+jPS1obpUNuL2c9htKN9lxv0LDNh7qt1PwuCjkhf9BcRiZDxIgARIwDeBYF98kzOw
49jbqCsW1jWKw16+V2xbpwgIk3OeZmQ0yTDzNRLCJOqMio0XPWcEKVyZx7vx+gHFO4Kox9r6Fnao
Or8TladlFeDE222a9tWGY691hEs6DLa9odgpQlRjrsZbJ3aoOr/OypPTsWH/q2ipEEuLKo7rPbcU
vthyerr/saUXtSEBEpgGgWDfa6ZRtP8sKfchT7wjKaeTFFtr8HCq/2zK2LGxMdyz/NPKICRkPYQy
EeIaMG1q7gQ2LcAlj/0zSk0rJ77SpmeL/YTFIl2TX2fP/+K6mAc8jl8q9go2P7UequlrYZJbViI5
Ixc7j53FUxU3YX/vIi5fbEVDXaWKkVLZ42Ku8CezBtxzoJVxU3EP//qyYlb1VHIyLQmQAAloCaRg
m7UWDSeNiueKHS+/3oGCnX5MP0cH0f5OI95885fo+OA6+oYmTIxSxdZKy3MeE9NW1uLRvGwoBrHc
Ffd3taP7Q+BP4rmpPNrfeQvtjjT8SXwn/fSDecj0lXkG9Srrmpp7GB1NP8PZn9jER1o7buEe8R+Q
mroUyx/Jxfr16/FIbpZi6s1E6RGl5/hNXDj7Omprf4RWm+gQGo3OttRoMmLj5kJsMRciN1NYDczo
EJwuvYePIKY/yYfYNsmQsQK5WcpyxzE8OOyxzUqYJ6wVpj85a6Ii/X9Hr11QWaoZSxuwW7GAplfO
lFy8UF+KWsWobN+A/uiyV/4pBvz2PeUCnkDN//jvfuccr37m72Aqb3ZbvV2//luMItfr3puiGNGV
XCw2/fz0FpxmrmgnIO5UyXVGuy6Uf2oE2qxm97UXnwqlVv0V8UXBmm2QTNUixN/hL70mDhapM0T7
ZjRWmDw6GavEFgStkhhXnQwzSrYeT0Xi66cnralGGhBbLYk+sTus2q7VMHxy65Ecud0n2VtsUkWx
QlaXjJprMJ1tkLR5zNY2PVEYHuMEXO3A5K/44RFGAu7nTKTdVqF4Jmi3dxOrCeo840eklpoK1XNX
MHezUbuNUkV9m2aLpSHJ6rW1nXd+721sZlrv9K7aQFu9oj3yltOtr7FUah3wtFVy+xspegarg6m0
WurR7gA00qba/lC/vRmS6kvVWxvKbLRbNWrvVUx3e54g5RrRbDVYXHct4I0wYq9R38+i3VZsrBgw
f/AJHFJDmfI9Qb1VpM9ytNs6+pFN9TeteffwWfYcBbr/hiaeI8I7ceiZQL+YmJhYdvDgQVc6/pIA
CcQdARsu/XpwjrSuxfu9o4HrHu7G+XPncP78eZw7dx5dg95zcj/7xQ2ecuzv4LztDcV8nY1YKeYE
u44Vn1ekbW7E66+/qVjEpRhrlwWaqDNTuUfFSIDQRegj63Whw9tOMDktAzmrN+HQiSYMddZDbbDk
a1aySzv+kgAJkMDcEFi2Yatiioksw6/RM+D9vG46/DjWFJUrnrv+5LWjfGseijTTP5KCWMZAu9tO
KOr1J6mvuMFLL2Nh3lZFe+Qr1WSY/ThWLSzCJUWTHAl6dp17Lmgdmo/vwuL8l9DvR03fUYM4vdN7
FWNrSx8OFSjnJPnIvSS82/P8uu1tVaWfyV6o8s+tZxz/catZIcJy3BPgFWa8r0NhqQGYNj/kd8RY
UXjUOfU6wPscDkfS0aNHo04hCkwCJDB9Avd99pHpZ55RzhQYC9TzXV85fTlgiR2nv4FCsxmFhYUw
CxOrc1eHvfKkLV/v3A5pIsKGXeLlynUYy9ao9iBMW/GwokNZi127XMbTIkfpRtzv6StPFhFiuYev
oGSd0EXoI+v1zNkul6g+f1Oyv4TNYohaeXiJqIwMwj36R2E7qDgeyV+i8NFJAiRAAlMnkJC5GrtV
j/hmXL2hfl4Pd5zAOmF+qTpMYvuZhhbYO+1obWlATVWZpiMt1pYu2qeYU2zA0s1lKC4thUXzddBo
LkapCC+2lGLx3Z75wKGpVyV1YM9wB765qkSdzlSKGlsj2sQ8nLbWRlRXaFdjqMWqb54RJqnyMfd6
yh34ZWZFG+mUy4gyMX2poaUFjbYaFGuuAewH8Hen/bdrzmLc/8id389ju3LlKBFX3TqAPasDdH7d
ZYTP8SljIYqLXfdVMRbPD1xX36+uqBKZNj8Ypk5mMrb8Pw6MjIxMnhXuFZ1VArg9g/jxS1Vun+xY
mnG3yh8PHvfw/ByNWLPaOSQgbnBe/znkP5dVO67Vu6+9fB+Yq+1+xNGY/wY0gfGf3tFj05i9GaX6
a1p7KY84jp4GSbStCnn1zHtEvRZlOo+7rKHPU6DTdVuymjzxyr8F77QTWUMr94Cm/jKpRyOh2jsg
VSnlNVlVplRaczBrm9aEW12a7FObwatNxL1TMySWCSjvf+HmEV4C7mdZpN1T2ueIvpmqP8mHpGqz
+tmqnVKifvaI9qeqUfLZAjh6JKumLGubtxGpo1Ntalpt91ma5pk383r9UXDFDbVZ3ddb3FaS2FpK
Y8o9kXKkp1ESexko0pqkxgFXKRO/c6NnjyTW11DIJdwWHybO4gq2VBer00HRrvk1Nb4t1RRr6hB1
VrdpAChwDNnVXMNtAq2oOjinagrWhG6Wms7g8oYrlWNE6rvWKlVZtCbmetMUJgSJVRPo8D7mWToJ
kEBEEkjIXAHR2LoPW/uvJr82u4PC5kjIfBxVpcrhTDu23v84Tl/SGkyNo7vpBPIWF7oXapCFMlvL
dbYSSMHqQqVWLhXE/r9GrblSGh6TNw/2OkxYn+/7a3No5U7HCpPyk3klFm8+jI6b3qaCEIuOnDv8
NJQLUBpXrVDvTOJQK1Jy4jX0i707x8d9lOdMOgy7aiusAnxm0UzHlNUy0EcCJBCPBFLEgk7qZ2vv
9dsKENpnTxms+wt8L76TkIniw9WKvL6dI5p9WsYcIz4Shr5eH5V4BfVcVls4/fW29YotczzJkzML
8HyDvJSj62jGv/77oMvj/J0LPQcv/Mi9uOSEMMWwf38nMr3Wm0rG6p1HUaO69K3o7Ndrg1yq3cSp
Jxeg6KTLP/Fb03YbO3NVS1GqEqTkFKOvpwc9fX3oEb99bxaFaXRVVW1wnsF27P38Ko3JuwX7/yo7
uPwhTNV9Zi/uumslCgpW4i6xOvqi+1fhQK1ifyZhN2e7dhTZMdz865lA35E5i3nAIcTNokiABCKe
QMJirFVaXZ1sh9g6d5aOBGyoOKnZIqAZ21ctwsrNO/HSyyfw8kvP4cmVBty/bpdmjlgFrHtydeXM
fHSjj7gtMGZ4P92XPlbonda0GZ9VLjSpShFauQt2fUtt4mcrh3GhAU8+9zLOiHnO586cwkvPPSka
rYUwl9sUkphwbG+B6iVq3j2fVJd1sgiL5hlgMBhwokNtfugsaLwPF5VFFj8KxRRpsvfjPQAAQABJ
REFURV10kgAJkMDUCHzsbvUExNau3ykKMGDBcvHxT6weLP6HuWK9anqKIqHTmaDZ4kgbH7x/bup1
jKmfvw0XlJ0PtfQL87+GGms1qmtqUC1+H77XY76tTunPF0o9R9HwP9X71JfW70eOV+fXJU8Kvrir
1OURv824rDF/d0cmGYRzECeeXIiiWneocBhRZx/CjlzdhngycTIyMjORmZGBTPGbka6+55Qlzqa7
98IprFyQB9WW2EKAUtu3/XALn4Qf3bouChdbQzbr3HfFFpiyIoNduCh4v/1N1HRUvCB9Y9++fUnh
qpjlkgAJRCKBZDy6VTRUta6N0yvxbm85srJ8t2zabZMC9ZW16b0IpOSjZqAF8xeuUe1dZ7edhNjy
VucoRdvtQ37ntiRkfg4V4qWqXPGsN5Y9Cl9juinLH3J2wpVtr/mrJv9fkUMpd3oBXq8vw/1b1XOr
aitLVItTaGFUNNSgQPNhXJ5395TQu0ShtyvfmMP7ao1ea1VxL/svD6k61K68/CUBEiCBmRJYlX2v
oohkbDrSBOmIIkjPOT6Isz/8oV7sFMPnpt57Fi8XcnoatVqxjd3wjTocfqoQORnqTl5CWg527MmZ
ol7a5CHUU3wovewRXVRkwlfWZWkrVPkzHn0GDfUm3JHH1cQ/n3nAd+cqZexXOLXXgl3KBliUX99p
w5Zs33lUFUWYZ/RmO05+qwglmjnMspiW6lZ8Z1PmnEjsGBvyU694aTi5FamtZei8dATZvl///OSP
jii9DvDBO+IQKrwQHWpQShIggVARyDQ9KYxfjrub5tqffoAtOqOrScr2aGkKAn2XTlGmT/X9fS0h
fTVOOPrwhcoD2FquagW9VCyusuHbf7sJ6XpPMneODHxxu1l0gD2t9pb12e5YlSN5KdaJUfBaRdVP
rF2qSuLLE0q5s7YcQU9jJorESHezr8qUYWLhlMZXylGQrX5pmkiSht1iAZnrhWu8vjwri3C536lX
vlRasOXRuWmcXfLwlwRIIFYIjOPmQJ9KmcwlC1R+lWd8GL29fbjV34/f3vgNen57A9e7r+JKqxi1
cm3WrsoQIs8s1bvoc2vEmGalypLJVr4dwuBHDHaaULxxA76w5mF81rhCjGamhf5D5Ez0HPkQ8vih
+xAWUj6bH3cC4UjJwoYt/jvJotuF2pKtPj70LsVfLla+PCgLjlC3mKJ0/pVvobBEY8PtFNeI6pZz
2Ll67tpXoxhetz92CwaxaNeHN/vw3ls/wyvlxyfvx8kv5vZKLPurTNw+u9P/AECEXoJAYgV8bQxU
AONJgARijIDYqH1PmRG2yomHoK3kVXTvzkWW19MiBTtelcQZrP4p2CbSbwsmfUIGthx6FSPPfBvv
XBBznrpuYGwsCUmiz3z3wk9h6bIc5CxfhvQUL6F0hcnffxbSft1oRcRU9VJkDaHcmQU70eTYhu7O
D/Bux3v49+4B/FGs5iiWc8SI+NTwyewVWLv288jP9jWO7ZEpIWM1jl1x4NnuaxhyCPPneQmYN38B
FmpNw0bbUaNYgdVkfUZnTrWnbLpIgARIIDgCw3i/Wf05z5cVCkZ7ceblI9h6wFfHIbiappVqlutN
yNiAhsYqLFqnNiV2ym5vxkn5dBkBGc2o2P11bHvicWSlBd/m+eQQCj3FFBp1dzQ0Ww1Ndrt8iH0S
xrKNcBzbFPoPAT5qm1nQMNrP1WCfucTnx2ujxYral3cjZ6bXcWZCIiFFbKeYO/nukJ2D/NUbsLOs
HE2v7MG6klpP6bZd+HHHNuzMUV9xT4IYdIk1vp4P14JjLDeyCYjbWXKdkS0ppQsXAUePejVo7Wbz
4aqX5c4dgR5bqfvvXszAk1q8F1WdO+FY85wQcLUDk7/ih0cYCbj//ubkYvupNCSrQA+1SmIdJLeO
YphTsvU5VLWKfc01K/sr0yvd2tVqIflaBVort680sgChrlelVADPSF+bVF1qVnBR6untLq1p8ypx
tvUc6axTyWuqavGSKegAzSrQ4u9LVbbSX9U6i42SRq6gVj6/bZfE2IFv+U2lkq1Nu+tE0JRmMeGI
VKdZedtk9b7nZIG4CnQYWwMWTQIkMDcEEjI3o0E8yV1H+bd/Ipal4BG7BPrxw0Oued/yitplWO3L
ojp2AVAzEiCBMBK4efkN97QaZzXG7XhYuQjhcDt2L9vqPWomzIFLy6rEAlB1YsRU7Ad8rU9YslzB
SGdNaKSdq3onpU/OyMXOY2fhGBpAW4sN1WKfY7On6fXS8biYK/zShZte4QEDQqhn8j33iVm5nqO5
4wbUS3p54qbnsqB1YAiNFcpagAOrKtDlvXTF9KoIdS7Bd+cCYdTuNYxtRnWDHY6mY9jkGnENdd16
5Ym58t1dXeiaPPuHg4GXjK88o1lhfVSznYRefVEWPkNbiijTluKSAAkESUCsbFx2EubKySX7m3fB
JsxgdsSTGUyQpGIh2eClM4oFwiwoL8qPBbWoAwmQQEQQGMXPa+TJrZ7D9NRaKNfs63rtmGbupwl1
bTV4IjfTp9nrsGaLI0/JU3PNVb1aKRNS0pG7epPz3Ln/CEYH+/Hr9/8VZ8WClOUnm1XJDzz/Ov6m
aafGDFmVxMsTUj1T/ky9QvdwEN1fMee4v+82xCwcyP8sWJQBnzOYjGJRy7eOwbnYc+lRWMrzFPfF
cXy18su4cqjAS7+5DejHS+Y81QKSsjzF1gb8jz0b5mz+7LD9VdyfV+JGI0Zy0aSznos7kXBou7vN
3TfEdpj5vrckU2aMMrfeNkhRpgbFJQESCDkBsbKx1ebZuqDopZ/M2p7AIdeFBfohMIgfixWmXUdx
3UHO/XXB4C8JkMCMCdy88DK2K6YVygX+9caVinJH8f5F9dBZddtr2KbT+ZUzjn/0oSL/dJ1zV29H
k9jS7vx5nD93Dhc6vEd0k9PEHE3RIT50ognCRFs14urUf0oqh1pPuRerOGxv49ejCr8P582Lx7Fo
8WIsXiTOxYvw922+bcrMYq6ze6cjsR7Jt1V7IIuNe8rX4ZSvLfx81DlbQZfEnN4Dqm8U8sebAZyY
w86vL91vXR9AMGPABs0WY+bcv4y5zq/Mhx1gX3cJw0iABJwEMjeVw+qyQqrdjn/qCtDKkVvUERhu
/zF2uRbHNlbh+W06q2NHnWYUmARIYK4JDHedwfo1moWeiuvxFdXWeg7c+r2yA2zBI8v9z8F4/43z
IVBtjuodvoKSdYUwFxai0GzGM2e7/OqSkv0lbNaYRU/NfDPEeoqdEgrFTgmeoxZn3ur3eL1c4/hF
rdICQOz1fJ/Ookpj6vHHzA3PotqsLrDIWIleddDc+QYvoKzE1YDKYogFRHveEB9vlPYNcyNeyn0r
VB9O7MdbMBCEKJfPnVWl0rlSqjTR6GEHOBqvGmUmgVkjILbRqfE83It2/0OI5/rMmiKsyCeBQdQU
7XLH1P1oj8+9kd0J6CABEiCBJM0IoE8io+g4/xJSxbxeZddW7iA0PL85wIhSH4S1rO7Re/4w1ihW
rJcTJhmC6RIGShOuejWqpPwFNrs+LIsoe3lDgA7dKEbvUZYxFmAkL9x6JuMLxVVKgVBZ+HfQG5gd
7foxtqoW9d6IZcr536qStJ40PGX1vINMxFai5OV2bcIJ/2g/Ll24gAuus703ACvfxQQb2n+pQTVv
vbjmR9iUGYh/gNK1Olzqmp71XXoWTKoPJ5X4u1MdfisfvHQCaw6oea9bu9hvnmiNnOFVila1KTcJ
kECwBBIyN2Hgmh2/+0jkmH/vlOYdBVsH080VgRRs+ZEdJvmju+Ee5MTqjvdzhZf1kkAMErA1/CNO
pYgX6Tt31NolJgLDf8DVrsv46XGxz6g61ukrrX8dG7w6Pyl4sEAM89lcL97NYoTxMDpfO6TaX3Z0
sBdvvHoEZh97q/ZeFz1m7RoV6sFElJx4DVusFiwUb74JCfLrb5jq9aG3OigdK0yiB+zeFqoSizfP
g/37ZcjRbmov9pM9V/m0ysTWuGqFuh2eAz3TV1tQYTygWDtCbFWUOh8tfZVYnZHsVrf3wglsWuP5
yCpHWGq+hkx3isAO+R2kzWpGnmKk1VaShzMbR7BFZUkgbr8PzmDVmhJPoUYrbl/ZE6Z5uKP41392
7VU1UeXJq7/AF0634j80fxoegTSusTEseOjLqgWyvHQQ47itQ03In/JQbCb+2+FSlJs9C1yeLBI9
4rFGYem1BhmKSdjjw/14s+bvvPctttThr7KnXLFGyejyvmgwGEafe+65WVx6m1VFCgFxq0quM1Jk
ohwkQAIkQAKzS8DVDkz+ih8eYSQQse2udpsdwcAt61TcZmuLpN74yHM/D9lrfJZpKauQqqoqpGKz
yWe8p36TZLFYJGtjj7tQR49NEq/7PvNV24ec6cJRr1sAf46BRp+yWcqsUr2tQbLV10hVZRYfspuk
xgF1wXOlpx47c3GpVFFRKonVrH3IXyZ5rpDQI9jthhzXJLEiibo8U5WkQSF53avmamniSquZBfQF
JVefVOVTR42cWrk1flNVq0ocLx3EtoRt01JCLrZPqtCR0WgyS8WlxZJF92/LKDVotipTChrt2yDp
PcvH5IdKYmKiUle644SAp0FBnGhMNUmABEiABLQElG2B3ssCw0NGwP1yr70Oc+33fiGf2gs+jBap
rlXV7fGpUktV8PvhWhsapSqTtxzqPUtvS1adl3/lnsChr9enel6B1+rL3Ndc87emG17R4Ivj3Ok5
0Or7w4VvfSxSi7ZDNdSm2h/a3367t1utXlwsNXYVV6971RTGDrDX3tbe96NvDup0Wp29dJhRB1jg
GWiRxJRtL3b+ZTNLtk7/ve5o7wDrzQEWdiyydUuwY/hyah4kQAIkQAIkQAIkQAKxREC7KmwwuonR
JZRWVKOxrQeOK69iW35mwGyr959BW12F33QmMfe0tWcIezYU4OmjNV5pb6nWaRRrWDS0oFQ1D9Ir
C0Jfr3cdvkKythxBT2O1aqEiX+mcYaZSNHbexqENvjjOnZ7p+Tvg6GtFhWahKq0epWJLoAHHq8I8
WjPz0jAfn1AkTknVn1+ell8Mm+Zi1hZ9T7U3sMGgMddNTVKUHmKn4W6V7NMtPUUzp95LB1Gwxsp9
alWlr8arQ52oLlZMPPdTQqmYc93nOItNMW76fJcOA/lLgfMQ3w5cTv7GCYG77vLcFrz+cXLRqSYJ
kAAJaAgo2wIR5WkYNOnoDQkB98tW3Le7Yj7ihea38G7PHybAJqVi8dJlWJmzEpnpnvmlcuT4YDfa
3hcrEIv5x4b5H8eSpZlIS9Z0ssQySP3d1zAk9p81zEvAvPkLsDA9xXt/4ZDXG+R9IfbI7e78AO92
vId/7x7AH0dGAHGOYB4+mb0Ca9d+HvnZGUEUNrd63uztQNvlDvzuP5yXQ/zz57jvLx7AiuXZ4poE
IX4kJRltx5PzPHsQi1FanA1iD91QqjDccQKpRnn+dCmuOY4hS3tbT6MyeX/pD963w/7BVQwMfAjZ
3HdE3GvzPpaJlZ97CA8/kgvNn5huLR0nnoRxV+1EvKkaQ1Pcm1q34BBH6LVjeg2azERYQCdiTEzQ
5hFfBJQ3S9w3xPF16aktCZAACbgJKNsCEaj3vuBOT8eMCLADPCN8zEwCISQQAR3gSy9vxip54S+z
6Fye3ale+CyEqk63qGjvAOuZQB8Vi2CN7du3b7pcmI8ESIAESIAESIAESIAESIAESGAKBEa7z6B4
ctVrc+EjEdf5nYIqEZtUb0D9oJj/K08AfiFiJadgJEACJEACJEACJEACJEACJBBGAkMf/kkY0ov/
RsdFLQlI9jKzD13lo12nMG9Z0WSBFpRvywld4TMqaRyjTv0FAaH/R2PDMyptrjPrjQDPtVysnwRI
gARIgARIgARIgARIgATmlEBz+RoY7jJg3rx54jTgREf4On+Oj4YmdbWgoef7yNWs6zVXIIY7fjCp
/zwnC6d59lwJE4J69UaAQ1A0iyABEiABEiABEiABEiABEiCB6CLgr4s75pBHgsNzpOQW4VrnRiy4
PwtpUdRLCx+R8HCOIrThAcBSSYAESIAESIAESIAESIAESGCCgMHvvNskQzi7TynIirYtiFJlw/Do
OnRXdRSr/z4vVHkhutShtKEgoFz5k6tAh4IoyyABEiCB6COgbAuE9LrvC9GnWURKzFWgI/KyUKh4
JTA+Popxn8Oa4Z0DHLm8PXOAtTImJCQjIUJ7wHrtWISKq0VLPwmQAAmQAAmQAAmQAAmQAAmEn0Ak
d+rCr72vGmKr489FsHxdY4aRAAmQAAmQAAmQAAmQAAmQAAnEHAF2gGPuklIhEiABEiABEiABEiAB
EiABEiABXwTYAfZFhWEkQAIkQAIkQAIkQAIkQAIkQAIxR0CvA/xiYmJi2cGDB2NOYSpEAiRAAiRA
AiRAAiRAAiRAAiQQnwT0VnUcEzhEHzgRY2Oyk0c8EVCumMZVoOPpylNXEiABEvAQULYFIlTvfcGT
ga6ZEOAq0DOhx7wkQAIk4IOAXjum16DxQewDYrwEKW8WdoDj5apTTxIgARJQE1C2BSJG731BnYm+
6RLge9d0yTEfCZAACegQ0GvH9EygdYphMAmQAAmQAAmQAAmQAAmQAAmQAAlEJwG9DvAdWR3ZBJoH
CZAACZAACZAACZAACZAACZAACcQCgQQdJY4aDIZv7Nu3L0knnsFxQkBjOhAnWlNNEiABEiABEiAB
EiABEiCBWCSgO6dHzP18Xij8QiwqTZ38E2Cn1z8fxpIACZBAHBLQfV+IQxbhUNk9BzgchbNMEiAB
EiABz1oWeibQZEQCJEACJEACJEACJEACJEACJEACMUVAzwQ6ppSkMtMnwFWgp8+OOUmABEggmgnQ
Giiarx5lJwESIAES0CPADrAeGYaTAAmQAAmQAAmQwCwT4IfnWQbO6kiABGKWgN6HXJpAx+wlp2Ik
QAIkQAIkQAIkQAIkQAIkQAJKAjEyAjyO0dFxoZcDDof8Ow/zUpIRI8oprxfdJEACJEACJEACJEAC
JEACJEAC0yQQtX3E4f4uNL9xDj89ex4nbc0+1DeiuOwpfPVrW1CQk+EjPrxB/V3t6P7QgUSILZXv
zkJ+tlqGQPHhlY6lkwAJkAAJkAAJkAAJkAAJkED8EdDd1iBSt0EaH+zAK98sQclJX51enQtoLkOL
tQyrM1N0EoQ6eBgvr0xFiX2yXKMVt6/sQZq7mkDx7oRz4lDay3Mu0pxcAlZKAiRAAnNOQNkWCGF0
3xfmXNDYEMC9DRLb3di4oNSCBEhg7gnotWNRNQd4sP008hYYp9b5ldnbKrFmcSqeO9Mxa1cidYmi
qiVJXubYgeIVuekkARIgARIgARIgARIgARIgARIIAQG9DvCLiYmJZQcPHgxBFaEpYrD9FBbkbYdr
UFVZqqm4DDV1NjQ0NMBWXwdrRSmMygST7sqtRjx3rtdHTJiDhgKUHyg+QHZGkwAJkAAJkAAJkAAJ
kAAJkAAJBCag1wHe53A4ko4ePRq4hNlI0d+E/5pX5FWTsdgK+8AImk4cwY5tm7BhwwZs2rINew4d
wxVpCG31VV4d4UpzEZpuehXFABIgARIgARIgARIgARIgARIggRgnoNcBTpT1vnNHLOA058cwTh9Y
B+2M39K6Nlw5sQc56ck6EqYgd8t+XBlohUWVohnr/vY0RlVh9JAACZAACZAACZAACZAACZAACcQ6
Ab0OcMToPdr1GrbXqsUpre/EsW256kA9X3o+vttYoY6t/V+4PKgOoo8ESIAESIAESIAESIAESIAE
SCC2CehtgyQP/YppwM6B4DkkMI63ThxT12+yonxLtjosgC+94L+hDOWodKdrxrtXB7E637MusztK
dowOov2dRrz55i/R8cF19A1NTNJNXbQIy3Mew5q1a/FoXjZS9OipCqOHBEiABEiABEiABEiABEiA
BEggEgjodeGOGgyGb+zbty9pToUc7UTdcbtKhIpvfU2xnZAqyo8nE1+rKUZlUSuM8upYdjtG74wI
h7YDPIoLp76DZ4rKfS62JVdgQ+1kR9qIivoalG3J9VrhWU7HgwRIgARIgARIgARIgARIgARIILII
6HWAD4r5v/Io8AtzKe5oT5vobiqPUmxbk64MCNqds+MEpB3+kzcdfhzryrWzjfXy2FG+NQ9Xa9rw
6o4gzbH1imI4CZAACZAACZAACZAACZAACZBA2AlE9BzgvvevqAAYS03I1Ouyq1JO3TPcccK782sq
Rk1DC+yddrS2NKCmqsxrVenaon1cVXrquJmDBEiABEiABEiABEiABEiABGadQER3gD+6dV0FZEn2
krCZG/+6uUFVl7mqESNNJ7Bjw2rkZOcgf/UG7Nh/BFccPbCalUmb8f4NrqilJEI3CZAACZAACZAA
CZAACZAACUQigTCNp4ZK1RR1QWMOtT9kvmHYm2yK0spg3V8AnxssJWSi+HA1Smy7FOnpJAESIAES
IAESIAESmCqB0f4uXO7+UKy8GnxOw/yP475PLUJ6ms83NVVB/V3t6P7QgUSImX13ZyE/O0MVH5me
UXS3X8Ef5NdeMSPx7qyHkJ0RWNfI1CWapIpU7oNoOm3Db+TJqZpjbCwRjzzxBJaN21H7+mUgSbt8
0xgS730ET2zICdsgokakqPBGeAdYzXDJ4rvVASHzGbBguQm4fkuYONuxZMt6LPJTdoJBe3P5Scwo
EiABEiABEiABEiABnwQ+OLMba0qCXX9FU4TJgur9+/GU7sv9MM58NQ8lrvVUjVbcvrLHawlUTalz
7x2+gqfzVsFFxVjViiv78+derliXIFK5D1/Ft7cXue8H7WWoerAQiw1vo2hXiTZqwi/u+0LxN6Jd
+td34vgIjaoO8II/nxemq5KMTUeaIB0JovjxQZz94Q+DSMgkJEACJEACJEACJEAC/ggYkvwNOfjL
KeKaa7FLnK+U2fD2kU3Q2A06M6cuET+uDvCSpOgYBTMYVAMxS5INAUBETvT4zUv47rE3gI8lYeyP
wKM796AgM0pGryOVu0auKV/te6Lkvp+yYtPPEFUd4Ob3f4dDBbNgujI+jN7ePtzq78dvb/wGPb+9
gevdV3Gl1Y5msYUSDxIgARIgARIgARIggcggYK8048l723B2T4BdOYYiQ95YlmLkxiUcqCx3q2jd
8nT0dIDdUke4wygW6T2w1mke7zSBfiAF88YfQ011tdMEWp5O8P6Pj6HSxj6L3pWM6A6wY2xYJXdq
0sy+gI2PjmJ8ssSE5GTvr4CjvTjz8hFsPXBSVS89JEACJEACJEACJEAC4SdQ1dKH/Q8vwKjrhU1R
pcMxgtt913HlF2dg3lWpiAFsJRW49ORZ5NPOU8Vl1j2cJhh25Obde7FjW7amnlzs2On5ANR1p5Ed
YA0hpTeiV4G+77OPKGWF7e0OjKpCgvfI2xwZ5s3DvMkz77kmVebhrjMomLc4iM6vUZWPHhIgARIg
ARIgARIggdAQSP4zYcickIxkMVChPVNS0pCZnYtNO49gpLNeszWlDbZL/aERgqWQQCQTGPsooHSO
sYBJ4jqBXgf4xcTExLKDBw/OKZz0LKP64Vb7v3B5mjsOabc5WnLvxzy6Dbdj97Kt3pPLjSaUllWh
uqYODY1iP+BrfRhyXBEP3RpPXrpIgARIgARIgAT+f/beByqKK8/7/npemj/uQhYzmgxMBhzGLDqh
ncHNwfwB02hmIZ613Xk1s6vteWWyadycvNo+Y2QxGzLTrvKQcVfak2ee1j277Y7gu7OYvLazc3Az
ATKQjXjcNmPjBiarK4wDT4IjTJqNgM371Hurobvr1p/uBhrobn5Xi6p769bv3t+nqqvqV/fPjwgQ
gSgRUGn6VZGcmr8NDt4vJTo//kQlJyXNJ4E0WQtwim6u5u+ZT62orEQjoNUF+oDX600+duwYjhw5
snA6Z63GZlZ6sAd7G045e1C8W97sH66KrGvzPqmbI+DJInFWhMnQ89ZxNPgjvrUBjS4Hni/MUXaT
ZvtH6LMKR4siRIAIEAEiQASIABGYfwL8oN6MWVdgBFcvvoUzjefR2uBk75+sIUYvvoUasH7zVvzx
NiM2abwbqhY9cQcd599GQ8OP0elkczrrma8RJk5v0GPz1nJsM5ajMGe2fbZH0HX5F7jHHD35AnOb
pMt6DIV5M5XL5LX+C87/xIm2a27cxYPsH5CRsQprnizEpk2b8GRhnsJV6KS7KeDzX1ziUFz94D1c
9Wbi88+BL399HXLSVUyPsWFc/aAF7777r+j66Bb6PZPnNSM7G2sKnkbJhg14al0+1A7lCvNHYob7
BEaGRwLDL5GUhsz0VH8taR2DBARWJ98iLHBw2YyBukzWySy4R6dXqcEWq0yGUej0+GWMCk1mPbff
7hry71RdD3XWcfltivwewWGc5Oers8EuBIrzSQy3X7XYeUv0n3txTYEIEAEiQAQWJwHps4BtU5hb
AoH3isV2tbntpoDuDLGgfKfSJtLt4I812l2yzJG/b3m6mwXT1LuvWA/NxVgtdPaHfxEddDUJxlBy
pvYZLHahVy5u1MXVxWiT6+VX0yM0Wfh3WLHe1pZ+f4ZprSOtM/QWoXPQK5HtEWz6EMymdK3rlL9f
jwrtDqvABhdq8w7s0wvWJpcgLVVSgcBmpDrMB3eP287rpbcJcgKBiofaiPh6CArhflcKOySYL9G3
ZL9jFp0MWl2g/fsXfF24ay/77iYNp6B/8TQi7gl9pxUvbgzORidKMli/i6LAXPle3P1U/LrnDyY8
uSb0V7Pr71z0Z6Y1ESACRIAIEAEiQASIwLwTuIN3zvP998qfXDWjWvRdfAMZq8tlvQE1RDlrsT47
DSc7tMcb91w4hBXrtoPve6gur61+D3KL3oC2NPXjwN6Ez1Y+je310ndYwMYmEZuJx5ThyycirjPc
9Vi/ogKXJS/jKWIzcZgg9+bUevg5lFTUSHp6hhLgRs32dag4fVUzU8xzjxc3XJqEE2eHlgF8X1SR
jQNeeE0zS1Fbx76hSUNDBZZVnsZAmGEiEwMdqFyxUXYDMqL25WKpNNl2P/qHZEmSaN/FwyipaZOk
sBnHdSrdObgcFCECRIAIEAEiQASIABEIRyCiMaOsi+u5Q98GP7rNij8qCLRuhCsmsH/k6knkllcF
4pMbBljtTWjvdKGzvRl2q1m2H9hTko0LfcoXUdGQXG3kZ6hmnZ5RbXOgub0dLU4HzHzLDhvrV4Xv
n+1RlKGdIBq/z2DnKd74tXcOYm/xDNyFjnThL9bv44szWOBwtsDF+my7OlsYA9Y+zoUGrP+Lc1OT
0+qwams1zBYLTDLd9EYzLCzdbLIg94HgeGBxctqNsvdpGJh7n2Y2506328fdUVfNzwXEym+oOIDW
O1xFfJG45K5Ug1IWmMARnU43dujQodhoGfd2C5ZAFwhpNwmDYHU4he7eQWHUO9kpgk2RLwz2uoUm
m4XvdjB1fHVzr0KnTnk3a4NV6Jb1URgd6hWcNrO6TKdcZrguN+H2K6o4rwns2gvoOa8FU2FEgAgQ
ASIQMwSkz4IFfidZDMUv2ucu11WTvX8Y6xqFlpZmoblZuTibHEJdNd/tefI61QuN3fxgs8kfUrj3
rX7BKuu6qzc3CoNqv0KPW5EXpkaB773cK1RL3qF8dTOpdHFmR7Xb5e+U1ULgbTJkl9chwWEOvqdN
6g/B7lKttZomijSPyxa4/kR5Bmuzalfj0d4WgX0KkOQ1CC2yYr3dDsl+Vi+NcYvyIY7GuhYZy6lq
ensFNtcZJ1PZTT42uXvcPFdQF2jFtTfXCf7fx9SarcIEVqHX57pS05Hv7W+JaCwFU4v7kUjjZof6
GAqPm/+x+o8xVVuFujqrYDYaNGVO5jUIJpNJsLX4b13hbrjh9k+HTPTz+vUX1xSIABEgAkRgcRKQ
PgvYNoW5JRB4z1hsV5vcAGaYAywi3Xb2ao0MDf2+NdQpN1AkRqjaiRhqV7yLNt0ImsBD7fwcMUCo
eWtkdYNBaO6f0kPTAB4UHCYlH4diLhq1ymunyc9B4w0tnoLQ31zNnR/5uF75uFelsSrWQ657aO6j
srG0cpmxy31U6O/tFXr7+4Vetu4fVPtIo31eAns0r4dADsUGd05pDLD/mg3cxbW6QAcyxMpGUlYp
zo/egN3MhsrPINQ138DJ3YWqR6YX7Ea7vJs1y9lQW4Oqqho283Qbd5ytuQV1XBePNjbDXwPOX78b
yCd3vyXvJBNuf0AQbRABIkAEiAARIAJEgAhoEnht3ytovTmiuV99xxia3+S7/VqP70eOeubJ1Mxi
1Nj5YXk//OlHU0cweX/Nd6W2NB1Egeakv+n45h7WvzEQ2nDltoYOKTqWaxgnd61ABTfsWY9Gtwe7
C0PPXRMoQmPDO86X29zBd62WHrai6E+Z+yk7cxHqgJ2tn3g42K1Zmi/0tg7L1rAXaTYrNvsPo3UT
skMckCRzrcRnjWXuqcjKyUFOVhZy2Dpr+fS76PO6UixaBOJr8GpqHipPXkPZd87haPV2nOLtUlUm
JqsDB/eYULA8tKrFB8/B9aVarNvJT5glFWow16H20J+jKCcdwyscqFpXId2Nu2PBaLr0Gs9OUbhT
Crc/KIm2iAARIAJEgAgQASKwWAjoYTA8iLt3g40Kk5qLsyzdZW6ElMaZ21mPjWyxtYtjYJdHBmqi
H1c4Y9KMrU+GP3bNhueZ/OD0Vhn+0kR5wWSWasC3Nub596qus556Gc1NBtwXp9xhf772qPTlMXhI
+vgvcXq/CXu4+hrQ1O3Etnz1Y4JHh996MHcNyxSsfEPFOozcbsThF8pRkMUb10mZBdi9tyC80JA5
UrHlaCuEoyEzTe6cGMb5H/1IO2Mcc9dWivbMNYHQVuFclz5D+TlF23CyVcB/H+jBh/92Fdd7fo3P
xseRkpICpKbiS1m5yPv9r2HN6rzIfYYxE7Vwx2sQ/ugFdLS9hw97fzNZu5QM5K5ajbUFa5GzPPgZ
L7NwN7xDxXBdHxBnC4Nu6RewcpX/u2E6dpwR2KKlYLj9WsdROhEgAkSACBABIkAEEpeAzfU+9haG
MOomxjA82I8P3zuL/azRQmoO7yv5bzCMngnR6irhNvoZbkmiMG3AquBrnnQPt52aWwBxOii/Leps
vYKRvYVIl8szbEU+bztycnyR9DyUbQttJIv9Hhv2bQ+UFxSyCr+fG4JTMGPYrew/KGGTTdVyLJ01
O+EU24T0Bpg3l+HZkifwDf1jrDUzU9GoE7aAcBkmRtDX14+7AwP49e1foffXt3Hr5se41ulGm8oH
D05cHHPn9KDIvBKISwPYTygzKx+lW8TFnxKFdXoWirfsQKh5ov2lJGXmoag49I3Ln5fWRIAIEAEi
QASIABEgAuEIyAeNyfInpSIzKw+lrNHC9dTj2JZbLm27xBv/+CrO7M6XHaQS1ekgNR+NTxcgAvuX
CfLywjxTUZk85iMkKoai1MDnC2ZuQas3w3t8y6zLScoqQ3NLHbI38l24feW523BKXPwTW+uNsL70
Hex4/jnkZc7SjBjrw7kTR7G96hSv2nRiccx9OmpS3ugSiJsxwNFVm6QRASJABIgAESACRIAIxDOB
pJwy/NDJ5l2WBPfHvQhjQvtyj/W6+FbVcZlhK5EZyeZYbxcnz1C2BuEagCORGzJPvRF/I3XGGzJz
6J1ZpQcx2u+C3cKPcVYc5XaiZo8RX12mw/4QPnkVx8kSRnrOoTQtNwLjV2wD1w7xzl1bM9ozlwTI
AJ5LuiSbCBABIkAEiAARIAJEYM4IpK/0Dz+bLMLd+TH4KZ3Ui059aDU4U8830ZR6Xj5VnJBKEqYG
Aac++Agb9RsMbV23I6pH8IhwWyZ0DnrQYpWWAlStt6InEos/nHi2PzWrEJXHz8PrGYSr3Qk788Nr
DGF/1rOxwm90qDjlDVfWyFW8tHo7FFP5sO7Wluo6NsFWI2uRZv6Ab/TD472G0W6HpsRE4K6pHO2Y
MwJkAM8ZWhJMBIgAESACRIAIEAEiML8E2HwwkYQ0vgv0rZ5bEbUcT3z6S66l11j6+GRX6vTf4Wcy
HonADGdjXwf6+tA3wJa+AYxoGbJ6C1xDZ1DEZhEutRzzjUEOqliPb9e2BqNR2EpKX47C4i2oPHgU
568JGB3qh5sZxFYzb3yLRVW9/va0Df2et45zDMUJwxpdvfBea8XxowdRuXsHykqLUZCX5ZvLx+uV
+06RKJlA3CVa0eYcEyADeI4Bk3giQASIABEgAkSACBCBuSEwdKuPF5ydjpk45nHXt+GGlgEqKeFG
m1MSA/xDgAFZy7DzffyHxDsId9BU5M6lemTn5iI3my252fifrmG1bDCyMbcBT0fphfirZlm375qN
ON0VgcGtKn0MXa0XceHiRVy8cAEdXcoW3dTMLBQwg/i1k63wdDdxLd2iyAiwSUoew/VL/Mhmu+st
7CjM0RzLPHHvM8nx8s145S7Xg+LzSUDLAD6SnJxc/eqrr85nXagsIkAEiAARIAJEgAgQASIQGYGx
LtQb/bMzTR5i3BjhZFapq/A01we6HhcuKY0/viJ3cOG4f/7nyT1/tll0IcQCk1dumtyc/NuAc+8x
TyGaYQI/b5C63mQ+cR+RTsslOVA2Pjmn7BXI3BGjQl8L2acAiYAQmyPXsG9jOYzl5Sg3GvHy+Z4Q
mYH0/D/EVlm36OlNheXF3U+lBrAJT64JPVr6+jsXtesUr9y1NaI980BAywA+4PV6U44dOzYPVaAi
iAARIAJEgAgQASJABIgAmztZF1n77XDPRexK06Oeg6bH3s0FXIp2JB1le/iW1KqSo+gJ0Wrbd+E4
qqS2m8GG8jz/3NGpeNZcxxVXW/59aDXMjvX8E7Zzkx9vxuqsSE3JTLxg41uiwdwY7TtxlSs/okj6
V7BV0rPZXdMcxpAew5jokjkQxsO0AIfTqR/9QwFhio2+i4dRUsOPFk7RSWXGMPexAVzu6ECHf7na
F4aVQn1KmCMCWgaw6JIb9+/fn6NiSSwRIAJEgAgQASJABIgAEeAJ/PjvT+Hs2dM4fVq5nD17DufY
vkO7SrFsdblsHCkbSVp3CqXLeXmhYjmbXoCFy1CP1UX70TEgt4IncLPjJHJlrc3Wv9zGzfS8vNgE
K9c6ylwVZSjl9TFZRat3ciWbHH8KfjovbrcikpSzBS4b14QN5751OHdTXnfFobKE5XjMILGAmSGd
u/Uwuu6odGyeYC3gh19ElcQe1a9/jHMnJfcSte/kWxgYm8DEhF9eOr5eKq13G2s5P4weWe/vseE+
XDhRidxyaSv5ZNX7bvEWc6xyH/noHNaXlKDEv1Q4pz1eWnayKDrHBAQm37cIFBYdAf+5F9cUiAAR
IAJEYHESkD4L2DaFuSWwaN+73HZTQHeGeObb5kZhSPFT9QgOo0SmwS54ZHkG2+tUyzRZ6gSHwyHY
rNUCmwlZmcfUqJAliva4Hcq8TC+j2SJYrRZ1WagWeqX1GnUJrDd1QI7R5pLuDW57bwjMgA/k8/Ez
1AmDwRyRbQ22CMxu5+WwuKnaJjQ5mwVnk0Ooq1Y7TwahRVaYt9epKkusm909SV+LkanaKtTVWQWz
0aCoC39tGASTySTYWoLUtGQuJHeP287rYVRefxGdoEivB4kw7nelct1Lsib0Jn/dsFiYIE63JrBx
wAkNhZRTJyCee/+inoNSiQARIAJEINEJ+J8DU2u2ojCHBBbtc5d7UZe8fzDWASbhts22FmFU9Qfp
EdhY2aAcZggojWRBuNGsbgRrlsuMzF6vaoG+xMFOdSNYXZ5JaO+XCfO4BNZGGqi3pgHMShvqtAXy
+eWbHG7tymnsudFUrZDjl6e1tjYHDdCg2CHBpvbBgOljcwXpt9cZIy7P1twi1BmCPPz1Mcg+DMQa
d4UBPFNDlAzg4OU1zS3/tTK1ZqvJoNUF+phOpxs/cOCAPx+tiQARIAJEgAgQASJABIhAVAnoUpZO
W56e+Ys1mavhcLajd8iLk3tL4R+JKxeWLp1XKjtFdabhvLKD8NxogUXaE1guaCpusTVjqPUgcqTD
UGV5lxfthre/E1ZpT19ZHjEqyhr0nkGxfOyvbikekuRPz5DNdCzZl1lkhtPC9btGQ8Wb0/YNnLft
KHpb7IoZniVFBTcNFrR0D+G1spxgWmArEy81t0NWpcBe/0bxwXNwNVr9UdW1gY2p7uz1YG9ZKV48
5lDkuSvr7R1r3HU66cXHqp8RoYsuhaaUEG0CS7QEMgP7dbbve1r7KT1xCSxZErws2HWQuIqSZkSA
CBABIqBJQPosYJmCDwbNI2jHLAgEHrb03J0FxVkfOoG+rktoa7uEjz/5LdLSxAm5UrDikS9hlb4Q
31iTj0wtS1uj7Dt9XXBd6cIn/wUkizPsJP8uHvnKo3hsBrI0iohuMvNNfLP7I3zY9Qv8581B/HZ0
FGDLKHMu9cX8x7BhwzMoys+KoMwJDNy8AY9XB11aEtKWLsMK5sdY8d1gZAAdbe/hw97fTMpMyUDu
qtVYW7AWOct52BPDN+G6zmbWZiB1S7+Alaty2PlQSPTJiTvuoYiOXWUTvq0LjHlnPQJwfm9hqCPQ
dXIX9HsaJvMY7PC0VvJjtUMenTg7tZ5j6ldN4uhNmhABIkAEiAARIAJEgAgQgQgIJCGnoBi72RKt
sDynAGVsiZuQlI68giLfMrs6JyErLx9hTeX0LBRv2YFIiCdl5qGoOC+iasUd94i0okzRIqDVBTpa
8kkOESACRIAIEAEiQASIABEgAkSACBCBmCBALcAxcRqoEkRgDgmM3cHl936Gn1+5jpu/vgvcu4e8
7d/DwS2RfUWdw5pFWfQIui7/Avfg8+I2Y9n37+uQ/3ghZD2vZiyPDiQCRIAIEAEiQASIQLQIeD77
nPkTZv+YeymwTuWpvm7gExjzxVkKi98bH4lWcQkphwzghDytpBQRmCQwMdCKbdkb4ZQBMTy+Hwdl
aXEfHfkI+9aXoC0KitR1DuFgUWYUJJEIIkAEiAARIAJEgAhEj0BbTQl0EvfIzL0UduAsMvR7oldI
gkuiLtAJfoJJvcVMYAwNLymN34QlotMhO0rKpWpPuBmlEkgMESACRIAIEAEiQAQiIxCqPXfcK7YE
hw7hc4Q+PtH2Ugtwop1R0ocI+AmM9eKSounXDOv6pVjx2IP+XLRWISDzrKCSg5KIABFIcALi9LN0
K0jwk0zqEYH4IKALOYNzii6MOZchdpSmICVAPKQ0aJsIJBIB7z18KtFHb2nC+8e3hbyJSrInwKYF
7d2VWO71wjstbXT40mrq/jwtZJSZCCQegTeZSivZcpotb7HlHlsoEAEiQATmn0BqARzeUfytajOu
fwzwC8xb1f+lWrekpFQygGVkyACWAaEoEUgYAqwbr9QF+8r83+fiCaOnliLGtXg8Px+8F0GtzJRO
BIgAEeAIiH6PS6eW/8HWTWw5zZYOtlAgAkSACMwrAZ8RG9Jq8xvC81qtuC1MawzwkeTk5OpXX301
bhWjihOBRU8gaZEPZPWMT7Pld9FfMQSACBCBIAHRAPYH8Vvid9jSzpYbbHmNLTlsoUAEiAARIAJx
SEDrW8IBr9ebfOzYMRw5ciQO1aIqE4HFS2Bk4CZ6PYDusy64JRic73+AnrKlgOce0h5ehRxVPz8j
uHrxLZxpPI/WBic7Xg+9XpRiwPrNW/HH24zYVJgzja400ZYnUWieNgd6ruLmZ14k37+PpV/+Ogpy
xHfhMcbpHxmnFtwaGUH6mu/gh0e3KFvYx4Zx9YMWvPvuv6Lro1vo97ATw0JGdjbWFDyNkg0b8NS6
fKRr3YmZm4O+Lhd+xTpfTpb/GCtf7J49hp6Of8aFt3+Grlv3MML+pT+0Bk9vNuL554qQKZE3dqcH
7/z0HbRduoLfMDniRBoPPVKAZzeV4w9LC5R1FiuoEsYGevDPP7mAn7Hr6FMmJD09HUuXPoKvPbEe
BkPxVL1UDqQkIpBYBET/cVa2fJ8t4qTzp9lCXaQZBApEgAgQgXgnIDAFfItAYdER8J97cU0h3gh4
BLt+8rcrPY/ybX1dp0IxT3ezYJr63cvzc3FjtdDZP6o4Xp4QbXly+Yr4qIuvv8EueBSZppvgEWwS
nnqbWxC8NwSrQcaYlTXEiR4V2h1WQR8JT+gFa5NL8HLH+yN8+QaxfI9LsEjqxJ0bX3kmoaVflOYV
WmzmwL1cmU/UwSS0D6qX7K+BwDRz1pnCyIGgN1kjui6Ccmkr1gnIrhkWXVTh75m2Ya/7qTzil62/
Y0sxW2YaAmXF+nVB9SMCRIAIxAsBdkMO3FulN2etLtDSPLRNBIhAPBGIYILnB2V+fvouvoGM1eVo
iERPZy3WZ6fhZMeAZu5oy9MsaB52ZIjT4EwF/ZgLh7/5VdS0+VOm1rIZFlsPP4eSihquBV52hCTq
Rs32dag4fVWSFtyUlt/W+ia2ZqxDvbRpP5h1aqsBG8srcHj/Nmzcd0qxl09oQMmmWmieyZEeHC5d
BmNV+CvD3VDDrosinO0S25gpEIG4JyC+NEUaqIt0pKQoHxEgAkQgBghoGcD3xbqxccAxUEWqAhEg
ApETSMOab1fDbLHAYjbKDjPAUi2mm1H26AOBfSNXTyK3vCoQn9wwwGpvQnunC53tzbBbzbL9wJ6S
bFzoU05JGG15ioIjTchIQbRHQTdUVSiNX7E+kz2bfTUb6TqJjXIL2WCGo7kd7m63j6ejrpp1LudD
Q8UBtN7h0xQx5ykEPVvpYa62obHRDrNBltPdgJr6YE6w0izWOthYufKrAu4avHlRxQSe6MOhjNUK
fQ2majianHA2OmBVXGNu7NQbmR7K60JWQ4oSgUQl4O8ifYsp2MKWXWxhY08oEAEiQASIQKwTOKLT
6cYOHToULy3cVM8oEmAXZ6C7QBTFkqj5JuB1c12CjXbWfVYR+gWrrDut3twoDCrysQSPW5EXpkaB
7wwdbXlqFdFIk3eBhllo7nQJnZ2dkS3t7UL3IK8NU1pwGIO/B+lvw2JvFnqHPIJ3dFQYHQ12I3bZ
jIHfj5jfWNciYzRVf2+vYJPJtrn4jtRa5evNDqGXq6pHcFYbuHL9dTXWOQW+l7NHaLbyddRbmhVd
sF12Pg8bBy40uvoV8L2Dncou2eYmhTzFgZQQ8wT819DUmq0WVRC7NKv+pmaQHkkX6UBZMX9hUAWJ
ABEgAnFCQHa/Dv8QY3q9Hie6UTWjTEB6sURZNImbTwJsrKh0TK/R5lKUPtRpC7x0+c67vlroVeSS
JAy1C6wFkTum6UbQEou2PEnJ4TcVBjBfT+l1rbWtHButZgDrhUa33FD1V0+ePzTPUbedYxmRAcw+
OqiObWYfPOTnRl/d7K8Yv/Z08nkNNn4M8yj/8YS1IAvS88wLY7HBFoE1Qkt0MQou1UoqjqSEGCYg
+52w6KIK0TSAJb8NzVmkA3li+JKgqhEBIkAE4ooAe2oF7q3SJ5hWF2hpHtomAkQgHgmE7f87huY3
93GaWY/vD+3bI7MYNXa+E+0Pf/rRlIxoy+OqNi+RlbKx0WqFmhw/xo4CcSZmtaDDsjXMFNSLs2cD
RusmZKtlm0pL0qWE2Ku+y/Hqt9Rnbma9jsWBiMGgx+GXNwWj0q30R1HOncYUbmbvm2+/yY0HN9Sd
wra8EB6Vl5fCZmefWwLBiXd/Ea4/dyAzbcQYgU8//RRr166V1+p/s4TFtFTIAUQpTl2kowSSxBAB
IkAEZkqADOCZkqPjiEC8E5joxxVubiMztj65PKxWazY8z+Vh8z9NhmjL88udx7VkKK9GqUa8/H/m
a+wTk1Ox5WgrhGvXcO2agPOvlXKGJXfgxDDO/+hHXFLYiL4Om/M1DNHUXGyUGrX6bViblaQhMgna
pvcYPvx5p+Q4PQ5WFEni6purN2zkdlz88DYXp0j8EHjnnXfgditmWlvCNFhsy1yeNJFlKVvEm8An
c1kQySYCRIAIEAGegNbbEZ+LYkSACCQegdHPcEuqlWkDVmnYVtJsqbkFENv6/Lazs/UKRvYWIj3a
8qSFzmRbXw1383486PUyp8jhBTDf58h4KFR7LZNhLMcavpk1tOCJEfT19ePuwAB+fftX6P31bdy6
+TGudbrRpjQwQssS9658gJnYEYaVK7Aswqx8Ni/ufio1ftz4l59egCjMNzsin3kyJk6Y2HeJ2xP4
MMKlUiQeCDz77LP42te+hn//93+Ph+omQh25xoglS0TbmAIRIAJEgAjMFQEygOeKLMklArFOQKfj
uswany6I0LhiBqU0eKYi0ZYnLWMm2ytzkJu1nNNxJmK4Y/y6cokqkbE+nDtxFNurwrkhUjk2VFKk
5YsyppOXK5P1pZaF+goj6mVpFE1cAg8//DCuX78OmSHGGWmJq31AM3EMcEUgFv0NcVxaO1tOs+Uc
W8h/GINAgQgQASIwHwTIAJ4PylQGEYhBAmO9rkArrq964zLDdpp1jra8aRavzD5jA1ApajopIz3n
YFy9HW1hDxIdIbnD5pr3DCMfo1nqQWmGFbj12eczPJIOi1ECosG2mMJc6dvLIP7D1HJrMQElXYkA
ESACsUKADOBYORNUDyIwzwRSH1rt8wkbsHVSIugn7KujLN9UX9doy5tnHNEpbuQqXlIzfvXMB/Pm
MuQ/+iXkfPkRZOfkITcnC7obp5G2ei4bmWagVvojWMdsc6fENjfbHHhiGn2ax8fH8eCaL8+gcDqE
CCQkAfFrkNjKe5otP2dLSOOaTbHKslAgAkSACBCB2RKQ9WQKiCMDOICCNojAIiOQxneBvtVzCxMo
0J60aQrPxKe/5FqOjaWPT3Yzjra8ODwdPW8d59gw37lodDnwfGGOKtcR73gMapmOR1ayagUMYBP2
v7Qb+fS0iMFzRVWKYQKiFSvt4vxfMVxXqhoRIAJEYFERWGxjehbVySVlicB0CLjr23BDOfxTIeJG
W6DN2LdPq6dxtOUpKhJzCWO4filgNfpqZ3e9hR0axq+YYeLeZzGnhbJCDbjeN6ZMlqeM3MTFCxdw
8eJFXLhwET3DEVxMchkUJwLxT6CXqfB9tojujp5hy2m2kPHLIFAgAkSACMQKAS0D+EhycnL1q6++
Giv1pHoQASIQbQKpq/C01G0Om+bowqVwvlvv4MLxBq4mf7Z5zWQ82vK4UuIhIp892YQn12SGrPj1
dy6G3L8wO9OhL+UuDPzw7JWwVek6+13mW9iI8vJyGNls2Rc+pjl9wkKjDLFMYMk0Kid2cf4HthjY
8hW2fI8tNL6XQaBABIgAEYhFAloG8AHmEiTl2LFjsVhnqhMRIAJRIZCOsj3VnKSqkqPoCdHY13fh
OKqkjZwGG8rz/I55oi2Pq1ocRvrRP6Rd7b6Lh1FS08ZlSNHFRj9jvfE7YMOAA6Gt5mWcu6l9YUz0
XcS+PdKeAUZsCmP8B4TTBhGITwJiF+efs6WCLQ+zZTdb3mOLmE6BCBABIkAEYpiAlgHMnDoyn4/3
Nb0+xrBKVDUiQAQiJZCz6QVYuMz1WF20Hx0DcmNnAjc7TiLXWMvltv7lNkjbOKMtjyss5iPp+DrX
ctqGctNh1hWYr/jYcB8unKhEbnkNv4PF+m6FsJgVuecuISnnOdRZpCawG9u/+hzOXh6QFcqui9aT
WJdbzs16bbTVoHA6/pJlUilKBGKAgJYh28vq9n22UBfnGDhJVAUiQASIwEwIxEZzw0xqTscQASIw
ewJJeTjUXof6kqqgLHc9SrLrYbLUYePaFfDc/hit52q5WYF9mU2NsJRmBY8Tt6Itj5ce87E1hq2s
jpKW0LYarF5WA1O1FQW/B9z8oA2nnHyrr1SpWmMFbpuy8XjFX2FvaY501zxvJ6HMegqm+vWSSb3a
sHN9NuqMZuwsLUQq83V8pbEWDdIeAb5aWmHbWzjP9aXiiEDUCSyRSJzWLM6S42iTCBABIkAEYpCA
lgEsNv2yYcC+huAYrDZViQgQgUgIRDIKc3nxQc7d/dUAAEAASURBVNxoBr5aLjGCmfCG+iqJ8SMr
zVCHXseOydmfZbuiLU8mPmRUrm80pmGSz9McSmZ6wW60151HSZXECGY1bqhVtvaKitiaWzD2xkZU
BWziNjQ0AP2P7w8YwNMpfzZ5FWDTi+AYbMfSFSU4Jdnpdp6Cm1dPstcC19BrWEjTXVIZ2iQCsyHw
v9nBYhfn02wRXRjRRFYMAgUiQASIQCIQ0OoCfUyn040fOHAgEXQkHYjAIiXAuzl66AtLNTnklR2E
50YLLAbNLIEdFlszhloPIkfr8xnLGW15gcJDbvD6IjtF1fVQSBEqO9OlXXkjkFl88BxcjVYVScEk
g7kOnb0e7C0rxYvHHMEdU1t3JT3QU6Tlr0pHmiJ3MIHLG6auXN6MlKAQyVbS8mKc9PajyWqSpKpv
muucGPQeR6G0T7x6VkolAvFA4P9mlXyGLafZQsYvg0CBCBABIpAoBKRdfDidmCP211nC97hEiiwK
AlKn0ew6WBQ6k5J+AhPo67qEtrZL+PiT3yItTTS3UrDikS9hlb4Q31iTj0z/nFf+Q0Kuoy0vZGGx
tXNkAB1t7+HD3t9M1islA7mrVmNtwVrkLOchTgzfhOs6G1/Let3oln4BK1flMM4hvjAsgKbi2OUP
Otrwbz23MT6eghRmMz+wgl0XqwtQsGY1lqfHVn0XAFHCFSl9FjDlNN8XEk7xhVEo8LCl5+7CnAAq
lQgQgcQjoPUc03ygkQGceBdBpBpJLxZ6EEdKjfIRASJABBKLgPRZwDTTfF9ILK0XTBsygBcMPRVM
BIhAohLQeo5pdYFOVA6kFxEgAkSACBABIkAEiAARIAJEgAgsUgJkAC/SE09qEwEiQASIABEgAkSA
CBABIkAEFhsBMoAX2xknfYkAESACRIAIEAEiQASIABEgAouUABnAi/TEk9pEgAgQASJABIgAESAC
RIAIEIHFRoCm7VxsZ5z0JQJEgAgQASJABIjAQhEYG8DlKzd9s95HVgUdHvjCg3goOzvmZsePrP6U
a/4IjOHm1Wv4jZeVeP8+Hsh7HPlZvNeF+auLtKRhtJ514lf3pWmT2+PjyXjy+edRkBldk2zizlU0
vH2FOfKQuzkcR/LDT+L5soKouIpUahQfKZqzOtIs0PFxAueiltIZ02gW6LkgTDKJABEgArFPQPos
YLXVfF+IfU3iooaLZhbokasnkLFu34xOisFUjZfML2Brcd6ifnmfEbzFcNDIZZRmrEfblK76uk5c
O1i08JrL6iWvUF3nEA4WZcqTlfGJPpyu/REGmVE7nvoV7Nm7DcuVuXwpIX9nehuGru1FBCVqSI+f
ZK3nWHQ/N8QPD6opESACRIAIEAEiQASIwHwT0MlbpCKvQFtDLcQFRivcZ15DQXrkx84258Sdy/ib
4+8Av8eMj98CT1XuRWlOLLQuzlYz/vi41lOnQ7ZEnZWpOklsATdl9ZppTYZdTlTU1EwdbsA3K5gB
PJPfwIMpi/4DkpYBfCQ5Ofm7r7zyCo4cOTLT80THEQEiQASIABEgAkSACBCB6BJw1kCf8TE6B8+g
SKsJLLolYvT2ZVTV+o0PwLbtxYQ0gBeLnlG+PKYnTm+Go2qDr5u2rwv0o5FYsRNo+Xtpz4kMhDLv
0x55Gg673dcFOjkZuP5Px1HrdE+vngmcW8sAPuD1epOPHTtGBnACn3xSjQgQASJABIgAESACC0nA
YG3GW5YiTIxNcNVISkrCxKgHn3xyE653f4LjVfXgX98bsH7FF9A9ehz589EQO4uWa06xWI8sFj0X
8DwYX9qP3Tvyp1WD4at/h+2nIj8kaXkhdlcWBg7oud9CBnCABqA1CzT7ViB+mFAZrS05mDaJABEg
AkSACBABIkAEiMBMCWSsWIHM9EwsX76cWzIzWVpWDgoKS7H74HFcG+2Hw6KXFVOPb/+gVZZGUSIQ
4wTG70VUwbGRO+jquIA3Krdi2bo9ER2jlck7rrVncaZrGcCLkwZpTQSIABEgAkSACBABIjB/BCJ9
MU/Nwu7j76PRzBvB7pr9aL0z99VNk7WMpujS5r7QBShhsei5AGgjLHIE5/aXQpy8KS1jBfQlRlSd
ckZ4LGWLlIBWF2ix6ZcNA/Y1BEcqi/IRASJABIgAESACRIAIEIE5IpCOHbYGNJ/SoyFQghsn3u5C
aWVBIEWxMTaMqx+04N13/xVdH91Cv8fjy5LBXCutKXgaJRs24Kl1+UhXeSse6LmKm58Bn//iEif2
6gfv4ao3E59/Dnz56+uQo3bwLMrlCptWZARdrf+C8z9xou2aG3fxIPsHZGSswponC7Fp0yY8WZgH
ea/xmNJz4g46zr+NhoYfo9PJ5nTW6+Fm/d/1Bj02by3HNmM5CnNmO4cx43T5F7iHKVuH9XrVZT2G
wjyp3AmMDI8g0Dk/KY31VpCTm9bJiSjz3Vv+eawjyk6ZokjgiE6nGzt06BDzgjMfwSuMjo6yxSuw
scdsmY8yqQwtAuw6EvyLVh5KJwJEgAgQgcQm4H8OTK3ZisIcElg0z12P2x7QlfEUjDbXtH9IbruJ
kwGYhW7Vd8dRod1hFVibsSy/WlwvWJtcAi/GI9j0ann5NObGRqbDbMuViYswOuhqEoyR6Kq3CJ2D
Uk1jR89IdTBY7ELvqAzMqEswSfTXvrY8QpNFr7gmrC39nED5tQq9TZCfae4ArUjE9RIFeAS7gb++
xN+JcjEKLo9Wgcp07jdjsLNSFkeQcWPRyaDVBfpVNv63dm5ngB5DT8c5HGb92tcu0SEtLY0tOjDD
my1LsLZ0K/YfPonWrr7glxd/rRNuLTruvozLl9nS0YGegbGE05AUIgJEgAgQASJABIhANAisLtsO
viP0f6B3MNBOFyii9fBzKKmokU2eFdgt23CjZvs6VJy+yqWniM2nYYLc2040yg1TpGL38OUTWLFu
OyLqLOuuZxOIVeDycFBMLOjZc+FQxDq01e9BbtEbGAiqEOHWMM5WPo3t9fyUarb2frxWmhVaxsr5
cB+UjhecQxga4heP5wbqDKGrR3sjJ6BlAEcuYQY571w9h11r07C6ZDtqWL92/hKcFOhuc6K+Zg82
6nOhW7sLZy/3zaCkODlk5BpeXLce69ezpaQE3264FicVp2oSASJABIgAESACRGB+CSTlFOMl1tQZ
DG34+PZIMMq2RrpOYmNNG5cGA3M/09wOd7cbne3NcNRVywxpoKHigGRMsQ6rtlbDbLHAJDM+9EYz
LCzdbLIg94HgeODolMtXO2xspAt/sX4fn81ggcPZAhfrO+zqbIHdytpGucBm0f6Lc5hscll4PUUD
frWR+Xjmgh7VNgea29vR4nTALDsHcFfh+2d7uCNCR0Tj9xnsPMVbHvbOQewtDmP8hhYc1b1JbFI4
cRI46ZKevgIrMqJaDAlTI8Aaxl+fi8Zxl8Os0oyv1rSvTNNbmjSb7L2DnUJdtVWoq6sTrNV1Qoui
X8RcaBMlmdPqGhGlMkOIYddD4ByFyEa7iAARIAJEIIEJSJ8Fau8JlBZVAovmuSvvVqrdTTXUj4t1
EzUG31XEa9Xu5jt1umzGAFNxv7GuRZD3mPWV4O0VbDJZNpeyo6u328HJs7tVpQnRLjcUBf8+j8vG
1Y25lpJ15Z7MOdrbIpgl73iAQWgZ9EuZXC+Mnr1CNVcvdm5NKl2c2Rlst8vtiGqh169CyPfpIcFh
5q8Z33XjkgHwy2Jrj5vnOj9doCUV4DY9goO7TqkLNIdHIyKeY8nCNifDvLYAi1931lWc8pcdWOuN
FtgcjXA6m9DosMNabYb8I4+Y2V2/HS+d7gocJ93wO+6uqqpCTW0Vrt8dle6mbSJABIgAESACRIAI
EIGEIJDOJnTimoDRd2tIotkI3K3SzsDVsB0sVUz85DsgKQfmw3bJseqbozI/MuNetffM6JerXhs+
tffKFS7hz3Zsgsp8XkjNKcXrzczUDIQ2/Nt/Dgdi4sZC6Dnc8WPwbb9muP+2EjmK+aZSUVx5DMwQ
lIROdA8ou79LMrDNOzi9axnkJojDNYTKwuV8VkksvcCM/t5e9Pb3o5et+9+tgHSKLElW2owzAmq/
j7lRYeImfqDSPaP9b2tQzM24Nln8a0f/B252NODFkgq0SWrUULEPFZtbUSq/XmXT00sOoU0iQASI
ABEgAkSACBCBBCLwew+kc9p09nwCbMmZStNh2RrWlHLrLuvi7MbKbZuQzeXmI0lRe4dcmHK943z3
7+YON3bkFfJKTsVWFP0pHLYcjGekAJ5xrHk42H1b9QDVxGjqOYbmv67iSrE0HUSBwvj1Z0nHN/dY
AGf9VEIbrrDu72VZKqZpio7lGcbJXSuwJzhtOEvTo9H9PnYU8NeQv4TgOhVZOf5rKphKW/FPYN4M
4BH3T2Vfdyy48c5x5GnWIAl5xbvxTv+XsS17o2RQfxt+/PObKN2WF//0SQMiQASIABEgAkSACBCB
WRNYn/+wREYqthxthXBUkqS1OTGM8z/6kdbeaaYvTLkP5q5h9Qy2eDdUrMPI7UYcfqEcBTLDMCmz
ALv3hnAZFZHGUdRzoh9XglVnpRvwrY2h3/GznnoZzU0G3Bc9GLE/X3tU3ZBNH/8lTu83yYxfA5q6
ndiWr35MROpTprgnoGl+RluzXjffPaOu/VAI4zdYelJWKf57oxnOncGu06d+9iFszACWfhwix91B
ZrRFBIgAESACRIAIEIHEJTCBO4P9nHo5K5dxcS4yMYK+vn7cHRjAr2//Cr2/vo1bNz/GtU432kQH
s3MV5qnc7D8oYW2atdykss6anXDWMMX0Bpg3l+HZkifwDf1jyGEGcdRf/mej5+hnuCXlb9iKfJXG
XGkWpOehLExDmDhLeMO+7RJ/0X4Jq/D7uWT8+mks1nXUfwOaIMdle5IjL/qrTz3LDg4awOgcgDjy
QjSAyXG3muNuGWuKEgEiQASIABEgAkQgYQiM4HqbdIAcMO5VGQc61odzJ45ie5XkHXI+GMxzuUlZ
ZWhuqUP2Rr4rsU9VdxtOiYt/kK3eCOtL38GO559DXmbk7+Kq2KKhJ3N/ypuj0XE1pP1Z4xT01Zvh
Pb4l+h8CVCFRYiwSmOWVP3OVpK234aQkZX8DdWYz/tfSpcC9e0h7omjqxzKCc99eh30qV/mpPeUB
k5k5KMfBIunnpDF0nP4BXg7hG87JvhlN3iv0sDY5UL2tMOQPRXTt9KLc/9rUV0V3mxvuNiaPzVDP
HHfDUas2sD8cBXE/03e/0ncZc9yNQpVx1JFIpDxEgAgQASJABIgAEYgrAiMfo5Wzf/XIfZg3o0Z6
zsG4ejs3j4y6jmJbocqLpHrmsKkLVW5W6UGM9m/CP/zAij31XJ9ivs5uJ2r2iAtgcbhwfHchvz/C
WLT0HOvt4lppDWVr5n6iqXoj/uZP5LZBhIpTtoQgoGUAH0lOTv7uK6+8giNHjkRJUX6A/r71Vjw9
dByFUrtUq6SkPBw8eVJ170wddyt8w6lKFxMnHaN/zG4SZzRuEqLjbqXvMnWBPsfdrZ+h/9pBZKln
0UhV910mOu6OJd9lGpWnZCJABIgAESACRIAIRIXAnSvvSEa8MpH6nXgiS/JKO3IVL6kZv6w7sIV1
B85/9EvI+fIjyM7JQ25OFnQ3TiNtdcXs67ZQ5U7VPDWrEJXHz+MF6x24f3EJVy51ormxFk4N+76e
jRX+Yt4gDhbLZ5YNgyKKeqY++IjP84v/e0Zb123W3ANZq3CY+oTcbULn4A/xOfObJX33r2J2yBbv
ceRLLpuQYmhnQhHQOu0HvF5v8rFjx6JmAH/p66UMnPSLVD3WLauHpa4Rf7LlGazNz+LG9EZGecpx
99pR3LtWjwb/r4cdLDooL125FPd+g8gclB80YV3u7+HenX50X2rH8Sp+LIXoGF1t9mltx937UfKN
PCQP38SP6ytwSlK3ScfdW3ByR35karIZ7LQcd1cWTfOmFWGJlI0IEAEiQASIABEgArFHYAw/c4iD
W4PB8MIGSN+Get46zrUqihMrNboceL4wR7U334jMxVFQ8vS2FqpceS2T0pejsHiLb6k8eBRjwwP4
j+v/hvMN9ajhXkiBqtffxp+3Vk7L4Iyqnum/w8/QPcI3mMl188XZmOOB/iF4dSzG/izLzkK6mkWj
t8D13lRjm+UYTDXrJNdFPb5d+0e49ppon1BYbAS0/ACL86rh/v37UeORuY6NORB7mchCfdVOrF+d
jbQla7Fr/2GcPncRXTcHMKIylEN2KIumonTvUZw8fhyOHzq43S8dtuE4Sz955ji25AU7XP9HWzOX
jzlGx2jrSewuK0ZBfgGKisuwm90srnl7wRyjS0Ibrt/mfaUBfUrXTiY7ekev4eje3SgrLkbplt04
2ToK5rhbIouNaN75I3Z0JGEYpyuXYecp/vOd3TUIMn4j4Ud5iAARIAJEgAgQgUQhcKfjBHY28Nr8
2ea1koQxXL8kf2d6Czs0jF/xwIl7n0mOn+nmwpXb1XoRFy5exMULF9DRdUehQGpmFgqYQfzayVZ4
upt8La7STBG9cgcOiLaeohUrCc738R9jkrjK5p1L9cjOzUVuNltys/E/XfL388mDjGysc6CnaXoh
/orzgcz6eNZsxOmuCAxulTpQUnwT0DKAo68VczRe3dyi+NEFC3Kjob4GFdvLof9qNjJ0S1C6tRKH
T5xlP+Y+hPktkOPuIEjaIgJEgAgQASJABIhAwhEQx51uKpFN9GRuwrckDR2sSRB3P5UawCY8uSb0
eLvr71yMAqsFKnfkGvZtLIexvBzlRiNePt8TUpf0/D/EVlmDlFrjqbaQKOuZugrlJmlpDTj33oA0
QbY9gZ83SHsA6KF/hB//HThg3BvYFDdyyl4B6wnNhQp9bYQNUtxhFIlzAloGsK/pl40Djqp6okuj
Vs8NNNbxraFahbQ5T6Fm306U6HNZC/FWnG7twfS+UsklTznu1rMfC/vxG62zcYw+Q8fdgSpNOu4O
RKUbEsfdFdxXTtFxtwe7A5+zpAfRNhEgAkSACBABIkAE4oyA750nXJ3H0HXxDWSwcb1S05YNeEPz
61vDDKHrB+stqxn6Lh5GSY10nBqQoovEJAyXZ67KlamS/hVsNQTT3DXNYQy6MYw9GMzP5s8O8249
13qm4llznbRCqC3/PrQaZsd6/gnbT0mzb8Zq6fhv6S7FdiZesEmHY4oZarHvxFVFTl/C2AAud3Sg
w79c7QvDSl0MpcYeAS0D+JhOpxs/cOBA9GvMfHftOHgSwuggOpsbYTWb2O0rkuBExcbV0FWeZSNi
ZxqmHHdfu4Zr1wScZ/3+NX/W4Ryjz9hxtxNOJ1uamrEjpOPuZ1Qcd7+PHQUaX7lmioSOIwJEgAgQ
ASJABIjAAhFwNv8/OH32LE6fPs0vYtrJEzi0fxfWLkmDvlzW8svqa2l6G2UK4ycdXy+VNvO1sRbG
w+iRvTyODffhwolK5JZLWxMnIfTdUrGY+cZE7Dv5FgbGJjAx4W+amaNyw56X5XjMILGAmUGXu/Uw
uu746yURMHEHFw6/iCqJva9f/xg//ncB9FxebJINk2SuijL2o2OA7//Z13ESRat3ShQCTI4/RQ6X
EjqSlLMFLn6MI5z71uHcTb4sUcrIR+ewvqQEJf6lwumboCt0CbQ3rgkIgvA6W+YpeIWhwV7B1d4s
2OuqBZNBLzB4movR7lLUy+O2c/ltriFFHkWC1yP03uhm5bYIzkaHYKuzChazSTDo1cvnZHpcAru9
Bss02IRBRQERJoy6BNb7wyeLfQwIyuS2zYJ7NEJ5s8wmZT9LUXQ4ESACRIAIxCkB6bMgrl9o4qPy
gWd/nF4uEVdb/r4mu84CHMKlG23tglejVI/boSrHVG0V6ti7ntloUN0fLNMgmEwmwdbSGyjB2+sU
tN7R7G6PL99clBuoQKiNwRbVupmqbUKTs1lwNjmEumqTis4GoUX28rpQemqxM5otgtVqEYx6tffj
aiF4hhggyfu0eC6NNqW94MPovSFYuHdsJttQp3iPV1yrRrsweaZDnQyVfZHWS+XQYJJHcBilDIyC
axqVcdsl598wQz2ClYmbreBv2seORcMEptnrC6md1zMouJodgtkgPdn+bb3g7Odve/KLlDNW5YqM
9gpNdWaVG4FfvvqakznqDhitDCX74diFCExueU0m47Ifhk+e/Icpxi1OzZu9uuCZpUrLn5kEOooI
EAEiQATinYD0WcC2KcwtgcA7SbxfN+HqL39fY1gDuke0rTcJjZ2c2aNaZHudMWK5tuYWoU7lfdPA
GVBDgk3VCIMgfT+Mfrmq6ikSbzRVR6yvn7O1WY3jwuk52Kn+4cJfX35tEtpltoAga5zSNIAZvaFO
m4KXyeHmuCqu1ZkajrL3/FD14irARTwCG78sqbNR6CQDmCOkFuGvGRabClpdoP37F2ztm8K9TJxB
2Ytup1VWDzd6b89s1jZxAoXStFxsr+IGEMjki9HQHbMXzHH3ZVkfHpWaUxIRIAJEgAgQASJABGKR
gE6XMu1q6Q1GWKx2tLh64b12BjuKcsLKKD54Dq5G+fsjf5iBjT3t7PVgb1kpXjzm4Hey2F2uV2wm
XmpuhyX06yGiX66iWqoJeduOorfFHmKyWclhBgtauofwWpkax4XTc3nRbnj7O2GV9mCXVNu/abE1
Y9B7BsXy7u+6pXjIn4mt0zNkM0xL9mUWmeGUncyGijfRI+k5rtPJhh1mTP/alRQ5680UrjoPYam2
erMuK9EFLNFSkFnRr7N939PaP530rtOV0Fd0+iaecrPZCxzu97F7mmNZL+5fi/L64NQH7OsJzu8t
DFRjpOskMvR7AnH2NQ575ZNFMcfduzKkPsCmskfoGJ2TeacDpStK0OYv0dQIz5kd/DgK/75w6zFW
rzR5vdQdd7MRL+ieY8fdS5YELwt2HYSrPe0nAkSACBCBBCQgfRYw9YIPhgTUNQZUCjxs6bkb5bMx
MoCOtvfwYe9vJgWnZCB31WqsLViLnOVBN5nizonhm3BdZzMQs0lgdUu/gJWrcpCZKp8tZgIDN2/A
w/zP6tKSkLZ0GVYsT1fOKRP1ciPkwnzk3uz+CB92/QL/eXMQvx0dBdgyijR8Mf8xbNjwDIrysyIQ
trB63unrgutKFz75L9/pYH9+F4985VE8tiafnZMIqh9LWWTv+XIbZj6q2nVyF/R7GiaLMtjhmabv
5/mo41yUofUck/+q56JsZDwsTjfnhmj8iuFjcTq+aRrARX/yAlC/b1LADP+S4+4ZgqPDiAARIAJE
gAgQASIQjwTSs1C8ZQeKI6h7UmYeiorzwuRMQlZePsKakFEvN0y1/LuT0pFXUORb/EkzWy+snstz
ClDGFgpEYC4IzEsX6GXZOVzda//fK9OeRjxpBl1muEKZJ+HoOkaX9Tsgx908booRASJABIgAESAC
RIAIEAEiQARijMC8GMBpGV/k1T51GOdVphvnM0ljE2g780NpAlZmPcDFw0fIcXd4RpSDCBABIkAE
iAARIAJEgAgQgbki4Pnsc9YQOIGxMeaTmbnSmpvglz/mK+ve+MzmTpqbui281HkxgJNyngCbXU8S
3Nj+1X24fEeSFGKz61wNjJLxv+IEVYYn+VZl5eHhenfP1kF5DDvuVsKgFCJABIgAESACRIAIEAEi
QAQWmEBbTQl0S3RIS0tjiw4nu6JvnI50/d2U/DRfWev3ORdY69gqfl4MYGA59tocMs1PYf2KtXjj
XAf6hrlp9ibzsUH8fT0dOFFZCv32Wv5YUxW+KZ/5jRx384woRgSIABEgAkSACBABIkAEiMCCEwhl
4o5756oVWFvt+S9Ruy4LsUfLAD6SnJxc/eqrr0atTqkFu9Fpk89r7kbV9hLkLkvDkrWl2LWrEpWV
u7C1tBRLdGyWvtUl2HeqTVYHNjvyiR2QTwCX9uAXecdFpyqQzb6q6HTBLytrDFt5WW01WL1sCXYd
Oow33jiMyq2lSFuWC+M+dRdJtcYKVsddONHaNyUnC5YGuWFfj5LsNGyt3I/Dh/dj69olyC3Zw6YA
k4Zq/NXu6Q/sL3zpr9kc0HzY/uIJRNiQzh9IMSJABIgAESACRIAIEAEiQATmmIAupJeYFF24XqtR
rl4GlLOWR7mIWBen5dZgnFWc2cDJGB8XN6MVJnD1bA3W7ZS16EYqXm9Be3Mt8/slN39FAcM4sXYZ
9vGWpk+y1H1RxxtbUVIVWTcA5hgdY29sRJXMBmeO0dEqccF05/JprFhfEaEWJrT3O3jfZcw901bm
nslfq1DTow9fPoFl6/nZsJnjbpyZgUGtVWHplOHkjkGLEqUTASJABBKbgPRZwDTVel9IbAjzp53g
L4qeu34StCYCiUNgYoKNxVVtdk1CqsLVVjT0FscAqxaIpKRUtkSjjNiXofUc02oBThZVun//fpQ1
S0LhjqMYHXTDbpG3BmsXpTda0NR+gzk/P65h/IrHkuNubYK0hwgQASJABIgAESACRIAIEIGFICAa
nampastcWaKiYa1W3uIxfkOdZ60vuvPyJXJsuA/XLv8rfn7lOm7++i6r51IsXSpWlznrXpmD/Me+
ruqoPJRCzI35gjooTwTH3dKvJfQlOvTVRnuJABEgAolKQPosYDpqvS8kqvrzrde8vHfNt1JUHhEg
AkRgIQloPce0Hmhz1AV6IRFQ2ZESkF4sZABHSo3yEQEiQAQSi4D0WcA003pfSCylF04bMoAXjj2V
TASIQIIS0HqOaXWBPsYmjxo/cOBAguIgtYgAESACRIAIEAEiQASIABEgAkRgsRHQ6nj+Khv/Kw4A
/t5iA0L6EgEiQASIABEgAkSACBABIkAEiEBiEtBqAU5MbUkrIkAEiAARIAJEgAgQASJABIgAEVi0
BMgAXrSnnhQnAkSACBABIkAEiAARIAJEgAgsLgJkAC+u803aEgEiQASIABEgAkSACBABIkAEFi0B
rTHAixYIKc4TkM2exu+kGBEgAkSACBABIkAEiAARIAJEII4IUAtwHJ0sqioRIAJEgAgQgQUg8P8t
QJlUJBEgAkSACBCBOSFALcBzgjW+hYqtvuT/N77PIdWeCBABIkAE4pMA9byKz/NGtSYCRCB+CFAL
cPycq3mrKRm/84aaCiICRIAIxAOB/yMeKkl1JAJEgAgQASIQCQFqAY6E0iLOQ8bwIj75pDoRIAKL
mgC1RC7q00/KEwEiQAQSloCWAXwkOTn5u6+88gqOHDmSsMqTYkSACBABIkAEiAARiCUC9OE5ls4G
1YUIEIF4JqD1IXeJhlLjLJ3ZwMkYHxc3KSwmAtKLhR7Ei+nMk65EgAgQgSAB6bOApWq9LwQPoK3Z
EBD8B9Nz10+C1kSACBCB2RHQeo5pPdDoRjw73nF9tPRioQdxXJ9KqjwRIAJEYMYEpM8CJkTrfWHG
8ulAjgC9d3E4KEIEiAARmD0BrecYTYI1e7YkgQgQASJABIgAESACRIAIEAEiQATigICWAXxfrLvY
BZoCESACRIAIEAEiQASIABEgAkSACBCBRCCgZQAf0+l04wcOHEgEHUkHIkAEiAARIAJEgAgQASJA
BIgAESAC0JoF+tX7LDA+3yNGRIAIEAEiQASIABEgAkSACBABIkAEEoGAVgtwIuhGOhABIkAEiAAR
IAJEgAgQASJABIgAEQgQIAM4gII2iAARIAJEgAgQASJABIgAESACRCCRCZABnMhnl3QjAkSACBAB
IkAEiAARIAJEgAgQgQABMoADKGiDCBABIkAEiAARIAJEgAgQASJABBKZABnAiXx2STciQASIABEg
AkSACBABIkAEiAARCBAgAziAgjaIABEgAkSACBABIkAEiAARIAJEIJEJkAGcyGeXdCMCRIAIEAEi
QASIABEgAkSACBCBAAEygAMoaIMIEAEiQASIABEgAkSACBABIkAEEplAkoZyR5KTk7/7yiuv4MiR
IxpZKJkIEAEiQASIABEgAkSACMycwNhAD67c/AzJyZHL0C39Ah75UjaWZ6aGPWig5ypufuZFMu4D
D+ShKD8r7DELn2EMN69ew2+8rCb377NqP478rPC6Lny9470Gscp9GK1nnfgVu4TlYXw8GU8+/zxW
T7jR8PYVICVFlmUcyQ8/iefLCqBl9MkOWBTRJRpajrN0ZgMnY3xc3KSwmAgsWRK8LARBWEyqk65E
gAgQASIwRUD6LGBJwQcDEZoLAoGH7WJ77l49UYp1+9pmxtRggv3gQbyg+XI/ghNrM7DPPSVeb8PQ
tb3InFlp83fUyGWUZqyHn4q+rhPXDhbNX/mLtaRY5S6rl/z01HUO4c91Z5Cxbp9812Q8Xq579drP
KlXrOab1McD3He4+++pEgQgQASJABIgAESACRIAIzAUBXUr2zMW2NWAPW35Y7cT7R7cgXUVSxkqW
6DeAV6bERyuYTgcplZWpOhXNYjNp4s5l/M3xd4DfS8H4b4GnKveiNCdOWq9jlbusXtM+8w/GyXU/
bcVmfoCWATxziXQkESACRIAIEAEiQASIABGYJwLuWiN2PezC+b2FoUv0hN5Ne2dPYPT2ZVTV1gQE
2ba9GD8GcKDWMb6hN8NRtcHXPd7XBfrRdKRNPA2H3e7rAi0OJ7j+T8dR6/R/+YlxfRageloGsNj0
6+sCvQB1oiKJABEgAkSACBABIkAEFiGBuvZ+HHxiGcYmlMp7vaMY6r+Faz8/B+OeWi6Dc58Vl3ed
R1HM92/mqp14EZ18DGriqbjQGhlf2o/dO/Jl1SjE7srgB6Ce+y1kAMsISaNas0Af0+l04wcOHJDm
pW0iQASIABEgAkSACBABIjBnBFJ/h3VkTkpFaqpySU/PRE5+IbZUHsVodxP0XC2ccF4e4FIoQgQS
ksD4vbBqeWkKp5CMtFqAX2Xjf8VW4O+FPJp2EgEiQASIABEgAkSACBCBqBFQafpVkZ2avw0Om5FN
oOUM7O38+BOgLCsQp435J5AmawFO0aXNfyWoRCIQhoCWARzmMNpNBIgAESACRIAIEAEiQAQWkgA/
qDdj1lUZwdWLb+FM43m0NjjZ3Fl66PXiOEoD1m/eij/eZsSmwpzIJ9KauIOO82+joeHH6HSyOZ31
eriZOL1Bj81by7HNWI7CnNn22R5B1+Vf4B5z9OQLrP1Kl/UYCvNmKpfJa/0XnP+JE23X3LiLB9k/
ICNjFdY8WYhNmzbhycI8yKe1mnQ3BXz+i0uT9Zj6e/WD93DVm4nPPwe+/PV1yElXMT3GhnH1gxa8
++6/ouujW+j3TJ7XjOxsrCl4GiUbNuCpdflQO5QrzB+JGe4TGBkeQeCTTlIaMtPl5PyVpnVMEGDT
8L/OFgqLkAC7AAX/sgjVJ5WJABEgAkSAEfA/B6bWbEVhDgkEeC+2i89tNwV0Z3wFm2soYgTdDv5Y
o90lO9YjOIzBdxoY7IJHlsMf9XQ3CybJ+49YF9XFWC109o/6D9NcD7qaBKOWDEm6wWIXeuXiRl1c
XYw2uV7+Yj1Ck0WvqKe1pd+fYVrrSOsMvUXoHPRKZHsEm16Dl0RX5q5Hcoy4OSq0O6wC68qu0EHJ
Xi9Ym1yCtFSZMF80Uh3mg7vHbef10tsEOQE1HRRpEV8PwSO531WI6z54RGJuya4jFp0MKp9h/Lto
TQSIgDaBCfR1ufArNgwjGexr6wP5KMxfrp19ofeM9eDwi38B1wj7qrrGgn9k7iIW+zfI4ZsdaPlw
mM32x05O5qN4rjg/8q/6Mzifk1/Hvb7rBQ/koSh/rrrpDeDErpfQOgKkrzHhh0e3qboGmYEKU4fI
WhtmKOj+fR3yHy/E8sV+Ic6QHx1GBIjAHbxzvoHDUP7kKi4eaaTv4hvILa+KLLuzFuvZYmeTdVUW
q9/Hey4cwmojP0mXlvC2+j3Ibf0M/dcOQl2a1pHDOFv5DHaeEluog8HG6rVXo17BXMqt4csnsGK9
hh9ZeXZ3Pdav+A06h84EJh1LEZuJwwS5N6fWw89hY01bmKP8u92o2b4OHztcOLO70J/IrWOee7y4
4eKoLrII+w7wemJ+CyCtwhFgl3rgi1W4vIt3v+xr50y/6s0TwBarIXBOTQ73PJUa28W4bEEmmPPz
N5/Xi1eQnu+ZtgRonj1Pp2CQ3COk94vpbitbAzRLpR0LQEB2PlmUwhwSCNyjF+BUL2iRXEsVu7fY
3fLmUJXqeQeFpmrJPdx3T7IKynbP8C3AHpeslc4nyyBY7U1Ce6dL6GxvFuxWc+D8sGsgsO3sVbZH
DnXaAvuDefVCtc0hNLe3Cy1Oh2A2BGX485gbu4OKhm3xGxIazcqWX3vnYFDGdLY8bsEs0ctXJ4NF
cDhbBJfbLbg6WxgDvrXdl8fcxNpwxTAqtNiqBbPFIphkuumNZsHC0s0mi+C8ETy3itZRsXyDWXA0
twvubrePu6OuWqV12CC0qKgZi9wVOhq1eyCEPF1hrwfl0dzvilqA/b9JdtmGCQzl60qclLIYCLBL
w3+hLAZ1Z6ij7KE605vaDEufzmGj3Y7A+QQsQrfyeT0dcQmTd34fDvN8vQy1S4xUsxDJ+2TEJ1b2
IJbeL6a7PZ2ujhHXjzJGjYDsfLIohTkkELhPR+0Exokg7l7M3j+MdY1CS0uz0NysXJxNDqGuWsUQ
g15o7Fbr3Cy79yoMgX7BKuu6qzc3Cir2lSAwI1GeF6bGKQPQD7tXqJa8Q7HrRYBJpYszO6rdLjeq
q4VevxjZfZbvAj0kOMzB9zRfGawcu0u11n6JIdceF2+0G6zNql2NR3tbZIay0hj1cu8c2h80XDZj
4JoXdTDWtchYTlXZ2yuwuc64vMpnR2xy97h5rjP+2B7yelA/tdzvSnHdqx+TiKn+38fUmq0mg5Yb
JP9+WhMBIqBBYHxyjobJvZ7x4CQHGvkXJnkYp16qCBRtbqxEPg18CPBYsA3ptTMXlcgsRm0da6f1
hVMw/aB1LkqZtcyxWUsgAUSACCQaAWfVTmzcWI7ycuVi3F6Bqlq+27Oov7PXhR35zH3SNMPw5XOo
kfYg1lfjwskdUB3QlF6A195rBxvXGwwNO/HPN4N3suGOH4Pv+GyG+28rkaMY6pGK4spjYOOTJaET
3QOB6ZIk6dLNOzi9axkqTknTAIdrCJWFqrXmM2rEeq9c4fb82Y5NqkOCUnNK8XozM/EDoQ3/9p/D
gZi4MSrzvzPOfDcrwwjcrcHZu4Fq2A6Wqg/NSsqB+bBdKUKSEqvc0wvM6O/tRW9/P3rZuv/dCsx0
ajKJurQZBQL0KhwFiCRiMRLQIafMAtOqe1jK5l5c+rXHEIsT/d9pfRP72vznx4SXv5Xvj9A6wQkU
Vfwl9FVtbBZTwF2zEWd3jGJHnuItLAoULGjvrsRyrxfeaUnT4Uur6VVgWsgoMxEgAqoEXtv3Cn73
r60ozZuOETyG5jf5Ma/W4/uRo1rCVCL7uFhjN8K5J2i8/fCnH2Hb3kKWgcn7a34csaXpIAo0b7vp
+OYeC7Pe66eEt+HK7RHmxUnlvpiiY3mGcXLXCuzh7H89Gt3vY0fBdPSeKk6y8o6zSSMkobnDzZ4X
ok7KsKLoT5n7qRyMZ6QA7OP/modn8vajw7I17CPtrbtsnm03Vm7bhGxlUYGUJJlrpcAO30Ysc09F
Vk7IK4pXhWLzRoAM4HlDTQUlFoFUlB08jrKYVmoA9v01gRoa6l4O8SAOZKONRCGwvASHLXoY6yeb
N3a+eArlrXuj//XZuBaP5+erf7lPFJakBxEgAvNIQA+D4UHcvXtXVqY4y9Jd5kZo8p4m3elmRuRG
ttjaB9kEUBG2hE704wpnTJqx9cnwx67Z8DwrOmgAB1wvifKCySyPAd/amCetpmI766mX0dxkwH1x
Mkb252uPqhuy6eO/xOn9Jpnxa0BTtxPbZtDyLa/Ig7lrWFKw8g0V6zByuxGHXyhHgcwgT8oswO69
BXIR04ynYsvRVghHIzhsYhjnf/Qj7YxxzF1bKdoz1wS0DOAjycnJ333llVdw5MiRua4DyScCRGAO
CAxcfFPStUuPg6Z1c1AKiYxdAkn4ZuV+oH6qC3zbPvzt5V04WJQZ3SqzFgCx5VezkSO6pZE0IkAE
EpyAzfU+9haqG4I+1SfGMDzYjw/fO4v9O2t8vVz8SPaV/DcYRs9E9rF39DPc8h8ork0bsCqCG1lq
bgGYuyT4bWdn6xWMsBbgdLk8w1bkh7vdpuehbFtoI5m5CELDvu2B8sSqToZV+P3cEJz82SJYZ/9B
CWuJreVYOmt2wil+Q9cbYN5chmdLnsA39I8hhxnEWsZDBEWpZ5kYQV9fP+4ODODXt3+F3l/fxq2b
H+NapxttKh88OCFxzJ3TgyLzSkDrGj7g9XqTjx07RgbwvJ6OxVCYxH0Qc9a+9MuPocDnBH4MPR3/
jAtv/wxdt+5hhP1Lf2gNnt5sxPPPFSFTcqWO3enBOz99B22XruA3zA2R2HHnoUcK8OymcvxhaUFk
Ll+i4HT9Tl8PPmFDW3Ti63/al5DPObPn9Xwg7+vIzxIfVCz9ajsuvvsurnbdZp2nJ8MXHn0cf/jN
zXimSOlcfirLNFcD+LsqyUgkUxWeyZJADEjj67lg54OdxasX38KZxvNobXCyh7Aeer34ld+A9Zu3
4o+3GbGpMCfyhy77Ytx1qQMfXLqGnv815NM2bdkX8djjG/DsM0URuN4Zw82r1/AbX5/eSNxcseuX
5f9MzO+7rr/OruvZvZiMDfTgn39yAT97/wN8yi7y9PR0LF36CL72xHrWOlI89bsJnEjVjdT8zRCH
ArOe0L5QVevEn5/fHdlvRFXi3CUG3ERx/MbYdfGP7Lpowa0Rdk9Y8x3m1mmLsv6z/j3Hyu+AdaKM
wnmfu7NEkonAfBAIMw42KRWZWXko3fEaXE89jm255dK2S7zxj68yNzn54Suq03H3EuPTBRF+yPM9
GILyPVObMnlASuTPrKA0xZayvduf5RT01ZvhPb5l1uUkZZWhuaUO2Rv5Lty+ktxtOCUu/lcKvRHW
l76DHc8/hzzpy5m/WtNZj/Xh3Imj2F4lG9Q8HRlxzH06alLe+SEgsGJ8SyLOCEY6hSbgP/fiOvqB
dwdjsDGXPB6XwHpqBq45afmT2yahpV+cupi5d7HJZ02UH2cS2jnn7HINouV0nddDObMfv99gdwve
oc4wejJdmHN5t9pElnI1wsTl7gDq2rVmh5TVc97PBzv93c0C+5oe4vxP7TNWC539QRcKWghuNNtU
3CZI5esFe2ev0N0ouZbkMyTKXf2Ec5Mky6+v65RVL9xMpNLsQ4KzTm2WU6kOEPQma2Q8miwStnrB
6fstScub5rZsNkrI2U1T3GR2/jrUi9eh94ZglbnTEMsa4uTPze95/u9LolLRPe8cphlGZPdiFqUw
hwQCv9MZnq64PYybrZY9C5Qz/IZWrd9ZHWDHzo+gr5bOYKx97+U9JLBZiG2u0AX592rcA0e7G7l6
GOra/UdMfy0vI8QzMpru5Eb7XYLdws/OLDLVWiwOJTO56x+t8+npbpJ4K9AugzVBK8qXykwE7mEv
ENn1EMm1yv2uovKcDlvLmMwgu3ZZNHQIXGwxqQ1Vak4JsEtjDs+/7GHE/MOxSRAD5UnL5rb1JsEa
6U1Zr+YLcBKZ1D8qJz9EHUwqN3hmtgls9sZgvRVukGT7YYjwRs9kGmzqLhgiPuteobla+sAwCS5N
u1FWz3k+H73NdUGGIc6B9FzZ25WeHv1ouhulxp7k/ISTLX84yB42UJxff4lTa1l+5cNJxllenl+c
p1tp9IWsO3P9Ee6LSX8z90Fg1n6gZbpGywCW/p5MdQ51DrLzMHe/5/m9L7GvQOr6ap77CM67/5qa
xVr6u2PbFOaWQOBeOItTFpeHci/q7JqXGjeRKCQ3uMRnaPBDWYh7L/soLX3/MLIP1RGFUTf/0dZ/
XxqUup9jzx/mImnG37Pl91nfvcAkdA56OD/v7JJk10303Rt6PYOCq90p2JkfXmPIBgoI8g/s8vOh
ej5Zw4fqh2+9QbBU1wl2R6PQ3ML8Ad/oFzys/UP+sYKTmUDcNa8/2fWgfMdQHsn9rrTeOZSHJVzK
5G8k8D4YuItruUG6L+Zg44ADGWmDCMwJAecpSdclPczVNjQ22sGcxPPB3YCa+uAEDeyLICzWOtjq
qnmXBOJR7hq8eXGAP57FRrpOYmNNG59uMIM5XQdzug7m7B7M6TqTzIeGigNovcOnKWL+LlCKHf6E
NkhLNprZlP92O2xWi6I8sLGa9o5wBfrlqq370V4r6TRlfDqicU0+SfN5Pq6eRG65vLuVAVZ7E9o7
Xb7zYbeaFQruKcnGhT5lF7lhJm/1Tv9smsHDjGYr7A4HY21Wsg5mC70V9vyGPjyivRN9OJSxGopL
1FQNR5MTzkYHrGb2usYFN3ay7mitd5Q8AtmyVmOz5KJuOP+Bb9hAYP9sN9hMoOL8pNEMDVUVCg4+
+ZLzMKe/53n8HWCuzns0TwjJIgJxRYDNThxJSOO7QN/quRWRO8OJT3/Jjcc1lj4+2ZU6/Xf4mYzZ
sI2wgY19HejrQ98AW/oGMKJ1K9db4Bo6g6Ll6Si1HPONQQ7Krse3a6Pr6i4pfTkKi7eg8uBRnL8m
YHSoH+52J3sGyV/O2BCb19+e9jOl563jHENxuFOjqxfea604fvQgKnfvQFkpG+qTl4V0NnrLK3Ot
FNSdbSUQd04viiwIgSM6nW7s0KFDCfclgBQKT4BdcXP4JVr2NXaqLL3ZIfRyrZQewVltCNRDWidj
nVPgezl7hGYr32VHb5F2gZrUObpO12V6KL6uyfb7mRqsgntI7M4tCaPKrp56a4skwzQ3ZS1+Bpu8
O65Unno95/589AtW2VdlvblRveXb41bkFb+sc5eLoJQHmIWWXtn3d88NwW4KXt+B60p+/mRfW8O2
csryK7/OyjjLy2OnxGXnr2H2QiA0upSt3d5Bla705iY2QEArjApNZqnOoXoEaMmQpMt0FTk3d7qE
zs7OyJb2dqF7kD97ih4V/t8LW1vszULvkEfwjo4Ko6NBLef09zyf96U5O++SczbDzcDvY5IHi1KY
QwKB590MT1fcHsa1VLFrjWvdi0CrXlkXaP75EOLeq7iXRdaS2u3gh6gY/v/2zgcsquvO+9/sMgK+
iwmm2BRqwRCz4MrY4ubBmIAdtFuJz2bcvppudXxeaRpkffIIvjVSdCUtRnnIugv45MmL9Ok7bkV3
G0xex2wXmxZIsRvxsWgc8kRqoMJa2AQ3ksA2gMP2vucCc+ecO/fODDAD8+d3fK6ce8+/3/mcO/fc
3z2/c47TdFo9Mgzvz9qB1nKl3dm9JSnmzCrZ1KPTPY2i2bec1urNGkiX5Yhkb2qUbI2NUqPNJrXa
9aZMTWbgZrrM+jPXiDt7mttrhTq5t6fcJ/FWapBq2/kc3AW92yZaiwl5hix393rqXlHfD857TjeB
JAm/K413Dg9JwypI/m1wB/N6caz2L4YVAaqMzwTYraHcLD4n8jmiqjOSy9IzE3LYBfMkWS55bo+m
Y3MweVMm0QRKTqEut1Tq0cxo8uKI1we4Kj+3h4sqXK6nqZKpaTpOpbS6y6+TTuOyumMsb9ItlaXW
kHMO2kM9R5mt5OGxPaS7rWL7Mp4NXS4l6m57jXLPTt6/nuZS35WsaiVY3X6qzibgCrBbB24U6ufW
zANNKpN6s9Su0vX5NMJ8Z8bOesNDZD6hll/NRr63p3l4nSM9kZ9s5qv3UqS+bz3fP9P+Pcvlz8Hv
QApwu2s133SuqdqVnZILIAHldzSdNgqHuMKLOvvtCcqNtwqy3xDbSVdhx9pHMlvtXCrVs0J41g9J
bEtfIa3anJfLaMo7IFWqPt6eVvqiEem0qm8pbfTU/zpUHyeNUqNzjQbVc9b9o+pdN9kBz89B97pM
XVGvYVHube6yuGaDun/0rgCruVsku6s71xSztVwcEBHvkRDlrllTnYte7wf3dMLvSrjv3eOG8xX5
mcAdyiNczwRaiUAeIhBoAtaD3xBWYlTKY6ZA4jq6Rhx+foMSLHjiHkWeYB2qXn1xatN1o7y6MGAu
n82m60LJPp9YX92DRL3YS5ZjEx/GzEq11mzmo+j5P775vhB0/wPT26Q+8O3BNq1/pUiQsbxqL5KF
K6qT+GyUsTcV3r36U2c9x3Hx1I/4IJQ3HUCGePNw4fGwvNTAnc+/t/uNVwRzMFNlHbaketiPIyGX
mdBbOMFt+MW7+mbzSRmZXFzg+nsDwvlcnyyL8W40bbH+BNsy9PYQCfzvOfC/AyDQ7T7X7UrlEQF/
EIg2+NZnDXZewI5YI8SJL0bs2ZThoxhx2FhYKsQtyTmKzlHhknDSe74KJdwMI/axGnnKszoGXyuo
FOJX5P0AHTqW0KOdr2GrsPjxJqRr7tYgZDl1Eo9na/hpYfLlChQdv6oV2fO1uIexmbNstpc1otdj
ilGMPshHGPNiOu7tbaYPfXf5/ER/74XDyFHNDYo28HkGMffRfly+eBEXncfVXi+sxLrTWeAIkAIc
OLaUsy8EjJXYlKbzoh+TgvW8zmPcglW6nUMU23DAk5vadP36dVxn81nOHcrVVzC9bbruqRi9MNZJ
6tZTThO1BI/ydeXmOuplqXfdEM1rfiasXMqf66Wauj4X7SFvWl/Py1GAzWsT+Aua/hXrnhGuL3Ke
jdrRUM2/kRRja47n/KKS16OG6/CdWc3P31Fc+2UbVzTbszk/izvX9qavWy8EXLh2Wzj3dHKr/1NP
wQEP8357m/H8//S0jUmAf89z8TvA3Ld7wBuWCiACfiDwk/9bhzNnTuLkSffjzJmzOMvCDuzIxeL0
POHDoVy0/PEw1/PjX5AwecOzYCPInKtGetZeXOxXa8Hj6L7I1q0wO/cCmkxS/rdbwH+mS8i2gE3v
4RzbqmiRe369LK+s9O1cPLYNsfVbnj8EC7HZa0Py02BTQYSrtqLVONutll2IonGSgJUmvkOsQMrm
w+jQWlti/A7OH35O2VpPzsy4ZqU4WKHaJaroxOvoHx3H+LhzgnMcvpzLy92CPMthdA6Koo0O9uL8
8V1srRB5M2LR9d4SNeZg5T78/lmsyclBjvPIt017vrRYczrzFwH+E4q/8qR8iIDvBJbd7+O+eyzL
ZUuw2PecPceczabrnnPWDmUjujpqvnb8WVx1jPGfmxfhgZhp/Mznoj3Um9Zb1vm0SFdMSsbEwh9O
3dnWfAXDezJZx6saTTSvQpLXKsfD9E02gtrizG0WwGed1IGPP+IVeDt+9tPzkG/2idUItfKXFyjs
vSSEKB8EhKtzcGIshb1xLx50sLceVVNolc72mMeizydpBbmumfOwYhrfbeDv3/Nc/A7Y/uEh3e6u
1iIfEfArgZbqImHRSJ8zLziN1/d7/3go5BeVigOtlajO4RZktFcjJ6kaluJKrF+1BEO3b6L5bAVs
/GNazsRyGsW5aruuRBTXW1FmzOeKmczPXFCM1V8E2s9Wu+eFUry009eRa1fWmbv/HsVFNmEUfOtz
xzHQvB/T+A6A3MK/hZGNsipVtJXByA4LW5jUvOZRLLj3IdvrvgklFeo+04SqveKAQuyDX5hYcFLJ
qy4fSeyQXa19CLuYedYK02Z2xo1gt5QhfbFcXjkyHmDWMe+wfYdtLRNptP6rMOfjtiUJj+W/hD25
sv1YkHI3qIZmls3cuk+LA12bOQGvr4kzz5pSEgEfCAz5EMcZZTpxnWnUf/2x6bo6T1/O/SG7L+Ww
b4tXmrlOxac0XKTpyDmduFwRUG1ab34yw8ePA6rPylPlj390y9Vps3LMuUbxazRfdlD6nV/FXcJV
55uFFxpXyMx8hoWCvdrMMtFLtSwZKYkJ/mXu670VqN+zr+XLTKYTV2AY+HYXiqMTIhDGBApqmlCz
J1ezLxlT1Vv9y0vI3o+uRuAR1a4E9dUlbiPMSlamSvRYt2k+9+IydmKAGfUsWcMrwUzdq2OKr5IB
77Ggta9cHP2h5k4dAAA2LUlEQVRl3R3/KZuPLfiZAl/WVoPqNUWuyy0l+N8n83BqOgo1m1bzRkMp
HtkqjnDXVxTpM2Alljda3Ubco5Kz8SwbBS+yu0Ry+sYck/RlRq2V55BTIhKpr3Af7ZXT1jQ2YfTl
9dzIcwvqmS7e99jeKQWYTZkLBe4z7i+cBOmvvwiQCbS/SFI+QU9guPMscmNTsLVEmHSjITd7coew
U31vDLqajPa0ix3qmEqxnabEIx//h6AATzP5/EcfvolG8R1gRjLd+vT3uulikh5WbZuhG3X6AfPU
oYf873kO2n36jUkpiMDcEzBEL5x2oUajCRa2naDV1oqeuw6c0FF+5YzjeGuSJO0RuNSN+zHU1YRi
3hJYR6rimkbcZSOsyR6GkBKydsLR14Zy3tJXIz85rwHHKWSrp3cZFuLzXPy4RfrmNfFZBbAVi+8t
9fmvoFOt6XP5aXlTtxxFT1Mt25DIB2cqRtONuzi0UWv1jnjsZttLqkRyyzR7/1m0ny53u85fMLE5
1W09Q9izMRfPHbPyQRP+j1XW3sHG3WDgbz4mMrMGJBccBDz8fINDQJKCCPiFwPBV7E7f6m5WxTrR
4k0bkfboF5H8paVISk5FSnIiDF0nEZsufr31ixxzkIn6a/ccFDmtImI+nz6xd7Oi80Xrd+xixqp4
iyZDDWoTIzHRHJ2pZJtOqXFLsZq9u/DmdQU1Vjw+VT9fshobG8ODK76kG3X4gyviRwfdmCESEA6/
5zlo9xBpTRIzwgmk7TwBiR2BcXHYdkpih/fc41JzUdXsQHHHJbS0XMLNDz9BbKy8IFc0liz9IpYb
M/GVFWmI93E+U1RiFg6dk1DY24H2Kx348L8AefYKFvwJlj78KFZ6yismDSckCb5RYWsiVF2HVOW9
jt5iJOfuQrNjG7pvvI9rHe/it90D+GRkBGDHCGLxhbSVWLfuq8hKU5t+izlHJWaj6roDL3R3Ychh
gCE2CrELF2MJ28fY5aKQue0QpL98Fhdb3sa1nv+cDIpehJTl6ViVsQrJCS7Y8Znso8LdbLS/1z8B
0rDwc1i23F0BDybuMWnbIEnbXFUmX9AQIAU4aJqCBAkkAe1N1614JjNZczGsYU+brgdS0FnnHYfH
5MUlbIp6yWYaBpmLNQhmY7c6b7FVETM024GXfPyj3whKnDn3scl8lhtVc4PtU3OD+dTu/k8G+twv
zvDK+F3RDHt62cRh6TKWQjEXs2Dv7p1Io6ezLsbw+D1Tu+s2MAUQgXkjEIXkjGzsZIe/XEJyBjay
I2RcVBxSM7ImjtnJHIXE1DT93S+cmcclIvvpbfCFeFR8KrKyU50pPf4NOe4ea0OB/iZAJtD+Jkr5
BSGBUbx3SdEuJuSrbX8d23SUXznC+GefBmE9ZiKSDZc/GJxJwjlLY69uQZcPplpdLS6lXhZOsbxV
z5WyNeEDlVmUe2V68YZqWwX3ONwVL6Oxg53XXforl2xm3nq81+u1AmyCWDcunD+PCxcu4Pz5C2wF
TR8gzkygIEsVrr9navcgu9FIHCJABIgAEQhTAnoK8JEFCxaUHjx4MEyrTdWKLALq1VYtWLsi3iOC
99664DE8mAOXfmVtMIsHxCzHk8K8qGqcv6S/h+1kZdjWC1X1Qr2+s2nF5DkzJc0VJi3V4+zbzETK
gxu+Kq6a6SHqZJCibWvFHMYbx7UX7tCK7X4tDkZhSwjg1TNX3KOprnSc+S7b+9qMvLw8mNmqyedv
6i+ZMvqJ+EFnbZY85ByqLlx+z4Fv91BtYZKbCBABIkAE9AkMsTU/2MZSGB1lezKzLaYmnfN8dCLs
M2FHEP28IjVETwHex7aqiD527FikcqF6hzWB2W66Htxw4hMfFgRsvvI74Xz+T+KwsbBUEKMk5yg6
PQx69p6vQgk/iM/2Vc5Ldc4NSoC5WNzJsYKt5nlZb+B7tBMV+UVC+W4naiW9pRBv6uyt2H+hGoXi
4LRbdt4uGM3fntg2whmvpex5j3s5jvdeQJFQqBkbPHzUuX3tHWfW7K8RaQ/x87C4oJD0hu7vOdDt
HpLNSUITASJABIiARwItZTkw3GeYmKMey6aVnegYxnDHj6bOYyfC1rDtscjpE9BTgOVp+rh3755+
SgohAiFDwP+brgdz1aOSV6KAE9B29TfwoFtyMefOm7zhWYgqazXSs/biYr9a0nF0XzyBFLO4NUP5
324BP4af/NQuoc5gs4XXLN6B5m5xVHT0zmXszUpHBa9Ma1abLfaxjK1MxbntjxSx/Fxa9fjoHVw8
eQBJebMZ/Z0sICr5KVQKS2basfWRp3Dmsnokm/FoPoHVKXnCgm7mmjJk6uq0w7ALW2Pl4s+8b5TM
1TzYvOHzew5suwdbu5E8RIAIEAEiMFMC4tuMmItzeynxqnjmHCcWr0bumZ4CHLlEqOZhSWBy03Wu
ahObrt+HHQcO4+WXD2PX5lzELk6BuaiOi+Tyypuu79ixA8ebe10Xg9UXlYJ1Fk64uqvoC7YnH9u7
8EBrJSck89qrkZMUix17X8bJkydx/PABbF5lwCM5hWI8y2kU5yaK16LS8JI6P6YEr39kETbvOoDj
J47j8N7NiF2yBtVelV856yhk//WzYhmoY/ktxn2rcrE5dxVb1XIJcvJFxVwYxlWl9nwahY3ldaqt
ilqwfU0SVm3ehZePn8Dxlw9gh8xjfaFqvnE52/8yUz/78T5c4j8EFzzhcfsO/YyCJyR8fs8BbPfg
aS6ShAgQASJABGZFQFw8VJ1VtMHLqplsHRMvMdRZhv25Hg956JdNA54YCA57CFTBuSUwpirOk242
m7h8MYHYdN2bbN7Ceflkvzq+Otz38xg8sZWNr9ZXTyWpwLXeMqQqJsNiTupy56I9ZAkSsvejqxF4
hJkr866+ukRY7ZkPg6kSPdZtwirSzvCJ/Gyf4BHVaLGtrgK8/jcZ34xa62oU5uuP3k7urfgjmNUa
s73FLT9TaQ1Mt3+Esnp97dor57gsWAdasXBJDlO1Xc5uq4PdvQJTEYrRfvcQ3DeCcKUf7WoT8iv9
q8dm3RGqv0R7umdcknj2eeXDJZ+P3zNXvNtv1VP91fXi85nwB6jd3cqhC0SACBABIhCaBGIyYHWM
4IeanU0UYmJkde5ZtlvV/9KsX1RUzKz7fc2MQ/ii3gjwMYPBMLZv374QrhqJHqwEonlTzeVxbGc5
fSfE1dnA3plaiKux2bi/N10XykuKc3u4COFe6inXIY7noiG/s56+/E027ZjYa9cZt/6n7zu9bn+n
I6cQd5btIQuSunE/hrqaUCwsYuUm4sSF4ppG3G3e73H0MvXpoxiwNwh1d8vNVIzWvnN4NnupK0iT
t7y34tuwVfIG5a4kkz4TKtkGvs1H92DV51xhcRp7Gwvtq8MuKiEbJxx9aCi3uDLT8RVU2jDgqEIm
bwuuEfedhh9zVy3Y8oQndZmLqutVfYnWqYtucp0AX/jwSQP6e/bye/X37yAQ7c6zIv+MCcijAF7W
gJ9x3pSQCBABIuAzAVmJjYnROpxjmbIirBXOlF9nFJ9LC/+I9+lVUZKkF1nY9/XC6Xr4ErjvPtdt
we6D8KvocL9Pm67LFR8f7HbbdD1+4ktb8GNpPrAK65XJrsXoYspSatA+BMfR23EJLS2XcPPDTyYW
cgCisWTpF7HcmImvrEhDvHPNK5/QD6PzYgt+ea0TA5+ynKKB+7+YhseyHkdmaoJPOQiRRgfR/cFN
fHDrI/wXWxthwYI/weeXLceK9FTEBYjp6GAv3mF1+HXnbYyNRU/WYQnjkZ6BjBXpSPCl4NGr2BG7
WhlRN9W0oXlPllC1kD8Js9+zX9rdT43K9wUsS1fH4Kf8QyCbLzEZO9nxBjtOsqOZHX9gRyCc0tmG
Zb8bCGKUJxEgAkTACwG9fky3QyMF2AvRMA7mbxbqiEO3ocd7z8KQslWpQHlTHw6p584qoeQJRwK9
5/eyBcScpvBmtN49h2wvI8bhyIHqNDMCfF/ActB9X5hZ7iGRSlaAezlJbzO/bFLxj+z4gLvuDy8p
wP6gSHkQASJABDgCev2Yngk0l5S8RIAIhCKBqOTNaCx1rWRc9tKbcK1hHIo1IpmnR6AfPz7kVH4B
c00pKb/TA0ixiYCilE6hkOdNHGTHTXb8ih3fYQeZSDMI5IgAESACoUSAFOBQai2SlQhMiwBbYba0
zjUflu1la2N7xZGLDAKDl8+iTFmTy4Ky/DAzfY6MZqRazi8BT6PeTzDRfsiOD9lRz44N7KB3KgaB
HBEgAkQg2AnQwzrYW4jkIwKzIcBWmK2xsRWhp1z+y28G3Z7ATtnorz8JDOK1iiIlw4LTBz3sE6xE
Iw8RIALTJyCv47idHT9nRw87XmLHcnaQIwJEgAgQgSAlQApwkDYMiUUE/EUg+eky1Jimcqvfjn/u
HPVX1pRPkBIYvvoaCp1bJxkr8eK2tCCVlMQiAkFNQG0C7U1YMpH2RojCiQARIAJBQIAU4CBoBBKB
CASWQDx2W53aEJC/+x9BhtCBJT6/uQ/Cml+oiHD6J3uQqJyRhwgQgTkiQCbScwSaiiECRIAITJeA
7vwWWgV6uijDJz6/YhqtAh0+7XqnuwMffsbqs/AhZMxkK6DwQRHmNRlHf+cNfOxg1TQ8iIw0Un/D
vMEDVj2+L2CF6L4vBEyA+c9YHtH9dz+K4VxF+iTLs0uVrzLaTP2uigydEgEiQARmSECvH9Pt0EgB
niHpMEjG3yzUEYdBg1IViAARIAIzIMD3BSy57vvCDLIOlST+VoD5ev8bOznJjtfYMcQOUoAZBHJE
gAgQAX8S0OvH9Dq0IwaD4bsvvPBC9JEjR/wpB+UVAgT4m4UU4BBoMBKRCBABIhAAAnxfwLJXFLQA
FBXMWeq9J/lL5hGW0RvskBfSIkcEiAARIAKBI6A8zxWPqqwxdr6AOYyNyV5ykUSAf+khBTiSWp7q
SgSIABFwEeD7AtdV8hEBIkAEiAARCEkCit6reFTVUL70kgKkIhMBp/xLD7V/BDQ4VZEIEAEioEGA
7ws0gukSESACRIAIEIFQIqDovVGhJDXJSgSIABEgAkSACMwLgUjcNUKeA9wbYNo3Wf4n2XHUWQ59
eHaSoL9EgAgQgdkR0PuQq2jCquzJBFoFJJJO+ZuFOuJIanmqKxEgAkTARYDvC9hVvfcFV4Lw8wVq
EaxPGaqfsOMkOy6xQ3ZkeTfJgf4nAkSACPiNgF4/pvdF9xhbBGts3759fhOAMiICRIAIEAEiQASI
QIQS+AOr91vs2MaOh9ixix1O5Zd5yREBIkAEiMBcEdAzgT54jzkmxPfnShAqhwgQgRAmMNqJw899
D+3DbDePFcX456NPIyZA1envvIruTx1YAPaIuj8VWbPc53aw+yKarg2yVf+YwPGP4qnsNOg9GANU
pQBl24/jO3ajeRiIW2HBq0e3IC5AJVG2RIAI6BK4yUJOsuMUO37HDnJEgAgQASIwzwTC4z1vniFS
8UQg0gk0/91ulNW3TGCwbK4JmPILDOPsN1ejyD5F3FiDu9f3IH4WDXDrpy9ia9Gk7JjIL21W+c1C
FD8nXYKVjw6hqIzVzWbDoxv6cCg30c9lUHZEgAhoENAycdaIRpeIABEgAkRgPgiQAjwf1KlMIhBG
BEY7T2K9rGRNuGIctGQEtHaLlrHsnQrwsuhZj9YaopNc8j44+/xcmQXWN37nMv6h6i3ggWiMfQI8
sWsPcpP5cfco5D7/A5hY28itU7b+B9g8cgIZfJTAiki5E4FQJzCdec+yifMv2HGSHf+PHaPsIEcE
iAARIAJBSEBvDnAQikoiEQEiEHwEBlG3O18Rq+D0LqTN5Wc1ZnEdqW7k9mWUVJShpKQEZRUleO/j
EXcU8dmoqDRNXa+D5e+a3ePQFSJABGZDQDZxPsCOZHZ8nR3/xA5SfhkEckSACBCBYCVACnCwtgzJ
RQRCgMCd5lfgtB4GLHj+G2khIHWYiGiI9qkiWfl/C+NUTHvZepzppndzn8BRJCKgT0A2ca5jx1p2
/Ck7KthB83sZBHJEgAgQgVAgQApwKLQSyUgEgpJAP2r3limSmSqfJ/NahUYQeRJycLjYqQID25+r
w2AQiUeiEIEgJiBxstEqzhwM8hIBIkAEQpkAKcCh3HokOxGYRwL9F15BmXMuLhtj3G9ZPY/SRF7R
saoR4GhDrA6EKPzFrr2usJYi/PAyqcAuIOQjAroE5DnAZOKsi4cCiAARIAKhSWAuZ+uFJiGSmggQ
AQ0C/fhRiWz1N+UsJfhqoi+Pk2FcvfA6Tp0+h+Z6G1vLygijUdaiTVizaTP+aosZGzKTZ72wlVMs
jA+i49JFvHPpOjr/4+7E5djFX8DKx9bha1/NQsIMFoQa7e/Ev7x5Hj//1Tv4SN5iKC4OCxcuxZ89
vgYmUzYykn1dk3oYHc0/w7k3bWi5bsfHeJD9AxYtWo4VazOxYcMGrM1MdVtRe3IbKOD3715Sqil7
rr7zNq464vH73wNf+vJqJMe52iMmbRPkqcAlU2uVlVTY8DfndtK2SAJBOiECbgRusyuyiTM5IkAE
iAARiAQCkiS9yA5yEUiA3d+y2dfEEYHVpyr7QOBuW41yj8j3SmXrgNdUQzcaJQt3bznvMbe/5lKp
rW9EJ78hyWp23Z8w1UpDOjG7GmskZvgryCmWZZRq23qkG6cLXHE85CdJdyVbpcUVVydvo6Xcg/yT
wg60N0hmnfSCjMZiqW3AwdVwSKoxeqrTZFhl210uzaS3q6GYk90o2fr4fN2i0wUiwN0vE/cVuzXJ
BZCAwptuPSJABIgAEfAPAfbMVp6t/PNbzwT6yIIFC0oPHjzIxyU/ESACRIARGMdl2484EhZseCyB
O3f39l54GYvS81DvHuR+xVaBNUmxOHGx3z3MxyudZ/bikbwiZbck7WR2FK5JQfp2eS0bL264E4dz
F8Nc4r0G9voyJn8WznSw4WENN3j5OJas3gqbRpjbJXs11izJB2+xHC0PE3txMQb3CKlrv64shiXv
I9Xw1g33SHSFCBABIkAEiAARIAJhTkBPAd7ncDiijx07FubVp+oRASIwfQJ9aK1QJv8C5iex3IMp
8fDVE0jJK1EVY0J5bQNa29rR1tqI2vICVThQmJOE873jbte9XRhk5aVvr3aLZi4oR63VihpWlmtJ
KLdo7hfGe3FgUTqUrY6nYpgspbA22GA7bUV5ARvPFZwd241mNN9RyT/cge+tKRJiwlQMq60J7XY7
2tuaGAs2Ti64eqz53tmpfVUMWL65FAXFxbA4dzeaims0F6CYXS+wFCPlfo35wInp2MRVvP7cO9BW
0YXC6YQIEAEiQASIABEgAhFBQBku9s8ANOUSSgTYHU7tH0oNNtey9jUKpsWmmjYPEvRJ5SqTXWPB
aUnTYHrI7hYXltOSaAztzQTavTygQGrqURlKD3VJtRbXfa7c8xom0O21ZuX3MBnPJJ1u73Ors2Og
TWKLLYtxCxok3tB4qF00HTeVNwrhzkxHepok9kmAy8skNamgOW5YuXBItXaRlDMv198RqaGAz9Mi
tXtL4kpMvggkoPwuJu9FdkougASU33ME3mpUZSJABIhAQAiwZ7bybOWf365VUvir5CcCRIAI6BDo
tbcKpsWmlUt1YgKDl89yK0WzaMZSnD+xDZoG03EZOPR2K9oX57jMg+u341++/w1sSfUwxMyVPnhV
VR6KYR+qQkYcF0n2xqVi16m7iMZi5Huyah7tQFUhb6xsREPXv2rKE5WQhapfNOH6kvVocRZXVw/7
sS3InCq/58oVZ8jE3+9s26C54FdMci5ebCxFXZ5zobEW/Pq3g8hNcC2wNeIYE/Iac4ywc0+cYrBy
HVOr65wm30y2nleRmaaGI2RLJ0SACBCB+SEw2o/LV7qBBQt8LN+A+z/3ID6flIT4GHq99RFahEYb
RffV6/hPB6v+vXu4P/UxpCV66j/nCtMgms/Y8O/33MsbG1uAtc88g/RxO+rfYO8S0dGqSGNY8NBa
PLMxQ/O9QhU54k/1nhAyejYN2NeHTsRzJABEIGIIfHzzfaGu9z+gYW47EWMUja+I5r7lVXuRLKRW
ncRno6zWDBundL760/exZU+mKqLW6TgunuLnJgPlTQfclV8laTwsLzUwBXirckXt6X7jFWHesqmy
TlP5VdIl5KKGDS0bC51atQ2/ePcOMrMnVX7HmGh03HjRjm2p2nVbkvUtWGuSMbaIdXJDY1jxkB5n
pXSvnqQMsazr7w0ApAB75UYRiAARmHsCw++fxZocsQ/xVQp5isrugmexOTuVlAFfoUVSvOHreG71
GuVjtbGyDdf3Z80/geGbeGl7viKXWqDKL+chxfAr5Bfq/C6MNchjCrDrU7k6Bzp3EtBTgI8ZDIbv
7tu3T/15wZmO/hIBIhChBAzR/IihCSuX8ucclPE+XHHqgROXC7B5rebYL5cIWLHuGXbuGnVdJIR6
OBllCztVc3OT2ejv1hzP5UUlr0cNm0tbpAzZ8vmP4tov27gLbK/jfO8dZPq69SyNq+IXrt3G/ikF
+MGUFSzMVbf6/NUYvn0ah5/NQ0ai2GVFxWdg554Mrnz/e2/1f+r/TClHIkAEiIA/CKj2Op9Oli31
FZAPmMthP3XIw4fQ6eTqW9zxO5fxD1VvAQ9EY+wT4Ilde5CbHAyji77J72uskK6nwYAkrqLLtFaO
5MLnzKuSa9rlPhhNH3x8hKanAB+8xxzL4/s+5kPRiAARiBAC4ijmIjygZ2o28ilu8Uws6zwuluWM
GpOSAXkZKKcKaWu+gmE2AqyjZjuTsb+qpY/Nq5Ck94RTUsXD9E1WWouzNCWAeRz4+CNeobbjZz89
D2Y1DQ3rpMmEstVM7yU+E/AKfNKf57AFuCoEE3Jb2XbYylgSowkFmzbiazmP4yvGlUhmCrFX8YWS
6IQIEAEiQAQEAuzhalx0E20Dp5Dl+XuokGw2JyO3L6OkQn6oT7qaLc+FpQIcKfV0tuO8/DUWwFqy
bsJMe8IE+tE4xI4/CWtt7YQJtPzK8d5rVaiw8e8q8yJpyBVK71ch12QkMBGYTwLDuNLsGsH0KAn7
kskrreYnMzzOUHXlJU/K4dwQ5/fgHf/olqBYmnONQvkekuoEqVZwZrGq881wX19aJ7nG5ajEjWhs
qkTSevWq2CyyvQV18sEGLSYcW0W6fPe3se2Zp5Aa759HtWGhD3soTRVPf4gAESACwUSALRqI14uz
MD4qPpujoqIwPjKEDz/sRvsv3kRVSbXQF8ifU9cs+RxujFQhbS4GYmcxch1MvL3KEin19AoicBHM
u/di57Y0VQGZ2LkrU7nWea+JFGCFhu8evW2QfM+BYhIBIhBRBHydFzHa066M4k4AGlMptn6mNvLx
f6heemZZAJuL0+ijru+ppFuf/l4ITszdj5G+dtQWm4Xrbid2G8oKzXhksQF7T151C57JhZikhydG
12eSltIQASJABOaTwKIlSxAfF4+EhAThiI9n1xKTkZGZi537q3B9pA9WtiS/6Krxzb9rFi/RGREI
dgJjn3mVULUeptf4FGGSgH+GFYgmESACEUNAXHtYv9oxn0+HrOIpOmS0ykRZN6kqHm9DrJuGGUD7
+2t03FKsZu9QvGVRQY0Vj/sojyzq2NgYHlzxJTepYxIzsavqHJ4tvwP7u5dw5VIbGk9XCGXxiarZ
XOEvpA4oc4n5sOn4hz+4In6UmE5iiksEiAARmE8CPnc+idhZ9Sss+OxJbK9zmYbay/aiufA6W00/
sJWIVfVF0YbZL2AYWIlnlnuk1HNmdChVsBMgBTjYW4jkIwJBRSAOj+UytdamqLVspqyOixVNoG91
3sI4vC/PP/7RbwQlzZz7mE+mzDHLjaq5w3af5g5/MtCnU4E4LF3GgpT3Jwv27t6JND8+NaPiEtgK
0U9PHLv2H8XoYD8+eO/XOFdfjbI6cWWukhffwN807/KJhU6F6DIRIAJEIEIIxGFbTT0a64xcf2LH
8Tc6kLvLw+KCo4O4+k4TfvGLf0PH+7fQNzQ5B2cR21ppRcaTyFm3Dk+sTkOcRj/Q33kV3Z8Cv2cf
NXl39Z23cdURj98zY6AvfXk1krUSz6Jcvqzp+YfR0fwznHvThpbrdnyMB9k/YNGi5VixNhMbNmzA
2sxUt6lLQVXP8Tu4eO4N1Nf/BG021mcajbCzPttoMmLT5jxsMechMzl+eljcYjNOl9/FZ5jaGYct
kWRIXInMVD7fcQwPDrN3nCkXFcusFebC3t5ZIP31GwG2G/GLAdmRmDINegLsJpKcR9ALSwLOOYH2
GrNyf8j3SU37XW0ZRtoltrwUF7dYuuHQjspfvWG1cGkgmWraueAhyWrm8jTVSkPO0KF2ianmXFqL
1D7iDNT72yMV82n4/FjOQlksXkOX1wwlaahLarTZpMbGRslma5Ru3HVWekSyN7Fr7Loc3mof0BNq
4vrQjQaJLVDtqg+TjSc9ZK91hbF4uu3AlaJOYxbYchHJSwQYAWc/MPWX/SEXQAIKb7r5Jgn443ll
rxX7E6BApx8akVqt5RIz+lHagbW1jt8olTe0S84n+5S0Uo1RL77remUb/xSXU8623MnSp/v/QHuD
qr90ySjU21gstQ3wNR0Kmnr6WgdTca3Uo+66Ve8n+n3hkNRQbHS7D8qb+gTk6nsVxhqhvxYiezrx
WS5XJsI9LrzDuOJEsk+4n7kHOM0B5mCQlwgQAe8Eln5lrfdIcoyY5XhSmOZajfOX7nhJewfnq+qF
ON/ZJG8d5INjJsu5TGN0uXqcfbvfdarhG75q87CoVRyM8mg35149wzaf9+I6znwXeWYz8vLyYGZf
n8/fnNr7l+07WLSeXWPX5fDnz3V6zCku7evYzN7GeKcx6MAHe/WPfsKGJzi3Nkse4iZHBIgAEQhP
Aukbt7KV93n3AXoGlHE6JaD58FPIyS9zGfwoIVoeO8q2rka+am2GaB/WGFTvtuOPcrUk9HRt8PJx
LFm91TU9yVNkezVbQCwflwddkYKhnp3nD/hch5bqQqRkvQzPbwOu+rl8gziz60lsFbZXBGpa+3Ao
N9EVTcu3jLYj0sISTNdIAQ6m1iBZiEAIEIhPfFiQsvnK74Rz10kcNhaWuk6ZryTnKDpHhUvCSe/5
KpQoJscsyMQ2dU/11YwoAeZiNp7LuYq8EqHj5oKA0U5U5BcJl9QnRvO3hZenlrLncbZbvwLjvRdQ
VGjjsjFjw4opM6m4h7GZU9DtZY3o5WK6e0cxKrxQjbnMq9wjsyve1ePb197hUhqR9hC/TjcXRF4i
QASIQBgQiErOxm7hO2YLbt6e+ig5Vb/hjhNYX9Yi1tbEtp9pbIX9hh1trY2wVpYKfYEcuT5/H5qV
b7oGLN9cigLWB1m457wcz2guQDG7XmApRsr9rvnA/ilXLmEabrgD31uj6vdMxbDamtDObIfb25pQ
W85stwTHVtH+3llM9nzzX09ZgU83O7dLcApqRClbo6OxtRVNNisKVG0Aewl+cMbzR2dnTpN/ZeX3
q8Iccvl6bdsA9mR7UX7FjOgs1Aiw4fIXI3nIPJLrzu5VxdwjkjlQ3XUIOG5IBdw9goIGZsSl4xxd
oomxnI6ZVLX2qVM4pK5W0aRXvg/VZkbMvlg0S1ab+6hlm5DTIjV1KYbSE4KODLRJbJFQ5T5X7nl1
fszIrdHN/MkknW4TzZ8kFq+rqdbNfE5tVtVUbhLLNJdLdsG8bIqjY0CylYum5sbSJsHkbqhdxavA
KvWNOCSHgzdX49tFxQ7FUpdeVD4Z+SOWgPK7mPy9s1NyASSgPBsi9oZTVVxtVqp+nqqi65wOSbX8
tBl2L9faxf5APa3HXNmk3ac5eqQaVV5aU08cN6xKW7L7hZWn7u8mRfV3uToAhMtD7TWCbGxrKaFf
cUYe6WkS+3mYpCbVrJ35qWePxD6rC3WARcPEWTYtry0Q46FU6lEqKE7REu+tu5K1QFWG3I7tKgDO
vNjfIbvIlUygOTjz7JV/g9zh9RF+xGAwjB44cGCexabi54MAd6PMR/FUZtATGJFOW/gHSqlHRWqg
tZJ/+Ch+S3GlZLVapZryUsmspYxaTrvm9ypMVEqcm8IqSXrlmQtKpZraGqm8WFQs+fsdGvlJQ22q
ucyTdWdf9aXKmlqpprJUsmjJj3JXZ+uUf6DJTUmWy7eU1kgNbL6wrcEqVZaq56zJ5Wm8fPTYNPOS
81O/4E0Ur/44wD5ckP7rbBj6q0VA+G2wE3IBJaA8G7XaIhKv+UcBlqTWSvGZX2pT1CCGVdWn8EqS
BvQRH9ZeUMutpSQHolwNcd0uCfNFWV9x2sNX0L7GUuWeZHe+pJ6/PB/1vOv2PlEg6Xxf0Ghbk9TY
N9Xr6c61HZCswvvNZH9v1VvrRCE8IvX19Eg9fX1SD/vbNyB+ZFGiefPoyqWfUGhTrXcY/aQRESLf
u9yhPMT1bOb2sVGEBceOHcORI0eUyOQhAkSACLDJvXhiKzM1ZisVT7oKXOstQ6qOqXJC9n50NQKP
MHNk3tVXl3Crc/IhzG+qRI91m+aKx+qdMNSzuSbKs32CR1QmUrY6ts2QqhiwjZpqratRyOZ+6bq4
LFgHWrFwSQ7quEh2Wx3YVr06rhjtdw8hWR2akIs3GkrxyFbRfKu+okifBcujvNHqtnWHbNr3LJvc
VsSbjE+VN+ZQU2EW311tgvylf/WYD0bT6grQOREgAkQgtAg8cL841aOt80PgaefT2YDFK5i97K2P
mYmzHcu2bECSh+pFqbY48hDVS9D8lOsYE82/Gy/asS01U1PWJVnfgrUmGWOLooGhMax4yGW+rZlA
86I/6zmKxr8X3yOKG/YjQ3eWVBz+opC9q9ic7yotuMLM3zcmTk1L4uWd2KZxECd2LEFhPR9gxGn7
r7AtQ7yH+BiT/hgkJjvvKfdQuhJ8BPQU4AWyqPfYUt/kiAARIAJqAsmmHUx1rFYUyvqfvo8te7Q7
UTlt6sb9GOr6c5Q9tx7VLercxPPimkaU7dkIjS5qImIc3w8laS80kfr0UQzYM/Gc0cNCH2zeU2t9
FR4fOYlCpwhyR6/hohKyccLRh69VlGBrmdA7usUuqLThpf/9NBJ0nq6pW46ipykZ+esL4QUF+xBQ
jKZXy5CbpkUjHrvZHLVbeTlQrdHhJpN84Z2GH3PXLdjyBHXWHBDyEgEiECEE1qQ9xNU0Bk8fbYZ0
lLuk5x0fxLkf889RvYi+XJ+fch9MkReVdH25rWd7zA/fPo3Dz+YhQ6UYRsVnYOeeDF8q4yGOH+s5
3ocrLtFZmSZ8Y32qh7KBxCeeR2ODCfdkrYb992eP8i8QrqRxY7/Byb0WlfJrQsMNG7akaadxpSZf
KBLQeUULxaqQzESACMwZgbhM7Ck1wlYxOfxoKzqF7t2ZSPXwRIlLzUVVswPFHZfQ0nIJNz/8BLGx
8hflaCxZ+kUsN2biKyvSEK/7NVeuHdvb8ZTEDu81TcjYgnPSEDovtuCX1zox8Ckriem3938xDY9l
Pc728EuYymQnJGmn9wyjErHl0CmMPP8S3mF5/rrzNsbGoifzXMLkT89Axop0JGjt8ajKPTl3F5od
29B9431c63gXv+0ewCcjIwA7RhCLL6StxLp1X0VWmufFNqISs1F13YEXursw5DDAEBuF2IWLsSRB
1WGPXoWVW+TFVPM8MlVRVCLSKREgAkQgDAiM445qr/fkZYv16zU+jN7ePnzc34/f3f539PzuNm51
38T1Njta5A1mA+XmqNykP89hI90VwmrXtrLtsMlGUEYTCjZtxNdyHsdXjCuRzBRiD136zEjMpp4j
n+IWX6ppMzS/DfNx4lKxcYtnJVleJby+aKuGFdZy/GkKdZQ8znDy693b8tDvAubCqa5UFyJABPxI
IGfXIaBi61SO1TjT+oL3rQFYd5qckY2d7JgbF4e07KcnDn+VFxOfjNynd7JjljlGxSE1I2vimF1O
UUhMTYMnVbn3rVNc527GD3Zkza5ISk0EiAARCAkCw3ivRbS10ZoigtFenD1+FFtL6ua2VnNcblTi
RjQ2VSJpvWhKPFFpewvq5MM5Q8doRvnub2PbM08hNV5PXfARlz/qaTCopkVpW4D5KJESTf+zRh2M
pZvgqHra/x8ClNLJM18E9LZBOsYWwRrbt2/ffMlF5RIBIhDkBKKSN6ORjQI7XdlLb4LbKtB5mf7O
O4F+/PiQcw4Um/VcU4psLYvqeZeTBCACRIAI+JnA8E00C/qvESmq7d+GO88iNzbFB+XX1d/5Q8r5
Kjcxdz9G+tpRWyzsD+VeJbbIRVmhGY8sNmCvas9j98j6V/xVz9GeDu5DLjOA3rhCd6qUvjTTDKk2
4x/4TZCnmZyiBy8BPQX4IJv/W0ELYAVvw5FkRGD+CURhY2kdmws85VoKYesQF9hwBtHf+SMwePks
ypRP3BaU5dPo7/y1BpVMBIjAXBK4c+UtbsYrK9m4HY8ncqOZw1exO32r+3oMzBy4uLSSLZJ4mo2Y
sv2Au/rYNJPrGLlh9Y/481XulPQxiZnYVXUOjqEBtLfaUMv2OWa7Mei6ajZX+OWLyqbHuvHcAvxY
z5gHl7JZvy7X0nEb/n3jsKBtYAhsu0JXIcxXsqYcne7rSgpx6CT0CHBPgdATniQmAkRgngmwFZJr
bMWwmSdHGPNffhN/fWobWyeaXHAQGMRrbIVppys4fZDm/jph0F8iQATCnMAofm4VV/g3PbsOztUf
5Mp3vl4ljCrKCyudbrfimcxkTbPXYYd6H4KZIZyvctXSRsUlIJNNE5KPXfuPYnSwHx+892ucY7s8
lNUJQ+coefEN/E3zLpUZsjpH8dyv9Yz7H+IK3cM+qL9sznF/312wJTIg/7c4KRGay3QY2c4Nb1ch
U7aOKj4GS9lq7r6oxjcr/hLXD+WKlaOzkCagNwIc0pUi4YkAEZg7AslPl6HG+cG0fjv+uXN07gqn
kjwSGL76Ggqdq2YaK/HitjSP8SmQCBABIhAuBO5cPI7t9WJtvrNpFXdhFO9dUsxjJq7Xtr+ObTrK
rxxh/DO2muKs3fyV29F8AecvXMCF8+dxscN9RDcmPhEZTBk+dKIZQzcahBFXudrTGwj1dz1lLZZz
tl/hAy+vG3cuVSMpJQUpSexIScL/aR/kMnB5zWyu84TyK19ii3y+1FjqCmQ+e9l6nCQLN4FJqJ+Q
AhzqLUjyE4F5J8C247E6tSwgf/c/+tksad4rGKICDMKaX6jIfvonezwulKVEJA8RIAJEIMQJyPNO
N+SoFnoqaMA3hP3qHfj4I14BtmDtCnkIUN+999YF/UCfQ+ap3OHrKFqfB3NeHvLMZjx/rtOjxHFp
X8dmlVn09MxG/VzPmOXIs/Ai1+Ps2/38BZV/HL+s5y0AjDAu1VnVecwhpE3e+AJqlfldk0H5xgr0
CrHoJJQJkAIcyq1HshOBICEQlfw0BrrssLNtIuw//Ma0TKSCpAphKEYctvxkqk1u9GFbGhmmh2Ej
U5WIQOQQiFaNAGrWfBQdF17GIjavl1dt2eRfNL642cv0nD4wa1ld13vhMHK47eTkiNEGX1RCb3EC
Va6qKnEPY7PTWosF2csavSh0oxh9kM9jzMsIcKDrGYOvFVTyAqEi7wfQG5gd7XwNW4VFvTchnZ//
LeSkPonHszWuD/uToRUoOn5VHXHyfLQfly9exEXncbXXCyvtbOjq3BEgBXjuWFNJRCCsCSSksn1w
M9ih7K8b1tUNgcqx7ZHSptrEy37CIVAZEpEIEIEIJ2Br/CecPHMGJ0+eFA/52onjOLB3B1bdFwtj
nmrkl3ErbngDG92Unzh8OZcf5mthI4yH0amykh0d7MX547uQksePJk42Ru8tDY1ZHExE0YnX0T86
jvFxpwFxgMr1en8kYKWJ04DZfsApmw+j445TLi6D8Ts4f/g5lHDTgI1rVooft+ehngnZFpQLo9Js
q6JFe3GxX7SF7r14Alnp27kKARbrt5AsXPF8In/Yb6/h7w/AVrQaZ7vFsuRcht8/izU5OchxHvk2
soTzjDd4QyVJepEd5CKQALsrJecRgdWnKhMBIkAEiAAj4OwHpv6yP+QCSEDhTTffJIEhe63ChHGf
sd9c0yo5dKAO2a2a+VpKy6XKynKpwGzSDHfJY5IsFotU09SjlODosUlMR9NMV2sfmogXiHIVATx5
Bpo0ZbOU1kgNtkbJ1mCVKkstGrKbpKYBMeP5qqceO3NBsVReXiyx1aw15C+VXC3E6jHSLjFraiWe
uaZdrJzzzNElFXPxJtrdVCmpUEhu96q5VppsaWdGPv71VS4uO3st116mGZbL5RduXtdvdaK92akX
xwC8GG4QqD6+EWC3hvJQ8C0FxSICRIAIEIFwI8D3BV5eGSh49gSo31X9gNyUCu7dRHVvKuyE60aL
dLpNUHtUJUyetlaatdNrlFfT2CRVmlzvSM7yTIICdVeq0VTCINW031Vk8H+5StYePV0NpT7X11m/
8kYtjvNXz4E27Q8XTnnFvxaptU/1CWSoXWJjuwoHXQWYkbzbVqPEc+ZrsdoFxm736kwVUVKABa7+
OHG22dRf9mfSkQm0kwT9JQJEgAgQASJABIgAEQgKAgZD9LTlMJrMKC6vRVN7DxzXT2FbVrLXPLL3
n0X76XKP8Uxs7mlbzxD2bMzFc8esbnE/Fqxi2cKQja0oFkx13ZLA/+W6l6F1JXXLUfQ01bqt8KwV
F6ZiNN24i0MbtTjOXz0TsnbC0deGctFC2a0KxTWNGHCcQrba/N2wEJ/nYsct0p9fHp9VAJuqMevz
XxH2BjYYVItrLZr+vcuJQ945IHCfThlHDAbDd1944YXoI0eO6EShy+FK4L77XLcF+/oSrtWkehEB
IkAEiIAHAnxfwKK5OgYPaShoxgSUzpb63RkznF3C4X5cbHkb13r+czKf6EVIWZ6OVRmrkJwgLiI4
PtiN9vfYCsQLFsCw8HNYtjwZ8THqRaDG0d/dhSG2/6whNgqxCxdjSUKc+/7Cfi/XRwxsj9zuG+/j
Wse7+G33AD4ZGQHYMYJYfCFtJdat+yqyfFo/Yn7reae3A+1XOvDhf000B/vvT7D04UexckUaaxMf
WQRLtNGr2BHr2oOYjUzj3J5Mj9J1nNgBY2H9ZBxTLYamuVezx8zDIFCvH9Pr0OSdvhcwh7Ex/2z6
HQYMI6YK/M1CHXHENDtVlAgQASIgEOD7Ahag974gpKGTGRMgBXjG6CghEQgTAqQA+70h9foxPRPo
BbIE9+7d87sglCERIAJEgAgQASJABIgAESACRIAIEIH5IKC215gPGahMIkAEiAARIAJEgAgQASJA
BIgAEZgiMPTp79l+wuwf20YLzHg+ZsLMfhyjE+fsCjv/bGyYeM2AgJ4CLA/9TphAzyBPSkIEiAAR
IAJEgAgQASJABIgAESACMyTQUpYDA7f9NNtGC9twBouMhTPMkZI5CeiZQB9ji2CN7du3zxmP/hIB
IkAEiAARIAJEgAgQASJABIhAgAh4Gs8dc8gjwZ6d9xie00dKqN4I8EE2/1ceBf5+pICgehIBIkAE
iAARIAJEgAgQASJABOaHgAGqDZUEMaINemrbVLRFsqE0OV8I6K7qyFb/fZFl8H1fMqE44UWAXzGN
VoEOr7al2hABIkAEfCXA9wUsje77gq/5UTyPBGgVaI94KJAIRAaB8fFRjGsO47rPAVYTiYqKQRRp
wAIWvX6MMAmY6IQIEAEiQASIABEgAkSACBABIjD3BLwrsU5FeO5lC6cS9eYAh1MdqS5EgAgQASJA
BIgAESACRIAIEAEiQARACjDdBESACBABIkAEiAARIAJEgAgQASIQEQRIAY6IZqZKEgEiQASIABEg
AkSACBABIkAEiAApwHQPEAEiQASIABEgAkSACBABIkAEiEBEECAFOCKamSpJBIgAESACRIAIEAEi
QASIABEgAqQA0z1ABIgAESACRIAIEAEiQASIABEgAhFBQE8BPrJgwYLSgwcPRgQEqiQRIAJEgAgQ
ASJABIgAESACRIAIhD8BPQV4n8PhiD569Ciio6PhqyJ84MCBifjypsPyQWn1b6BQYeVsS/o7eU8T
B+JA9wDdA5FyD+j3YBRCBIgAESACRCB0CdynI/oYu77AGfZHf/RHn/33f//3U85zvb9//Md//K9/
+MMfFvLhlJan4fIHMyvWZj+XJMngkpZ8RIAIEAEiEMEE7rG6R0dw/eei6pKzENb/Or30lwgQASJA
BGZBQP5gzTnhhLuueI8wn6wEy09h+a987ovj01Faz8SCmZVaNrkt6SAGdA/QPUD3QOTdA9N5B/Dc
61GoJwL024q83xa1ObU53QNzew8oz2CvmrASkzxEgAgQASJABIgAESACgSAgWN4FogDKkwgQASIQ
wQQESya9OcARzIeqTgSIABEgAkSACBCBOSVwjJUmv6CRIwJEgAgQAf8SkJ+t8jOWHBEgAkSACBAB
IkAEiAARIAJEgAgQASJABIgAESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJEgAgQASJABIgA
ESACRIAIEAEiQASIABEgAkSACBABIkAEiAARIAJBSuD/A9rAlobGALNBAAAAAElFTkSuQmCC
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc----
Content-Type: text/html
Content-ID: <frame-102-f118a412-9b93-44af-a991-9d889150d9af@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--Xg5hI2JUa5iZnuHch6qnJgGm9ybyzBQ0AwP0IflSHc------
