From: <Saved by Blink>
Subject: 500 Lines or Less | A Continuous Integration System
Date: Tue, 11 Feb 2019 01:51:16 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----"

------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----
Content-Type: text/html
Content-ID: <frame-60-e9485a6a-f303-42eb-a5be-9ccb360cd0d9@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/a-continuous-integration-system.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | A Continuous Integration System</title>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div id=3D"MathJax_Message" style=3D"display: none;"></div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>A Continuous Integration System</h1>
          <h2 class=3D"author">Malini Das</h2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em>Malini Das is a software engineer who is passionate about =
developing quickly (but safely!), and solving cross-functional problems. Sh=
e has worked at Mozilla as a tools engineer and is currently honing her ski=
lls at Twitch. Follow Malini on <a href=3D"https://twitter.com/malinidas">T=
witter</a> or on her <a href=3D"http://malinidas.com/">blog</a>.</em></p>

<h2 id=3D"what-is-a-continuous-integration-system">What is a Continuous Int=
egration System?</h2>

<p>When developing software, we want to be able to verify that our new feat=
ures or bug fixes are safe and work as expected. We do this by running test=
s against our code. Sometimes, developers will run tests locally to verify =
that their changes are safe, but developers may not have the time to test t=
heir code on every system their software runs in. Further, as more and more=
 tests are added the amount of time required to run them, even only locally=
, becomes less viable. Because of this, continuous integration systems have=
 been created.</p>

<p>Continuous Integration (CI) systems are dedicated systems used to test n=
ew code. Upon a commit to the code repository, it is the responsibility of =
the continuous integration system to verify that this commit will not break=
 any tests. To do this, the system must be able to fetch the new changes, r=
un the tests and report its results. Like any other system, it should also =
be failure resistant. This means if any part of the system fails, it should=
 be able to recover and continue from that point.</p>

<p>This test system should also handle load well, so that we can get test r=
esults in a reasonable amount of time in the event that commits are being m=
ade faster than the tests can be run. We can achieve this by distributing a=
nd parallelizing the testing effort. This project will demonstrate a small,=
 bare-bones distributed continuous integration system that is designed for =
extensibility.</p>

<h2 id=3D"project-limitations-and-notes">Project Limitations and Notes</h2>

<p>This project uses Git as the repository for the code that needs to be te=
sted. Only standard source code management calls will be used, so if you ar=
e unfamiliar with Git but are familiar with other version control systems (=
VCS) like svn or Mercurial, you can still follow along.</p>

<p>Due to the limitations of code length and unittest, I simplified test di=
scovery. We will <em>only</em> run tests that are in a directory named <cod=
e>tests</code> within the repository.</p>

<p>Continuous integration systems monitor a master repository which is usua=
lly hosted on a web server, and not local to the CI's file systems. For the=
 cases of our example, we will use a local repository instead of a remote r=
epository.</p>

<p>Continuous integration systems need not run on a fixed, regular schedule=
. You can also have them run every few commits, or per-commit. For our exam=
ple case, the CI system will run periodically. This means if it is set up t=
o check for changes in five-second periods, it will run tests against the m=
ost recent commit made after the five-second period. It won't test every co=
mmit made within that period of time, only the most recent one.</p>

<p>This CI system is designed to check periodically for changes in a reposi=
tory. In real-world CI systems, you can also have the repository observer g=
et notified by a hosted repository. Github, for example, provides "post-com=
mit hooks" which send out notifications to a URL. Following this model, the=
 repository observer would be called by the web server hosted at that URL t=
o respond to that notification. Since this is complex to model locally, we'=
re using an observer model, where the repository observer will check for ch=
anges instead of being notified.</p>

<p>CI systems also have a reporter aspect, where the test runner reports it=
s results to a component that makes them available for people to see, perha=
ps on a webpage. For simplicity, this project gathers the test results and =
stores them as files in the file system local to the dispatcher process.</p=
>

<p>Note that the architecture this CI system uses is just one possibility a=
mong many. This approach has been chosen to simplify our case study into th=
ree main components.</p>

<h2 id=3D"introduction">Introduction</h2>

<p>The basic structure of a continuous integration system consists of three=
 components: an observer, a test job dispatcher, and a test runner. The obs=
erver watches the repository. When it notices that a commit has been made, =
it notifies the job dispatcher. The job dispatcher then finds a test runner=
 and gives it the commit number to test.</p>

<p>There are many ways to architect a CI system. We could have the observer=
, dispatcher and runner be the same process on a single machine. This appro=
ach is very limited since there is no load handling, so if more changes are=
 added to the repository than the CI system can handle, a large backlog wil=
l accrue. This approach is also not fault-tolerant at all; if the computer =
it is running on fails or there is a power outage, there are no fallback sy=
stems, so no tests will run. The ideal system would be one that can handle =
as many test jobs as requested, and will do its best to compensate when mac=
hines go down.</p>

<p>To build a CI system that is fault-tolerant and load-bearing, in this pr=
oject, each of these components is its own process. This will let each proc=
ess be independent of the others, and let us run multiple instances of each=
 process. This is useful when you have more than one test job that needs to=
 be run at the same time. We can then spawn multiple test runners in parall=
el, allowing us to run as many jobs as needed, and prevent us from accumula=
ting a backlog of queued tests.</p>

<p>In this project, not only do these components run as separate processes,=
 but they also communicate via sockets, which will let us run each process =
on a separate, networked machine. A unique host/port address is assigned to=
 each component, and each process can communicate with the others by postin=
g messages at the assigned addresses.</p>

<p>This design will let us handle hardware failures on the fly by enabling =
a distributed architecture. We can have the observer run on one machine, th=
e test job dispatcher on another, and the test runners on another, and they=
 can all communicate with each other over a network. If any of these machin=
es go down, we can schedule a new machine to go up on the network, so the s=
ystem becomes fail-safe.</p>

<p>This project does not include auto-recovery code, as that is dependent o=
n your distributed system's architecture, but in the real world, CI systems=
 are run in a distributed environment like this so they can have failover r=
edundancy (i.e., we can fall back to a standby machine if one of the machin=
es a process was running on becomes defunct).</p>

<p>For the purposes of this project, each of these processes will be locall=
y and manually started distinct local ports.</p>

<h3 id=3D"files-in-this-project">Files in this Project</h3>

<p>This project contains Python files for each of these components: the rep=
ository observer (<code>repo_observer.py</code>), the test job dispatcher (=
<code>dispatcher.py</code>), and the test runner (<code>test_runner.py</cod=
e>). Each of these three processes communicate with each other using socket=
s, and since the code used to transmit information is shared by all of them=
, there is a helpers.py file that contains it, so each process imports the =
communicate function from here instead of having it duplicated in the file.=
</p>

<p>There are also bash script files used by these processes. These script f=
iles are used to execute bash and git commands in an easier way than consta=
ntly using Python's operating system-level modules like os and subprocess.<=
/p>

<p>Lastly, there is a tests directory, which contains two example tests the=
 CI system will run. One test will pass, and the other will fail.</p>

<h3 id=3D"initial-setup">Initial Setup</h3>

<p>While this CI system is ready to work in a distributed system, let us st=
art by running everything locally on one computer so we can get a grasp on =
how the CI system works without adding the risk of running into network-rel=
ated issues. If you wish to run this in a distributed environment, you can =
run each component on its own machine.</p>

<p>Continuous integration systems run tests by detecting changes in a code =
repository, so to start, we will need to set up the repository our CI syste=
m will monitor.</p>

<p>Let's call this <code>test_repo</code>:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">mkdir</span> test_repo=20
$ <span class=3D"kw">cd</span> test_repo=20
$ <span class=3D"kw">git</span> init</code></pre>

<p>This will be our master repository. This is where developers check in th=
eir code, so our CI should pull this repository and check for commits, then=
 run tests. The thing that checks for new commits is the repository observe=
r.</p>

<p>The repository observer works by checking commits, so we need at least o=
ne commit in the master repository. Let=E2=80=99s commit our example tests =
so we have some tests to run.</p>

<p>Copy the tests folder from this code base to <code>test_repo</code> and =
commit it:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">cp</span> -r /this/directory/tests /path/to/test_repo/=20
$ <span class=3D"kw">cd</span> /path/to/test\_repo=20
$ <span class=3D"kw">git</span> add tests/=20
$ <span class=3D"kw">git</span> commit -m =E2=80=9Dadd tests=E2=80=9D</code=
></pre>

<p>Now you have a commit in the master repository.</p>

<p>The repo observer component will need its own clone of the code, so it c=
an detect when a new commit is made. Let's create a clone of our master rep=
ository, and call it <code>test_repo_clone_obs</code>:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">git</span> clone /path/to/test_repo test_repo_clone_obs</code></pr=
e>

<p>The test runner will also need its own clone of the code, so it can chec=
kout the repository at a given commit and run the tests. Let's create anoth=
er clone of our master repository, and call it <code>test_repo_clone_runner=
</code>:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">git</span> clone /path/to/test_repo test_repo_clone_runner</code><=
/pre>

<h2 id=3D"the-components">The Components</h2>

<h3 id=3D"the-repository-observer-repo_observer.py">The Repository Observer=
 (<code>repo_observer.py</code>)</h3>

<p>The repository observer monitors a repository and notifies the dispatche=
r when a new commit is seen. In order to work with all version control syst=
ems (since not all VCSs have built-in notification systems), this repositor=
y observer is written to periodically check the repository for new commits =
instead of relying on the VCS to notify it that changes have been made.</p>

<p>The observer will poll the repository periodically, and when a change is=
 seen, it will tell the dispatcher the newest commit ID to run tests agains=
t. The observer checks for new commits by finding the current commit ID in =
its repository, then updates the repository, and lastly, it finds the lates=
t commit ID and compares them. For the purposes of this example, the observ=
er will only dispatch tests against the latest commit. This means that if t=
wo commits are made between a periodic check, the observer will only run te=
sts against the latest commit. Usually, a CI system will detect all commits=
 since the last tested commit, and will dispatch test runners for each new =
commit, but I have modified this assumption for simplicity.</p>

<p>The observer must know which repository to observe. We previously create=
d a clone of our repository at <code>/path/to/test_repo_clone_obs</code>. T=
he observer will use this clone to detect changes. To allow the repository =
observer to use this clone, we pass it the path when we invoke the <code>re=
po_observer.py</code> file. The repository observer will use this clone to =
pull from the main repository.</p>

<p>We must also give the observer the dispatcher's address, so the observer=
 may send it messages. When you start the repository observer, you can pass=
 in the dispatcher's server address using the <code>--dispatcher-server</co=
de> command line argument. If you do not pass it in, it will assume the def=
ault address of <code>localhost:8888</code>.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> poll():
    parser =3D argparse.ArgumentParser()
    parser.add_argument(<span class=3D"st">"--dispatcher-server"</span>,
                        <span class=3D"dt">help</span>=3D<span class=3D"st"=
>"dispatcher host:port, "</span> \
                        <span class=3D"co">"by default it uses localhost:88=
88"</span>,
                        default=3D<span class=3D"st">"localhost:8888"</span=
>,
                        action=3D<span class=3D"st">"store"</span>)
    parser.add_argument(<span class=3D"st">"repo"</span>, metavar=3D<span c=
lass=3D"st">"REPO"</span>, <span class=3D"dt">type</span>=3D<span class=3D"=
dt">str</span>,
                        <span class=3D"dt">help</span>=3D<span class=3D"st"=
>"path to the repository this will observe"</span>)
    args =3D parser.parse_args()
    dispatcher_host, dispatcher_port =3D args.dispatcher_server.split(<span=
 class=3D"st">":"</span>)</code></pre>

<p>Once the repository observer file is invoked, it starts the <code>poll()=
</code> function. This function parses the command line arguments, and then=
 kicks off an infinite while loop. The while loop is used to periodically c=
heck the repository for changes. The first thing it does is call the <code>=
update_repo.sh</code> Bash script <a href=3D"http://aosabook.org/en/500L/a-=
continuous-integration-system.html#fn1" class=3D"footnoteRef" id=3D"fnref1"=
><sup>1</sup></a>.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">while</span> <span class=3D"ot">True</span>:
        <span class=3D"kw">try</span>:
            <span class=3D"co"># call the bash script that will update the =
repo and check</span>
            <span class=3D"co"># for changes. If there's a change, it will =
drop a .commit_id file</span>
            <span class=3D"co"># with the latest commit in the current work=
ing directory</span>
            subprocess.check_output([<span class=3D"st">"./update_repo.sh"<=
/span>, args.repo])
        <span class=3D"kw">except</span> subprocess.CalledProcessError <spa=
n class=3D"ch">as</span> e:
            <span class=3D"kw">raise</span> <span class=3D"ot">Exception</s=
pan>(<span class=3D"st">"Could not update and check repository. "</span> +
                            <span class=3D"co">"Reason: %s"</span> % e.outp=
ut)</code></pre>

<p>The <code>update_repo.sh</code> file is used to identify any new commits=
 and let the repository observer know. It does this by noting what commit I=
D we are currently aware of, then pulls the repository, and checks the late=
st commit ID. If they match, no changes are made, so the repository observe=
r doesn't need to do anything, but if there is a difference in the commit I=
D, then we know a new commit has been made. In this case, <code>update_repo=
.sh</code> will create a file called <code>.commit_id</code> with the lates=
t commit ID stored in it.</p>

<p>A step-by-step breakdown of <code>update_repo.sh</code> is as follows. F=
irst, the script sources the <code>run_or_fail.sh</code> file, which provid=
es the <code>run_or_fail</code> helper method used by all our shell scripts=
. This method is used to run the given command, or fail with the given erro=
r message.</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash"><span class=
=3D"co">#!/bin/bash</span>

<span class=3D"kw">source</span> run_or_fail.sh </code></pre>

<p>Next, the script tries to remove a file named <code>.commit_id</code>. S=
ince <code>updaterepo.sh</code> is called infinitely by the <code>repo_obse=
rver.py</code> file, if we previously had a new commit, then <code>.commit_=
id</code> was created, but holds a commit we already tested. Therefore, we =
want to remove that file, and create a new one only if a new commit is foun=
d.</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash"><span class=
=3D"kw">bash</span> rm -f .commit_id </code></pre>

<p>After it removes the file (if it existed), it verifies that the reposito=
ry we are observing exists, and then resets it to the most recent commit, i=
n case anything caused it to get out of sync.</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash"><span class=
=3D"kw">run_or_fail</span> <span class=3D"st">"Repository folder not found!=
"</span> pushd <span class=3D"ot">$1</span> <span class=3D"kw">1&gt;</span>=
 /dev/null
<span class=3D"kw">run_or_fail</span> <span class=3D"st">"Could not reset g=
it"</span> git reset --hard HEAD</code></pre>

<p>It then calls git log and parses the output, looking for the most recent=
 commit ID.</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash"><span class=
=3D"ot">COMMIT=3D$(</span><span class=3D"kw">run_or_fail</span> <span class=
=3D"st">"Could not call 'git log' on repository"</span> git log -n1<span cl=
ass=3D"ot">)</span>
<span class=3D"kw">if [</span> <span class=3D"ot">$?</span> <span class=3D"=
ot">!=3D</span> 0<span class=3D"kw"> ]</span>; <span class=3D"kw">then</spa=
n>
  <span class=3D"kw">echo</span> <span class=3D"st">"Could not call 'git lo=
g' on repository"</span>
  <span class=3D"kw">exit</span> 1
<span class=3D"kw">fi</span>
<span class=3D"ot">COMMIT_ID=3D</span><span class=3D"kw">`echo</span> <span=
 class=3D"ot">$COMMIT</span> <span class=3D"kw">|</span> <span class=3D"kw"=
>awk</span> <span class=3D"st">'{ print $2 }'</span><span class=3D"kw">`</s=
pan></code></pre>

<p>Then it pulls the repository, getting any recent changes, then gets the =
most recent commit ID.</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash"><span class=
=3D"kw">run_or_fail</span> <span class=3D"st">"Could not pull from reposito=
ry"</span> git pull
<span class=3D"ot">COMMIT=3D$(</span><span class=3D"kw">run_or_fail</span> =
<span class=3D"st">"Could not call 'git log' on repository"</span> git log =
-n1<span class=3D"ot">)</span>
<span class=3D"kw">if [</span> <span class=3D"ot">$?</span> <span class=3D"=
ot">!=3D</span> 0<span class=3D"kw"> ]</span>; <span class=3D"kw">then</spa=
n>
  <span class=3D"kw">echo</span> <span class=3D"st">"Could not call 'git lo=
g' on repository"</span>
  <span class=3D"kw">exit</span> 1
<span class=3D"kw">fi</span>
<span class=3D"ot">NEW_COMMIT_ID=3D</span><span class=3D"kw">`echo</span> <=
span class=3D"ot">$COMMIT</span> <span class=3D"kw">|</span> <span class=3D=
"kw">awk</span> <span class=3D"st">'{ print $2 }'</span><span class=3D"kw">=
`</span></code></pre>

<p>Lastly, if the commit ID doesn't match the previous ID, then we know we =
have new commits to check, so the script stores the latest commit ID in a .=
commit_id file.</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash"><span class=
=3D"co"># if the id changed, then write it to a file</span>
<span class=3D"kw">if [</span> <span class=3D"ot">$NEW_COMMIT_ID</span> <sp=
an class=3D"ot">!=3D</span> <span class=3D"ot">$COMMIT_ID</span><span class=
=3D"kw"> ]</span>; <span class=3D"kw">then</span>
  <span class=3D"kw">popd</span> <span class=3D"kw">1&gt;</span> /dev/null
  <span class=3D"kw">echo</span> <span class=3D"ot">$NEW_COMMIT_ID</span> <=
span class=3D"kw">&gt;</span> .commit_id
<span class=3D"kw">fi</span></code></pre>

<p>When <code>update_repo.sh</code> finishes running in <code>repo_observer=
.py</code>, the repository observer checks for the existence of the <code>.=
commit_id</code> file. If the file does exist, then we know we have a new c=
ommit, and we need to notify the dispatcher so it can kick off the tests. T=
he repository observer will check the dispatcher server's status by connect=
ing to it and sending a 'status' request, to make sure there are no problem=
s with it, and to make sure it is ready for instruction.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">if</span> os.path.isfile(<span class=3D"st">".commit_id"=
</span>):
            <span class=3D"kw">try</span>:
                response =3D helpers.communicate(dispatcher_host,
                                               <span class=3D"dt">int</span=
>(dispatcher_port),
                                               <span class=3D"st">"status"<=
/span>)
            <span class=3D"kw">except</span> socket.error <span class=3D"ch=
">as</span> e:
                <span class=3D"kw">raise</span> <span class=3D"ot">Exceptio=
n</span>(<span class=3D"st">"Could not communicate with dispatcher server: =
</span><span class=3D"ot">%s</span><span class=3D"st">"</span> % e)</code><=
/pre>

<p>If it responds with "OK", then the repository observer opens the <code>.=
commit_id</code> file, reads the latest commit ID and sends that ID to the =
dispatcher, using a <code>dispatch:&lt;commit ID&gt;</code> request. It wil=
l then sleep for five seconds and repeat the process. We'll also try again =
in five seconds if anything went wrong along the way.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"kw">if</span> response =3D=3D <span class=3D"st">"OK"</s=
pan>:
                commit =3D <span class=3D"st">""</span>
                <span class=3D"kw">with</span> <span class=3D"dt">open</spa=
n>(<span class=3D"st">".commit_id"</span>, <span class=3D"st">"r"</span>) <=
span class=3D"ch">as</span> f:
                    commit =3D f.readline()
                response =3D helpers.communicate(dispatcher_host,
                                               <span class=3D"dt">int</span=
>(dispatcher_port),
                                               <span class=3D"st">"dispatch=
:</span><span class=3D"ot">%s</span><span class=3D"st">"</span> % commit)
                <span class=3D"kw">if</span> response !=3D <span class=3D"s=
t">"OK"</span>:
                    <span class=3D"kw">raise</span> <span class=3D"ot">Exce=
ption</span>(<span class=3D"st">"Could not dispatch the test: </span><span =
class=3D"ot">%s</span><span class=3D"st">"</span> %
                    response)
                <span class=3D"dt">print</span> <span class=3D"st">"dispatc=
hed!"</span>
            <span class=3D"kw">else</span>:
                <span class=3D"kw">raise</span> <span class=3D"ot">Exceptio=
n</span>(<span class=3D"st">"Could not dispatch the test: </span><span clas=
s=3D"ot">%s</span><span class=3D"st">"</span> %
                response)
        time.sleep(<span class=3D"dv">5</span>)</code></pre>

<p>The repository observer will repeat this process forever, until you kill=
 the process via a <code>KeyboardInterrupt</code> (Ctrl+c), or by sending i=
t a kill signal.</p>

<h3 id=3D"the-dispatcher-dispatcher.py">The Dispatcher (<code>dispatcher.py=
</code>)</h3>

<p>The dispatcher is a separate service used to delegate testing tasks. It =
listens on a port for requests from test runners and from the repository ob=
server. It allows test runners to register themselves, and when given a com=
mit ID from the repository observer, it will dispatch a test runner against=
 the new commit. It also gracefully handles any problems with the test runn=
ers and will redistribute the commit ID to a new test runner if anything go=
es wrong.</p>

<p>When <code>dispatch.py</code> is executed, the <code>serve</code> functi=
on is called. First it parses the arguments that allow you to specify the d=
ispatcher's host and port:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> serve():
    parser =3D argparse.ArgumentParser()
    parser.add_argument(<span class=3D"st">"--host"</span>,
                        <span class=3D"dt">help</span>=3D<span class=3D"st"=
>"dispatcher's host, by default it uses localhost"</span>,
                        default=3D<span class=3D"st">"localhost"</span>,
                        action=3D<span class=3D"st">"store"</span>)
    parser.add_argument(<span class=3D"st">"--port"</span>,
                        <span class=3D"dt">help</span>=3D<span class=3D"st"=
>"dispatcher's port, by default it uses 8888"</span>,
                        default=3D<span class=3D"dv">8888</span>,
                        action=3D<span class=3D"st">"store"</span>)
    args =3D parser.parse_args()</code></pre>

<p>This starts the dispatcher server, and two other threads. One thread run=
s the <code>runner_checker</code> function, and other runs the <code>redist=
ribute</code> function.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    serv=
er =3D ThreadingTCPServer((args.host, <span class=3D"dt">int</span>(args.po=
rt)), DispatcherHandler)
    <span class=3D"dt">print</span> `serving on %s:%s` % (args.host, <span =
class=3D"dt">int</span>(args.port))

    ...

    runner_heartbeat =3D threading.Thread(target=3Drunner_checker, args=3D(=
server,))
    redistributor =3D threading.Thread(target=3Dredistribute, args=3D(serve=
r,))
    <span class=3D"kw">try</span>:
        runner_heartbeat.start()
        redistributor.start()
        <span class=3D"co"># Activate the server; this will keep running un=
til you</span>
        <span class=3D"co"># interrupt the program with Ctrl+C or Cmd+C</sp=
an>
        server.serve_forever()
    <span class=3D"kw">except</span> (<span class=3D"ot">KeyboardInterrupt<=
/span>, <span class=3D"ot">Exception</span>):
        <span class=3D"co"># if any exception occurs, kill the thread</span=
>
        server.dead =3D <span class=3D"ot">True</span>
        runner_heartbeat.join()
        redistributor.join()</code></pre>

<p>The <code>runner_checker</code> function periodically pings each registe=
red test runner to make sure they are still responsive. If they become unre=
sponsive, then that runner will be removed from the pool and its commit ID =
will be dispatched to the next available runner. The function will log the =
commit ID in the <code>pending_commits</code> variable.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> runner_checker(server):
        <span class=3D"kw">def</span> manage_commit_lists(runner):
            <span class=3D"kw">for</span> commit, assigned_runner in server=
.dispatched_commits.iteritems():
                <span class=3D"kw">if</span> assigned_runner =3D=3D runner:
                    <span class=3D"kw">del</span> server.dispatched_commits=
[commit]
                    server.pending_commits.append(commit)
                    <span class=3D"kw">break</span>
            server.runners.remove(runner)
        <span class=3D"kw">while</span> not server.dead:
            time.sleep(<span class=3D"dv">1</span>)
            <span class=3D"kw">for</span> runner in server.runners:
                s =3D socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                <span class=3D"kw">try</span>:
                    response =3D helpers.communicate(runner[<span class=3D"=
st">"host"</span>],
                                                   <span class=3D"dt">int</=
span>(runner[<span class=3D"st">"port"</span>]),
                                                   <span class=3D"st">"ping=
"</span>)
                    <span class=3D"kw">if</span> response !=3D <span class=
=3D"st">"pong"</span>:
                        <span class=3D"dt">print</span> <span class=3D"st">=
"removing runner </span><span class=3D"ot">%s</span><span class=3D"st">"</s=
pan> % runner
                        manage_commit_lists(runner)
                <span class=3D"kw">except</span> socket.error <span class=
=3D"ch">as</span> e:
                    manage_commit_lists(runner)</code></pre>

<p>The <code>redistribute</code> function is used to dispatch the commit ID=
s logged in <code>pending_commits</code>. When <code>redistribute</code> ru=
ns, it checks if there are any commit IDs in <code>pending_commits</code>. =
If so, it calls the <code>dispatch_tests</code> function with the commit ID=
.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> redistribute(server):
        <span class=3D"kw">while</span> not server.dead:
            <span class=3D"kw">for</span> commit in server.pending_commits:
                <span class=3D"dt">print</span> <span class=3D"st">"running=
 redistribute"</span>
                <span class=3D"dt">print</span> server.pending_commits
                dispatch_tests(server, commit)
                time.sleep(<span class=3D"dv">5</span>)</code></pre>

<p>The <code>dispatch_tests</code> function is used to find an available te=
st runner from the pool of registered runners. If one is available, it will=
 send a runtest message to it with the commit ID. If none are currently ava=
ilable, it will wait two seconds and repeat this process. Once dispatched, =
it logs which commit ID is being tested by which test runner in the <code>d=
ispatched_commits</code> variable. If the commit ID is in the <code>pending=
_commits</code> variable, <code>dispatch_tests</code> will remove it since =
it has already been successfully re-dispatched.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> dispatch_tests(server, commit_id):
    <span class=3D"co"># NOTE: usually we don't run this forever</span>
    <span class=3D"kw">while</span> <span class=3D"ot">True</span>:
        <span class=3D"dt">print</span> <span class=3D"st">"trying to dispa=
tch to runners"</span>
        <span class=3D"kw">for</span> runner in server.runners:
            response =3D helpers.communicate(runner[<span class=3D"st">"hos=
t"</span>],
                                           <span class=3D"dt">int</span>(ru=
nner[<span class=3D"st">"port"</span>]),
                                           <span class=3D"st">"runtest:</sp=
an><span class=3D"ot">%s</span><span class=3D"st">"</span> % commit_id)
            <span class=3D"kw">if</span> response =3D=3D <span class=3D"st"=
>"OK"</span>:
                <span class=3D"dt">print</span> <span class=3D"st">"adding =
id </span><span class=3D"ot">%s</span><span class=3D"st">"</span> % commit_=
id
                server.dispatched_commits[commit_id] =3D runner
                <span class=3D"kw">if</span> commit_id in server.pending_co=
mmits:
                    server.pending_commits.remove(commit_id)
                <span class=3D"kw">return</span>
        time.sleep(<span class=3D"dv">2</span>)</code></pre>

<p>The dispatcher server uses the <code>SocketServer</code> module, which i=
s a very simple server that is part of the standard library. There are four=
 basic server types in the <code>SocketServer</code> module: <code>TCP</cod=
e>, <code>UDP</code>, <code>UnixStreamServer</code> and <code>UnixDatagramS=
erver</code>. We will be using a TCP-based socket server so we can ensure c=
ontinuous, ordered streams of data between servers, as UDP does not ensure =
this.</p>

<p>The default <code>TCPServer</code> provided by <code>SocketServer</code>=
 can only handle one request at a time, so it cannot handle the case where =
the dispatcher is talking to one connection, say from a test runner, and th=
en a new connection comes in, say from the repository observer. If this hap=
pens, the repository observer would have to wait for the first connection t=
o complete and disconnect before it would be serviced. This is not ideal fo=
r our case, since the dispatcher server must be able to directly and swiftl=
y communicate with all test runners and the repository observer.</p>

<p>In order for the dispatcher server to handle simultaneous connections, i=
t uses the <code>ThreadingTCPServer</code> custom class, which adds threadi=
ng ability to the default <code>SocketServer</code>. This means that any ti=
me the dispatcher receives a connection request, it spins off a new process=
 just for that connection. This allows the dispatcher to handle multiple re=
quests at the same time.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> ThreadingTCPServer(SocketServer.ThreadingMixIn, Soc=
ketServer.TCPServer):
    runners =3D [] <span class=3D"co"># Keeps track of test runner pool</sp=
an>
    dead =3D <span class=3D"ot">False</span> <span class=3D"co"># Indicate =
to other threads that we are no longer running</span>
    dispatched_commits =3D {} <span class=3D"co"># Keeps track of commits w=
e dispatched</span>
    pending_commits =3D [] <span class=3D"co"># Keeps track of commits we h=
ave yet to dispatch</span></code></pre>

<p>The dispatcher server works by defining handlers for each request. This =
is defined by the <code>DispatcherHandler</code> class, which inherits from=
 <code>SocketServer</code>'s <code>BaseRequestHandler</code>. This base cla=
ss just needs us to define the handle function, which will be invoked whene=
ver a connection is requested. The handle function defined in <code>Dispatc=
herHandler</code> is our custom handler, and it will be called on each conn=
ection. It looks at the incoming connection request (<code>self.request</co=
de> holds the request information), and parses out what command is being re=
quested of it.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> DispatcherHandler(SocketServer.BaseRequestHandler):
    <span class=3D"co">"""</span>
<span class=3D"co">    The RequestHandler class for our dispatcher.</span>
<span class=3D"co">    This will dispatch test runners against the incoming=
 commit</span>
<span class=3D"co">    and handle their requests and test results</span>
<span class=3D"co">    """</span>
    command_re =3D re.<span class=3D"dt">compile</span>(<span class=3D"st">=
r"(\w+)(:.+)*"</span>)
    BUF_SIZE =3D <span class=3D"dv">1024</span>
    <span class=3D"kw">def</span> handle(<span class=3D"ot">self</span>):
        <span class=3D"ot">self</span>.data =3D <span class=3D"ot">self</sp=
an>.request.recv(<span class=3D"ot">self</span>.BUF_SIZE).strip()
        command_groups =3D <span class=3D"ot">self</span>.command_re.match(=
<span class=3D"ot">self</span>.data)
        <span class=3D"kw">if</span> not command_groups:
            <span class=3D"ot">self</span>.request.sendall(<span class=3D"s=
t">"Invalid command"</span>)
            <span class=3D"kw">return</span>
        command =3D command_groups.group(<span class=3D"dv">1</span>)</code=
></pre>

<p>It handles four commands: <code>status</code>, <code>register</code>, <c=
ode>dispatch</code>, and <code>results</code>. <code>status</code> is used =
to check if the dispatcher server is up and running.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">if</span> command =3D=3D <span class=3D"st">"status"</sp=
an>:
            <span class=3D"dt">print</span> <span class=3D"st">"in status"<=
/span>
            <span class=3D"ot">self</span>.request.sendall(<span class=3D"s=
t">"OK"</span>)</code></pre>

<p>In order for the dispatcher to do anything useful, it needs to have at l=
east one test runner registered. When register is called on a host:port pai=
r, it stores the runner's information in a list (the runners object attache=
d to the <code>ThreadingTCPServer</code> object) so it can communicate with=
 the runner later, when it needs to give it a commit ID to run tests agains=
t.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">elif</span> command =3D=3D <span class=3D"st">"register"=
</span>:
            <span class=3D"co"># Add this test runner to our pool</span>
            <span class=3D"dt">print</span> <span class=3D"st">"register"</=
span>
            address =3D command_groups.group(<span class=3D"dv">2</span>)
            host, port =3D re.findall(<span class=3D"st">r":(\w*)"</span>, =
address)
            runner =3D {<span class=3D"st">"host"</span>: host, <span class=
=3D"st">"port"</span>:port}
            <span class=3D"ot">self</span>.server.runners.append(runner)
            <span class=3D"ot">self</span>.request.sendall(<span class=3D"s=
t">"OK"</span>)</code></pre>

<p><code>dispatch</code> is used by the repository observer to dispatch a t=
est runner against a commit. The format of this command is <code>dispatch:&=
lt;commit ID&gt;</code>. The dispatcher parses out the commit ID from this =
message and sends it to the test runner.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">elif</span> command =3D=3D <span class=3D"st">"dispatch"=
</span>:
            <span class=3D"dt">print</span> <span class=3D"st">"going to di=
spatch"</span>
            commit_id =3D command_groups.group(<span class=3D"dv">2</span>)=
[<span class=3D"dv">1</span>:]
            <span class=3D"kw">if</span> not <span class=3D"ot">self</span>=
.server.runners:
                <span class=3D"ot">self</span>.request.sendall(<span class=
=3D"st">"No runners are registered"</span>)
            <span class=3D"kw">else</span>:
                <span class=3D"co"># The coordinator can trust us to dispat=
ch the test</span>
                <span class=3D"ot">self</span>.request.sendall(<span class=
=3D"st">"OK"</span>)
                dispatch_tests(<span class=3D"ot">self</span>.server, commi=
t_id)</code></pre>

<p><code>results</code> is used by a test runner to report the results of a=
 finished test run. The format of this command is <code>results:&lt;commit =
ID&gt;:&lt;length of results data in bytes&gt;:&lt;results&gt;</code>. The =
<code>&lt;commit ID&gt;</code> is used to identify which commit ID the test=
s were run against. The <code>&lt;length of results data in bytes&gt;</code=
> is used to figure out how big a buffer is needed for the results data. La=
stly, <code>&lt;results&gt;</code> holds the actual result output.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">elif</span> command =3D=3D <span class=3D"st">"results"<=
/span>:
            <span class=3D"dt">print</span> <span class=3D"st">"got test re=
sults"</span>
            results =3D command_groups.group(<span class=3D"dv">2</span>)[<=
span class=3D"dv">1</span>:]
            results =3D results.split(<span class=3D"st">":"</span>)
            commit_id =3D results[<span class=3D"dv">0</span>]
            length_msg =3D <span class=3D"dt">int</span>(results[<span clas=
s=3D"dv">1</span>])
            <span class=3D"co"># 3 is the number of ":" in the sent command=
</span>
            remaining_buffer =3D <span class=3D"ot">self</span>.BUF_SIZE - =
\
                (<span class=3D"dt">len</span>(command) + <span class=3D"dt=
">len</span>(commit_id) + <span class=3D"dt">len</span>(results[<span class=
=3D"dv">1</span>]) + <span class=3D"dv">3</span>)
            <span class=3D"kw">if</span> length_msg &gt; remaining_buffer:
                <span class=3D"ot">self</span>.data +=3D <span class=3D"ot"=
>self</span>.request.recv(length_msg - remaining_buffer).strip()
            <span class=3D"kw">del</span> <span class=3D"ot">self</span>.se=
rver.dispatched_commits[commit_id]
            <span class=3D"kw">if</span> not os.path.exists(<span class=3D"=
st">"test_results"</span>):
                os.makedirs(<span class=3D"st">"test_results"</span>)
            <span class=3D"kw">with</span> <span class=3D"dt">open</span>(<=
span class=3D"st">"test_results/</span><span class=3D"ot">%s</span><span cl=
ass=3D"st">"</span> % commit_id, <span class=3D"st">"w"</span>) <span class=
=3D"ch">as</span> f:
                data =3D <span class=3D"ot">self</span>.data.split(<span cl=
ass=3D"st">":"</span>)[<span class=3D"dv">3</span>:]
                data =3D <span class=3D"st">"</span><span class=3D"ch">\n</=
span><span class=3D"st">"</span>.join(data)
                f.write(data)
            <span class=3D"ot">self</span>.request.sendall(<span class=3D"s=
t">"OK"</span>)</code></pre>

<h3 id=3D"the-test-runner-test_runner.py">The Test Runner (<code>test_runne=
r.py</code>)</h3>

<p>The test runner is responsible for running tests against a given commit =
ID and reporting the results. It communicates only with the dispatcher serv=
er, which is responsible for giving it the commit IDs to run against, and w=
hich will receive the test results.</p>

<p>When the <code>test_runner.py</code> file is invoked, it calls the <code=
>serve</code> function which starts the test runner server, and also starts=
 a thread to run the <code>dispatcher_checker</code> function. Since this s=
tartup process is very similar to the ones described in <code>repo_observer=
.py</code> and <code>dispatcher.py</code>, we omit the description here.</p=
>

<p>The <code>dispatcher_checker</code> function pings the dispatcher server=
 every five seconds to make sure it is still up and running. This is import=
ant for resource management. If the dispatcher goes down, then the test run=
ner will shut down since it won't be able to do any meaningful work if ther=
e is no dispatcher to give it work or to report to.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> dispatcher_checker(server):
        <span class=3D"kw">while</span> not server.dead:
            time.sleep(<span class=3D"dv">5</span>)
            <span class=3D"kw">if</span> (time.time() - server.last_communi=
cation) &gt; <span class=3D"dv">10</span>:
                <span class=3D"kw">try</span>:
                    response =3D helpers.communicate(
                                       server.dispatcher_server[<span class=
=3D"st">"host"</span>],
                                       <span class=3D"dt">int</span>(server=
.dispatcher_server[<span class=3D"st">"port"</span>]),
                                       <span class=3D"st">"status"</span>)
                    <span class=3D"kw">if</span> response !=3D <span class=
=3D"st">"OK"</span>:
                        <span class=3D"dt">print</span> <span class=3D"st">=
"Dispatcher is no longer functional"</span>
                        server.shutdown()
                        <span class=3D"kw">return</span>
                <span class=3D"kw">except</span> socket.error <span class=
=3D"ch">as</span> e:
                    <span class=3D"dt">print</span> <span class=3D"st">"Can=
't communicate with dispatcher: </span><span class=3D"ot">%s</span><span cl=
ass=3D"st">"</span> % e
                    server.shutdown()
                    <span class=3D"kw">return</span></code></pre>

<p>The test runner is a <code>ThreadingTCPServer</code>, like the dispatche=
r server. It requires threading because not only will the dispatcher be giv=
ing it a commit ID to run, but the dispatcher will be pinging the runner pe=
riodically to verify that it is still up while it is running tests.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> ThreadingTCPServer(SocketServer.ThreadingMixIn, Soc=
ketServer.TCPServer):
    dispatcher_server =3D <span class=3D"ot">None</span> <span class=3D"co"=
># Holds the dispatcher server host/port information</span>
    last_communication =3D <span class=3D"ot">None</span> <span class=3D"co=
"># Keeps track of last communication from dispatcher</span>
    busy =3D <span class=3D"ot">False</span> <span class=3D"co"># Status fl=
ag</span>
    dead =3D <span class=3D"ot">False</span> <span class=3D"co"># Status fl=
ag</span></code></pre>

<p>The communication flow starts with the dispatcher requesting that the ru=
nner accept a commit ID to run. If the test runner is ready to run the job,=
 it responds with an acknowledgement to the dispatcher server, which then c=
loses the connection. In order for the test runner server to both run tests=
 and accept more requests from the dispatcher, it starts the requested test=
 job on a new thread.</p>

<p>This means that when the dispatcher server makes a request (a ping, in t=
his case) and expects a response, it will be done on a separate thread, whi=
le the test runner is busy running tests on its own thread. This allows the=
 test runner server to handle multiple tasks simultaneously. Instead of thi=
s threaded design, it is possible to have the dispatcher server hold onto a=
 connection with each test runner, but this would increase the dispatcher s=
erver's memory needs, and is vulnerable to network problems, like accidenta=
lly dropped connections.</p>

<p>The test runner server responds to two messages from the dispatcher. The=
 first is <code>ping</code>, which is used by the dispatcher server to veri=
fy that the runner is still active.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">class</span> TestHandler(SocketServer.BaseRequestHandler):
    ...

    <span class=3D"kw">def</span> handle(<span class=3D"ot">self</span>):
        ....
        <span class=3D"kw">if</span> command =3D=3D <span class=3D"st">"pin=
g"</span>:
            <span class=3D"dt">print</span> <span class=3D"st">"pinged"</sp=
an>
            <span class=3D"ot">self</span>.server.last_communication =3D ti=
me.time()
            <span class=3D"ot">self</span>.request.sendall(<span class=3D"s=
t">"pong"</span>)</code></pre>

<p>The second is <code>runtest</code>, which accepts messages of the form <=
code>runtest:&lt;commit ID&gt;</code>, and is used to kick off tests on the=
 given commit. When runtest is called, the test runner will check to see if=
 it is already running a test, and if so, it will return a <code>BUSY</code=
> response to the dispatcher. If it is available, it will respond to the se=
rver with an <code>OK</code> message, set its status as busy and run its <c=
ode>run_tests</code> function.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"kw">elif</span> command =3D=3D <span class=3D"st">"runtest"<=
/span>:
            <span class=3D"dt">print</span> <span class=3D"st">"got runtest=
 command: am I busy? </span><span class=3D"ot">%s</span><span class=3D"st">=
"</span> % <span class=3D"ot">self</span>.server.busy
            <span class=3D"kw">if</span> <span class=3D"ot">self</span>.ser=
ver.busy:
                <span class=3D"ot">self</span>.request.sendall(<span class=
=3D"st">"BUSY"</span>)
            <span class=3D"kw">else</span>:
                <span class=3D"ot">self</span>.request.sendall(<span class=
=3D"st">"OK"</span>)
                <span class=3D"dt">print</span> <span class=3D"st">"running=
"</span>
                commit_id =3D command_groups.group(<span class=3D"dv">2</sp=
an>)[<span class=3D"dv">1</span>:]
                <span class=3D"ot">self</span>.server.busy =3D <span class=
=3D"ot">True</span>
                <span class=3D"ot">self</span>.run_tests(commit_id,
                               <span class=3D"ot">self</span>.server.repo_f=
older)
                <span class=3D"ot">self</span>.server.busy =3D <span class=
=3D"ot">False</span></code></pre>

<p>This function calls the shell script <code>test_runner_script.sh</code>,=
 which updates the repository to the given commit ID. Once the script retur=
ns, if it was successful at updating the repository we run the tests using =
unittest and gather the results in a file. When the tests have finished run=
ning, the test runner reads in the results file and sends it in a results m=
essage to the dispatcher.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">def</span> run_tests(<span class=3D"ot">self</span>, commit_=
id, repo_folder):
        <span class=3D"co"># update repo</span>
        output =3D subprocess.check_output([<span class=3D"st">"./test_runn=
er_script.sh"</span>,
                                        repo_folder, commit_id])
        <span class=3D"dt">print</span> output
        <span class=3D"co"># run the tests</span>
        test_folder =3D os.path.join(repo_folder, <span class=3D"st">"tests=
"</span>)
        suite =3D unittest.TestLoader().discover(test_folder)
        result_file =3D <span class=3D"dt">open</span>(<span class=3D"st">"=
results"</span>, <span class=3D"st">"w"</span>)
        unittest.TextTestRunner(result_file).run(suite)
        result_file.close()
        result_file =3D <span class=3D"dt">open</span>(<span class=3D"st">"=
results"</span>, <span class=3D"st">"r"</span>)
        <span class=3D"co"># give the dispatcher the results</span>
        output =3D result_file.read()
        helpers.communicate(<span class=3D"ot">self</span>.server.dispatche=
r_server[<span class=3D"st">"host"</span>],
                            <span class=3D"dt">int</span>(<span class=3D"ot=
">self</span>.server.dispatcher_server[<span class=3D"st">"port"</span>]),
                            <span class=3D"st">"results:</span><span class=
=3D"ot">%s</span><span class=3D"st">:</span><span class=3D"ot">%s</span><sp=
an class=3D"st">:</span><span class=3D"ot">%s</span><span class=3D"st">"</s=
pan> % (commit_id, <span class=3D"dt">len</span>(output), output))</code></=
pre>

<p>Here's <code>test_runner_script.sh</code>:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash"><span class=
=3D"co">#!/bin/bash</span>
<span class=3D"ot">REPO=3D$1</span>
<span class=3D"ot">COMMIT=3D$2</span>
<span class=3D"kw">source</span> run_or_fail.sh
<span class=3D"kw">run_or_fail</span> <span class=3D"st">"Repository folder=
 not found"</span> pushd <span class=3D"st">"</span><span class=3D"ot">$REP=
O</span><span class=3D"st">"</span> <span class=3D"kw">1&gt;</span> /dev/nu=
ll
<span class=3D"kw">run_or_fail</span> <span class=3D"st">"Could not clean r=
epository"</span> git clean -d -f -x
<span class=3D"kw">run_or_fail</span> <span class=3D"st">"Could not call gi=
t pull"</span> git pull
<span class=3D"kw">run_or_fail</span> <span class=3D"st">"Could not update =
to given commit hash"</span> git reset --hard <span class=3D"st">"</span><s=
pan class=3D"ot">$COMMIT</span><span class=3D"st">"</span></code></pre>

<p>In order to run <code>test_runner.py</code>, you must point it to a clon=
e of the repository to run tests against. In this case, you can use the pre=
viously created <code>/path/to/test_repo test_repo_clone_runner</code> clon=
e as the argument. By default, <code>test_runner.py</code> will start its o=
wn server on localhost using a port in the range 8900-9000, and will try to=
 connect to the dispatcher server at <code>localhost:8888</code>. You may p=
ass it optional arguments to change these values. The <code>--host</code> a=
nd <code>--port</code> arguments are used to designate a specific address t=
o run the test runner server on, and the <code>--dispatcher-server</code> a=
rgument specifies the address of the dispatcher.</p>

<h3 id=3D"control-flow-diagram">Control Flow Diagram</h3>

<p><a href=3D"http://aosabook.org/en/500L/a-continuous-integration-system.h=
tml#figure-2.1">Figure 2.1</a> is an overview diagram of this system. This =
diagram assumes that all three files (<code>repo_observer.py</code>, <code>=
dispatcher.py</code> and <code>test_runner.py</code>) are already running, =
and describes the actions each process takes when a new commit is made.</p>

<div class=3D"center figure">
<a name=3D"figure-2.1"></a><img src=3D"http://aosabook.org/en/500L/ci-image=
s/diagram.png" alt=3D"Figure 2.1 - Control Flow" title=3D"Figure 2.1 - Cont=
rol Flow">
</div>

<p class=3D"center figcaption">
<small>Figure 2.1 - Control Flow</small>
</p>

<h3 id=3D"running-the-code">Running the Code</h3>

<p>We can run this simple CI system locally, using three different terminal=
 shells for each process. We start the dispatcher first, running on port 88=
88:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">python</span> dispatcher.py</code></pre>

<p>In a new shell, we start the test runner (so it can register itself with=
 the dispatcher):</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">python</span> test_runner.py <span class=3D"kw">&lt;</span>path/to=
/test_repo_clone_runner<span class=3D"kw">&gt;</span></code></pre>

<p>The test runner will assign itself its own port, in the range 8900-9000.=
 You may run as many test runners as you like.</p>

<p>Lastly, in another new shell, let's start the repo observer:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">python</span> repo_observer.py --dispatcher-server=3Dlocalhost:888=
8 <span class=3D"kw">&lt;</span>path/to/repo_clone_obs<span class=3D"kw">&g=
t;</span></code></pre>

<p>Now that everything is set up, let's trigger some tests! To do that, we'=
ll need to make a new commit. Go to your master repository and make an arbi=
trary change:</p>

<pre class=3D"sourceCode bash"><code class=3D"sourceCode bash">$ <span clas=
s=3D"kw">cd</span> /path/to/test_repo
$ <span class=3D"kw">touch</span> new_file
$ <span class=3D"kw">git</span> add new_file
$ <span class=3D"kw">git</span> commit -m<span class=3D"st">"new file"</spa=
n> new_file</code></pre>

<p>Then <code>repo_observer.py</code> will realize that there's a new commi=
t and notify the dispatcher. You can see the output in their respective she=
lls, so you can monitor them. Once the dispatcher receives the test results=
, it stores them in a <code>test_results/</code> folder in this code base, =
using the commit ID as the filename.</p>

<h2 id=3D"error-handling">Error Handling</h2>

<p>This CI system includes some simple error handling.</p>

<p>If you kill the <code>test_runner.py</code> process, <code>dispatcher.py=
</code> will figure out that the runner is no longer available and will rem=
ove it from the pool.</p>

<p>You can also kill the test runner, to simulate a machine crash or networ=
k failure. If you do so, the dispatcher will realize the runner went down a=
nd will give another test runner the job if one is available in the pool, o=
r will wait for a new test runner to register itself in the pool.</p>

<p>If you kill the dispatcher, the repository observer will figure out it w=
ent down and will throw an exception. The test runners will also notice, an=
d shut down.</p>

<h2 id=3D"conclusion">Conclusion</h2>

<p>By separating concerns into their own processes, we were able to build t=
he fundamentals of a distributed continuous integration system. With proces=
ses communicating with each other via socket requests, we are able to distr=
ibute the system across multiple machines, helping to make our system more =
reliable and scalable.</p>

<p>Since the CI system is quite simple now, you can extend it yourself to b=
e far more functional. Here are a few suggestions for improvements:</p>

<h3 id=3D"per-commit-test-runs">Per-Commit Test Runs</h3>

<p>The current system will periodically check to see if new commits are run=
 and will run the most recent commit. This should be improved to test each =
commit. To do this, you can modify the periodic checker to dispatch test ru=
ns for each commit in the log between the last-tested and the latest commit=
.</p>

<h3 id=3D"smarter-test-runners">Smarter Test Runners</h3>

<p>If the test runner detects that the dispatcher is unresponsive, it stops=
 running. This happens even when the test runner is in the middle of runnin=
g tests! It would be better if the test runner waited for a period of time =
(or indefinitely, if you do not care about resource management) for the dis=
patcher to come back online. In this case, if the dispatcher goes down whil=
e the test runner is actively running a test, instead of shutting down it w=
ill complete the test and wait for the dispatcher to come back online, and =
will report the results to it. This will ensure that we don't waste any eff=
ort the test runner makes, and that we will only run tests once per commit.=
</p>

<h3 id=3D"real-reporting">Real Reporting</h3>

<p>In a real CI system, you would have the test results report to a reporte=
r service which would gather the results, post them somewhere for people to=
 review, and notify a list of interested parties when a failure or other no=
table event occurs. You can extend our simple CI system by creating a new p=
rocess to get the reported results, instead of the dispatcher gathering the=
 results. This new process could be a web server (or can connect to a web s=
erver) which could post the results online, and may use a mail server to al=
ert subscribers to any test failures.</p>

<h3 id=3D"test-runner-manager">Test Runner Manager</h3>

<p>Right now, you have to manually launch the <code>test_runner.py</code> f=
ile to start a test runner. Instead, you could create a test runner manager=
 process which would assess the current load of test requests from the disp=
atcher and scale the number of active test runners accordingly. This proces=
s will receive the runtest messages and will start a test runner process fo=
r each request, and will kill unused processes when the load decreases.</p>

<p>Using these suggestions, you can make this simple CI system more robust =
and fault-tolerant, and you can integrate it with other systems, like a web=
-based test reporter.</p>

<p>If you wish to see the level of flexibility continuous integration syste=
ms can achieve, I recommend looking into <a href=3D"http://jenkins-ci.org/"=
>Jenkins</a>, a very robust, open-source CI system written in Java. It prov=
ides you with a basic CI system which you can extend using plugins. You may=
 also access its source code <a href=3D"https://github.com/jenkinsci/jenkin=
s/">through GitHub</a>. Another recommended project is <a href=3D"https://t=
ravis-ci.org/">Travis CI</a>, which is written in Ruby and whose source cod=
e is also available <a href=3D"https://github.com/travis-ci/travis-ci">thro=
ugh GitHub</a>.</p>

<p>This has been an exercise in understanding how CI systems work, and how =
to build one yourself. You should now have a more solid understanding of wh=
at is needed to make a reliable distributed system, and you can now use thi=
s knowledge to develop more complex solutions.</p>

<div class=3D"footnotes">
<hr>
<ol>
<li id=3D"fn1"><p>Bash is used because we need to check file existence, cre=
ate files, and use Git, and a shell script is the most direct and easy way =
to achieve this. Alternatively, there are cross-platform Python packages yo=
u can use; for example, Python's <code>os</code> built-in module can be use=
d for accessing the file system, and GitPython can be used for Git access, =
but they perform actions in a more roundabout way.<a href=3D"http://aosaboo=
k.org/en/500L/a-continuous-integration-system.html#fnref1">=E2=86=A9</a></p=
></li>
</ol>
</div>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div id=3D"qb-sougou-search" style=
=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D"last-b=
tn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-82-b4a152d3-7d65-411b-81=
91-91ac0deaf3a8@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/ci-images/diagram.png

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
LBEREYnf0qTR2GsiIiIicZWLrtPUhVBERETitzx5YMECq6MQEREREUd274Zjx5yuRgksERFxnSxZ
oFgxq6MQV8ueHXLksDqKqAUFwZ07VkchIiIiIo6MHg2LFztdjS04ODjYBeGIiIiIWGPfPqhcGfz8
rI5ERERERB7n4wPe3jBwoFPVqAWWiIiIiIiIiIjEaUpgiYiI63z1FTRpYnUU4mrDhsGQIVZHISIi
IiKJmGYhFBER1/H3hwcPrI5CXO3ePXj0yOooRERERCQRUwssERERERERERGJ09QCS0RERERERERE
YkbbtmZWaycpgSUiIiLxW6pUUKeO1VGIiIiIiCMuGiNXXQhFREQkfsuXDxYtsjoKEREREXFk3z44
dcrpapTAEhER18mYEQoWtDoKcbUsWSBrVqujiFpwsAaZFxEREYmrRo6EH35wuhpbcHBwsAvCERER
EbHGvn1QuTL4+VkdiYiIiIg8zscHvL1h4ECnqlELLBERERERERERidOUwBIREdeZPds8YZGE5cMP
4f33rY5CRERERBIxzUIoIiKu8/Ah3L5tdRTian5+GmNKRERERCylFlgiIiIiIiIiIhKnqQWWiIiI
iIiIiIjEjFatIHt2p6tRAktERETit5QpoVo1q6MQEREREUdatHBJNepCKCIiIvFb/vywYoXVUYiI
iIiII76+cOaM09UogSUiIq6TPj3kyWN1FOJqGTJAxoxWRyEiIiIi8dGIEfD9905XYwsODg52QTgi
IiIi1ti3DypXNrMlioiIiEjc4uMD3t4wcKBT1agFloiIiIiIiIiIxGlKYImIiOvMmQOtW1sdhbja
J5/ABx9YHYWIiIiIJGKahVBERFzn3j24ccPqKMTVrl+HR4+sjkJEREREEjG1wBIRERERERERkThN
LbBERERERERERCRmNG8OOXM6XY1aYImIiEiYVatg7dqnl9u4EVasiPl4HnfrlhmT6/79sPdSpIAX
XohY7vx5+PTT2I1NRERERCJ77TUzY7STlMASERGRMC+9BE2bQqNGcOpU5M8vXIAOHaBePahYMfbj
S5MGDhyAwoXNpAEABQrAmjVmOSAAJk2CYsUgbdrYj09EREREIjpyxDxcdJISWCIi4jpp0kD27FZH
Ic5Im9bMJLlyJRQvbmYfTJECUqc2iaGiRWHuXGjVCjJntibGPn3g7Fno2BFq14ZDh8z7mzdD2bLw
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
cf78edLT0wF4/PHHWblyJU2bNiUoKIhffvmFypUr4+DgYF5gYuTIkezduxc3Nzc+/vhjxo8ff92j
z0RERG4GO8PQNXBFRG4VO3bsYODAgX9o3hYREVuVmJjI6tWrSUtLo1GjRoSFheHoaP332by8PFav
Xs2JEyfMq/CVK1fOXPfIkSN8++232Nvb079/f3x9fcnLy2Pt2rX06dPHPL3wyy+/xNvbm5YtW1JU
VMTatWv56aefqF69OgMHDjRPSbx06RKrVq0iNzeX4cOHX9VndHS0Oa9Vbm4uX331FWFhYWZPK1eu
pHPnzri7uwOwf/9+vvvuOywWCz169CAoKMjcXnR0NFu3biU/P5/OnTsTEhICgGEYbNiwgf379+Pi
4kKfPn0ICAgAIC4ujhUrVmCxWOjcuTP16tVjw4YN3HPPPTg6OlJUVER0dDQZGRl07NiRunXrsmjR
Iu666y4AYmJi+Pbbb8nJyeH222+nffv2N/fNtEFZWVm4ubmRnp5+1RyDIiLy91OAJSJyC1GAJSIi
vzZlyhQOHz7MsmXLsLe3Z8uWLdx9993ExcXh4eFR1u2VGQVYIiK2RacQioiIiIjcwh599FF69uyJ
v78/VatWJS4ujo8++uiWDq9ERMT2KMASEREREbmFVa9enaioKM6cOUN2djYBAQGa30pERGyOAiwR
EREREcHf37+sWxAREbkm+7JuQERERERERERE5LcowBIREREREREREZumAEtERERERERERGyaAiwR
EREREREREbFpCrBERERERERERMSmKcASERERERERERGbpgBLRERERERERERsmgIsERERERERERGx
aQqwRERERERERETEpinAEhERERERERERm6YAS0REREREREREbJoCLBERERERERERsWkKsERERERE
RERExKYpwBIREREREREREZumAEtERERERERERGyaAiwREREREREREbFpCrBERERERERERMSmKcAS
ERERERERERGbpgBLRERERERERERsmgIsERERERERERGxaQqwRERERERERETEpinAEhERERERERER
m6YAS0REREREREREbJoCLBERERERERERsWkKsERERERERERExKYpwBIREREREREREZumAEtERERE
RERERGyaAiwREREREREREbFpCrBERERERERERMSmKcASERERERERERGbpgBLRERERERERERsmgIs
ERERERERERGxaQqwRERERERERETEpjmWdQMiInLrKiqC/fuhdevLz50+Dc7O4OVlfWyxQHQ0tGlz
uebMGXBygho1rI8NA/buhbZtL9fExoKDA9Ssebnmhx+gXbvLNXFx1ltf38vP7dlj3Y6dnfVxQoK1
Tz+/yzU//GDtp7gmMREKCsDf/3LN3r3QqhXY//8/FSUnw8WLULv25ZqoKGjRwtonwLlzkJ0NdeuW
rGneHBz//2/s1FTIyoKAgMs10dHQtCmUK2d9nJYG6ekQGHi5Zt8+aNLkck1GhnV/9etfrtm/H4KC
rK8tQGYmJCVBw4aXa378ERo0gAoVrI/Pn4f4eGjU6HLNwYPWfTs7Wx9nZ1vfj6CgyzWHDlmPwcXF
+jg3F06dguBg5Fawbx9s2lT6snvusf7B/PFH+Oab0mt697b+oTt0CDZsKL3m7rutf6COHoUvvyy9
5q67oFkzOHYM1q4tvaZbN+sHNSYG1qwpvaZzZ+sX2cmTsHJl6TV33GH9cjl9GpYvL72mY0cICbF+
YJYuLb0mJMRal5AAixaVXtOuHdx+u/UD/Omnpde0bm3t+9w5mDev9JoWLazHn5YGc+eWXtOsmfV1
zMyEjz4qvSY42Pp+ZGfDhx+WXhMUBL16wYUL8P771i+avn1LrxURkVuSAiwRESkzly5Zw6grA6zU
VKhc+XKAVVRk/b13ZYCVlmYNR4oDrCtrikOl9HRr6HNlgHXmTMlwKj3delscYBXXXLmdjAxrn8UB
lmFY99Wy5eVQKTPTGk5dGWCdPm0NnooDrKwsa9hzZYB1+rQ1VCoOsLKyrMd2ZYB19qz1t1/xvs6f
h5SUkgFWbKz1t3xxOJWdba25MsCKjbVmAsU1OTnWUO3KACsuzrrd4gCruObKACsuznqcxQFWbq71
N/KVAVZ8vPU1LQ6wLlywhnxXBlgJCeDtXTLASkxUgHXLSEqyJsGlue02621y8rVrQkKst+fOXbum
+EsjNfXaNS1aWG/T069d06SJ9TYj49o1xR+AzMxr1xR/ILOyrl1Tp4719vz5a9cUfxllZ1+7pviL
Lzf32jXVq1tvL1y4do27u/X24sVr11SubL3Ny7t2jaur9TY//9o1xV88BQXWmuIvRhERkf9nZxiG
UdZNiIjI32PHjh0MHDiQ+Pj4sm5FRETEpmVlZeHm5kZ6ejpVq1Yt63ZERG55mgNLRERERERERERs
mgIsERERERERERGxaQqwRERERERERETEpinAEhERERERERERm6YAS0REREREREREbJoCLBERERER
ERERsWkKsERERLHoC5MAACAASURBVERERERExKYpwBIREREREREREZumAEtERERERERERGyaAiwR
ERERsRmnT5827z/11FP89NNPZdLHvn37+O9//3vN5TNnzqRr165MmjTpT+9r7Nix/PLLL396O9fj
mWee4eDBgwA899xzREVFAfDSSy+xY8eOv6UHERGRG6EAS0RERERswrx583jkkUfMxwsWLCA+Pr5M
ejl58iSfffZZqcvOnj3LE088Qe/evendu/ef3tfcuXNJSkr609u5HosXL+bMmTMALFu2jBMnTgAQ
Hx9Pdnb239KDiIjIjXAs6wZERERERABSUlKuuSwzMxM3N7dSl124cAEXFxfzcUFBAQDly5cvtT47
O5uKFStiZ2dX6rJKlSr9Zp/x8fG4uroyfvz4Es8XFhZSVFREhQoVSl0vNzcXV1fX39z2bx1nVlYW
VapUKXXZpUuXuHjxYqm9/15fALNmzbrqOYvFQk5ODpUrV75qWVFREfn5+SVedxERkb+SRmCJiMg/
WkZGBsnJyWW2/zNnznDx4sUy2/+NSEhI4Pz582XdhkgJn3/+OVOmTGHz5s0EBgaaz69duxZvb29q
1KhBgwYNOHLkCGAdrTV48GDatm1LpUqV2L59O8nJydxzzz14enri6elJWFgY586dA6xhzIQJE6hZ
syYBAQFUrFiRkSNHYrFYADh16hRt27bF29sbX19fNmzYUGqfmzZtonv37ly4cAF3d3fWrVtHSkoK
/fv3x83NjerVq9OpUyfzlMCdO3cSGhrKwIEDqVixInPmzCl1uytWrMDLywsvLy8aN27M8ePHAWsY
N3r0aGrUqEFgYCAVK1ZkwoQJ5npNmjRh2rRpeHt7U61aNYKDgzl8+DAAhmEwZcoU3Nzc8PHxYejQ
oRQWFpa6/86dO7Nw4UIAunbtyvPPP0+tWrXw9PSkbt267Ny506ydMWMG7u7u+Pj40LlzZ+69917e
eeed33mHRURE/hwFWCIi8o9isVh47rnnzHly3n333RKnHP3d2rdvz7Zt2/7QOgUFBURERJCZmXlD
+zx37txVIz/+iPvuu4/58+f/4fVycnLK9LWWf7d77rmHKVOm0KVLF2JiYszno6OjiYqKIisri9q1
azNt2jQA8vPzWb58OYMHD2bz5s20bduW4cOHU6lSJVJSUjh37hyVK1dm9OjRACxfvpyFCxeyd+9e
UlJSiIqKYuHChWzfvh2AIUOG0KhRIzIzM4mKiioR2Fypa9eurF+/nooVK5Kenk7v3r25//77yc/P
Jzk5mbS0NIKCgujXrx+FhYVcunSJPXv24OXlxa5du+jTp0+p2/3xxx85cOAAmZmZeHp68sorrwAQ
GRnJ1q1bOXLkCCkpKWzcuJE33niDo0ePAtZRWatXr+bQoUNkZGTg4+PDlClTAFizZg0zZswgKiqK
1NRU6tevT2JiYqn7z87OJj8/37y/aNEivv/+e7KysggNDWXixIkAbN++ncmTJ/PNN9+QkZHByJEj
WbVqFXl5edf9XouIiNwIBVgiIvKPkp+fz9SpU81ThP6JUlJSePvttykqKrqh9Xfv3s2qVatucle/
7/jx43z88cd/+37l1jZixAh8fHxwcnKiT58+JSZ59/DwICIigjvuuIO0tDTWr1/Pww8/THx8PHFx
cQwbNozVq1eTnZ1Nz5492b17Nz4+PmRlZZGcnIybmxtJSUnEx8ezY8cOpkyZgqOjIzVq1LjukDgp
KYlNmzbx6quvUrFiRcqVK8f06dM5fvw40dHRgDV4f/7552nfvj3Vq1cvdTujRo3C29sbZ2dnevfu
bR7nkCFD2LRpE9WqVSMtLY2cnBwqVKhQYuTpo48+So0aNXB1daVv377mup999hkPPPAAjRo1ws7O
jsmTJ+Pu7n5dxzV8+HBq165NhQoV6Nevn7nNxYsX079/f9q1awfAAw88QJs2ba5rmyIiIn+G5sAS
EZF/lA8//BCAjz76iIceesh8fvv27axduxYXFxcefvhhfHx8AJg+fTp9+vThk08+oXXr1gwYMICs
rCzmzZvH6dOnCQ4OZujQoZQrVw6wziPz+eefs2/fPgoLC811iufKiY2NZc6cORQWFnLffff9Zq8x
MTEsXryY8+fP06RJEwYNGoSzs7N5DDNmzDB/JEZFRbFp0yYSEhKoU6cOQ4cOxd3dnYKCAt5++23C
wsL4+OOPCQ4OZsuWLZw/f57XXnuNsWPH4uzszKFDh1i9ejUXLlzgrrvuokuXLmYf6enpzJkzh5SU
FMLCwn6z58LCQlavXs2BAwcoKiqibdu29O/fn/z8fObNm4dhGLz22msMHz78mj/ERW4mX19f8375
8uVLBL+1atUy758+fRo7O7sS3wsAdevWJSEhgVq1avHWW2/xxRdfcP78eUJCQsjLy8NisZgTxV+5
r7p1615Xf8VBUp06dcznXF1dqVGjBmfOnMHb2xsXFxc8PDxu+DinTJnC119/TX5+PqGhoRiGYZ76
CJT4LLq6unLp0iXAOldXixYtzGWOjo74+fld13Fda5uJiYk0bNiwRK2/v/91bVNEROTP0AgsERH5
x9u+fTvPPPMMVatWZevWrXTs2NH8sfW///u/DBw4kKNHj3Ls2DFSU1Np3rw5u3fvJiAggCVLltCt
Wzfzx+KwYcN46aWX8Pb2xs3Njccff5ypU6cC1iuPtWzZkpMnT1KtWjUeeOCBa54GGBcXR2hoKBaL
hXr16vHee+/x8MMPl1q7Zs0aunXrRkFBAYGBgaxYsYI77rgDwzDIz89n8uTJ3HfffRw7dsycV+dK
X375JZ06daKwsBAPDw/Cw8N58803Aeuk0aGhoWzZsgVfX1+eeuopDh48eM3XcvDgwUyfPh0fHx8q
VarEqFGjmD59+vW/GSI3WWkTrRdzcHAw73t5eWEYBrt27eLEiROcOHGCY8eOsW3bNgIDA3nxxRfZ
tGkTX3zxBefOnWPdunXY2dlRVFSEp6cnQIlRTWlpadfVX3HwdOWpeYWFhaSkpJijna7s848e51NP
PcXRo0fZuHEjKSkpLF26lEuXLl3XCM7q1atfdXXD6z2ua/Hz8yM2NrbEc79+LCIi8lfQCCwREflH
eeSRR4iIiODhhx+mfv36gHW0wpYtWyhXrhwjR46kevXqHD9+nKCgIMAayvznP/8BYMKECTRs2JAl
S5YAMGbMGBo2bMjy5cu59957cXBwYPny5QQEBADWSZA3b94MwDvvvEPr1q1ZsGABAD179qRx48al
9rl//35cXFyYMGECFStWpHv37nz77bfmMbz00kuMHTuWatWqsW7dOt577z2GDBkCQI8ePQgMDCQt
LQ0nJyfAenpR8fxTa9euZcuWLUyaNAmAsWPH8uqrr5oBWbdu3ejQoQMjRoxg6dKlWCwW1q5di4OD
A+Hh4dccLXHx4kWcnZ1ZtWqVOUojPz+f7777jokTJxIeHs6sWbPM/YrcbJUqVSIjI+OG1q1Tp445
ofm7776LnZ0db731Fu+88w6nT58mJiaGli1b0qRJE8AaHGdmZpKXl0edOnVo2bIl06dP591336Wg
oIDIyMjr2m+1atXo2LEjr776Kh999BH29va89dZbuLq60qFDB6Kiom7oeIrFxMQQEhJCgwYNAFiw
YAFFRUXXNedU//79iYiI4Omnn8bHx4dVq1YRFxf3p/oZOnQod9xxhzk5/bJly9izZ8/vju4UERH5
sxRgiYjIP15wcLB5CqCnpydOTk5kZ2eby9u2bWve37t3L7m5uebEzmCdnyY6OprBgwczd+5cvv76
a5YsWcKBAwfYuXOneSpRVFQUd999t7lew4YNS5z2c6XbbruNSpUq4efnR/fu3QkLCzMDql97/PHH
+fHHH5k5cyYHDhwwf/Dm5eWZAdaVx3CltLQ0Tp48yTfffFPih3JeXh5Hjx4lKiqKDh06mCNAqlSp
QuvWrUvdlrOzM5988gnr169n3rx57N+/n507dxIcHFxqvcjN1q5dO5588kkqV678h0cK2dvbs3Dh
QgYNGmRera94xJKTkxOPP/44YWFhdOjQAYvFgq+vL126dOHUqVOANRjq27cv3377LTk5OTRr1uy6
9z137lwGDhxIvXr1cHV1JSMjg1WrVuHi4vKHjqE048ePZ+jQoURHR5Obm0twcDCtWrUy+/4t999/
Pzt27CA4OJiAgAAKCwvNcP5GtWnThldeeYV+/fpx8eJFOnToQOPGjc3vKhERkb+KAiwREfnHc3V1
/c3lVapUMe/n5eVRu3ZtWrVqZT7XqlUrGjRoQH5+PnfccQc5OTn07duX8PBwGjZsyJYtWwBr0GVv
X/Ls+woVKpS6Tzc3N3NeqzVr1vDEE08wdepU9uzZc1XtK6+8wuuvv86AAQO47bbbeOCBB0rMYfXr
Y7hS8SiMFi1alJhjp1WrVvj4+Pyhni9cuEDHjh0pKiqiT58+jBw5koCAAPbt21dqvcjN1rJlS9LT
00lJScHR0ZGYmJgSn+9hw4aZc8+Fh4dz//33l1i/adOmHDlyhJMnT5Kbm0vDhg3NYKVTp06cOXOG
X375BV9fX7y8vLh48aJ5Kl7jxo05duwYR44cwdfXFzc3N3Jzc0vts127dpw9e9Z8HBgYyL59+zh5
8iQ5OTk0btwYR0fr/2aHhoaWqC1NXFwcFStWNB+PHj2a4cOHA9CvXz/Onj3LiRMnqFOnDtWqVePC
hQtm7aFDh0oEZffffz/9+/cHrKclzpo1i2eeeYbz58/TqFEjcnJycHZ2BuCHH34wvw82b95svlab
Nm2ifPny5ja7du3Kzz//DMDJkyfp0aMH48aNIy8vjwoVKtC4cWPNiSciIn85BVgiIvKPUjyS6MoJ
jP+I4OBg0tPTGTVqlPnc5MmTqVOnDrt372bv3r1kZWWZPyZXrFhhXlq+efPm7Ny501wvOTm5xBXR
rvT111+zb98+nnnmGXr16sX06dNxd3fn0KFD1K5du8QxzJgxg7feesv8wbp+/XrAGk6VFlw5ODiY
69asWRN3d3f8/PzMEV5JSUlMmjSJ/v3707x5cyIjI80gq6CggAMHDtC9e/ertrt9+3aOHDlCVlaW
+aP2008/NY/fwcEBwzAwDOM35yUS+TNcXV3NCdHd3NxKLHNycjJDlivvX8ne3p569eqVuu0qVaqU
CK+Lg5xi5cqVo3nz5iXqS+Po6HhVb3Z2dqWObiqt9td+6zgBqlatWmLk5JWB1a97LF++fInwCSgx
cXvlypV/936lSpVKrF+uXDlzP0ePHmXkyJF8/vnn1KlTh7lz53L27NmrQncREZGbTQGWiIj8o5Qv
X56qVavy+uuv8+STT/7h9SdPnkzLli0ZN24c3bt3Z8OGDSxevJhHHnkEwzBwdHRk5syZdOzYkU2b
NvH111+bP9zGjx9Pq1atmDhxIqGhobzzzjvXnJzZ29ubadOmAdZRJevXr8fb25umTZvi5OSEg4MD
L7zwAuPGjSMgIIBly5ZRr149zp49yxtvvIGjoyM5OTl4eXldte0aNWqQnJzMCy+8wPjx45k2bRpP
Pvkk58+fx8/Pj1dffRVXV1dzQve3336b8PBwBgwYwIIFC645x1Dt2rWxWCzMmjWLtm3bsmHDBrZs
2YK3t7e5X4vFwuTJkxk7dqx5pUcRuXX07t2biRMn8vDDD5OamkpQUBBff/21+T0hIiLyV9FVCEVE
5B/n008/BaxX/WrVqhV33XVXieUjRowwT2cZOXKkeYUxgHr16nHw4EEcHR2JjIzEzs6O3bt3U7t2
berUqcNXX33FwYMHmTlzJjVr1uSHH36gU6dOXLx4kYCAAHbv3k1WVhZLly5l3LhxTJo0qdTL0jdt
2pSNGzdy4sQJ3nvvPQB27tyJq6srjo6OLFmyhNzcXJKTk/nss88IDAzkzTff5MiRI2zYsIFnn32W
nJwcypUrx6hRo0qMjmjRogWvv/46p06dIiMjgzFjxrBo0SIOHDjAJ598QlhYGGvWrAGsoyp27tyJ
h4cH8+fP58477+SNN94odV6rBg0asG7dOvbu3cv7779P3bp12bVrFyEhIRQWFuLl5cXcuXNJTk4m
NTX1T76LIvJPFRERwcGDB0lISGDjxo2EhoaWdUsiInILsDMMwyjrJkRE5O+xY8cOBg4cSHx8fFm3
IiIiYtOysrJwc3MjPT2dqlWrlnU7IiK3PI3AEhERERERERERm6YAS0REREQEyMjIYODAgWRlZf3h
dS0WCz/99NNf0JWIiIiAAiwREREREcB65c/ly5eTl5f3h9d99tlneffdd/+CrkRERAQUYImIiIjI
P1hmZiYpKSmlLissLCQuLg6LxVLq8qSkpD98QQKLxUJ8fDxFRUUlnr/eUVuJiYmkp6ebj9PS0q7Z
Q2pqKjk5OaUuS0hIIDs7+6rnL126RGxsLAUFBaWul5GRcc3XKzMz8zdfj6ysrGtexVREROSvpgBL
RERERP5x8vLyCAsLIzAwkJCQEHx8fNi4cSMAhmHw3//+l6pVqxIaGkq1atX46KOPzHVjYmJo06YN
wcHBBAUF0a1bt6sCKMMweOKJJwgKCiIxMRGAjz/+GE9PTzp27IiHh4d5hdH33nuPOXPmMG/ePLp2
7XpVr+vWraNt27YMHDiQRo0aUaNGDV599VXGjRtH/fr18fLyYvTo0Wb9kSNHaNGiBU2bNqVWrVrc
e++9ZGZmAnD8+HEaNGhAhw4dqFevHu3atTP7++KLL/Dx8aFr1654e3szePBgM2hbv349derUoUWL
FjRu3Bh/f39++OEHAIqKinjsscfw8fGhWbNm3HXXXbRo0YIlS5YAEB8fT9euXQkICKBBgwZ06tSJ
2NjYP/8mioiI/AEKsERERGzIggUL+Oyzz254/WeffZb9+/ffxI5EbNOqVas4deoUiYmJnDhxgnHj
xjFr1iwAPvzwQ2bPns3+/fs5e/YsX331FWPHjmX79u0APPDAAzRt2pTk5GRzhNYLL7xQYvvjx49n
27ZtbN26FW9vb3bt2kVERAQbN27k1KlT7Nmzh6lTp/Ldd9/xxBNPMGLECMLDw9m0aVOp/e7du5c7
77yT9PR05s6dy3/+8x8qVKhAamoq33//PbNnzyYuLo6CggL+53/+h7CwMOLj40lMTKSoqIhJkyYB
8NJLL9GrVy9OnTpFfHw8np6erFq1yuz5gw8+4Pjx4xw/fpz9+/cTFRVFYWEhQ4cO5bnnnuP06dMk
JSUREhLCa6+9BsD8+fP5/PPPOXbsGPHx8fTt25cDBw6YvQ8fPhx/f3+SkpJITk6mSZMmPPTQQzf3
DRUREfkdjmXdgIiIiFwWGRnJgw8+eMPrv/nmm/Tp0+cmdiRim7y8vIiJieHll1/mnnvuYeLEieay
5cuXM3LkSAIDAwEICQmhf//+LF26FH9/f/bu3cvy5ctxcHDAwcGBxYsXYxiGuf7EiRNZt24dx48f
p1q1agAsWrSITp06UaVKFU6ePImjoyNdu3bls88+44477vjdfh0cHAgPD8fe3p727dtjGAaPPvoo
dnZ2tGvXDkdHRxITEzl79iwnTpxg8ODBnDp1CoBBgwYxZswYIiMj8fLyYuXKlTRq1IhevXqxbt06
cx81atRgxowZWCwWunfvzs8//2wuO3z4MB4eHuTm5nLw4EEcHBxISEgAYNmyZYwYMQI/Pz8AHnvs
MV5++WUAkpOT+fbbb9m8eTNnz54FYPDgwXTs2JHU1FQ8PDz++JsnIiJyAxRgiYjIv8quXbtYsmQJ
eXl5tGzZkvDwcCpUqABAeno6H3zwAb/88guNGzdmzJgxuLq6AvDyyy/To0cP5syZQ2BgIKmpqQwf
PpyAgADAejrRlClTGDJkCPXq1ePUqVPMmTOHpKQk2rZty4gRI3BwcKCgoIDnnnuO++67j/fff59u
3boxcODAEj1mZGQQGRnJsWPHqFWrFoMHDyYoKIilS5dy5swZ1qxZg5eXF/379yc2NpbFixfz888/
4+7uTt++fbn99tsBmDt3LkFBQaxatYpy5cpRpUoVLl26xPvvv49hGLRv377EfufNm0etWrXo0qUL
AHFxccyaNYuXX36Z1NRUZs6cyYABA5gxYwYODg4MHz6cNm3a/KXvl8iN6tq1Kx9++CGRkZG88MIL
1K5d2/yMpqammmFMsVq1anHkyBGSk5MB8PHxMZfVqFEDwDwV78iRIxiGwYYNG3jggQcAOHv2LFFR
UVd9njt06HBd/VavXp1y5coB1jALoEqVKgDY29vj4OCAYRjExsZib29v7rdYvXr1yM7OZurUqZQr
V47XX3+dRx55hPbt2zNr1iyaNWvGsmXL+O9//8uYMWPIzs6mT58+zJo1C09PTzZt2sS0adOIjY2l
VatWGIZhhnYpKSnmawBgZ2dnvj7FodWECRNK9NOqVSvOnTunAEtERP42OoVQRET+NQ4cOECfPn2o
X78+t912G5GRkURERADWiZKbNWvGiRMn6NKlC3v27CEkJIT8/HwAZs2axeDBg0lLSyM9PZ2DBw8y
e/Zsc9s7d+7k3XffxcfHh8OHD9O6dWsKCgq47bbbWLRoEf379wegoKCA1157jWHDhpGbm2vOW3Ol
/v37c/jwYXr27Mn58+dp3749WVlZVK9enQoVKuDh4YGHhwfJycm0bNmS2NhY7rzzThwcHOjcuTNR
UVGAdZTJ4MGD+fnnn0lMTKR27drmD8/KlStftd+VK1eyc+dO83FSUhLTp08HrKHaK6+8wn333UfH
jh3NoOv777+/Se+OyM2VlpbG7bffzo4dO4iPjyc8PJzw8HASEhLw8/MjPj6+RH1sbCyenp5mMJOU
lGQu27dvHwsWLDAfr1y5kjfeeIOxY8eaoZa3tzd33nknUVFR5n8rV67k2Wefva5+i0Or3+Pt7Y29
vT27du0y97NlyxYWLVpExYoVSUhI4KmnniImJob9+/dTvXp1hg0bRlFREenp6cyePZukpCTWr1/P
Tz/9xJQpU4iJiWHIkCG8+OKLpKens3XrVkJDQ7l06RIA/v7+5mgvsM6JVRxceXt7m69JcT87d+5k
/vz51K9f/7qOSURE5KYwRETklvH9998bNWvWLOs2/jJz5swxGjdubOTk5BiGYRjHjh0zVq1aZRiG
YUyaNMno3r27WWuxWIzmzZsbkZGRhmEYho+Pj/H000+by1etWmX4+fkZRUVFhmEYxujRo43Ro0cb
hmEYYWFhxtixY83a3Nxcw93d3di6dauRnZ1tAMbHH39cao8Wi8VwcXEx1q5daz73ySefGElJSYZh
GEZoaKgxa9YswzAMIzo62njmmWdKrN+6dWtj5syZhmEYRo8ePYwePXqUWF6hQgVj9+7dpe67d+/e
xtSpU83He/fuNRwdHQ3DMIzjx48bgLFp0yZzeUREhHH33XeXui2RsjZ9+nSjadOmRnZ2tmEYhrFr
1y7D0dHROHfunPHee+8Z3t7exqlTpwzDMIx9+/YZzs7Oxrp16wyLxWK0a9fOGDt2rGGxWIyCggKj
Z8+extixY42EhAQDMJKSkgyLxWJ07drV6Nu3r2EYhvHNN98Yzs7ORnR0tGEYhpGYmGj4+fkZ77zz
jmEY1u+Yfv36md8ZV1q7dq3h6+trPj558qQBGBkZGeZzTk5Oxp49e4wLFy4Y/v7+xrPPPmtYLBaj
qKjIGD58uNGmTRvDMAyja9euxqOPPmpYLBbDMAxjypQpRrt27Yy8vDyjSpUqxsKFCw3DMIyioiLj
rrvuMiIiIowtW7YYDg4ORnJysmEYhpGcnGwEBgYazZo1M/tzd3c3du/ebeTn5xvPP/+8ARiLFy82
LBaLERISYgwdOtQoLCw0DMMwXnjhBaNmzZpGfn7+TXgnbVdmZqYBGOnp6WXdioiIGIahUwhFRORf
o1evXkyfPh0vLy+6detGWFgYAwYMAGD//v3ExsaWOP0nIyOjxETFLVu2NO/37t2bRx55hO+++47Q
0FCWLVvGV199BVhHayQkJFx1KtGBAwdo1arVVdu6kp2dHREREfTp04dmzZrRt29f7rvvPry8vK6q
bdmyJZ6ensycOZNDhw6xb98+fvzxR3PU2G/t50Y4OjqapycChIaGsnjx4pu2fZGb6bHHHuO7777D
z88PPz8/YmNjmTFjBh4eHjz66KPExsbSpEkTfH19SUpKYsqUKfTq1QuwTlo+ePBg/P39KSwspGnT
pkybNo2cnBxz+3Z2dsyePZumTZvy6aefMmTIEKZNm0anTp3w9fUlPj6eQYMG8fjjjwPQuXNn3n77
berUqcOZM2du+LicnZ1Zvnw5Q4YMYf78+VgsFqpVq8aKFSsAePfdd+nXrx/+/v5UqFCB/Px8li9f
jpOTE3PmzGH06NFMmzaNrKwsateuzaRJk3B3d6dnz540btyYevXqkZ+fz7Bhw3jzzTcpKCigd+/e
PP300wwYMICsrCwefPBBvLy8cHJyws7OjgULFjBkyBB8fHyoWLEihmGwYsUKypcv/yfeQRERkT/G
zjCumLFSRET+1Xbs2MHAgQOvOrXm36SwsJDvvvuO1atXs2rVKry8vNi7dy/du3enevXq3HvvvSXq
/fz8aN++Pb6+vnz44Yf07t3bXBYREcH58+fp2bMnzz77LEePHgWsc+cMGjSIkJCQEtsKCgrC39+f
SpUqcfz4cXMC6dKcPHmSNWvWsHLlSqKjo1mzZg09evSgQ4cOPPjgg4wZM4Y9e/bQpUsXwsLC6Ny5
M6GhoQwfPpxBgwYRERHB3Xffze23384zzzxjbtfZ2ZmtW7fSrl27q/bZp08fWrduzfPPPw/Atm3b
6Nq1K4WFhcTExBAcHMzFixext7fOMLBs2TIiIiKIi4v7g++CyN/n3LlzpKWlUatWLVxcXEosy8/P
58yZM/j5+eHs7HzVugkJCdjb25eY/+n3XLp0idOnT+Ph4YGbm1uJZQUFBeTm5lK1atUbO5hfiY+P
x2Kx4OvrNY8yTQAABchJREFUi52dnfl8UVERCQkJ5OXlERAQYH5mi3s4c+YMLi4uJeb5AuvxFm/v
Svv27aNixYrmKYGXLl2iatWqfP3114SGhpp1qampZGdn4+fnh6Pjv//fwbOysnBzcyM9Pf2mvaci
InLj/v1/84iIyC1j0aJFxMXFMWnSJLp168bTTz9N3bp1iY2NpVmzZhw8eNAckQUwbtw4OnfufM3t
DR8+nC5dupCRkUF4eLj5fLNmzcjLyzO3VVhYyLBhw/D39//dHlNSUhg9ejQLFiwgIiKCiIgIevXq
xTfffEOPHj1wdHTEYrEAsHDhQrp06cKiRYsAyMvL4/jx4+Tl5V1z+1eu/2suLi6kpaWZjw8fPlxi
eUFBAXv37jXDr23bttG2bdvfPSaRsuTp6Ymnp2epy5ycnH5znqaaNWv+4f05OjpSr169UpeVL1/+
po5K+nUAVczBweGqSeqv7OFa4fm1jjc6OprXXnuN+fPnU61aNT744AM8PDxo3bp1ibri+flERETK
ggIsERH516hbty6jRo2isLCQwMBAVqxYQfPmzfH392fixIk0b96cBx98kJ49e7J582Y+//xzxo8f
f83tNWnShNq1a7N27VpmzpxpPv/iiy/SpUsXnJycaNOmDUuWLOGXX34hKCjod3v09PQkMTGRe++9
l/DwcJKTk/n+++/NK3x5e3szf/583N3dCQ4OZsmSJXz66ae4uLgQGRmJs7NzidOcfq1mzZq8/PLL
TJgwocTpgGC9atuECROoU6cOmZmZrFmz5qr1hw8fzlNPPcWJEydYuHAhW7Zs+d1jEpF/thEjRpCW
lkZERATZ2dm0bNmSzZs36xRBERGxKQqwRETkXyMkJITNmzezZMkSjh49SvPmzZk9ezYODg54e3tz
6NAhIiMj2bBhA35+fkRFRZmjph599NFSR1W8/PLL/Pzzz+aVuABat27Nvn37mDt3Lhs2bCAkJIR5
8+ZRsWJFCgoKmDRp0jVPN7Gzs2PDhg3Mnj2b9evXU7lyZb766is6dOgAwKuvvsqHH35IZmYmo0eP
xtHRkW+//ZYaNWrw+uuvk5aWxunTpwEYMGAAdevWLbH9BQsWsHTpUrKzs6/a96hRo3B1dWXjxo14
e3vzxRdfEBkZWaJm9uzZLFmyBAcHB3bu3HldoZyI/LPZ29szefJkJk+eXNatiIiIXJPmwBIRuYXc
CnNgyY2JiYmhfv365OTk4OrqWtbtiIiUOc2BJSJiW+x/v0RERERERERERKTsKMASERERatWqRVRU
VKlXahMRERERKWuaA0tERERwcnKiVatWZd2GiIiIiEipNAJLRERERERERERsmgIsERERERERERGx
aQqwRERERERERETEpinAEhERERERERERm6YAS0REREREREREbJoCLBERERERERERsWkKsERERERE
RERExKYpwBIREREREREREZumAEtERERERERERGyaAiwREREREREREbFpCrBERERERERERMSmKcAS
ERERERERERGbpgBLRERERERERERsmgIsERERERERERGxaQqwRERERERERETEpinAEhERERERERER
m6YAS0REREREREREbJpjWTcgIiJ/r4KCArZt21bWbYiIiNi03Nzcsm5BRESuoABLROQW4uTkhLOz
Mw8++GBZtyIiImLz/Pz8sLfXSSsiIrbAzjAMo6ybEBERERERERERuRb9c4KIiIiIiIiIiNg0BVgi
IiIiIiIiImLTFGCJiIiIiIiIiIhNU4AlIiIiIiIiIiI2TQGWiIiIiIiIiIjYNAVYIiIiIiIiIiJi
0xRgiYiIiIiIiIiITVOAJSIiIiIiIiIiNk0BloiIiIiIiIiI2DQFWCIiIiIiIiIiYtMUYImIiIiI
iIiIiE1TgCUiIiIiIiIiIjZNAZaIiIiIiIiIiNg0BVgiIiIiIiIiImLTFGCJiIiIiIiIiIhNU4Al
IiIiIiIiIiI27f8AhMRDJQebPhwAAAAASUVORK5CYII=
------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr----
Content-Type: text/html
Content-ID: <frame-82-b4a152d3-7d65-411b-8191-91ac0deaf3a8@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--G4ZqV4aiH6GgdbZCxgXqwMu4E3uszxIyh0qVbQw0Xr------
