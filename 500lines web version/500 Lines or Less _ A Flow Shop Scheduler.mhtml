From: <Saved by Blink>
Subject: 500 Lines or Less | A Flow Shop Scheduler
Date: Tue, 11 Feb 2019 01:53:33 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----"

------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: text/html
Content-ID: <frame-60-70558611-691e-46cb-8d7f-ff81877f61e5@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/a-flow-shop-scheduler.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0">
    <meta name=3D"provenance" content=3D"$Id: index.html 1472 2012-09-21 22=
:17:41Z audrey $">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
bootstrap-responsive.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
code.css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://aosabook.org/en/500L/theme/css/=
500L.css" type=3D"text/css">
    <title>500 Lines or Less | A Flow Shop Scheduler</title>
   =20
   =20
<style type=3D"text/css">.MathJax_Hover_Frame {border-radius: .25em; -webki=
t-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .2=
5em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; =
-moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; b=
order: 1px solid #A6D ! important; display: inline-block; position: absolut=
e}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: poin=
ter; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -we=
bkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px=
; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-=
color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding=
: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!=
important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type=3D"text/css">#MathJax_About {position: fixed; left: 50%=
; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; ba=
ckground-color: #DDDDDD; color: black; cursor: default; font-family: messag=
e-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform:=
 none; line-height: normal; letter-spacing: normal; word-spacing: normal; w=
ord-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-ra=
dius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-b=
order-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: =
0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-s=
hadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dro=
pshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; w=
idth: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: def=
ault; font: menu; text-align: left; text-indent: 0; text-transform: none; l=
ine-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap=
: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 1=
0px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shado=
w: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter:=
 progid:DXImageTransform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'=
gray', Positive=3D'true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; co=
lor: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E=
8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-bl=
ock; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18=
px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Cou=
rier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.=
5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-ra=
dius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!im=
portant}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type=3D"text/css">.MathJax_Preview .MJXf-math {color: inheri=
t!important}
</style><style type=3D"text/css">.MJX_Assistive_MathML {position: absolute!=
important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 =
0 0!important; border: 0!important; height: 1px!important; width: 1px!impor=
tant; overflow: hidden!important; display: block!important; -webkit-touch-c=
allout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-use=
r-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type=3D"text/css">#MathJax_Zoom {position: absolute; backgro=
und-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: =
.5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: =
normal; text-align: left; text-indent: 0; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; =
white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box=
-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AA=
AAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15=
px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImage=
Transform.Microsoft.dropshadow(OffX=3D2, OffY=3D2, Color=3D'gray', Positive=
=3D'true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; di=
splay: inline-block; width: 100%; height: 100%; border: 0; padding: 0; marg=
in: 0; background-color: white; opacity: 0; filter: alpha(opacity=3D0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; w=
idth: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; =
display: inline-block; border: 0; padding: 0; margin: 0; background-color: =
white; opacity: 0; filter: alpha(opacity=3D0)}
</style><style type=3D"text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-col=
or: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-in=
dex: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-ind=
ex: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type=3D"text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right;=
 -ms-transform-origin: right; -o-transform-origin: right; transform-origin:=
 right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,=
serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGenera=
l,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGen=
eral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-f=
amily: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; bord=
er-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: to=
p}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em=
 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid =
#CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -m=
s-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -m=
s-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -m=
s-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -m=
s-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -m=
s-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -m=
s-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -m=
s-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -m=
s-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -m=
s-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -m=
s-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left=
; color: black; padding: 1px 3px; border: 1px solid}
</style><style type=3D"text/css">.MathJax_Display {text-align: center; marg=
in: 1em 0em; position: relative; display: block!important; text-indent: 0; =
max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%=
}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px so=
lid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border=
: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px=
 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: =
2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(O=
ffX=3D2, OffY=3D2, Color=3D'gray', Positive=3D'true'); padding: 3px 4px; z-=
index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto;=
 display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-he=
ight: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text=
-align: left; text-transform: none; letter-spacing: normal; word-spacing: n=
ormal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr;=
 max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0;=
 padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax.MathJax_FullWidth {text-align: center; display: table-cell!importa=
nt; width: 10000em!important}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; =
max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-al=
ign: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!imp=
ortant; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; ma=
rgin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: no=
ne; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height:=
 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; hei=
ght: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width:=
 1px; height: 60em; min-height: 0; max-height: none}
.MathJax_LineBox {display: table!important}
.MathJax_LineBox span {display: table-cell!important; width: 10000em!import=
ant; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filt=
er: alpha(opacity=3D0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transpare=
nt}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Main; src: url('https://cdnjs.cloudflare.c=
om/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.wof=
f?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs/m=
athjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?V=3D2.7.1') fo=
rmat('opentype')}
@font-face {font-family: MathJax_Main-bold; src: url('https://cdnjs.cloudfl=
are.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?V=3D2.7.1') for=
mat('opentype')}
@font-face {font-family: MathJax_Main-italic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Ital=
ic.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/=
libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?V=3D2.7.1=
') format('opentype')}
@font-face {font-family: MathJax_Math-italic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Ital=
ic.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/=
libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?V=3D2.7.1=
') format('opentype')}
@font-face {font-family: MathJax_Caligraphic; src: url('https://cdnjs.cloud=
flare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Caligraph=
ic-Regular.woff?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.c=
om/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regul=
ar.otf?V=3D2.7.1') format('opentype')}
@font-face {font-family: MathJax_Size1; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size2; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size3; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?V=3D2.7.1')=
 format('opentype')}
@font-face {font-family: MathJax_Size4; src: url('https://cdnjs.cloudflare.=
com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.w=
off?V=3D2.7.1') format('woff'), url('https://cdnjs.cloudflare.com/ajax/libs=
/mathjax/2.7.1/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?V=3D2.7.1')=
 format('opentype')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; colo=
r: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body><div style=3D"visibility: hidden; overflow: hidden; position: absol=
ute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin:=
 0px; text-align: left; text-indent: 0px; text-transform: none; line-height=
: normal; letter-spacing: normal; word-spacing: normal;"><div id=3D"MathJax=
_Hidden"></div></div><div id=3D"MathJax_Message" style=3D"display: none;"><=
/div>
    <div class=3D"container">
      <div class=3D"row">
        <div class=3D"hero-unit">
	  <a class=3D"pull-right" href=3D"http://aosabook.org/en/index.html"></a>
          <h1>A Flow Shop Scheduler</h1>
          <h2 class=3D"author">Dr. Christian Muise</h2>
          <blockquote class=3D"pull-right">
            </blockquote>

        </div>
      </div>
      <div class=3D"row">
        <div class=3D"span10 offset1" id=3D"content">
          <p><em><a href=3D"http://haz.ca/">Dr. Christian Muise</a> is a Re=
search Fellow with the <a href=3D"http://groups.csail.mit.edu/mers/">MERS g=
roup</a> at <a href=3D"http://www.csail.mit.edu/">MIT's CSAIL</a>. He is in=
terested in a variety of topics including AI, data-driven projects, mapping=
, graph theory, and data visualization, as well as celtic music, carving, s=
occer, and coffee.</em></p>

<h2 id=3D"a-flow-shop-scheduler">A Flow Shop Scheduler</h2>

<p><em>Flow shop scheduling</em> is one of the most challenging and well-st=
udied problems in operations research. Like many challenging optimization p=
roblems, finding the best solution is just not possible for problems of a p=
ractical size. In this chapter we consider the implementation of a flow sho=
p scheduling solver that uses a technique called <em>local search</em>. Loc=
al search allows us to find a solution that is "pretty good" when finding t=
he best solution isn't possible. The solver will try and find new solutions=
 to the problem for a given amount of time, and finish by returning the bes=
t solution found.</p>

<p>The idea behind local search is to improve an existing solution heuristi=
cally by considering similar solutions that may be a little better. The sol=
ver uses a variety of strategies to (1) try and find similar solutions, and=
 (2) choose one that is promising to explore next. The implementation is wr=
itten in Python, and has no external requirements. By leveraging some of Py=
thon's lesser-known functionality, the solver dynamically changes its searc=
h strategy during the solving process based on which strategies work well.<=
/p>

<p>First, we provide some background material on the flow shop scheduling p=
roblem and local search techniques. We then look in detail at the general s=
olver code and the various heuristics and neighbourhood selection strategie=
s that we use. Next we consider the dynamic strategy selection that the sol=
ver uses to tie everything together. Finally, we conclude with a summary of=
 the project and some lessons learned through the implementation process.</=
p>

<h2 id=3D"background">Background</h2>

<h3 id=3D"flow-shop-scheduling">Flow Shop Scheduling</h3>

<p>The flow shop scheduling problem is an optimization problem in which we =
must determine the processing time for various tasks in a job in order to s=
chedule the tasks to minimize the total time it takes to complete the job. =
Take, for example, a car manufacturer with an assembly line where each part=
 of the car is completed in sequence on different machines. Different order=
s may have custom requirements, making the task of painting the body, for e=
xample, vary from one car to the next. In our example, each car is a new <e=
m>job</em> and each part for the car is called a <em>task</em>. Every job w=
ill have the same sequence of tasks to complete.</p>

<p>The objective in flow shop scheduling is to minimize the total time it t=
akes to process all of the tasks from every job to completion. (Typically, =
this total time is referred to as the <em>makespan</em>.) This problem has =
many applications, but is most related to optimizing production facilities.=
</p>

<p>Every flow shop problem consists of <span class=3D"math"><span class=3D"=
MathJax_Preview" style=3D"color: inherit; display: none;"></span><span clas=
s=3D"MathJax" id=3D"MathJax-Element-1-Frame" tabindex=3D"0" data-mathml=3D"=
<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>n</mi></ma=
th>" role=3D"presentation" style=3D"position: relative;"><nobr aria-hidden=
=3D"true"><span class=3D"math" id=3D"MathJax-Span-1" style=3D"width: 0.708e=
m; display: inline-block;"><span style=3D"display: inline-block; position: =
relative; width: 0.58em; height: 0px; font-size: 120%;"><span style=3D"posi=
tion: absolute; clip: rect(1.542em 1000.58em 2.375em -999.997em); top: -2.1=
76em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-2"><span class=3D=
"mi" id=3D"MathJax-Span-3" style=3D"font-family: MathJax_Math-italic;">n</s=
pan></span><span style=3D"display: inline-block; width: 0px; height: 2.183e=
m;"></span></span></span><span style=3D"display: inline-block; overflow: hi=
dden; vertical-align: -0.073em; border-left: 0px solid; width: 0px; height:=
 0.696em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" role=
=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>n<=
/mi></math></span></span></span> machines and <span class=3D"math"><span cl=
ass=3D"MathJax_Preview" style=3D"color: inherit; display: none;"></span><sp=
an class=3D"MathJax" id=3D"MathJax-Element-2-Frame" tabindex=3D"0" data-mat=
hml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>m</=
mi></math>" role=3D"presentation" style=3D"position: relative;"><nobr aria-=
hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-4" style=3D"width: =
1.093em; display: inline-block;"><span style=3D"display: inline-block; posi=
tion: relative; width: 0.901em; height: 0px; font-size: 120%;"><span style=
=3D"position: absolute; clip: rect(1.542em 1000.9em 2.375em -999.997em); to=
p: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-5"><span c=
lass=3D"mi" id=3D"MathJax-Span-6" style=3D"font-family: MathJax_Math-italic=
;">m</span></span><span style=3D"display: inline-block; width: 0px; height:=
 2.183em;"></span></span></span><span style=3D"display: inline-block; overf=
low: hidden; vertical-align: -0.073em; border-left: 0px solid; width: 0px; =
height: 0.696em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML"=
 role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><=
mi>m</mi></math></span></span></span> jobs. In our car example, there will =
be <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"color: inh=
erit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-Element-=
3-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.or=
g/1998/Math/MathML&quot;><mi>n</mi></math>" role=3D"presentation" style=3D"=
position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"=
MathJax-Span-7" style=3D"width: 0.708em; display: inline-block;"><span styl=
e=3D"display: inline-block; position: relative; width: 0.58em; height: 0px;=
 font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.542em 10=
00.58em 2.375em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow=
" id=3D"MathJax-Span-8"><span class=3D"mi" id=3D"MathJax-Span-9" style=3D"f=
ont-family: MathJax_Math-italic;">n</span></span><span style=3D"display: in=
line-block; width: 0px; height: 2.183em;"></span></span></span><span style=
=3D"display: inline-block; overflow: hidden; vertical-align: -0.073em; bord=
er-left: 0px solid; width: 0px; height: 0.696em;"></span></span></nobr><spa=
n class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http:=
//www.w3.org/1998/Math/MathML"><mi>n</mi></math></span></span></span> stati=
ons to work on the car and <span class=3D"math"><span class=3D"MathJax_Prev=
iew" style=3D"color: inherit; display: none;"></span><span class=3D"MathJax=
" id=3D"MathJax-Element-4-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=
=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>m</mi></math>" role=
=3D"presentation" style=3D"position: relative;"><nobr aria-hidden=3D"true">=
<span class=3D"math" id=3D"MathJax-Span-10" style=3D"width: 1.093em; displa=
y: inline-block;"><span style=3D"display: inline-block; position: relative;=
 width: 0.901em; height: 0px; font-size: 120%;"><span style=3D"position: ab=
solute; clip: rect(1.542em 1000.9em 2.375em -999.997em); top: -2.176em; lef=
t: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-11"><span class=3D"mi" id=
=3D"MathJax-Span-12" style=3D"font-family: MathJax_Math-italic;">m</span></=
span><span style=3D"display: inline-block; width: 0px; height: 2.183em;"></=
span></span></span><span style=3D"display: inline-block; overflow: hidden; =
vertical-align: -0.073em; border-left: 0px solid; width: 0px; height: 0.696=
em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"pres=
entation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>m</mi></ma=
th></span></span></span> cars to make in total. Each job is made up of exac=
tly <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"color: in=
herit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-Element=
-5-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.o=
rg/1998/Math/MathML&quot;><mi>n</mi></math>" role=3D"presentation" style=3D=
"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D=
"MathJax-Span-13" style=3D"width: 0.708em; display: inline-block;"><span st=
yle=3D"display: inline-block; position: relative; width: 0.58em; height: 0p=
x; font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.542em =
1000.58em 2.375em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mr=
ow" id=3D"MathJax-Span-14"><span class=3D"mi" id=3D"MathJax-Span-15" style=
=3D"font-family: MathJax_Math-italic;">n</span></span><span style=3D"displa=
y: inline-block; width: 0px; height: 2.183em;"></span></span></span><span s=
tyle=3D"display: inline-block; overflow: hidden; vertical-align: -0.073em; =
border-left: 0px solid; width: 0px; height: 0.696em;"></span></span></nobr>=
<span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"h=
ttp://www.w3.org/1998/Math/MathML"><mi>n</mi></math></span></span></span> t=
asks, and we can assume that the <span class=3D"math"><span class=3D"MathJa=
x_Preview" style=3D"color: inherit; display: none;"></span><span class=3D"M=
athJax" id=3D"MathJax-Element-6-Frame" tabindex=3D"0" data-mathml=3D"<math =
xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>i</mi></math>" r=
ole=3D"presentation" style=3D"position: relative;"><nobr aria-hidden=3D"tru=
e"><span class=3D"math" id=3D"MathJax-Span-16" style=3D"width: 0.388em; dis=
play: inline-block;"><span style=3D"display: inline-block; position: relati=
ve; width: 0.324em; height: 0px; font-size: 120%;"><span style=3D"position:=
 absolute; clip: rect(1.349em 1000.26em 2.375em -999.997em); top: -2.176em;=
 left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-17"><span class=3D"mi"=
 id=3D"MathJax-Span-18" style=3D"font-family: MathJax_Math-italic;">i</span=
></span><span style=3D"display: inline-block; width: 0px; height: 2.183em;"=
></span></span></span><span style=3D"display: inline-block; overflow: hidde=
n; vertical-align: -0.073em; border-left: 0px solid; width: 0px; height: 0.=
927em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"p=
resentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>i</mi><=
/math></span></span></span>-th task of a job must use machine <span class=
=3D"math"><span class=3D"MathJax_Preview" style=3D"color: inherit; display:=
 none;"></span><span class=3D"MathJax" id=3D"MathJax-Element-7-Frame" tabin=
dex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/Ma=
thML&quot;><mi>i</mi></math>" role=3D"presentation" style=3D"position: rela=
tive;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-1=
9" style=3D"width: 0.388em; display: inline-block;"><span style=3D"display:=
 inline-block; position: relative; width: 0.324em; height: 0px; font-size: =
120%;"><span style=3D"position: absolute; clip: rect(1.349em 1000.26em 2.37=
5em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"Math=
Jax-Span-20"><span class=3D"mi" id=3D"MathJax-Span-21" style=3D"font-family=
: MathJax_Math-italic;">i</span></span><span style=3D"display: inline-block=
; width: 0px; height: 2.183em;"></span></span></span><span style=3D"display=
: inline-block; overflow: hidden; vertical-align: -0.073em; border-left: 0p=
x solid; width: 0px; height: 0.927em;"></span></span></nobr><span class=3D"=
MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.or=
g/1998/Math/MathML"><mi>i</mi></math></span></span></span> and requires a p=
redetermined amount of processing time: <span class=3D"math"><span class=3D=
"MathJax_Preview" style=3D"color: inherit; display: none;"></span><span cla=
ss=3D"MathJax" id=3D"MathJax-Element-8-Frame" tabindex=3D"0" data-mathml=3D=
"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>p</mi><mo=
 stretchy=3D&quot;false&quot;>(</mo><mi>j</mi><mo>,</mo><mi>i</mi><mo stret=
chy=3D&quot;false&quot;>)</mo></math>" role=3D"presentation" style=3D"posit=
ion: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJ=
ax-Span-22" style=3D"width: 3.016em; display: inline-block;"><span style=3D=
"display: inline-block; position: relative; width: 2.503em; height: 0px; fo=
nt-size: 120%;"><span style=3D"position: absolute; clip: rect(1.221em 1002.=
44em 2.631em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" i=
d=3D"MathJax-Span-23"><span class=3D"mi" id=3D"MathJax-Span-24" style=3D"fo=
nt-family: MathJax_Math-italic;">p</span><span class=3D"mo" id=3D"MathJax-S=
pan-25" style=3D"font-family: MathJax_Main;">(</span><span class=3D"mi" id=
=3D"MathJax-Span-26" style=3D"font-family: MathJax_Math-italic;">j</span><s=
pan class=3D"mo" id=3D"MathJax-Span-27" style=3D"font-family: MathJax_Main;=
">,</span><span class=3D"mi" id=3D"MathJax-Span-28" style=3D"font-family: M=
athJax_Math-italic; padding-left: 0.196em;">i</span><span class=3D"mo" id=
=3D"MathJax-Span-29" style=3D"font-family: MathJax_Main;">)</span></span><s=
pan style=3D"display: inline-block; width: 0px; height: 2.183em;"></span></=
span></span><span style=3D"display: inline-block; overflow: hidden; vertica=
l-align: -0.381em; border-left: 0px solid; width: 0px; height: 1.388em;"></=
span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentatio=
n"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo stretch=
y=3D"false">(</mo><mi>j</mi><mo>,</mo><mi>i</mi><mo stretchy=3D"false">)</m=
o></math></span></span></span> is the processing time for the <span class=
=3D"math"><span class=3D"MathJax_Preview" style=3D"color: inherit; display:=
 none;"></span><span class=3D"MathJax" id=3D"MathJax-Element-9-Frame" tabin=
dex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/Ma=
thML&quot;><mi>i</mi></math>" role=3D"presentation" style=3D"position: rela=
tive;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-3=
0" style=3D"width: 0.388em; display: inline-block;"><span style=3D"display:=
 inline-block; position: relative; width: 0.324em; height: 0px; font-size: =
120%;"><span style=3D"position: absolute; clip: rect(1.349em 1000.26em 2.37=
5em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"Math=
Jax-Span-31"><span class=3D"mi" id=3D"MathJax-Span-32" style=3D"font-family=
: MathJax_Math-italic;">i</span></span><span style=3D"display: inline-block=
; width: 0px; height: 2.183em;"></span></span></span><span style=3D"display=
: inline-block; overflow: hidden; vertical-align: -0.073em; border-left: 0p=
x solid; width: 0px; height: 0.927em;"></span></span></nobr><span class=3D"=
MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.or=
g/1998/Math/MathML"><mi>i</mi></math></span></span></span>th task of job <s=
pan class=3D"math"><span class=3D"MathJax_Preview" style=3D"color: inherit;=
 display: none;"></span><span class=3D"MathJax" id=3D"MathJax-Element-10-Fr=
ame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/19=
98/Math/MathML&quot;><mi>j</mi></math>" role=3D"presentation" style=3D"posi=
tion: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"Math=
Jax-Span-33" style=3D"width: 0.516em; display: inline-block;"><span style=
=3D"display: inline-block; position: relative; width: 0.388em; height: 0px;=
 font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.349em 10=
00.39em 2.567em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow=
" id=3D"MathJax-Span-34"><span class=3D"mi" id=3D"MathJax-Span-35" style=3D=
"font-family: MathJax_Math-italic;">j</span></span><span style=3D"display: =
inline-block; width: 0px; height: 2.183em;"></span></span></span><span styl=
e=3D"display: inline-block; overflow: hidden; vertical-align: -0.304em; bor=
der-left: 0px solid; width: 0px; height: 1.158em;"></span></span></nobr><sp=
an class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http=
://www.w3.org/1998/Math/MathML"><mi>j</mi></math></span></span></span>. Fur=
ther, the order of the tasks for any given job should follow the order of t=
he machines available; for a given job, task <span class=3D"math"><span cla=
ss=3D"MathJax_Preview" style=3D"color: inherit; display: none;"></span><spa=
n class=3D"MathJax" id=3D"MathJax-Element-11-Frame" tabindex=3D"0" data-mat=
hml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>i</=
mi></math>" role=3D"presentation" style=3D"position: relative;"><nobr aria-=
hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-36" style=3D"width:=
 0.388em; display: inline-block;"><span style=3D"display: inline-block; pos=
ition: relative; width: 0.324em; height: 0px; font-size: 120%;"><span style=
=3D"position: absolute; clip: rect(1.349em 1000.26em 2.375em -999.997em); t=
op: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-37"><span=
 class=3D"mi" id=3D"MathJax-Span-38" style=3D"font-family: MathJax_Math-ita=
lic;">i</span></span><span style=3D"display: inline-block; width: 0px; heig=
ht: 2.183em;"></span></span></span><span style=3D"display: inline-block; ov=
erflow: hidden; vertical-align: -0.073em; border-left: 0px solid; width: 0p=
x; height: 0.927em;"></span></span></nobr><span class=3D"MJX_Assistive_Math=
ML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML=
"><mi>i</mi></math></span></span></span> must be completed prior to the sta=
rt of task <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"co=
lor: inherit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-=
Element-12-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://=
www.w3.org/1998/Math/MathML&quot;><mi>i</mi><mo>+</mo><mn>1</mn></math>" ro=
le=3D"presentation" style=3D"position: relative;"><nobr aria-hidden=3D"true=
"><span class=3D"math" id=3D"MathJax-Span-39" style=3D"width: 2.439em; disp=
lay: inline-block;"><span style=3D"display: inline-block; position: relativ=
e; width: 1.99em; height: 0px; font-size: 120%;"><span style=3D"position: a=
bsolute; clip: rect(1.349em 1001.93em 2.439em -999.997em); top: -2.176em; l=
eft: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-40"><span class=3D"mi" i=
d=3D"MathJax-Span-41" style=3D"font-family: MathJax_Math-italic;">i</span><=
span class=3D"mo" id=3D"MathJax-Span-42" style=3D"font-family: MathJax_Main=
; padding-left: 0.196em;">+</span><span class=3D"mn" id=3D"MathJax-Span-43"=
 style=3D"font-family: MathJax_Main; padding-left: 0.196em;">1</span></span=
><span style=3D"display: inline-block; width: 0px; height: 2.183em;"></span=
></span></span><span style=3D"display: inline-block; overflow: hidden; vert=
ical-align: -0.15em; border-left: 0px solid; width: 0px; height: 1.081em;">=
</span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentat=
ion"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>+</mo=
><mn>1</mn></math></span></span></span>. In our car example, we wouldn't wa=
nt to start painting the car before the frame was assembled. The final rest=
riction is that no two tasks can be processed on a machine simultaneously.<=
/p>

<p>Because the order of tasks within a job is predetermined, a solution to =
the flow shop scheduling problem can be represented as a permutation of the=
 jobs. The order of jobs processed on a machine will be the same for every =
machine, and given a permutation, a task for machine <span class=3D"math"><=
span class=3D"MathJax_Preview" style=3D"color: inherit; display: none;"></s=
pan><span class=3D"MathJax" id=3D"MathJax-Element-13-Frame" tabindex=3D"0" =
data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;=
><mi>i</mi></math>" role=3D"presentation" style=3D"position: relative;"><no=
br aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-44" style=
=3D"width: 0.388em; display: inline-block;"><span style=3D"display: inline-=
block; position: relative; width: 0.324em; height: 0px; font-size: 120%;"><=
span style=3D"position: absolute; clip: rect(1.349em 1000.26em 2.375em -999=
.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span=
-45"><span class=3D"mi" id=3D"MathJax-Span-46" style=3D"font-family: MathJa=
x_Math-italic;">i</span></span><span style=3D"display: inline-block; width:=
 0px; height: 2.183em;"></span></span></span><span style=3D"display: inline=
-block; overflow: hidden; vertical-align: -0.073em; border-left: 0px solid;=
 width: 0px; height: 0.927em;"></span></span></nobr><span class=3D"MJX_Assi=
stive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/M=
ath/MathML"><mi>i</mi></math></span></span></span> in job <span class=3D"ma=
th"><span class=3D"MathJax_Preview" style=3D"color: inherit; display: none;=
"></span><span class=3D"MathJax" id=3D"MathJax-Element-14-Frame" tabindex=
=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathM=
L&quot;><mi>j</mi></math>" role=3D"presentation" style=3D"position: relativ=
e;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-47" =
style=3D"width: 0.516em; display: inline-block;"><span style=3D"display: in=
line-block; position: relative; width: 0.388em; height: 0px; font-size: 120=
%;"><span style=3D"position: absolute; clip: rect(1.349em 1000.39em 2.567em=
 -999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax=
-Span-48"><span class=3D"mi" id=3D"MathJax-Span-49" style=3D"font-family: M=
athJax_Math-italic;">j</span></span><span style=3D"display: inline-block; w=
idth: 0px; height: 2.183em;"></span></span></span><span style=3D"display: i=
nline-block; overflow: hidden; vertical-align: -0.304em; border-left: 0px s=
olid; width: 0px; height: 1.158em;"></span></span></nobr><span class=3D"MJX=
_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1=
998/Math/MathML"><mi>j</mi></math></span></span></span> is scheduled to be =
the latest of the following two possibilities:</p>

<ol style=3D"list-style-type: decimal">
<li><p>The completion of the task for machine <span class=3D"math"><span cl=
ass=3D"MathJax_Preview" style=3D"color: inherit; display: none;"></span><sp=
an class=3D"MathJax" id=3D"MathJax-Element-15-Frame" tabindex=3D"0" data-ma=
thml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>i<=
/mi></math>" role=3D"presentation" style=3D"position: relative;"><nobr aria=
-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-50" style=3D"width=
: 0.388em; display: inline-block;"><span style=3D"display: inline-block; po=
sition: relative; width: 0.324em; height: 0px; font-size: 120%;"><span styl=
e=3D"position: absolute; clip: rect(1.349em 1000.26em 2.375em -999.997em); =
top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-51"><spa=
n class=3D"mi" id=3D"MathJax-Span-52" style=3D"font-family: MathJax_Math-it=
alic;">i</span></span><span style=3D"display: inline-block; width: 0px; hei=
ght: 2.183em;"></span></span></span><span style=3D"display: inline-block; o=
verflow: hidden; vertical-align: -0.073em; border-left: 0px solid; width: 0=
px; height: 0.927em;"></span></span></nobr><span class=3D"MJX_Assistive_Mat=
hML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathM=
L"><mi>i</mi></math></span></span></span> in job <span class=3D"math"><span=
 class=3D"MathJax_Preview" style=3D"color: inherit; display: none;"></span>=
<span class=3D"MathJax" id=3D"MathJax-Element-16-Frame" tabindex=3D"0" data=
-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi=
>j</mi><mo>&amp;#x2212;</mo><mn>1</mn></math>" role=3D"presentation" style=
=3D"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=
=3D"MathJax-Span-53" style=3D"width: 2.503em; display: inline-block;"><span=
 style=3D"display: inline-block; position: relative; width: 2.054em; height=
: 0px; font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.34=
9em 1001.99em 2.567em -999.997em); top: -2.176em; left: 0em;"><span class=
=3D"mrow" id=3D"MathJax-Span-54"><span class=3D"mi" id=3D"MathJax-Span-55" =
style=3D"font-family: MathJax_Math-italic;">j</span><span class=3D"mo" id=
=3D"MathJax-Span-56" style=3D"font-family: MathJax_Main; padding-left: 0.19=
6em;">=E2=88=92</span><span class=3D"mn" id=3D"MathJax-Span-57" style=3D"fo=
nt-family: MathJax_Main; padding-left: 0.196em;">1</span></span><span style=
=3D"display: inline-block; width: 0px; height: 2.183em;"></span></span></sp=
an><span style=3D"display: inline-block; overflow: hidden; vertical-align: =
-0.304em; border-left: 0px solid; width: 0px; height: 1.235em;"></span></sp=
an></nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math =
xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>j</mi><mo>=E2=88=92</mo><m=
n>1</mn></math></span></span></span> (i.e., the most recent task on the sam=
e machine), or</p></li>
<li><p>The completion of the task for machine <span class=3D"math"><span cl=
ass=3D"MathJax_Preview" style=3D"color: inherit; display: none;"></span><sp=
an class=3D"MathJax" id=3D"MathJax-Element-17-Frame" tabindex=3D"0" data-ma=
thml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>i<=
/mi><mo>&amp;#x2212;</mo><mn>1</mn></math>" role=3D"presentation" style=3D"=
position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"=
MathJax-Span-58" style=3D"width: 2.439em; display: inline-block;"><span sty=
le=3D"display: inline-block; position: relative; width: 1.99em; height: 0px=
; font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.349em 1=
001.93em 2.439em -999.997em); top: -2.176em; left: 0em;"><span class=3D"mro=
w" id=3D"MathJax-Span-59"><span class=3D"mi" id=3D"MathJax-Span-60" style=
=3D"font-family: MathJax_Math-italic;">i</span><span class=3D"mo" id=3D"Mat=
hJax-Span-61" style=3D"font-family: MathJax_Main; padding-left: 0.196em;">=
=E2=88=92</span><span class=3D"mn" id=3D"MathJax-Span-62" style=3D"font-fam=
ily: MathJax_Main; padding-left: 0.196em;">1</span></span><span style=3D"di=
splay: inline-block; width: 0px; height: 2.183em;"></span></span></span><sp=
an style=3D"display: inline-block; overflow: hidden; vertical-align: -0.15e=
m; border-left: 0px solid; width: 0px; height: 1.081em;"></span></span></no=
br><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=
=3D"http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>=E2=88=92</mo><mn>1</=
mn></math></span></span></span> in job <span class=3D"math"><span class=3D"=
MathJax_Preview" style=3D"color: inherit; display: none;"></span><span clas=
s=3D"MathJax" id=3D"MathJax-Element-18-Frame" tabindex=3D"0" data-mathml=3D=
"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>j</mi></m=
ath>" role=3D"presentation" style=3D"position: relative;"><nobr aria-hidden=
=3D"true"><span class=3D"math" id=3D"MathJax-Span-63" style=3D"width: 0.516=
em; display: inline-block;"><span style=3D"display: inline-block; position:=
 relative; width: 0.388em; height: 0px; font-size: 120%;"><span style=3D"po=
sition: absolute; clip: rect(1.349em 1000.39em 2.567em -999.997em); top: -2=
.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-64"><span class=
=3D"mi" id=3D"MathJax-Span-65" style=3D"font-family: MathJax_Math-italic;">=
j</span></span><span style=3D"display: inline-block; width: 0px; height: 2.=
183em;"></span></span></span><span style=3D"display: inline-block; overflow=
: hidden; vertical-align: -0.304em; border-left: 0px solid; width: 0px; hei=
ght: 1.158em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" ro=
le=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>=
j</mi></math></span></span></span> (i.e., the most recent task on the same =
job)</p></li>
</ol>

<p>Because we select the maximum of these two values, idle time for either =
machine <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"color=
: inherit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-Ele=
ment-19-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www=
.w3.org/1998/Math/MathML&quot;><mi>i</mi></math>" role=3D"presentation" sty=
le=3D"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" =
id=3D"MathJax-Span-66" style=3D"width: 0.388em; display: inline-block;"><sp=
an style=3D"display: inline-block; position: relative; width: 0.324em; heig=
ht: 0px; font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.=
349em 1000.26em 2.375em -999.997em); top: -2.176em; left: 0em;"><span class=
=3D"mrow" id=3D"MathJax-Span-67"><span class=3D"mi" id=3D"MathJax-Span-68" =
style=3D"font-family: MathJax_Math-italic;">i</span></span><span style=3D"d=
isplay: inline-block; width: 0px; height: 2.183em;"></span></span></span><s=
pan style=3D"display: inline-block; overflow: hidden; vertical-align: -0.07=
3em; border-left: 0px solid; width: 0px; height: 0.927em;"></span></span></=
nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=
=3D"http://www.w3.org/1998/Math/MathML"><mi>i</mi></math></span></span></sp=
an> or job <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"co=
lor: inherit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-=
Element-20-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://=
www.w3.org/1998/Math/MathML&quot;><mi>j</mi></math>" role=3D"presentation" =
style=3D"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"mat=
h" id=3D"MathJax-Span-69" style=3D"width: 0.516em; display: inline-block;">=
<span style=3D"display: inline-block; position: relative; width: 0.388em; h=
eight: 0px; font-size: 120%;"><span style=3D"position: absolute; clip: rect=
(1.349em 1000.39em 2.567em -999.997em); top: -2.176em; left: 0em;"><span cl=
ass=3D"mrow" id=3D"MathJax-Span-70"><span class=3D"mi" id=3D"MathJax-Span-7=
1" style=3D"font-family: MathJax_Math-italic;">j</span></span><span style=
=3D"display: inline-block; width: 0px; height: 2.183em;"></span></span></sp=
an><span style=3D"display: inline-block; overflow: hidden; vertical-align: =
-0.304em; border-left: 0px solid; width: 0px; height: 1.158em;"></span></sp=
an></nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math =
xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>j</mi></math></span></span=
></span> will be created. It is this idle time that we ultimately want to m=
inimize, as it will push the total makespan to be larger.</p>

<p>Due to the simple form of the problem, any permutation of jobs is a vali=
d solution, and the optimal solution will correspond to <em>some</em> permu=
tation. Thus, we search for improved solutions by changing the permutation =
of jobs and measuring the corresponding makespan. In what follows, we refer=
 to a permutation of the jobs as a <em>candidate</em>.</p>

<p>Let's consider a simple example with two jobs and two machines. The firs=
t job has tasks <span class=3D"math"><span class=3D"MathJax_Preview" style=
=3D"color: inherit; display: none;"></span><span class=3D"MathJax" id=3D"Ma=
thJax-Element-21-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;h=
ttp://www.w3.org/1998/Math/MathML&quot;><mrow class=3D&quot;MJX-TeXAtom-ORD=
&quot;><mi mathvariant=3D&quot;bold&quot;>A</mi></mrow></math>" role=3D"pre=
sentation" style=3D"position: relative;"><nobr aria-hidden=3D"true"><span c=
lass=3D"math" id=3D"MathJax-Span-72" style=3D"width: 1.093em; display: inli=
ne-block;"><span style=3D"display: inline-block; position: relative; width:=
 0.901em; height: 0px; font-size: 120%;"><span style=3D"position: absolute;=
 clip: rect(1.349em 1000.84em 2.439em -999.997em); top: -2.24em; left: 0em;=
"><span class=3D"mrow" id=3D"MathJax-Span-73"><span class=3D"texatom" id=3D=
"MathJax-Span-74"><span class=3D"mrow" id=3D"MathJax-Span-75"><span class=
=3D"mi" id=3D"MathJax-Span-76" style=3D"font-family: MathJax_Main-bold;">A<=
/span></span></span></span><span style=3D"display: inline-block; width: 0px=
; height: 2.247em;"></span></span></span><span style=3D"display: inline-blo=
ck; overflow: hidden; vertical-align: -0.073em; border-left: 0px solid; wid=
th: 0px; height: 1.004em;"></span></span></nobr><span class=3D"MJX_Assistiv=
e_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/=
MathML"><mrow class=3D"MJX-TeXAtom-ORD"><mi mathvariant=3D"bold">A</mi></mr=
ow></math></span></span></span> and <span class=3D"math"><span class=3D"Mat=
hJax_Preview" style=3D"color: inherit; display: none;"></span><span class=
=3D"MathJax" id=3D"MathJax-Element-22-Frame" tabindex=3D"0" data-mathml=3D"=
<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mrow class=3D=
&quot;MJX-TeXAtom-ORD&quot;><mi mathvariant=3D&quot;bold&quot;>B</mi></mrow=
></math>" role=3D"presentation" style=3D"position: relative;"><nobr aria-hi=
dden=3D"true"><span class=3D"math" id=3D"MathJax-Span-77" style=3D"width: 1=
.029em; display: inline-block;"><span style=3D"display: inline-block; posit=
ion: relative; width: 0.837em; height: 0px; font-size: 120%;"><span style=
=3D"position: absolute; clip: rect(1.349em 1000.77em 2.439em -999.997em); t=
op: -2.24em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-78"><span =
class=3D"texatom" id=3D"MathJax-Span-79"><span class=3D"mrow" id=3D"MathJax=
-Span-80"><span class=3D"mi" id=3D"MathJax-Span-81" style=3D"font-family: M=
athJax_Main-bold;">B</span></span></span></span><span style=3D"display: inl=
ine-block; width: 0px; height: 2.247em;"></span></span></span><span style=
=3D"display: inline-block; overflow: hidden; vertical-align: -0.073em; bord=
er-left: 0px solid; width: 0px; height: 1.004em;"></span></span></nobr><spa=
n class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http:=
//www.w3.org/1998/Math/MathML"><mrow class=3D"MJX-TeXAtom-ORD"><mi mathvari=
ant=3D"bold">B</mi></mrow></math></span></span></span>, which take 1 and 2 =
minutes to complete respectively. The second job has tasks <span class=3D"m=
ath"><span class=3D"MathJax_Preview" style=3D"color: inherit; display: none=
;"></span><span class=3D"MathJax" id=3D"MathJax-Element-23-Frame" tabindex=
=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathM=
L&quot;><mrow class=3D&quot;MJX-TeXAtom-ORD&quot;><mi mathvariant=3D&quot;b=
old&quot;>C</mi></mrow></math>" role=3D"presentation" style=3D"position: re=
lative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span=
-82" style=3D"width: 1.029em; display: inline-block;"><span style=3D"displa=
y: inline-block; position: relative; width: 0.837em; height: 0px; font-size=
: 120%;"><span style=3D"position: absolute; clip: rect(1.349em 1000.77em 2.=
439em -999.997em); top: -2.24em; left: 0em;"><span class=3D"mrow" id=3D"Mat=
hJax-Span-83"><span class=3D"texatom" id=3D"MathJax-Span-84"><span class=3D=
"mrow" id=3D"MathJax-Span-85"><span class=3D"mi" id=3D"MathJax-Span-86" sty=
le=3D"font-family: MathJax_Main-bold;">C</span></span></span></span><span s=
tyle=3D"display: inline-block; width: 0px; height: 2.247em;"></span></span>=
</span><span style=3D"display: inline-block; overflow: hidden; vertical-ali=
gn: -0.073em; border-left: 0px solid; width: 0px; height: 1.004em;"></span>=
</span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><m=
ath xmlns=3D"http://www.w3.org/1998/Math/MathML"><mrow class=3D"MJX-TeXAtom=
-ORD"><mi mathvariant=3D"bold">C</mi></mrow></math></span></span></span> an=
d <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"color: inhe=
rit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-Element-2=
4-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.or=
g/1998/Math/MathML&quot;><mrow class=3D&quot;MJX-TeXAtom-ORD&quot;><mi math=
variant=3D&quot;bold&quot;>D</mi></mrow></math>" role=3D"presentation" styl=
e=3D"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" i=
d=3D"MathJax-Span-87" style=3D"width: 1.093em; display: inline-block;"><spa=
n style=3D"display: inline-block; position: relative; width: 0.901em; heigh=
t: 0px; font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.3=
49em 1000.84em 2.439em -999.997em); top: -2.24em; left: 0em;"><span class=
=3D"mrow" id=3D"MathJax-Span-88"><span class=3D"texatom" id=3D"MathJax-Span=
-89"><span class=3D"mrow" id=3D"MathJax-Span-90"><span class=3D"mi" id=3D"M=
athJax-Span-91" style=3D"font-family: MathJax_Main-bold;">D</span></span></=
span></span><span style=3D"display: inline-block; width: 0px; height: 2.247=
em;"></span></span></span><span style=3D"display: inline-block; overflow: h=
idden; vertical-align: -0.073em; border-left: 0px solid; width: 0px; height=
: 1.004em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" role=
=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mrow =
class=3D"MJX-TeXAtom-ORD"><mi mathvariant=3D"bold">D</mi></mrow></math></sp=
an></span></span>, which take 2 and 1 minutes to complete respectively. Rec=
all that <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"colo=
r: inherit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-El=
ement-25-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://ww=
w.w3.org/1998/Math/MathML&quot;><mrow class=3D&quot;MJX-TeXAtom-ORD&quot;><=
mi mathvariant=3D&quot;bold&quot;>A</mi></mrow></math>" role=3D"presentatio=
n" style=3D"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"=
math" id=3D"MathJax-Span-92" style=3D"width: 1.093em; display: inline-block=
;"><span style=3D"display: inline-block; position: relative; width: 0.901em=
; height: 0px; font-size: 120%;"><span style=3D"position: absolute; clip: r=
ect(1.349em 1000.84em 2.439em -999.997em); top: -2.24em; left: 0em;"><span =
class=3D"mrow" id=3D"MathJax-Span-93"><span class=3D"texatom" id=3D"MathJax=
-Span-94"><span class=3D"mrow" id=3D"MathJax-Span-95"><span class=3D"mi" id=
=3D"MathJax-Span-96" style=3D"font-family: MathJax_Main-bold;">A</span></sp=
an></span></span><span style=3D"display: inline-block; width: 0px; height: =
2.247em;"></span></span></span><span style=3D"display: inline-block; overfl=
ow: hidden; vertical-align: -0.073em; border-left: 0px solid; width: 0px; h=
eight: 1.004em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" =
role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><m=
row class=3D"MJX-TeXAtom-ORD"><mi mathvariant=3D"bold">A</mi></mrow></math>=
</span></span></span> must come before <span class=3D"math"><span class=3D"=
MathJax_Preview" style=3D"color: inherit; display: none;"></span><span clas=
s=3D"MathJax" id=3D"MathJax-Element-26-Frame" tabindex=3D"0" data-mathml=3D=
"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mrow class=
=3D&quot;MJX-TeXAtom-ORD&quot;><mi mathvariant=3D&quot;bold&quot;>B</mi></m=
row></math>" role=3D"presentation" style=3D"position: relative;"><nobr aria=
-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-97" style=3D"width=
: 1.029em; display: inline-block;"><span style=3D"display: inline-block; po=
sition: relative; width: 0.837em; height: 0px; font-size: 120%;"><span styl=
e=3D"position: absolute; clip: rect(1.349em 1000.77em 2.439em -999.997em); =
top: -2.24em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-98"><span=
 class=3D"texatom" id=3D"MathJax-Span-99"><span class=3D"mrow" id=3D"MathJa=
x-Span-100"><span class=3D"mi" id=3D"MathJax-Span-101" style=3D"font-family=
: MathJax_Main-bold;">B</span></span></span></span><span style=3D"display: =
inline-block; width: 0px; height: 2.247em;"></span></span></span><span styl=
e=3D"display: inline-block; overflow: hidden; vertical-align: -0.073em; bor=
der-left: 0px solid; width: 0px; height: 1.004em;"></span></span></nobr><sp=
an class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http=
://www.w3.org/1998/Math/MathML"><mrow class=3D"MJX-TeXAtom-ORD"><mi mathvar=
iant=3D"bold">B</mi></mrow></math></span></span></span> and <span class=3D"=
math"><span class=3D"MathJax_Preview" style=3D"color: inherit; display: non=
e;"></span><span class=3D"MathJax" id=3D"MathJax-Element-27-Frame" tabindex=
=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathM=
L&quot;><mrow class=3D&quot;MJX-TeXAtom-ORD&quot;><mi mathvariant=3D&quot;b=
old&quot;>C</mi></mrow></math>" role=3D"presentation" style=3D"position: re=
lative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span=
-102" style=3D"width: 1.029em; display: inline-block;"><span style=3D"displ=
ay: inline-block; position: relative; width: 0.837em; height: 0px; font-siz=
e: 120%;"><span style=3D"position: absolute; clip: rect(1.349em 1000.77em 2=
.439em -999.997em); top: -2.24em; left: 0em;"><span class=3D"mrow" id=3D"Ma=
thJax-Span-103"><span class=3D"texatom" id=3D"MathJax-Span-104"><span class=
=3D"mrow" id=3D"MathJax-Span-105"><span class=3D"mi" id=3D"MathJax-Span-106=
" style=3D"font-family: MathJax_Main-bold;">C</span></span></span></span><s=
pan style=3D"display: inline-block; width: 0px; height: 2.247em;"></span></=
span></span><span style=3D"display: inline-block; overflow: hidden; vertica=
l-align: -0.073em; border-left: 0px solid; width: 0px; height: 1.004em;"></=
span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"presentatio=
n"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mrow class=3D"MJX-Te=
XAtom-ORD"><mi mathvariant=3D"bold">C</mi></mrow></math></span></span></spa=
n> must come before <span class=3D"math"><span class=3D"MathJax_Preview" st=
yle=3D"color: inherit; display: none;"></span><span class=3D"MathJax" id=3D=
"MathJax-Element-28-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quo=
t;http://www.w3.org/1998/Math/MathML&quot;><mrow class=3D&quot;MJX-TeXAtom-=
ORD&quot;><mi mathvariant=3D&quot;bold&quot;>D</mi></mrow></math>" role=3D"=
presentation" style=3D"position: relative;"><nobr aria-hidden=3D"true"><spa=
n class=3D"math" id=3D"MathJax-Span-107" style=3D"width: 1.093em; display: =
inline-block;"><span style=3D"display: inline-block; position: relative; wi=
dth: 0.901em; height: 0px; font-size: 120%;"><span style=3D"position: absol=
ute; clip: rect(1.349em 1000.84em 2.439em -999.997em); top: -2.24em; left: =
0em;"><span class=3D"mrow" id=3D"MathJax-Span-108"><span class=3D"texatom" =
id=3D"MathJax-Span-109"><span class=3D"mrow" id=3D"MathJax-Span-110"><span =
class=3D"mi" id=3D"MathJax-Span-111" style=3D"font-family: MathJax_Main-bol=
d;">D</span></span></span></span><span style=3D"display: inline-block; widt=
h: 0px; height: 2.247em;"></span></span></span><span style=3D"display: inli=
ne-block; overflow: hidden; vertical-align: -0.073em; border-left: 0px soli=
d; width: 0px; height: 1.004em;"></span></span></nobr><span class=3D"MJX_As=
sistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998=
/Math/MathML"><mrow class=3D"MJX-TeXAtom-ORD"><mi mathvariant=3D"bold">D</m=
i></mrow></math></span></span></span>. Because there are two jobs, we have =
just two permutations to consider. If we order job 2 before job 1, the make=
span is 5 (<a href=3D"http://aosabook.org/en/500L/a-flow-shop-scheduler.htm=
l#figure-9.1">Figure 9.1</a>); on the other hand, if we order job 1 before =
job 2, the makespan is only 4 (<a href=3D"http://aosabook.org/en/500L/a-flo=
w-shop-scheduler.html#figure-9.2">Figure 9.2</a>).</p>

<div class=3D"center figure">
<a name=3D"figure-9.1"></a><img src=3D"http://aosabook.org/en/500L/flow-sho=
p-images/example1.png" alt=3D"Figure 9.1 - Flow Shop Example 1" title=3D"Fi=
gure 9.1 - Flow Shop Example 1">
</div>

<p class=3D"center figcaption">
<small>Figure 9.1 - Flow Shop Example 1</small>
</p>

<div class=3D"center figure">
<a name=3D"figure-9.2"></a><img src=3D"http://aosabook.org/en/500L/flow-sho=
p-images/example2.png" alt=3D"Figure 9.2 - Flow Shop Example 2" title=3D"Fi=
gure 9.2 - Flow Shop Example 2">
</div>

<p class=3D"center figcaption">
<small>Figure 9.2 - Flow Shop Example 2</small>
</p>

<p>Notice that there is no budge room to push any of the tasks earlier. A g=
uiding principle for a good permutation is to minimize the time in which an=
y machine is left without a task to process.</p>

<h3 id=3D"local-search">Local Search</h3>

<p>Local search is a strategy for solving optimization problems when the op=
timal solution is too hard to compute. Intuitively, it moves from one solut=
ion that seems pretty good to another solution that seems even better. Rath=
er than considering every possible solution as a candidate to focus on next=
, we define what is known as a <em>neighbourhood</em>: the set of solutions=
 considered to be similar to the current solution. Because any permutation =
of jobs is a valid solution, we can view any mechanism that shuffles the jo=
bs around as a local search procedure (this is in fact what we do below).</=
p>

<p>To use local search formally, we must answer a few questions:</p>

<ol style=3D"list-style-type: decimal">
<li>What solution should we start with?</li>
<li>Given a solution, what are the neighbouring solutions that we should co=
nsider?</li>
<li>Given the set of candidate neighbours, which one should we consider mov=
ing to next?</li>
</ol>

<p>The following three sections address these questions in turn.</p>

<h2 id=3D"general-solver">General Solver</h2>

<p>In this section we provide the general framework for the flow shop sched=
uler. To begin, we have the necessary Python imports and the settings for t=
he solver:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"ch">import</span> sys, os, time, random

<span class=3D"ch">from</span> functools <span class=3D"ch">import</span> p=
artial
<span class=3D"ch">from</span> collections <span class=3D"ch">import</span>=
 namedtuple
<span class=3D"ch">from</span> itertools <span class=3D"ch">import</span> p=
roduct

<span class=3D"ch">import</span> neighbourhood <span class=3D"ch">as</span>=
 neigh
<span class=3D"ch">import</span> heuristics <span class=3D"ch">as</span> he=
ur

<span class=3D"co">##############</span>
<span class=3D"co">## Settings ##</span>
<span class=3D"co">##############</span>
TIME_LIMIT =3D <span class=3D"fl">300.0</span> <span class=3D"co"># Time (i=
n seconds) to run the solver</span>
TIME_INCREMENT =3D <span class=3D"fl">13.0</span> <span class=3D"co"># Time=
 (in seconds) in between heuristic measurements</span>
DEBUG_SWITCH =3D <span class=3D"ot">False</span> <span class=3D"co"># Displ=
ays intermediate heuristic info when True</span>
MAX_LNS_NEIGHBOURHOODS =3D <span class=3D"dv">1000</span> <span class=3D"co=
"># Maximum number of neighbours to explore in LNS</span></code></pre>

<p>There are two settings that should be explained further. The <code>TIME_=
INCREMENT</code> setting will be used as part of the dynamic strategy selec=
tion, and the <code>MAX_LNS_NEIGHBOURHOODS</code> setting will be used as p=
art of the neighbourhood selection strategy. Both are described in more det=
ail below.</p>

<p>These settings could be exposed to the user as command line parameters, =
but at this stage we instead provide the input data as parameters to the pr=
ogram. The input problem=E2=80=94a problem from the Taillard benchmark set=
=E2=80=94is assumed to be in a standard format for flow shop scheduling. Th=
e following code is used as the <code>__main__</code> method for the solver=
 file, and calls the appropriate functions based on the number of parameter=
s input to the program:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">if</span> <span class=3D"ot">__name__</span> =3D=3D <span class=
=3D"st">'__main__'</span>:

    <span class=3D"kw">if</span> <span class=3D"dt">len</span>(sys.argv) =
=3D=3D <span class=3D"dv">2</span>:
        data =3D parse_problem(sys.argv[<span class=3D"dv">1</span>], <span=
 class=3D"dv">0</span>)
    <span class=3D"kw">elif</span> <span class=3D"dt">len</span>(sys.argv) =
=3D=3D <span class=3D"dv">3</span>:
        data =3D parse_problem(sys.argv[<span class=3D"dv">1</span>], <span=
 class=3D"dt">int</span>(sys.argv[<span class=3D"dv">2</span>]))
    <span class=3D"kw">else</span>:
        <span class=3D"dt">print</span> <span class=3D"st">"</span><span cl=
ass=3D"ch">\n</span><span class=3D"st">Usage: python flow.py &lt;Taillard p=
roblem file&gt; [&lt;instance number&gt;]</span><span class=3D"ch">\n</span=
><span class=3D"st">"</span>
        sys.exit(<span class=3D"dv">0</span>)

    (perm, ms) =3D solve(data)
    print_solution(data, perm)</code></pre>

<p>We will describe the parsing of Taillard problem files shortly. (The fil=
es are <a href=3D"http://mistic.heig-vd.ch/taillard/problemes.dir/ordonnanc=
ement.dir/ordonnancement.html">available online</a>.)</p>

<p>The <code>solve</code> method expects the <code>data</code> variable to =
be a list of integers containing the activity durations for each job. The <=
code>solve</code> method starts by initializing a global set of strategies =
(to be described below). The key is that we use <code>strat_*</code> variab=
les to maintain statistics on each of the strategies. This aids in selectin=
g the strategy dynamically during the solving process.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> solve(data):
    <span class=3D"co">"""Solves an instance of the flow shop scheduling pr=
oblem"""</span>

    <span class=3D"co"># We initialize the strategies here to avoid cyclic =
import issues</span>
    initialize_strategies()
    <span class=3D"kw">global</span> STRATEGIES

    <span class=3D"co"># Record the following for each strategy:</span>
    <span class=3D"co">#  improvements: The amount a solution was improved =
by this strategy</span>
    <span class=3D"co">#  time_spent: The amount of time spent on the strat=
egy</span>
    <span class=3D"co">#  weights: The weights that correspond to how good =
a strategy is</span>
    <span class=3D"co">#  usage: The number of times we use a strategy</spa=
n>
    strat_improvements =3D {strategy: <span class=3D"dv">0</span> <span cla=
ss=3D"kw">for</span> strategy in STRATEGIES}
    strat_time_spent =3D {strategy: <span class=3D"dv">0</span> <span class=
=3D"kw">for</span> strategy in STRATEGIES}
    strat_weights =3D {strategy: <span class=3D"dv">1</span> <span class=3D=
"kw">for</span> strategy in STRATEGIES}
    strat_usage =3D {strategy: <span class=3D"dv">0</span> <span class=3D"k=
w">for</span> strategy in STRATEGIES}</code></pre>

<p>One appealing feature of the flow shop scheduling problem is that <em>ev=
ery</em> permutation is a valid solution, and at least one will have the op=
timal makespan (though many will have horrible makespans). Thankfully, this=
 allows us to forgo checking that we stay within the space of feasible solu=
tions when going from one permutation to another=E2=80=94everything is feas=
ible!</p>

<p>However, to start a local search in the space of permutations, we must h=
ave an initial permutation. To keep things simple, we seed our local search=
 by shuffling the list of jobs randomly:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Start with a random permutation of the jobs</span>
    perm =3D <span class=3D"dt">range</span>(<span class=3D"dt">len</span>(=
data))
    random.shuffle(perm)</code></pre>

<p>Next, we initialize the variables that allow us to keep track of the bes=
t permutation found so far, as well as the timing information for providing=
 output. </p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Keep track of the best solution</span>
    best_make =3D makespan(data, perm)
    best_perm =3D perm
    res =3D best_make

    <span class=3D"co"># Maintain statistics and timing for the iterations<=
/span>
    iteration =3D <span class=3D"dv">0</span>
    time_limit =3D time.time() + TIME_LIMIT
    time_last_switch =3D time.time()

    time_delta =3D TIME_LIMIT / <span class=3D"dv">10</span>
    checkpoint =3D time.time() + time_delta
    percent_complete =3D <span class=3D"dv">10</span>

    <span class=3D"dt">print</span> <span class=3D"st">"</span><span class=
=3D"ch">\n</span><span class=3D"st">Solving..."</span></code></pre>

<p>As this is a local search solver, we simply continue to try and improve =
solutions as long as the time limit has not been reached. We provide output=
 indicating the progress of the solver and keep track of the number of iter=
ations we have computed:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">while</span> time.time() &lt; time_limit:

        <span class=3D"kw">if</span> time.time() &gt; checkpoint:
            <span class=3D"dt">print</span> <span class=3D"st">" </span><sp=
an class=3D"ot">%d</span><span class=3D"st"> </span><span class=3D"ot">%%</=
span><span class=3D"st">"</span> % percent_complete
            percent_complete +=3D <span class=3D"dv">10</span>
            checkpoint +=3D time_delta

        iteration +=3D <span class=3D"dv">1</span></code></pre>

<p>Below we describe how the strategy is picked, but for now it is sufficie=
nt to know that the strategy provides a <code>neighbourhood</code> function=
 and a <code>heuristic</code> function. The former gives us a set of <em>ne=
xt candidates</em> to consider while the latter chooses the <em>best candid=
ate</em> from the set. From these functions, we have a new permutation (<co=
de>perm</code>) and a new makespan result (<code>res</code>):</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"co"># Heuristically choose the best strategy</span>
        strategy =3D pick_strategy(STRATEGIES, strat_weights)

        old_val =3D res
        old_time =3D time.time()

        <span class=3D"co"># Use the current strategy's heuristic to pick t=
he next permutation from</span>
        <span class=3D"co"># the set of candidates generated by the strateg=
y's neighbourhood</span>
        candidates =3D strategy.neighbourhood(data, perm)
        perm =3D strategy.heuristic(data, candidates)
        res =3D makespan(data, perm)</code></pre>

<p>The code for computing the makespan is quite simple: we can compute it f=
rom a permutation by evaluating when the final job completes. We will see b=
elow how <code>compile_solution</code> works, but for now it suffices to kn=
ow that a 2D array is returned and the element at <code>[-1][-1]</code> cor=
responds to the start time of the final job in the schedule:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> makespan(data, perm):
    <span class=3D"co">"""Computes the makespan of the provided solution"""=
</span>
    <span class=3D"kw">return</span> compile_solution(data, perm)[-<span cl=
ass=3D"dv">1</span>][-<span class=3D"dv">1</span>] + data[perm[-<span class=
=3D"dv">1</span>]][-<span class=3D"dv">1</span>]</code></pre>

<p>To help select a strategy, we keep statistics on (1) how much the strate=
gy has improved the solution, (2) how much time the strategy has spent comp=
uting information, and (3) how many times the strategy was used. We also up=
date the variables for the best permutation if we stumble upon a better sol=
ution:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"co"># Record the statistics on how the strategy did</span>
        strat_improvements[strategy] +=3D res - old_val
        strat_time_spent[strategy] +=3D time.time() - old_time
        strat_usage[strategy] +=3D <span class=3D"dv">1</span>

        <span class=3D"kw">if</span> res &lt; best_make:
            best_make =3D res
            best_perm =3D perm[:]</code></pre>

<p>At regular intervals, the statistics for strategy use are updated. We re=
moved the associated snippet for readability, and detail the code below. As=
 a final step, once the while loop is complete (i.e., the time limit is rea=
ched) we output some statistics about the solving process and return the be=
st permutation along with its makespan:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"dt">print</span> <span class=3D"st">" </span><span class=3D"ot">=
%d</span><span class=3D"st"> </span><span class=3D"ot">%%</span><span class=
=3D"ch">\n</span><span class=3D"st">"</span> % percent_complete
    <span class=3D"dt">print</span> <span class=3D"st">"</span><span class=
=3D"ch">\n</span><span class=3D"st">Went through </span><span class=3D"ot">=
%d</span><span class=3D"st"> iterations."</span> % iteration

    <span class=3D"dt">print</span> <span class=3D"st">"</span><span class=
=3D"ch">\n</span><span class=3D"st">(usage) Strategy:"</span>
    results =3D <span class=3D"dt">sorted</span>([(strat_weights[STRATEGIES=
[i]], i)
                      <span class=3D"kw">for</span> i in <span class=3D"dt"=
>range</span>(<span class=3D"dt">len</span>(STRATEGIES))], reverse=3D<span =
class=3D"ot">True</span>)
    <span class=3D"kw">for</span> (w, i) in results:
        <span class=3D"dt">print</span> <span class=3D"st">"(</span><span c=
lass=3D"ot">%d</span><span class=3D"st">) </span><span class=3D"ch">\t</spa=
n><span class=3D"ot">%s</span><span class=3D"st">"</span> % (strat_usage[ST=
RATEGIES[i]], STRATEGIES[i].name)

    <span class=3D"kw">return</span> (best_perm, best_make)</code></pre>

<h3 id=3D"parsing-problems">Parsing Problems</h3>

<p>As input to the parsing procedure, we provide the file name where the in=
put can be found and the example number that should be used. (Each file con=
tains a number of instances.)</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> parse_problem(filename, k=3D<span class=3D"dv">1</spa=
n>):
    <span class=3D"co">"""Parse the kth instance of a Taillard problem file=
</span>

<span class=3D"co">    The Taillard problem files are a standard benchmark =
set for the problem</span>
<span class=3D"co">    of flow shop scheduling. </span>

<span class=3D"co">    print "\nParsing..."</span></code></pre>

<p>We start the parsing by reading in the file and identifying the line tha=
t separates each of the problem instances:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">with</span> <span class=3D"dt">open</span>(filename, <span c=
lass=3D"st">'r'</span>) <span class=3D"ch">as</span> f:
        <span class=3D"co"># Identify the string that separates instances</=
span>
        problem_line =3D (<span class=3D"st">'/number of jobs, number of ma=
chines, initial seed, '</span>
                        <span class=3D"co">'upper bound and lower bound :/'=
</span>)

        <span class=3D"co"># Strip spaces and newline characters from every=
 line</span>
        lines =3D <span class=3D"dt">map</span>(<span class=3D"dt">str</spa=
n>.strip, f.readlines())</code></pre>

<p>To make locating the correct instance easier, we assume that lines will =
be separated by a '/' character. This allows us to split the file based on =
a common string that appears at the top of every instance, and adding a '/'=
 character to the start of the first line allows the string processing belo=
w to work correctly regardless of the instance we choose. We also detect wh=
en a provided instance number is out of range given the collection of insta=
nces found in the file.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"co"># We prep the first line for later</span>
        lines[<span class=3D"dv">0</span>] =3D <span class=3D"st">'/'</span=
> + lines[<span class=3D"dv">0</span>]

        <span class=3D"co"># We also know '/' does not appear in the files,=
 so we can use it as</span>
        <span class=3D"co">#  a separator to find the right lines for the k=
th problem instance</span>
        <span class=3D"kw">try</span>:
            lines =3D <span class=3D"st">'/'</span>.join(lines).split(probl=
em_line)[k].split(<span class=3D"st">'/'</span>)[<span class=3D"dv">2</span=
>:]
        <span class=3D"kw">except</span> <span class=3D"ot">IndexError</spa=
n>:
            max_instances =3D <span class=3D"dt">len</span>(<span class=3D"=
st">'/'</span>.join(lines).split(problem_line)) - <span class=3D"dv">1</spa=
n>
            <span class=3D"dt">print</span> <span class=3D"st">"</span><spa=
n class=3D"ch">\n</span><span class=3D"st">Error: Instance must be within 1=
 and </span><span class=3D"ot">%d</span><span class=3D"ch">\n</span><span c=
lass=3D"st">"</span> % max_instances
            sys.exit(<span class=3D"dv">0</span>)</code></pre>

<p>We parse the data directly, converting the processing time of each task =
to an integer and storing it in a list. Finally, we zip the data to invert =
the rows and columns so that the format respects what is expected by the so=
lving code above. (Every item in <code>data</code> should correspond to a p=
articular job.)</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
<span class=3D"co"># Split every line based on spaces and convert each item=
 to an int</span>
        data =3D [<span class=3D"dt">map</span>(<span class=3D"dt">int</spa=
n>, line.split()) <span class=3D"kw">for</span> line in lines]

    <span class=3D"co"># We return the zipped data to rotate the rows and c=
olumns, making each</span>
    <span class=3D"co">#  item in data the durations of tasks for a particu=
lar job</span>
    <span class=3D"kw">return</span> <span class=3D"dt">zip</span>(*data)</=
code></pre>

<h3 id=3D"compiling-solutions">Compiling Solutions</h3>

<p>A solution to the flow shop scheduling problem consists of precise timin=
g for each task in every job. Because we represent a solution implicitly wi=
th a permutation of the jobs, we introduce the <code>compile_solution</code=
> function to convert a permutation to precise times. As input, the functio=
n takes in the data for the problem (giving us the duration of every task) =
and a permutation of jobs.</p>

<p>The function begins by initializing the data structure used to store the=
 starting time for each task, and then including the tasks from the first j=
ob in the permutation.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> compile_solution(data, perm):
    <span class=3D"co">"""Compiles a scheduling on the machines given a per=
mutation of jobs"""</span>

    num_machines =3D <span class=3D"dt">len</span>(data[<span class=3D"dv">=
0</span>])

    <span class=3D"co"># Note that using [[]] * m would be incorrect, as it=
 would simply</span>
    <span class=3D"co">#  copy the same list m times (as opposed to creatin=
g m distinct lists).</span>
    machine_times =3D [[] <span class=3D"kw">for</span> _ in <span class=3D=
"dt">range</span>(num_machines)]

    <span class=3D"co"># Assign the initial job to the machines</span>
    machine_times[<span class=3D"dv">0</span>].append(<span class=3D"dv">0<=
/span>)
    <span class=3D"kw">for</span> mach in <span class=3D"dt">range</span>(<=
span class=3D"dv">1</span>,num_machines):
        <span class=3D"co"># Start the next task in the job when the previo=
us finishes</span>
        machine_times[mach].append(machine_times[mach<span class=3D"dv">-1<=
/span>][<span class=3D"dv">0</span>] +
                                   data[perm[<span class=3D"dv">0</span>]][=
mach<span class=3D"dv">-1</span>])</code></pre>

<p>We then add all the tasks for the remaining jobs. The first task in a jo=
b will always start as soon as the first task in the previous job completes=
. For the remaining tasks, we schedule the job as early as possible: the ma=
ximum out of the completion time of the previous task in the same job and t=
he completion time of the previous task on the same machine.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Assign the remaining jobs</span>
    <span class=3D"kw">for</span> i in <span class=3D"dt">range</span>(<spa=
n class=3D"dv">1</span>, <span class=3D"dt">len</span>(perm)):

        <span class=3D"co"># The first machine never contains any idle time=
</span>
        job =3D perm[i]
        machine_times[<span class=3D"dv">0</span>].append(machine_times[<sp=
an class=3D"dv">0</span>][-<span class=3D"dv">1</span>] + data[perm[i<span =
class=3D"dv">-1</span>]][<span class=3D"dv">0</span>])

        <span class=3D"co"># For the remaining machines, the start time is =
the max of when the</span>
        <span class=3D"co">#  previous task in the job completed, or when t=
he current machine</span>
        <span class=3D"co">#  completes the task for the previous job.</spa=
n>
        <span class=3D"kw">for</span> mach in <span class=3D"dt">range</spa=
n>(<span class=3D"dv">1</span>, num_machines):
            machine_times[mach].append(<span class=3D"dt">max</span>(
                machine_times[mach<span class=3D"dv">-1</span>][i] + data[p=
erm[i]][mach<span class=3D"dv">-1</span>],
                machine_times[mach][i<span class=3D"dv">-1</span>] + data[p=
erm[i<span class=3D"dv">-1</span>]][mach]))

    <span class=3D"kw">return</span> machine_times</code></pre>

<h3 id=3D"printing-solutions">Printing Solutions</h3>

<p>When the solving process is complete, the program outputs information ab=
out the solution in a compact form. Rather than providing the precise timin=
g of every task for every job, we output the following pieces of informatio=
n:</p>

<ol style=3D"list-style-type: decimal">
<li>The permutation of jobs that yielded the best makespan</li>
<li>The computed makespan of the permutation</li>
<li>The start time, finish time, and idle time for every machine</li>
<li>The start time, finish time, and idle time for every job</li>
</ol>

<p>The start time for a job or machine corresponds to the start of the firs=
t task in the job or on the machine. Similarly, the finish time for a job o=
r machine corresponds to the end of the final task in the job or on the mac=
hine. The idle time is the amount of slack in between tasks for a particula=
r job or machine. Ideally we would like to reduce the amount of idle time, =
as it means the overall process time will be reduced as well.</p>

<p>The code to compile the solution (i.e., to compute the start times for e=
very task) has already been discussed, and outputting the permutation and m=
akespan are trivial:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> print_solution(data, perm):
    <span class=3D"co">"""Prints statistics on the computed solution"""</sp=
an>

    sol =3D compile_solution(data, perm)

    <span class=3D"dt">print</span> <span class=3D"st">"</span><span class=
=3D"ch">\n</span><span class=3D"st">Permutation: </span><span class=3D"ot">=
%s</span><span class=3D"ch">\n</span><span class=3D"st">"</span> % <span cl=
ass=3D"dt">str</span>([i<span class=3D"dv">+1</span> <span class=3D"kw">for=
</span> i in perm])

    <span class=3D"dt">print</span> <span class=3D"st">"Makespan: </span><s=
pan class=3D"ot">%d</span><span class=3D"ch">\n</span><span class=3D"st">"<=
/span> % makespan(data, perm)</code></pre>

<p>Next, we use the string formatting functionality in Python to print the =
table of start, end, and idle times for each of the machines and jobs. Note=
 that the idle time for a job is the time from when the job started to its =
completion, minus the sum of the processing times for each task in the job.=
 We compute the idle time for a machine in a similar fashion.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    row_=
format =3D<span class=3D"st">"{:&gt;15}"</span> * <span class=3D"dv">4</spa=
n>
    <span class=3D"dt">print</span> row_format.<span class=3D"dt">format</s=
pan>(<span class=3D"st">'Machine'</span>, <span class=3D"st">'Start Time'</=
span>, <span class=3D"st">'Finish Time'</span>, <span class=3D"st">'Idle Ti=
me'</span>)
    <span class=3D"kw">for</span> mach in <span class=3D"dt">range</span>(<=
span class=3D"dt">len</span>(data[<span class=3D"dv">0</span>])):
        finish_time =3D sol[mach][-<span class=3D"dv">1</span>] + data[perm=
[-<span class=3D"dv">1</span>]][mach]
        idle_time =3D (finish_time - sol[mach][<span class=3D"dv">0</span>]=
) - <span class=3D"dt">sum</span>([job[mach] <span class=3D"kw">for</span> =
job in data])
        <span class=3D"dt">print</span> row_format.<span class=3D"dt">forma=
t</span>(mach<span class=3D"dv">+1</span>, sol[mach][<span class=3D"dv">0</=
span>], finish_time, idle_time)

    results =3D []
    <span class=3D"kw">for</span> i in <span class=3D"dt">range</span>(<spa=
n class=3D"dt">len</span>(data)):
        finish_time =3D sol[-<span class=3D"dv">1</span>][i] + data[perm[i]=
][-<span class=3D"dv">1</span>]
        idle_time =3D (finish_time - sol[<span class=3D"dv">0</span>][i]) -=
 <span class=3D"dt">sum</span>([time <span class=3D"kw">for</span> time in =
data[perm[i]]])
        results.append((perm[i]+<span class=3D"dv">1</span>, sol[<span clas=
s=3D"dv">0</span>][i], finish_time, idle_time))

    <span class=3D"dt">print</span> <span class=3D"st">"</span><span class=
=3D"ch">\n</span><span class=3D"st">"</span>
    <span class=3D"dt">print</span> row_format.<span class=3D"dt">format</s=
pan>(<span class=3D"st">'Job'</span>, <span class=3D"st">'Start Time'</span=
>, <span class=3D"st">'Finish Time'</span>, <span class=3D"st">'Idle Time'<=
/span>)
    <span class=3D"kw">for</span> r in <span class=3D"dt">sorted</span>(res=
ults):
        <span class=3D"dt">print</span> row_format.<span class=3D"dt">forma=
t</span>(*r)

    <span class=3D"dt">print</span> <span class=3D"st">"</span><span class=
=3D"ch">\n\n</span><span class=3D"st">Note: Idle time does not include init=
ial or final wait time.</span><span class=3D"ch">\n</span><span class=3D"st=
">"</span></code></pre>

<h2 id=3D"neighbourhoods">Neighbourhoods</h2>

<p>The idea behind local search is to move <em>locally</em> from one soluti=
on to other solutions nearby. We refer to the <em>neighbourhood</em> of a g=
iven solution as the other solutions that are local to it. In this section,=
 we detail four potential neighbourhoods, each of increasing complexity.</p=
>

<p>The first neighbourhood produces a given number of random permutations. =
This neighbourhood does not even consider the solution that we begin with, =
and so the term "neighbourhood" stretches the truth. However, including som=
e randomness in the search is good practice, as it promotes exploration of =
the search space.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> neighbours_random(data, perm, num =3D <span class=3D"=
dv">1</span>):
    <span class=3D"co"># Returns &lt;num&gt; random job permutations, inclu=
ding the current one</span>
    candidates =3D [perm]
    <span class=3D"kw">for</span> i in <span class=3D"dt">range</span>(num)=
:
        candidate =3D perm[:]
        random.shuffle(candidate)
        candidates.append(candidate)
    <span class=3D"kw">return</span> candidates</code></pre>

<p>For the next neighbourhood, we consider swapping any two jobs in the per=
mutation. By using the <code>combinations</code> function from the <code>it=
ertools</code> package, we can easily iterate through every pair of indices=
 and create a new permutation that corresponds to swapping the jobs located=
 at each index. In a sense, this neighbourhood creates permutations that ar=
e very similar to the one we began with.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> neighbours_swap(data, perm):
    <span class=3D"co"># Returns the permutations corresponding to swapping=
 every pair of jobs</span>
    candidates =3D [perm]
    <span class=3D"kw">for</span> (i,j) in combinations(<span class=3D"dt">=
range</span>(<span class=3D"dt">len</span>(perm)), <span class=3D"dv">2</sp=
an>):
        candidate =3D perm[:]
        candidate[i], candidate[j] =3D candidate[j], candidate[i]
        candidates.append(candidate)
    <span class=3D"kw">return</span> candidates</code></pre>

<p>The next neighbourhood we consider uses information specific to the prob=
lem at hand. We find the jobs with the most idle time and consider swapping=
 them in every way possible. We take in a value <code>size</code> which is =
the number of jobs we consider: the <code>size</code> most idle jobs. The f=
irst step in the process is to compute the idle time for every job in the p=
ermutation:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> neighbours_idle(data, perm, size=3D<span class=3D"dv"=
>4</span>):
    <span class=3D"co"># Returns the permutations of the &lt;size&gt; most =
idle jobs</span>
    candidates =3D [perm]

    <span class=3D"co"># Compute the idle time for each job</span>
    sol =3D flow.compile_solution(data, perm)
    results =3D []

    <span class=3D"kw">for</span> i in <span class=3D"dt">range</span>(<spa=
n class=3D"dt">len</span>(data)):
        finish_time =3D sol[-<span class=3D"dv">1</span>][i] + data[perm[i]=
][-<span class=3D"dv">1</span>]
        idle_time =3D (finish_time - sol[<span class=3D"dv">0</span>][i]) -=
 <span class=3D"dt">sum</span>([t <span class=3D"kw">for</span> t in data[p=
erm[i]]])
        results.append((idle_time, i))</code></pre>

<p>Next, we compute the list of <code>size</code> jobs that have the most i=
dle time.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Take the &lt;size&gt; most idle jobs</span>
    subset =3D [job_ind <span class=3D"kw">for</span> (idle, job_ind) in <s=
pan class=3D"dt">reversed</span>(<span class=3D"dt">sorted</span>(results))=
][:size]</code></pre>

<p>Finally, we construct the neighbourhood by considering every permutation=
 of the most idle jobs that we have identified. To find the permutations, w=
e make use of the <code>permutations</code> function from the <code>itertoo=
ls</code> package.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"co"># Enumerate the permutations of the idle jobs</span>
    <span class=3D"kw">for</span> ordering in permutations(subset):
        candidate =3D perm[:]
        <span class=3D"kw">for</span> i in <span class=3D"dt">range</span>(=
<span class=3D"dt">len</span>(ordering)):
            candidate[subset[i]] =3D perm[ordering[i]]
        candidates.append(candidate)

    <span class=3D"kw">return</span> candidates</code></pre>

<p>The final neighbourhood that we consider is commonly referred to as <em>=
Large Neighbourhood Search</em> (LNS). Intuitively, LNS works by considerin=
g small subsets of the current permutation in isolation=E2=80=94locating th=
e best permutation of the subset of jobs gives us a single candidate for th=
e LNS neighbourhood. By repeating this process for several (or all) subsets=
 of a particular size, we can increase the number of candidates in the neig=
hbourhood. We limit the number that are considered through the <code>MAX_LN=
S_NEIGHBOURHOODS</code> parameter, as the number of neighbours can grow qui=
te quickly. The first step in the LNS computation is to compute the random =
list of job sets that we will consider swapping using the <code>combination=
s</code> function of the <code>itertools</code> package:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> neighbours_LNS(data, perm, size =3D <span class=3D"dv=
">2</span>):
    <span class=3D"co"># Returns the Large Neighbourhood Search neighbours<=
/span>
    candidates =3D [perm]

    <span class=3D"co"># Bound the number of neighbourhoods in case there a=
re too many jobs</span>
    neighbourhoods =3D <span class=3D"dt">list</span>(combinations(<span cl=
ass=3D"dt">range</span>(<span class=3D"dt">len</span>(perm)), size))
    random.shuffle(neighbourhoods)</code></pre>

<p>Next, we iterate through the subsets to find the best permutation of job=
s in each one. We have seen similar code above for iterating through all pe=
rmutations of the most idle jobs. The key difference here is that we record=
 only the best permutation for the subset, as the larger neighbourhood is c=
onstructed by choosing one permutation for each subset of the considered jo=
bs.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">    <spa=
n class=3D"kw">for</span> subset in neighbourhoods[:flow.MAX_LNS_NEIGHBOURH=
OODS]:

        <span class=3D"co"># Keep track of the best candidate for each neig=
hbourhood</span>
        best_make =3D flow.makespan(data, perm)
        best_perm =3D perm

        <span class=3D"co"># Enumerate every permutation of the selected ne=
ighbourhood</span>
        <span class=3D"kw">for</span> ordering in permutations(subset):
            candidate =3D perm[:]
            <span class=3D"kw">for</span> i in <span class=3D"dt">range</sp=
an>(<span class=3D"dt">len</span>(ordering)):
                candidate[subset[i]] =3D perm[ordering[i]]
            res =3D flow.makespan(data, candidate)
            <span class=3D"kw">if</span> res &lt; best_make:
                best_make =3D res
                best_perm =3D candidate

        <span class=3D"co"># Record the best candidate as part of the large=
r neighbourhood</span>
        candidates.append(best_perm)

    <span class=3D"kw">return</span> candidates</code></pre>

<p>If we were to set the <code>size</code> parameter to be equal to the num=
ber of jobs, then every permutation would be considered and the best one se=
lected. In practice, however, we need to limit the size of the subset to ar=
ound 3 or 4; anything larger would cause the <code>neighbours_LNS</code> fu=
nction to take a prohibitive amount of time.</p>

<h2 id=3D"heuristics">Heuristics</h2>

<p>A heuristic returns a single candidate permutation from a set of provide=
d candidates. The heuristic is also given access to the problem data in ord=
er to evaluate which candidate might be preferred.</p>

<p>The first heuristic that we consider is <code>heur_random</code>. This h=
euristic randomly selects a candidate from the list without evaluating whic=
h one might be preferred:</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> heur_random(data, candidates):
    <span class=3D"co"># Returns a random candidate choice</span>
    <span class=3D"kw">return</span> random.choice(candidates)</code></pre>

<p>The next heuristic <code>heur_hillclimbing</code> uses the other extreme=
. Rather than randomly selecting a candidate, it selects the candidate that=
 has the best makespan. Note that the list <code>scores</code> will contain=
 tuples of the form <code>(make,perm)</code> where <code>make</code> is the=
 makespan value for permutation <code>perm</code>. Sorting such a list plac=
es the tuple with the best makespan at the start of the list; from this tup=
le we return the permutation.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> heur_hillclimbing(data, candidates):
    <span class=3D"co"># Returns the best candidate in the list</span>
    scores =3D [(flow.makespan(data, perm), perm) <span class=3D"kw">for</s=
pan> perm in candidates]
    <span class=3D"kw">return</span> <span class=3D"dt">sorted</span>(score=
s)[<span class=3D"dv">0</span>][<span class=3D"dv">1</span>]</code></pre>

<p>The final heuristic, <code>heur_random_hillclimbing</code>, combines bot=
h the random and hillclimbing heuristics above. When performing local searc=
h, you may not always want to choose a random candidate, or even the best o=
ne. The <code>heur_random_hillclimbing</code> heuristic returns a "pretty g=
ood" solution by choosing the best candidate with probability 0.5, then the=
 second best with probability 0.25, and so on. The while-loop essentially f=
lips a coin at every iteration to see if it should continue increasing the =
index (with a limit on the size of the list). The final index chosen corres=
ponds to the candidate that the heuristic selects.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> heur_random_hillclimbing(data, candidates):
    <span class=3D"co"># Returns a candidate with probability proportional =
to its rank in sorted quality</span>
    scores =3D [(flow.makespan(data, perm), perm) <span class=3D"kw">for</s=
pan> perm in candidates]
    i =3D <span class=3D"dv">0</span>
    <span class=3D"kw">while</span> (random.random() &lt; <span class=3D"fl=
">0.5</span>) and (i &lt; <span class=3D"dt">len</span>(scores) - <span cla=
ss=3D"dv">1</span>):
        i +=3D <span class=3D"dv">1</span>
    <span class=3D"kw">return</span> <span class=3D"dt">sorted</span>(score=
s)[i][<span class=3D"dv">1</span>]</code></pre>

<p>Because makespan is the criteria that we are trying to optimize, hillcli=
mbing will steer the local search process towards solutions with a better m=
akespan. Introducing randomness allows us to explore the neighbourhood inst=
ead of going blindly towards the best-looking solution at every step.</p>

<h2 id=3D"dynamic-strategy-selection">Dynamic Strategy Selection</h2>

<p>At the heart of the local search for a good permutation is the use of a =
particular heuristic and neighbourhood function to jump from one solution t=
o another. How do we choose one set of options over another? In practice, i=
t frequently pays off to switch strategies during the search. The dynamic s=
trategy selection that we use will switch between combinations of heuristic=
 and neighbourhood functions to try and shift dynamically to those strategi=
es that work best. For us, a <em>strategy</em> is a particular configuratio=
n of heuristic and neighbourhood functions (including their parameter value=
s.)</p>

<p>To begin, our code constructs the range of strategies that we want to co=
nsider during solving. In the strategy initialization, we use the <code>par=
tial</code> function from the <code>functools</code> package to partially a=
ssign the parameters for each of the neighbourhoods. Additionally, we const=
ruct a list of the heuristic functions, and finally we use the product oper=
ator to add every combination of neighbourhood and heuristic function as a =
new strategy.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"co">################</span>
<span class=3D"co">## Strategies ##</span>
<span class=3D"co">#################################################</span>
<span class=3D"co">## A strategy is a particular configuration</span>
<span class=3D"co">##  of neighbourhood generator (to compute</span>
<span class=3D"co">##  the next set of candidates) and heuristic</span>
<span class=3D"co">##  computation (to select the best candidate).</span>
<span class=3D"co">##</span>

STRATEGIES =3D []

<span class=3D"co"># Using a namedtuple is a little cleaner than using dict=
ionaries.</span>
<span class=3D"co">#  E.g., strategy['name'] versus strategy.name</span>
Strategy =3D namedtuple(<span class=3D"st">'Strategy'</span>, [<span class=
=3D"st">'name'</span>, <span class=3D"st">'neighbourhood'</span>, <span cla=
ss=3D"st">'heuristic'</span>])

<span class=3D"kw">def</span> initialize_strategies():

    <span class=3D"kw">global</span> STRATEGIES

    <span class=3D"co"># Define the neighbourhoods (and parameters) that we=
 would like to use</span>
    neighbourhoods =3D [
        (<span class=3D"st">'Random Permutation'</span>, partial(neigh.neig=
hbours_random, num=3D<span class=3D"dv">100</span>)),
        (<span class=3D"st">'Swapped Pairs'</span>, neigh.neighbours_swap),
        (<span class=3D"st">'Large Neighbourhood Search (2)'</span>, partia=
l(neigh.neighbours_LNS, size=3D<span class=3D"dv">2</span>)),
        (<span class=3D"st">'Large Neighbourhood Search (3)'</span>, partia=
l(neigh.neighbours_LNS, size=3D<span class=3D"dv">3</span>)),
        (<span class=3D"st">'Idle Neighbourhood (3)'</span>, partial(neigh.=
neighbours_idle, size=3D<span class=3D"dv">3</span>)),
        (<span class=3D"st">'Idle Neighbourhood (4)'</span>, partial(neigh.=
neighbours_idle, size=3D<span class=3D"dv">4</span>)),
        (<span class=3D"st">'Idle Neighbourhood (5)'</span>, partial(neigh.=
neighbours_idle, size=3D<span class=3D"dv">5</span>))
    ]

    <span class=3D"co"># Define the heuristics that we would like to use</s=
pan>
    heuristics =3D [
        (<span class=3D"st">'Hill Climbing'</span>, heur.heur_hillclimbing)=
,
        (<span class=3D"st">'Random Selection'</span>, heur.heur_random),
        (<span class=3D"st">'Biased Random Selection'</span>, heur.heur_ran=
dom_hillclimbing)
    ]

    <span class=3D"co"># Combine every neighbourhood and heuristic strategy=
</span>
    <span class=3D"kw">for</span> (n, h) in product(neighbourhoods, heurist=
ics):
        STRATEGIES.append(Strategy(<span class=3D"st">"</span><span class=
=3D"ot">%s</span><span class=3D"st"> / </span><span class=3D"ot">%s</span><=
span class=3D"st">"</span> % (n[<span class=3D"dv">0</span>], h[<span class=
=3D"dv">0</span>]), n[<span class=3D"dv">1</span>], h[<span class=3D"dv">1<=
/span>]))</code></pre>

<p>Once the strategies are defined, we do not necessarily want to stick wit=
h a single option during search. Instead, we select randomly any one of the=
 strategies, but <em>weight the selection</em> based on how well the strate=
gy has performed. We describe the weighting below, but for the <code>pick_s=
trategy</code> function, we need only a list of strategies and a correspond=
ing list of relative weights (any number will do). To select a random strat=
egy with the given weights, we pick a number uniformly between 0 and the su=
m of all weights. Subsequently, we find the lowest index <span class=3D"mat=
h"><span class=3D"MathJax_Preview" style=3D"color: inherit; display: none;"=
></span><span class=3D"MathJax" id=3D"MathJax-Element-29-Frame" tabindex=3D=
"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&q=
uot;><mi>i</mi></math>" role=3D"presentation" style=3D"position: relative;"=
><nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-112" st=
yle=3D"width: 0.388em; display: inline-block;"><span style=3D"display: inli=
ne-block; position: relative; width: 0.324em; height: 0px; font-size: 120%;=
"><span style=3D"position: absolute; clip: rect(1.349em 1000.26em 2.375em -=
999.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-S=
pan-113"><span class=3D"mi" id=3D"MathJax-Span-114" style=3D"font-family: M=
athJax_Math-italic;">i</span></span><span style=3D"display: inline-block; w=
idth: 0px; height: 2.183em;"></span></span></span><span style=3D"display: i=
nline-block; overflow: hidden; vertical-align: -0.073em; border-left: 0px s=
olid; width: 0px; height: 0.927em;"></span></span></nobr><span class=3D"MJX=
_Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1=
998/Math/MathML"><mi>i</mi></math></span></span></span> such that the sum o=
f all of the weights for indices smaller than <span class=3D"math"><span cl=
ass=3D"MathJax_Preview" style=3D"color: inherit; display: none;"></span><sp=
an class=3D"MathJax" id=3D"MathJax-Element-30-Frame" tabindex=3D"0" data-ma=
thml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>i<=
/mi></math>" role=3D"presentation" style=3D"position: relative;"><nobr aria=
-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-115" style=3D"widt=
h: 0.388em; display: inline-block;"><span style=3D"display: inline-block; p=
osition: relative; width: 0.324em; height: 0px; font-size: 120%;"><span sty=
le=3D"position: absolute; clip: rect(1.349em 1000.26em 2.375em -999.997em);=
 top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Span-116"><s=
pan class=3D"mi" id=3D"MathJax-Span-117" style=3D"font-family: MathJax_Math=
-italic;">i</span></span><span style=3D"display: inline-block; width: 0px; =
height: 2.183em;"></span></span></span><span style=3D"display: inline-block=
; overflow: hidden; vertical-align: -0.073em; border-left: 0px solid; width=
: 0px; height: 0.927em;"></span></span></nobr><span class=3D"MJX_Assistive_=
MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/1998/Math/Ma=
thML"><mi>i</mi></math></span></span></span> is greater than the random num=
ber that we have chosen. This technique, sometimes referred to as <em>roule=
tte wheel selection</em>, will randomly pick a strategy for us and give a g=
reater chance to those strategies with higher weight.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python"><span cl=
ass=3D"kw">def</span> pick_strategy(strategies, weights):
    <span class=3D"co"># Picks a random strategy based on its weight: roule=
tte wheel selection</span>
    <span class=3D"co">#  Rather than selecting a strategy entirely at rand=
om, we bias the</span>
    <span class=3D"co">#  random selection towards strategies that have wor=
ked well in the</span>
    <span class=3D"co">#  past (according to the weight value).</span>
    total =3D <span class=3D"dt">sum</span>([weights[strategy] <span class=
=3D"kw">for</span> strategy in strategies])
    pick =3D random.uniform(<span class=3D"dv">0</span>, total)
    count =3D weights[strategies[<span class=3D"dv">0</span>]]

    i =3D <span class=3D"dv">0</span>
    <span class=3D"kw">while</span> pick &gt; count:
        count +=3D weights[strategies[i<span class=3D"dv">+1</span>]]
        i +=3D <span class=3D"dv">1</span>

    <span class=3D"kw">return</span> strategies[i]</code></pre>

<p>What remains is to describe how the weights are augmented during the sea=
rch for a solution. This occurs in the main while loop of the solver at reg=
ularly timed intervals (defined with the <code>TIME_INCREMENT</code> variab=
le):</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">
        <span class=3D"co"># At regular intervals, switch the weighting on =
the strategies available.</span>
        <span class=3D"co">#  This way, the search can dynamically shift to=
wards strategies that have</span>
        <span class=3D"co">#  proven more effective recently.</span>
        <span class=3D"kw">if</span> time.time() &gt; time_last_switch + TI=
ME_INCREMENT:

            time_last_switch =3D time.time()</code></pre>

<p>Recall that <code>strat_improvements</code> stores the sum of all improv=
ements that a strategy has made while <code>strat_time_spent</code> stores =
the time that the strategy has been given during the last interval. We norm=
alize the improvements made by the total time spent for each strategy to ge=
t a metric of how well each strategy has performed in the last interval. Be=
cause a strategy may not have had a chance to run at all, we choose a small=
 amount of time as a default value.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"co"># Normalize the improvements made by the time it tak=
es to make them</span>
            results =3D <span class=3D"dt">sorted</span>([
                (<span class=3D"dt">float</span>(strat_improvements[s]) / <=
span class=3D"dt">max</span>(<span class=3D"fl">0.001</span>, strat_time_sp=
ent[s]), s)
                <span class=3D"kw">for</span> s in STRATEGIES])</code></pre=
>

<p>Now that we have a ranking of how well each strategy has performed, we a=
dd <span class=3D"math"><span class=3D"MathJax_Preview" style=3D"color: inh=
erit; display: none;"></span><span class=3D"MathJax" id=3D"MathJax-Element-=
31-Frame" tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.o=
rg/1998/Math/MathML&quot;><mi>k</mi></math>" role=3D"presentation" style=3D=
"position: relative;"><nobr aria-hidden=3D"true"><span class=3D"math" id=3D=
"MathJax-Span-118" style=3D"width: 0.644em; display: inline-block;"><span s=
tyle=3D"display: inline-block; position: relative; width: 0.516em; height: =
0px; font-size: 120%;"><span style=3D"position: absolute; clip: rect(1.285e=
m 1000.52em 2.375em -999.997em); top: -2.176em; left: 0em;"><span class=3D"=
mrow" id=3D"MathJax-Span-119"><span class=3D"mi" id=3D"MathJax-Span-120" st=
yle=3D"font-family: MathJax_Math-italic;">k</span></span><span style=3D"dis=
play: inline-block; width: 0px; height: 2.183em;"></span></span></span><spa=
n style=3D"display: inline-block; overflow: hidden; vertical-align: -0.073e=
m; border-left: 0px solid; width: 0px; height: 1.004em;"></span></span></no=
br><span class=3D"MJX_Assistive_MathML" role=3D"presentation"><math xmlns=
=3D"http://www.w3.org/1998/Math/MathML"><mi>k</mi></math></span></span></sp=
an> to the weight of the best strategy (assuming we had <span class=3D"math=
"><span class=3D"MathJax_Preview" style=3D"color: inherit; display: none;">=
</span><span class=3D"MathJax" id=3D"MathJax-Element-32-Frame" tabindex=3D"=
0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Math/MathML&qu=
ot;><mi>k</mi></math>" role=3D"presentation" style=3D"position: relative;">=
<nobr aria-hidden=3D"true"><span class=3D"math" id=3D"MathJax-Span-121" sty=
le=3D"width: 0.644em; display: inline-block;"><span style=3D"display: inlin=
e-block; position: relative; width: 0.516em; height: 0px; font-size: 120%;"=
><span style=3D"position: absolute; clip: rect(1.285em 1000.52em 2.375em -9=
99.997em); top: -2.176em; left: 0em;"><span class=3D"mrow" id=3D"MathJax-Sp=
an-122"><span class=3D"mi" id=3D"MathJax-Span-123" style=3D"font-family: Ma=
thJax_Math-italic;">k</span></span><span style=3D"display: inline-block; wi=
dth: 0px; height: 2.183em;"></span></span></span><span style=3D"display: in=
line-block; overflow: hidden; vertical-align: -0.073em; border-left: 0px so=
lid; width: 0px; height: 1.004em;"></span></span></nobr><span class=3D"MJX_=
Assistive_MathML" role=3D"presentation"><math xmlns=3D"http://www.w3.org/19=
98/Math/MathML"><mi>k</mi></math></span></span></span> strategies), <span c=
lass=3D"math"><span class=3D"MathJax_Preview" style=3D"color: inherit; disp=
lay: none;"></span><span class=3D"MathJax" id=3D"MathJax-Element-33-Frame" =
tabindex=3D"0" data-mathml=3D"<math xmlns=3D&quot;http://www.w3.org/1998/Ma=
th/MathML&quot;><mi>k</mi><mo>&amp;#x2212;</mo><mn>1</mn></math>" role=3D"p=
resentation" style=3D"position: relative;"><nobr aria-hidden=3D"true"><span=
 class=3D"math" id=3D"MathJax-Span-124" style=3D"width: 2.631em; display: i=
nline-block;"><span style=3D"display: inline-block; position: relative; wid=
th: 2.183em; height: 0px; font-size: 120%;"><span style=3D"position: absolu=
te; clip: rect(1.285em 1002.12em 2.439em -999.997em); top: -2.176em; left: =
0em;"><span class=3D"mrow" id=3D"MathJax-Span-125"><span class=3D"mi" id=3D=
"MathJax-Span-126" style=3D"font-family: MathJax_Math-italic;">k</span><spa=
n class=3D"mo" id=3D"MathJax-Span-127" style=3D"font-family: MathJax_Main; =
padding-left: 0.196em;">=E2=88=92</span><span class=3D"mn" id=3D"MathJax-Sp=
an-128" style=3D"font-family: MathJax_Main; padding-left: 0.196em;">1</span=
></span><span style=3D"display: inline-block; width: 0px; height: 2.183em;"=
></span></span></span><span style=3D"display: inline-block; overflow: hidde=
n; vertical-align: -0.15em; border-left: 0px solid; width: 0px; height: 1.0=
81em;"></span></span></nobr><span class=3D"MJX_Assistive_MathML" role=3D"pr=
esentation"><math xmlns=3D"http://www.w3.org/1998/Math/MathML"><mi>k</mi><m=
o>=E2=88=92</mo><mn>1</mn></math></span></span></span> to the next best str=
ategy, etc. Each strategy will have its weight increased, and the worst str=
ategy in the list will see an increase of only 1.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"co"># Boost the weight for the successful strategies</sp=
an>
            <span class=3D"kw">for</span> i in <span class=3D"dt">range</sp=
an>(<span class=3D"dt">len</span>(STRATEGIES)):
                strat_weights[results[i][<span class=3D"dv">1</span>]] +=3D=
 <span class=3D"dt">len</span>(STRATEGIES) - i</code></pre>

<p>As an extra measure, we artificially bump up all of the strategies that =
were not used. This is done so that we do not forget about a strategy entir=
ely. While one strategy may appear to perform badly in the beginning, later=
 in the search it can prove quite useful.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
        <span class=3D"co"># Additionally boost the unused strategies to av=
oid starvation</span>
                <span class=3D"kw">if</span> results[i][<span class=3D"dv">=
0</span>] =3D=3D <span class=3D"dv">0</span>:
                    strat_weights[results[i][<span class=3D"dv">1</span>]] =
+=3D <span class=3D"dt">len</span>(STRATEGIES)</code></pre>

<p>Finally, we output some information about the strategy ranking (if the <=
code>DEBUG_SWITCH</code> flag is set), and we reset the <code>strat_improve=
ments</code> and <code>strat_time_spent</code> variables for the next inter=
val.</p>

<pre class=3D"sourceCode python"><code class=3D"sourceCode python">        =
    <span class=3D"kw">if</span> DEBUG_SWITCH:
                <span class=3D"dt">print</span> <span class=3D"st">"</span>=
<span class=3D"ch">\n</span><span class=3D"st">Computing another switch..."=
</span>
                <span class=3D"dt">print</span> <span class=3D"st">"Best: <=
/span><span class=3D"ot">%s</span><span class=3D"st"> (</span><span class=
=3D"ot">%d</span><span class=3D"st">)"</span> % (results[<span class=3D"dv"=
>0</span>][<span class=3D"dv">1</span>].name, results[<span class=3D"dv">0<=
/span>][<span class=3D"dv">0</span>])
                <span class=3D"dt">print</span> <span class=3D"st">"Worst: =
</span><span class=3D"ot">%s</span><span class=3D"st"> (</span><span class=
=3D"ot">%d</span><span class=3D"st">)"</span> % (results[-<span class=3D"dv=
">1</span>][<span class=3D"dv">1</span>].name, results[-<span class=3D"dv">=
1</span>][<span class=3D"dv">0</span>])
                <span class=3D"dt">print</span> results
                <span class=3D"dt">print</span> <span class=3D"dt">sorted</=
span>([strat_weights[STRATEGIES[i]]=20
                              <span class=3D"kw">for</span> i in <span clas=
s=3D"dt">range</span>(<span class=3D"dt">len</span>(STRATEGIES))])

            strat_improvements =3D {strategy: <span class=3D"dv">0</span> <=
span class=3D"kw">for</span> strategy in STRATEGIES}
            strat_time_spent =3D {strategy: <span class=3D"dv">0</span> <sp=
an class=3D"kw">for</span> strategy in STRATEGIES}</code></pre>

<h2 id=3D"discussion">Discussion</h2>

<p>In this chapter we have seen what can be accomplished with a relatively =
small amount of code to solve the complex optimization problem of flow shop=
 scheduling. Finding the best solution to a large optimization problem such=
 as the flow shop can be difficult. In a case like this, we can turn to app=
roximation techniques such as local search to compute a solution that is <e=
m>good enough</em>. With local search we can move from one solution to anot=
her, aiming to find one of good quality.</p>

<p>The general intuition behind local search can be applied to a wide range=
 of problems. We focused on (1) generating a neighbourhood of related solut=
ions to a problem from one candidate solution, and (2) establishing ways to=
 evaluate and compare solutions. With these two components in hand, we can =
use the local search paradigm to find a valuable solution when the best opt=
ion is simply too difficult to compute.</p>

<p>Rather than using any one strategy to solve the problem, we saw how a st=
rategy can be chosen dynamically to shift during the solving process. This =
simple and powerful technique gives the program the ability to mix and matc=
h partial strategies for the problem at hand, and it also means that the de=
veloper does not have to hand-tailor the strategy.</p>
        </div>
      </div>
    </div>
 =20
<div id=3D"cntvlive2-is-installed"></div><div style=3D"position: absolute; =
width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margi=
n: 0px;"><div id=3D"MathJax_Font_Test" style=3D"position: absolute; visibil=
ity: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; m=
argin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-t=
ransform: none; line-height: normal; letter-spacing: normal; word-spacing: =
normal; font-size: 40px; font-weight: normal; font-style: normal; font-fami=
ly: MathJax_Main-bold, sans-serif;"></div></div><div id=3D"qb-sougou-search=
" style=3D"display: none; opacity: 0;"><p>=E6=90=9C=E7=B4=A2</p><p class=3D=
"last-btn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"cid:frame-96-ab1a3e55-3b45-=
4b31-87db-7597bfaa44b4@mhtml.blink"></iframe></div></body></html>
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap.css

@charset "utf-8";

article, aside, details, figcaption, figure, footer, header, hgroup, nav, s=
ection { display: block; }

audio, canvas, video { display: inline-block; }

audio:not([controls]) { display: none; }

html { font-size: 100%; text-size-adjust: 100%; }

a:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2px;=
 }

a:hover, a:active { outline: 0px; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { max-width: 100%; height: auto; border: 0px; }

button, input, select, textarea { margin: 0px; font-size: 100%; vertical-al=
ign: middle; }

button, input { line-height: normal; }

button, input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit=
"] { cursor: pointer; -webkit-appearance: button; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-decoration, input[type=3D"search"]::=
-webkit-search-cancel-button { -webkit-appearance: none; }

textarea { overflow: auto; vertical-align: top; }

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

body { margin: 0px; font-family: "Helvetica Neue", Helvetica, Arial, sans-s=
erif; font-size: 13px; line-height: 18px; color: rgb(51, 51, 51); backgroun=
d-color: rgb(255, 255, 255); }

a { color: rgb(0, 136, 204); text-decoration: none; }

a:hover { color: rgb(0, 85, 128); text-decoration: underline; }

.row { margin-left: -20px; }

.row::before, .row::after { display: table; content: ""; }

.row::after { clear: both; }

[class*=3D"span"] { float: left; margin-left: 20px; }

.span1 { width: 60px; }

.span2 { width: 140px; }

.span3 { width: 220px; }

.span4 { width: 300px; }

.span5 { width: 380px; }

.span6 { width: 460px; }

.span7 { width: 540px; }

.span8 { width: 620px; }

.span9 { width: 700px; }

.span10 { width: 780px; }

.span11 { width: 860px; }

.span12, .container { width: 940px; }

.offset1 { margin-left: 100px; }

.offset2 { margin-left: 180px; }

.offset3 { margin-left: 260px; }

.offset4 { margin-left: 340px; }

.offset5 { margin-left: 420px; }

.offset6 { margin-left: 500px; }

.offset7 { margin-left: 580px; }

.offset8 { margin-left: 660px; }

.offset9 { margin-left: 740px; }

.offset10 { margin-left: 820px; }

.offset11 { margin-left: 900px; }

.row-fluid { width: 100%; }

.row-fluid::before, .row-fluid::after { display: table; content: ""; }

.row-fluid::after { clear: both; }

.row-fluid > [class*=3D"span"] { float: left; margin-left: 2.12766%; }

.row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }

.row-fluid > .span1 { width: 6.38298%; }

.row-fluid > .span2 { width: 14.8936%; }

.row-fluid > .span3 { width: 23.4043%; }

.row-fluid > .span4 { width: 31.9149%; }

.row-fluid > .span5 { width: 40.4255%; }

.row-fluid > .span6 { width: 48.9362%; }

.row-fluid > .span7 { width: 57.4468%; }

.row-fluid > .span8 { width: 65.9574%; }

.row-fluid > .span9 { width: 74.4681%; }

.row-fluid > .span10 { width: 82.9787%; }

.row-fluid > .span11 { width: 91.4894%; }

.row-fluid > .span12 { width: 100%; }

.container { width: 940px; margin-left: auto; margin-right: auto; }

.container::before, .container::after { display: table; content: ""; }

.container::after { clear: both; }

.container-fluid { padding-left: 20px; padding-right: 20px; }

.container-fluid::before, .container-fluid::after { display: table; content=
: ""; }

.container-fluid::after { clear: both; }

p { margin: 0px 0px 9px; font-family: "Helvetica Neue", Helvetica, Arial, s=
ans-serif; font-size: 13px; line-height: 18px; }

p small { font-size: 11px; color: rgb(153, 153, 153); }

.lead { margin-bottom: 18px; font-size: 20px; font-weight: 200; line-height=
: 27px; }

h1, h2, h3, h4, h5, h6 { margin: 0px; font-weight: bold; color: rgb(51, 51,=
 51); text-rendering: optimizeLegibility; }

h1 small, h2 small, h3 small, h4 small, h5 small, h6 small { font-weight: n=
ormal; color: rgb(153, 153, 153); }

h1 { font-size: 30px; line-height: 36px; }

h1 small { font-size: 18px; }

h2 { font-size: 24px; line-height: 36px; }

h2 small { font-size: 18px; }

h3 { line-height: 27px; font-size: 18px; }

h3 small { font-size: 14px; }

h4, h5, h6 { line-height: 18px; }

h4 { font-size: 14px; }

h4 small { font-size: 12px; }

h5 { font-size: 12px; }

h6 { font-size: 11px; color: rgb(153, 153, 153); text-transform: uppercase;=
 }

.page-header { padding-bottom: 17px; margin: 18px 0px; border-bottom: 1px s=
olid rgb(238, 238, 238); }

.page-header h1 { line-height: 1; }

ul, ol { padding: 0px; margin: 0px 0px 9px 25px; }

ul ul, ul ol, ol ol, ol ul { margin-bottom: 0px; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { line-height: 18px; }

ul.unstyled, ol.unstyled { margin-left: 0px; list-style: none; }

dl { margin-bottom: 18px; }

dt, dd { line-height: 18px; }

dt { font-weight: bold; }

dd { margin-left: 9px; }

hr { margin: 18px 0px; border-width: 1px 0px; border-right-style: initial; =
border-left-style: initial; border-right-color: initial; border-left-color:=
 initial; border-image: initial; border-top-style: solid; border-top-color:=
 rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(2=
55, 255, 255); }

strong { font-weight: bold; }

em { font-style: italic; }

.muted { color: rgb(153, 153, 153); }

abbr { font-size: 90%; text-transform: uppercase; border-bottom: 1px dotted=
 rgb(221, 221, 221); cursor: help; }

blockquote { padding: 0px 0px 0px 15px; margin: 0px 0px 18px; border-left: =
5px solid rgb(238, 238, 238); }

blockquote p { margin-bottom: 0px; font-size: 16px; font-weight: 300; line-=
height: 22.5px; }

blockquote small { display: block; line-height: 18px; color: rgb(153, 153, =
153); }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote.pull-right { float: right; padding-left: 0px; padding-right: 15p=
x; border-left: 0px; border-right: 5px solid rgb(238, 238, 238); }

blockquote.pull-right p, blockquote.pull-right small { text-align: right; }

q::before, q::after, blockquote::before, blockquote::after { content: ""; }

address { display: block; margin-bottom: 18px; line-height: 18px; font-styl=
e: normal; }

small { font-size: 100%; }

cite { font-style: normal; }

code, pre { padding: 0px 3px 2px; font-family: Menlo, Monaco, "Courier New"=
, monospace; font-size: 12px; color: rgb(51, 51, 51); border-radius: 3px; }

code { padding: 3px 4px; background-color: rgb(247, 247, 249); border: 1px =
solid rgb(225, 225, 232); }

pre { display: block; padding: 8.5px; margin: 0px 0px 9px; font-size: 12px;=
 line-height: 18px; background-color: rgb(245, 245, 245); border: 1px solid=
 rgba(0, 0, 0, 0.14902); border-radius: 4px; overflow-x: auto; overflow-y: =
hidden; width: auto; }

pre.prettyprint { margin-bottom: 18px; }

pre code { padding: 0px; color: inherit; background-color: transparent; bor=
der: 0px; }

.pre-scrollable { max-height: 340px; overflow-y: scroll; }

form { margin: 0px 0px 18px; }

fieldset { padding: 0px; margin: 0px; border: 0px; }

legend { display: block; width: 100%; padding: 0px; margin-bottom: 27px; fo=
nt-size: 19.5px; line-height: 36px; color: rgb(51, 51, 51); border-width: 0=
px 0px 1px; border-top-style: initial; border-right-style: initial; border-=
left-style: initial; border-top-color: initial; border-right-color: initial=
; border-left-color: initial; border-image: initial; border-bottom-style: s=
olid; border-bottom-color: rgb(238, 238, 238); }

legend small { font-size: 13.5px; color: rgb(153, 153, 153); }

label, input, button, select, textarea { font-size: 13px; font-weight: norm=
al; line-height: 18px; }

input, button, select, textarea { font-family: "Helvetica Neue", Helvetica,=
 Arial, sans-serif; }

label { display: block; margin-bottom: 5px; color: rgb(51, 51, 51); }

input, textarea, select, .uneditable-input { display: inline-block; width: =
210px; height: 18px; padding: 4px; margin-bottom: 9px; font-size: 13px; lin=
e-height: 18px; color: rgb(85, 85, 85); border: 1px solid rgb(204, 204, 204=
); border-radius: 3px; }

.uneditable-textarea { width: auto; height: auto; }

label input, label textarea, label select { display: block; }

input[type=3D"image"], input[type=3D"checkbox"], input[type=3D"radio"] { wi=
dth: auto; height: auto; padding: 0px; margin: 3px 0px; line-height: normal=
; cursor: pointer; border-radius: 0px; }

input[type=3D"image"] { border: 0px; }

input[type=3D"file"] { width: auto; padding: initial; line-height: initial;=
 border: initial; background-color: initial; box-shadow: none; }

input[type=3D"button"], input[type=3D"reset"], input[type=3D"submit"] { wid=
th: auto; height: auto; }

select, input[type=3D"file"] { height: 28px; line-height: 28px; }

input[type=3D"file"] { }

select { width: 220px; background-color: rgb(255, 255, 255); }

select[multiple], select[size] { height: auto; }

input[type=3D"image"] { box-shadow: none; }

textarea { height: auto; }

input[type=3D"hidden"] { display: none; }

.radio, .checkbox { padding-left: 18px; }

.radio input[type=3D"radio"], .checkbox input[type=3D"checkbox"] { float: l=
eft; margin-left: -18px; }

.controls > .radio:first-child, .controls > .checkbox:first-child { padding=
-top: 5px; }

.radio.inline, .checkbox.inline { display: inline-block; padding-top: 5px; =
margin-bottom: 0px; vertical-align: middle; }

.radio.inline + .radio.inline, .checkbox.inline + .checkbox.inline { margin=
-left: 10px; }

input, textarea { box-shadow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset; t=
ransition: border 0.2s linear, box-shadow 0.2s linear; }

input:focus, textarea:focus { border-color: rgba(82, 168, 236, 0.8); box-sh=
adow: rgba(0, 0, 0, 0.0745098) 0px 1px 1px inset, rgba(82, 168, 236, 0.6) 0=
px 0px 8px; outline: 0px; }

input[type=3D"file"]:focus, input[type=3D"radio"]:focus, input[type=3D"chec=
kbox"]:focus, select:focus { box-shadow: none; outline: -webkit-focus-ring-=
color auto 5px; outline-offset: -2px; }

.input-mini { width: 60px; }

.input-small { width: 90px; }

.input-medium { width: 150px; }

.input-large { width: 210px; }

.input-xlarge { width: 270px; }

.input-xxlarge { width: 530px; }

input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"],=
 .uneditable-input { float: none; margin-left: 0px; }

input.span1, textarea.span1, .uneditable-input.span1 { width: 50px; }

input.span2, textarea.span2, .uneditable-input.span2 { width: 130px; }

input.span3, textarea.span3, .uneditable-input.span3 { width: 210px; }

input.span4, textarea.span4, .uneditable-input.span4 { width: 290px; }

input.span5, textarea.span5, .uneditable-input.span5 { width: 370px; }

input.span6, textarea.span6, .uneditable-input.span6 { width: 450px; }

input.span7, textarea.span7, .uneditable-input.span7 { width: 530px; }

input.span8, textarea.span8, .uneditable-input.span8 { width: 610px; }

input.span9, textarea.span9, .uneditable-input.span9 { width: 690px; }

input.span10, textarea.span10, .uneditable-input.span10 { width: 770px; }

input.span11, textarea.span11, .uneditable-input.span11 { width: 850px; }

input.span12, textarea.span12, .uneditable-input.span12 { width: 930px; }

input[disabled], select[disabled], textarea[disabled], input[readonly], sel=
ect[readonly], textarea[readonly] { background-color: rgb(245, 245, 245); b=
order-color: rgb(221, 221, 221); cursor: not-allowed; }

.control-group.warning > label, .control-group.warning .help-block, .contro=
l-group.warning .help-inline { color: rgb(192, 152, 83); }

.control-group.warning input, .control-group.warning select, .control-group=
.warning textarea { color: rgb(192, 152, 83); border-color: rgb(192, 152, 8=
3); }

.control-group.warning input:focus, .control-group.warning select:focus, .c=
ontrol-group.warning textarea:focus { border-color: rgb(164, 126, 60); box-=
shadow: rgb(219, 197, 158) 0px 0px 6px; }

.control-group.warning .input-prepend .add-on, .control-group.warning .inpu=
t-append .add-on { color: rgb(192, 152, 83); background-color: rgb(252, 248=
, 227); border-color: rgb(192, 152, 83); }

.control-group.error > label, .control-group.error .help-block, .control-gr=
oup.error .help-inline { color: rgb(185, 74, 72); }

.control-group.error input, .control-group.error select, .control-group.err=
or textarea { color: rgb(185, 74, 72); border-color: rgb(185, 74, 72); }

.control-group.error input:focus, .control-group.error select:focus, .contr=
ol-group.error textarea:focus { border-color: rgb(149, 59, 57); box-shadow:=
 rgb(213, 147, 146) 0px 0px 6px; }

.control-group.error .input-prepend .add-on, .control-group.error .input-ap=
pend .add-on { color: rgb(185, 74, 72); background-color: rgb(242, 222, 222=
); border-color: rgb(185, 74, 72); }

.control-group.success > label, .control-group.success .help-block, .contro=
l-group.success .help-inline { color: rgb(70, 136, 71); }

.control-group.success input, .control-group.success select, .control-group=
.success textarea { color: rgb(70, 136, 71); border-color: rgb(70, 136, 71)=
; }

.control-group.success input:focus, .control-group.success select:focus, .c=
ontrol-group.success textarea:focus { border-color: rgb(53, 102, 53); box-s=
hadow: rgb(122, 186, 123) 0px 0px 6px; }

.control-group.success .input-prepend .add-on, .control-group.success .inpu=
t-append .add-on { color: rgb(70, 136, 71); background-color: rgb(223, 240,=
 216); border-color: rgb(70, 136, 71); }

input:focus:required:invalid, textarea:focus:required:invalid, select:focus=
:required:invalid { color: rgb(185, 74, 72); border-color: rgb(238, 95, 91)=
; }

input:focus:required:invalid:focus, textarea:focus:required:invalid:focus, =
select:focus:required:invalid:focus { border-color: rgb(233, 50, 45); box-s=
hadow: rgb(248, 185, 183) 0px 0px 6px; }

.form-actions { padding: 17px 20px 18px; margin-top: 18px; margin-bottom: 1=
8px; background-color: rgb(245, 245, 245); border-top: 1px solid rgb(221, 2=
21, 221); }

.uneditable-input { display: block; background-color: rgb(255, 255, 255); b=
order-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.0235294) 0px 1=
px 2px inset; cursor: not-allowed; }

::-webkit-input-placeholder { color: rgb(153, 153, 153); }

.help-block { display: block; margin-top: 5px; margin-bottom: 0px; color: r=
gb(153, 153, 153); }

.help-inline { display: inline-block; margin-bottom: 9px; vertical-align: m=
iddle; padding-left: 5px; }

.input-prepend, .input-append { margin-bottom: 5px; }

.input-prepend::before, .input-append::before, .input-prepend::after, .inpu=
t-append::after { display: table; content: ""; }

.input-prepend::after, .input-append::after { clear: both; }

.input-prepend input, .input-append input, .input-prepend .uneditable-input=
, .input-append .uneditable-input { border-radius: 0px 3px 3px 0px; }

.input-prepend input:focus, .input-append input:focus, .input-prepend .uned=
itable-input:focus, .input-append .uneditable-input:focus { position: relat=
ive; z-index: 2; }

.input-prepend .uneditable-input, .input-append .uneditable-input { border-=
left-color: rgb(204, 204, 204); }

.input-prepend .add-on, .input-append .add-on { float: left; display: block=
; width: auto; min-width: 16px; height: 18px; margin-right: -1px; padding: =
4px 5px; font-weight: normal; line-height: 18px; color: rgb(153, 153, 153);=
 text-align: center; text-shadow: rgb(255, 255, 255) 0px 1px 0px; backgroun=
d-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-r=
adius: 3px 0px 0px 3px; }

.input-prepend .active, .input-append .active { background-color: rgb(169, =
219, 169); border-color: rgb(70, 165, 70); }

.input-prepend .add-on { }

.input-append input, .input-append .uneditable-input { float: left; border-=
radius: 3px 0px 0px 3px; }

.input-append .uneditable-input { border-left-color: rgb(238, 238, 238); bo=
rder-right-color: rgb(204, 204, 204); }

.input-append .add-on { margin-right: 0px; margin-left: -1px; border-radius=
: 0px 3px 3px 0px; }

.input-append input:first-child { }

.input-append input:first-child + .add-on { }

.search-query { padding-left: 14px; padding-right: 14px; margin-bottom: 0px=
; border-radius: 14px; }

.form-search input, .form-inline input, .form-horizontal input, .form-searc=
h textarea, .form-inline textarea, .form-horizontal textarea, .form-search =
select, .form-inline select, .form-horizontal select, .form-search .help-in=
line, .form-inline .help-inline, .form-horizontal .help-inline, .form-searc=
h .uneditable-input, .form-inline .uneditable-input, .form-horizontal .uned=
itable-input { display: inline-block; margin-bottom: 0px; }

.form-search .hide, .form-inline .hide, .form-horizontal .hide { display: n=
one; }

.form-search label, .form-inline label, .form-search .input-append, .form-i=
nline .input-append, .form-search .input-prepend, .form-inline .input-prepe=
nd { display: inline-block; }

.form-search .input-append .add-on, .form-inline .input-prepend .add-on, .f=
orm-search .input-append .add-on, .form-inline .input-prepend .add-on { ver=
tical-align: middle; }

.form-search .radio, .form-inline .radio, .form-search .checkbox, .form-inl=
ine .checkbox { margin-bottom: 0px; vertical-align: middle; }

.control-group { margin-bottom: 9px; }

legend + .control-group { margin-top: 18px; -webkit-margin-top-collapse: se=
parate; }

.form-horizontal .control-group { margin-bottom: 18px; }

.form-horizontal .control-group::before, .form-horizontal .control-group::a=
fter { display: table; content: ""; }

.form-horizontal .control-group::after { clear: both; }

.form-horizontal .control-label { float: left; width: 140px; padding-top: 5=
px; text-align: right; }

.form-horizontal .controls { margin-left: 160px; }

.form-horizontal .form-actions { padding-left: 160px; }

table { max-width: 100%; border-collapse: collapse; border-spacing: 0px; }

.table { width: 100%; margin-bottom: 18px; }

.table th, .table td { padding: 8px; line-height: 18px; text-align: left; v=
ertical-align: top; border-top: 1px solid rgb(221, 221, 221); }

.table th { font-weight: bold; }

.table thead th { vertical-align: bottom; }

.table thead:first-child tr th, .table thead:first-child tr td { border-top=
: 0px; }

.table tbody + tbody { border-top: 2px solid rgb(221, 221, 221); }

.table-condensed th, .table-condensed td { padding: 4px 5px; }

.table-bordered { border: 1px solid rgb(221, 221, 221); border-collapse: se=
parate; border-radius: 4px; }

.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, =
.table-bordered td + th { border-left: 1px solid rgb(221, 221, 221); }

.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:=
first-child tr:first-child th, .table-bordered tbody:first-child tr:first-c=
hild td { border-top: 0px; }

.table-bordered thead:first-child tr:first-child th:first-child, .table-bor=
dered tbody:first-child tr:first-child td:first-child { border-radius: 4px =
0px 0px; }

.table-bordered thead:first-child tr:first-child th:last-child, .table-bord=
ered tbody:first-child tr:first-child td:last-child { border-radius: 0px 4p=
x 0px 0px; }

.table-bordered thead:last-child tr:last-child th:first-child, .table-borde=
red tbody:last-child tr:last-child td:first-child { border-radius: 0px 0px =
0px 4px; }

.table-bordered thead:last-child tr:last-child th:last-child, .table-border=
ed tbody:last-child tr:last-child td:last-child { border-radius: 0px 0px 4p=
x; }

.table-striped tbody tr:nth-child(2n+1) td, .table-striped tbody tr:nth-chi=
ld(2n+1) th { background-color: rgb(249, 249, 249); }

.table tbody tr:hover td, .table tbody tr:hover th { background-color: rgb(=
245, 245, 245); }

table .span1 { float: none; width: 44px; margin-left: 0px; }

table .span2 { float: none; width: 124px; margin-left: 0px; }

table .span3 { float: none; width: 204px; margin-left: 0px; }

table .span4 { float: none; width: 284px; margin-left: 0px; }

table .span5 { float: none; width: 364px; margin-left: 0px; }

table .span6 { float: none; width: 444px; margin-left: 0px; }

table .span7 { float: none; width: 524px; margin-left: 0px; }

table .span8 { float: none; width: 604px; margin-left: 0px; }

table .span9 { float: none; width: 684px; margin-left: 0px; }

table .span10 { float: none; width: 764px; margin-left: 0px; }

table .span11 { float: none; width: 844px; margin-left: 0px; }

table .span12 { float: none; width: 924px; margin-left: 0px; }

[class^=3D"icon-"], [class*=3D" icon-"] { display: inline-block; width: 14p=
x; height: 14px; line-height: 14px; vertical-align: text-top; background-im=
age: url("../img/glyphicons-halflings.png"); background-position: 14px 14px=
; background-repeat: no-repeat; }

[class^=3D"icon-"]:last-child, [class*=3D" icon-"]:last-child { }

.icon-white { background-image: url("../img/glyphicons-halflings-white.png"=
); }

.icon-glass { background-position: 0px 0px; }

.icon-music { background-position: -24px 0px; }

.icon-search { background-position: -48px 0px; }

.icon-envelope { background-position: -72px 0px; }

.icon-heart { background-position: -96px 0px; }

.icon-star { background-position: -120px 0px; }

.icon-star-empty { background-position: -144px 0px; }

.icon-user { background-position: -168px 0px; }

.icon-film { background-position: -192px 0px; }

.icon-th-large { background-position: -216px 0px; }

.icon-th { background-position: -240px 0px; }

.icon-th-list { background-position: -264px 0px; }

.icon-ok { background-position: -288px 0px; }

.icon-remove { background-position: -312px 0px; }

.icon-zoom-in { background-position: -336px 0px; }

.icon-zoom-out { background-position: -360px 0px; }

.icon-off { background-position: -384px 0px; }

.icon-signal { background-position: -408px 0px; }

.icon-cog { background-position: -432px 0px; }

.icon-trash { background-position: -456px 0px; }

.icon-home { background-position: 0px -24px; }

.icon-file { background-position: -24px -24px; }

.icon-time { background-position: -48px -24px; }

.icon-road { background-position: -72px -24px; }

.icon-download-alt { background-position: -96px -24px; }

.icon-download { background-position: -120px -24px; }

.icon-upload { background-position: -144px -24px; }

.icon-inbox { background-position: -168px -24px; }

.icon-play-circle { background-position: -192px -24px; }

.icon-repeat { background-position: -216px -24px; }

.icon-refresh { background-position: -240px -24px; }

.icon-list-alt { background-position: -264px -24px; }

.icon-lock { background-position: -287px -24px; }

.icon-flag { background-position: -312px -24px; }

.icon-headphones { background-position: -336px -24px; }

.icon-volume-off { background-position: -360px -24px; }

.icon-volume-down { background-position: -384px -24px; }

.icon-volume-up { background-position: -408px -24px; }

.icon-qrcode { background-position: -432px -24px; }

.icon-barcode { background-position: -456px -24px; }

.icon-tag { background-position: 0px -48px; }

.icon-tags { background-position: -25px -48px; }

.icon-book { background-position: -48px -48px; }

.icon-bookmark { background-position: -72px -48px; }

.icon-print { background-position: -96px -48px; }

.icon-camera { background-position: -120px -48px; }

.icon-font { background-position: -144px -48px; }

.icon-bold { background-position: -167px -48px; }

.icon-italic { background-position: -192px -48px; }

.icon-text-height { background-position: -216px -48px; }

.icon-text-width { background-position: -240px -48px; }

.icon-align-left { background-position: -264px -48px; }

.icon-align-center { background-position: -288px -48px; }

.icon-align-right { background-position: -312px -48px; }

.icon-align-justify { background-position: -336px -48px; }

.icon-list { background-position: -360px -48px; }

.icon-indent-left { background-position: -384px -48px; }

.icon-indent-right { background-position: -408px -48px; }

.icon-facetime-video { background-position: -432px -48px; }

.icon-picture { background-position: -456px -48px; }

.icon-pencil { background-position: 0px -72px; }

.icon-map-marker { background-position: -24px -72px; }

.icon-adjust { background-position: -48px -72px; }

.icon-tint { background-position: -72px -72px; }

.icon-edit { background-position: -96px -72px; }

.icon-share { background-position: -120px -72px; }

.icon-check { background-position: -144px -72px; }

.icon-move { background-position: -168px -72px; }

.icon-step-backward { background-position: -192px -72px; }

.icon-fast-backward { background-position: -216px -72px; }

.icon-backward { background-position: -240px -72px; }

.icon-play { background-position: -264px -72px; }

.icon-pause { background-position: -288px -72px; }

.icon-stop { background-position: -312px -72px; }

.icon-forward { background-position: -336px -72px; }

.icon-fast-forward { background-position: -360px -72px; }

.icon-step-forward { background-position: -384px -72px; }

.icon-eject { background-position: -408px -72px; }

.icon-chevron-left { background-position: -432px -72px; }

.icon-chevron-right { background-position: -456px -72px; }

.icon-plus-sign { background-position: 0px -96px; }

.icon-minus-sign { background-position: -24px -96px; }

.icon-remove-sign { background-position: -48px -96px; }

.icon-ok-sign { background-position: -72px -96px; }

.icon-question-sign { background-position: -96px -96px; }

.icon-info-sign { background-position: -120px -96px; }

.icon-screenshot { background-position: -144px -96px; }

.icon-remove-circle { background-position: -168px -96px; }

.icon-ok-circle { background-position: -192px -96px; }

.icon-ban-circle { background-position: -216px -96px; }

.icon-arrow-left { background-position: -240px -96px; }

.icon-arrow-right { background-position: -264px -96px; }

.icon-arrow-up { background-position: -289px -96px; }

.icon-arrow-down { background-position: -312px -96px; }

.icon-share-alt { background-position: -336px -96px; }

.icon-resize-full { background-position: -360px -96px; }

.icon-resize-small { background-position: -384px -96px; }

.icon-plus { background-position: -408px -96px; }

.icon-minus { background-position: -433px -96px; }

.icon-asterisk { background-position: -456px -96px; }

.icon-exclamation-sign { background-position: 0px -120px; }

.icon-gift { background-position: -24px -120px; }

.icon-leaf { background-position: -48px -120px; }

.icon-fire { background-position: -72px -120px; }

.icon-eye-open { background-position: -96px -120px; }

.icon-eye-close { background-position: -120px -120px; }

.icon-warning-sign { background-position: -144px -120px; }

.icon-plane { background-position: -168px -120px; }

.icon-calendar { background-position: -192px -120px; }

.icon-random { background-position: -216px -120px; }

.icon-comment { background-position: -240px -120px; }

.icon-magnet { background-position: -264px -120px; }

.icon-chevron-up { background-position: -288px -120px; }

.icon-chevron-down { background-position: -313px -119px; }

.icon-retweet { background-position: -336px -120px; }

.icon-shopping-cart { background-position: -360px -120px; }

.icon-folder-close { background-position: -384px -120px; }

.icon-folder-open { background-position: -408px -120px; }

.icon-resize-vertical { background-position: -432px -119px; }

.icon-resize-horizontal { background-position: -456px -118px; }

.dropdown { position: relative; }

.dropdown-toggle { }

.dropdown-toggle:active, .open .dropdown-toggle { outline: 0px; }

.caret { display: inline-block; width: 0px; height: 0px; text-indent: -9999=
9px; vertical-align: top; border-left: 4px solid transparent; border-right:=
 4px solid transparent; border-top: 4px solid rgb(0, 0, 0); opacity: 0.3; c=
ontent: "=E2=86=93"; }

.dropdown .caret { margin-top: 8px; margin-left: 2px; }

.dropdown:hover .caret, .open.dropdown .caret { opacity: 1; }

.dropdown-menu { position: absolute; top: 100%; left: 0px; z-index: 1000; f=
loat: left; display: none; min-width: 160px; padding: 4px 0px; margin: 0px;=
 list-style: none; background-color: rgb(255, 255, 255); border-color: rgba=
(0, 0, 0, 0.2); border-style: solid; border-width: 1px; border-radius: 0px =
0px 5px 5px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 10px; -webkit-backgroun=
d-clip: padding-box; background-clip: padding-box; }

.dropdown-menu.bottom-up { top: auto; bottom: 100%; margin-bottom: 2px; }

.dropdown-menu .divider { height: 1px; margin: 5px 1px; overflow: hidden; b=
ackground-color: rgb(229, 229, 229); border-bottom: 1px solid rgb(255, 255,=
 255); }

.dropdown-menu a { display: block; padding: 3px 15px; clear: both; font-wei=
ght: normal; line-height: 18px; color: rgb(85, 85, 85); white-space: nowrap=
; }

.dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .ac=
tive > a:hover { color: rgb(255, 255, 255); text-decoration: none; backgrou=
nd-color: rgb(0, 136, 204); }

.dropdown.open { }

.dropdown.open .dropdown-toggle { color: rgb(255, 255, 255); background: rg=
ba(0, 0, 0, 0.298039); }

.dropdown.open .dropdown-menu { display: block; }

.typeahead { margin-top: 2px; border-radius: 4px; }

.well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-co=
lor: rgb(245, 245, 245); border: 1px solid rgba(0, 0, 0, 0.0470588); border=
-radius: 4px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 1px inset; }

.well blockquote { border-color: rgba(0, 0, 0, 0.14902); }

.fade { transition: opacity 0.15s linear; opacity: 0; }

.fade.in { opacity: 1; }

.collapse { transition: height 0.35s ease; position: relative; overflow: hi=
dden; height: 0px; }

.collapse.in { height: auto; }

.close { float: right; font-size: 20px; font-weight: bold; line-height: 18p=
x; color: rgb(0, 0, 0); text-shadow: rgb(255, 255, 255) 0px 1px 0px; opacit=
y: 0.2; }

.close:hover { color: rgb(0, 0, 0); text-decoration: none; opacity: 0.4; cu=
rsor: pointer; }

.btn { display: inline-block; padding: 4px 10px; margin-bottom: 0px; font-s=
ize: 13px; line-height: 18px; color: rgb(51, 51, 51); text-align: center; t=
ext-shadow: rgba(255, 255, 255, 0.74902) 0px 1px 1px; vertical-align: middl=
e; background-color: rgb(245, 245, 245); background-image: -webkit-linear-g=
radient(top, rgb(255, 255, 255), rgb(230, 230, 230)); background-repeat: re=
peat-x; border-width: 1px; border-style: solid; border-color: rgb(204, 204,=
 204) rgb(204, 204, 204) rgb(187, 187, 187); border-image: initial; border-=
radius: 4px; box-shadow: rgba(255, 255, 255, 0.2) 0px 1px 0px inset, rgba(0=
, 0, 0, 0.0470588) 0px 1px 2px; cursor: pointer; }

.btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { backg=
round-color: rgb(230, 230, 230); }

.btn:active, .btn.active { }

.btn:first-child { }

.btn:hover { color: rgb(51, 51, 51); text-decoration: none; background-colo=
r: rgb(230, 230, 230); background-position: 0px -15px; transition: backgrou=
nd-position 0.1s linear; }

.btn:focus { outline: -webkit-focus-ring-color auto 5px; outline-offset: -2=
px; }

.btn.active, .btn:active { background-image: none; box-shadow: rgba(0, 0, 0=
, 0.14902) 0px 2px 4px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; backgro=
und-color: rgb(230, 230, 230); outline: 0px; }

.btn.disabled, .btn[disabled] { cursor: default; background-image: none; ba=
ckground-color: rgb(230, 230, 230); opacity: 0.65; box-shadow: none; }

.btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; borde=
r-radius: 5px; }

.btn-large [class^=3D"icon-"] { margin-top: 1px; }

.btn-small { padding: 5px 9px; font-size: 11px; line-height: 16px; }

.btn-small [class^=3D"icon-"] { margin-top: -1px; }

.btn-mini { padding: 2px 6px; font-size: 11px; line-height: 14px; }

.btn-primary, .btn-primary:hover, .btn-warning, .btn-warning:hover, .btn-da=
nger, .btn-danger:hover, .btn-success, .btn-success:hover, .btn-info, .btn-=
info:hover, .btn-inverse, .btn-inverse:hover { text-shadow: rgba(0, 0, 0, 0=
.247059) 0px -1px 0px; color: rgb(255, 255, 255); }

.btn-primary.active, .btn-warning.active, .btn-danger.active, .btn-success.=
active, .btn-info.active, .btn-dark.active { color: rgba(255, 255, 255, 0.7=
4902); }

.btn-primary { background-color: rgb(0, 109, 204); background-image: -webki=
t-linear-gradient(top, rgb(0, 136, 204), rgb(0, 68, 204)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.=
disabled, .btn-primary[disabled] { background-color: rgb(0, 68, 204); }

.btn-primary:active, .btn-primary.active { }

.btn-warning { background-color: rgb(250, 167, 50); background-image: -webk=
it-linear-gradient(top, rgb(251, 180, 80), rgb(248, 148, 6)); background-re=
peat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980=
392) rgba(0, 0, 0, 0.247059); }

.btn-warning:hover, .btn-warning:active, .btn-warning.active, .btn-warning.=
disabled, .btn-warning[disabled] { background-color: rgb(248, 148, 6); }

.btn-warning:active, .btn-warning.active { }

.btn-danger { background-color: rgb(218, 79, 73); background-image: -webkit=
-linear-gradient(top, rgb(238, 95, 91), rgb(189, 54, 47)); background-repea=
t: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392=
) rgba(0, 0, 0, 0.247059); }

.btn-danger:hover, .btn-danger:active, .btn-danger.active, .btn-danger.disa=
bled, .btn-danger[disabled] { background-color: rgb(189, 54, 47); }

.btn-danger:active, .btn-danger.active { }

.btn-success { background-color: rgb(91, 183, 91); background-image: -webki=
t-linear-gradient(top, rgb(98, 196, 98), rgb(81, 163, 81)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-success:hover, .btn-success:active, .btn-success.active, .btn-success.=
disabled, .btn-success[disabled] { background-color: rgb(81, 163, 81); }

.btn-success:active, .btn-success.active { }

.btn-info { background-color: rgb(73, 175, 205); background-image: -webkit-=
linear-gradient(top, rgb(91, 192, 222), rgb(47, 150, 180)); background-repe=
at: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.098039=
2) rgba(0, 0, 0, 0.247059); }

.btn-info:hover, .btn-info:active, .btn-info.active, .btn-info.disabled, .b=
tn-info[disabled] { background-color: rgb(47, 150, 180); }

.btn-info:active, .btn-info.active { }

.btn-inverse { background-color: rgb(57, 57, 57); background-image: -webkit=
-linear-gradient(top, rgb(69, 69, 69), rgb(38, 38, 38)); background-repeat:=
 repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.0980392) =
rgba(0, 0, 0, 0.247059); }

.btn-inverse:hover, .btn-inverse:active, .btn-inverse.active, .btn-inverse.=
disabled, .btn-inverse[disabled] { background-color: rgb(38, 38, 38); }

.btn-inverse:active, .btn-inverse.active { }

button.btn, input[type=3D"submit"].btn { }

button.btn.large, input[type=3D"submit"].btn.large { }

button.btn.small, input[type=3D"submit"].btn.small { }

.btn-group { position: relative; }

.btn-group::before, .btn-group::after { display: table; content: ""; }

.btn-group::after { clear: both; }

.btn-group:first-child { }

.btn-group + .btn-group { margin-left: 5px; }

.btn-toolbar { margin-top: 9px; margin-bottom: 9px; }

.btn-toolbar .btn-group { display: inline-block; }

.btn-group .btn { position: relative; float: left; margin-left: -1px; borde=
r-radius: 0px; }

.btn-group .btn:first-child { margin-left: 0px; border-top-left-radius: 4px=
; border-bottom-left-radius: 4px; }

.btn-group .btn:last-child, .btn-group .dropdown-toggle { border-top-right-=
radius: 4px; border-bottom-right-radius: 4px; }

.btn-group .btn.large:first-child { margin-left: 0px; border-top-left-radiu=
s: 6px; border-bottom-left-radius: 6px; }

.btn-group .btn.large:last-child, .btn-group .large.dropdown-toggle { borde=
r-top-right-radius: 6px; border-bottom-right-radius: 6px; }

.btn-group .btn:hover, .btn-group .btn:focus, .btn-group .btn:active, .btn-=
group .btn.active { z-index: 2; }

.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle { outl=
ine: 0px; }

.btn-group .dropdown-toggle { padding-left: 8px; padding-right: 8px; box-sh=
adow: rgba(255, 255, 255, 0.121569) 1px 0px 0px inset, rgba(255, 255, 255, =
0.2) 0px 1px 0px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.btn-group.open { }

.btn-group.open .dropdown-menu { display: block; margin-top: 1px; border-ra=
dius: 5px; }

.btn-group.open .dropdown-toggle { background-image: none; box-shadow: rgba=
(0, 0, 0, 0.14902) 0px 1px 6px inset, rgba(0, 0, 0, 0.0470588) 0px 1px 2px;=
 }

.btn .caret { margin-top: 7px; margin-left: 0px; }

.btn:hover .caret, .open.btn-group .caret { opacity: 1; }

.btn-primary .caret, .btn-danger .caret, .btn-info .caret, .btn-success .ca=
ret, .btn-inverse .caret { border-top-color: rgb(255, 255, 255); opacity: 0=
.75; }

.btn-small .caret { margin-top: 4px; }

.alert { padding: 8px 35px 8px 14px; margin-bottom: 18px; text-shadow: rgba=
(255, 255, 255, 0.498039) 0px 1px 0px; background-color: rgb(252, 248, 227)=
; border: 1px solid rgb(251, 238, 213); border-radius: 4px; }

.alert, .alert-heading { color: rgb(192, 152, 83); }

.alert .close { position: relative; top: -2px; right: -21px; line-height: 1=
8px; }

.alert-success { background-color: rgb(223, 240, 216); border-color: rgb(21=
4, 233, 198); }

.alert-success, .alert-success .alert-heading { color: rgb(70, 136, 71); }

.alert-danger, .alert-error { background-color: rgb(242, 222, 222); border-=
color: rgb(238, 211, 215); }

.alert-danger, .alert-error, .alert-danger .alert-heading, .alert-error .al=
ert-heading { color: rgb(185, 74, 72); }

.alert-info { background-color: rgb(217, 237, 247); border-color: rgb(188, =
232, 241); }

.alert-info, .alert-info .alert-heading { color: rgb(58, 135, 173); }

.alert-block { padding-top: 14px; padding-bottom: 14px; }

.alert-block > p, .alert-block > ul { margin-bottom: 0px; }

.alert-block p + p { margin-top: 5px; }

.nav { margin-left: 0px; margin-bottom: 18px; list-style: none; }

.nav > li > a { display: block; }

.nav > li > a:hover { text-decoration: none; background-color: rgb(238, 238=
, 238); }

.nav .nav-header { display: block; padding: 3px 15px; font-size: 11px; font=
-weight: bold; line-height: 18px; color: rgb(153, 153, 153); text-shadow: r=
gba(255, 255, 255, 0.498039) 0px 1px 0px; text-transform: uppercase; }

.nav li + .nav-header { margin-top: 9px; }

.nav-list { padding-left: 14px; padding-right: 14px; margin-bottom: 0px; }

.nav-list > li > a, .nav-list .nav-header { margin-left: -15px; margin-righ=
t: -15px; text-shadow: rgba(255, 255, 255, 0.498039) 0px 1px 0px; }

.nav-list > li > a { padding: 3px 15px; }

.nav-list .active > a, .nav-list .active > a:hover { color: rgb(255, 255, 2=
55); text-shadow: rgba(0, 0, 0, 0.2) 0px -1px 0px; background-color: rgb(0,=
 136, 204); }

.nav-list [class^=3D"icon-"] { margin-right: 2px; }

.nav-tabs, .nav-pills { }

.nav-tabs::before, .nav-pills::before, .nav-tabs::after, .nav-pills::after =
{ display: table; content: ""; }

.nav-tabs::after, .nav-pills::after { clear: both; }

.nav-tabs > li, .nav-pills > li { float: left; }

.nav-tabs > li > a, .nav-pills > li > a { padding-right: 12px; padding-left=
: 12px; margin-right: 2px; line-height: 14px; }

.nav-tabs { border-bottom: 1px solid rgb(221, 221, 221); }

.nav-tabs > li { margin-bottom: -1px; }

.nav-tabs > li > a { padding-top: 9px; padding-bottom: 9px; border: 1px sol=
id transparent; border-radius: 4px 4px 0px 0px; }

.nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(238, 238, 2=
38) rgb(221, 221, 221); }

.nav-tabs > .active > a, .nav-tabs > .active > a:hover { color: rgb(85, 85,=
 85); background-color: rgb(255, 255, 255); border-width: 1px; border-style=
: solid; border-color: rgb(221, 221, 221) rgb(221, 221, 221) transparent; b=
order-image: initial; cursor: default; }

.nav-pills > li > a { padding-top: 8px; padding-bottom: 8px; margin-top: 2p=
x; margin-bottom: 2px; border-radius: 5px; }

.nav-pills .active > a, .nav-pills .active > a:hover { color: rgb(255, 255,=
 255); background-color: rgb(0, 136, 204); }

.nav-stacked > li { float: none; }

.nav-stacked > li > a { margin-right: 0px; }

.nav-tabs.nav-stacked { border-bottom: 0px; }

.nav-tabs.nav-stacked > li > a { border: 1px solid rgb(221, 221, 221); bord=
er-radius: 0px; }

.nav-tabs.nav-stacked > li:first-child > a { border-radius: 4px 4px 0px 0px=
; }

.nav-tabs.nav-stacked > li:last-child > a { border-radius: 0px 0px 4px 4px;=
 }

.nav-tabs.nav-stacked > li > a:hover { border-color: rgb(221, 221, 221); z-=
index: 2; }

.nav-pills.nav-stacked > li > a { margin-bottom: 3px; }

.nav-pills.nav-stacked > li:last-child > a { margin-bottom: 1px; }

.nav-tabs .dropdown-menu, .nav-pills .dropdown-menu { margin-top: 1px; bord=
er-width: 1px; }

.nav-pills .dropdown-menu { border-radius: 4px; }

.nav-tabs .dropdown-toggle .caret, .nav-pills .dropdown-toggle .caret { bor=
der-top-color: rgb(0, 136, 204); margin-top: 6px; }

.nav-tabs .dropdown-toggle:hover .caret, .nav-pills .dropdown-toggle:hover =
.caret { border-top-color: rgb(0, 85, 128); }

.nav-tabs .active .dropdown-toggle .caret, .nav-pills .active .dropdown-tog=
gle .caret { border-top-color: rgb(51, 51, 51); }

.nav > .dropdown.active > a:hover { color: rgb(0, 0, 0); cursor: pointer; }

.nav-tabs .open .dropdown-toggle, .nav-pills .open .dropdown-toggle, .nav >=
 .open.active > a:hover { color: rgb(255, 255, 255); background-color: rgb(=
153, 153, 153); border-color: rgb(153, 153, 153); }

.nav .open .caret, .nav .open.active .caret, .nav .open a:hover .caret { bo=
rder-top-color: rgb(255, 255, 255); opacity: 1; }

.tabs-stacked .open > a:hover { border-color: rgb(153, 153, 153); }

.tabbable { }

.tabbable::before, .tabbable::after { display: table; content: ""; }

.tabbable::after { clear: both; }

.tab-content { overflow: hidden; }

.tabs-below .nav-tabs, .tabs-right .nav-tabs, .tabs-left .nav-tabs { border=
-bottom: 0px; }

.tab-content > .tab-pane, .pill-content > .pill-pane { display: none; }

.tab-content > .active, .pill-content > .active { display: block; }

.tabs-below .nav-tabs { border-top: 1px solid rgb(221, 221, 221); }

.tabs-below .nav-tabs > li { margin-top: -1px; margin-bottom: 0px; }

.tabs-below .nav-tabs > li > a { border-radius: 0px 0px 4px 4px; }

.tabs-below .nav-tabs > li > a:hover { border-bottom-color: transparent; bo=
rder-top-color: rgb(221, 221, 221); }

.tabs-below .nav-tabs .active > a, .tabs-below .nav-tabs .active > a:hover =
{ border-color: transparent rgb(221, 221, 221) rgb(221, 221, 221); }

.tabs-left .nav-tabs > li, .tabs-right .nav-tabs > li { float: none; }

.tabs-left .nav-tabs > li > a, .tabs-right .nav-tabs > li > a { min-width: =
74px; margin-right: 0px; margin-bottom: 3px; }

.tabs-left .nav-tabs { float: left; margin-right: 19px; border-right: 1px s=
olid rgb(221, 221, 221); }

.tabs-left .nav-tabs > li > a { margin-right: -1px; border-radius: 4px 0px =
0px 4px; }

.tabs-left .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb(=
221, 221, 221) rgb(238, 238, 238) rgb(238, 238, 238); }

.tabs-left .nav-tabs .active > a, .tabs-left .nav-tabs .active > a:hover { =
border-color: rgb(221, 221, 221) transparent rgb(221, 221, 221) rgb(221, 22=
1, 221); }

.tabs-right .nav-tabs { float: right; margin-left: 19px; border-left: 1px s=
olid rgb(221, 221, 221); }

.tabs-right .nav-tabs > li > a { margin-left: -1px; border-radius: 0px 4px =
4px 0px; }

.tabs-right .nav-tabs > li > a:hover { border-color: rgb(238, 238, 238) rgb=
(238, 238, 238) rgb(238, 238, 238) rgb(221, 221, 221); }

.tabs-right .nav-tabs .active > a, .tabs-right .nav-tabs .active > a:hover =
{ border-color: rgb(221, 221, 221) rgb(221, 221, 221) rgb(221, 221, 221) tr=
ansparent; }

.navbar { overflow: visible; margin-bottom: 18px; }

.navbar-inner { padding-left: 20px; padding-right: 20px; background-color: =
rgb(44, 44, 44); background-image: -webkit-linear-gradient(top, rgb(51, 51,=
 51), rgb(34, 34, 34)); background-repeat: repeat-x; border-radius: 4px; bo=
x-shadow: rgba(0, 0, 0, 0.247059) 0px 1px 3px, rgba(0, 0, 0, 0.0980392) 0px=
 -1px 0px inset; }

.btn-navbar { display: none; float: right; padding: 7px 10px; margin-left: =
5px; margin-right: 5px; background-color: rgb(44, 44, 44); background-image=
: -webkit-linear-gradient(top, rgb(51, 51, 51), rgb(34, 34, 34)); backgroun=
d-repeat: repeat-x; border-color: rgba(0, 0, 0, 0.0980392) rgba(0, 0, 0, 0.=
0980392) rgba(0, 0, 0, 0.247059); box-shadow: rgba(255, 255, 255, 0.0980392=
) 0px 1px 0px inset, rgba(255, 255, 255, 0.0745098) 0px 1px 0px; }

.btn-navbar:hover, .btn-navbar:active, .btn-navbar.active, .btn-navbar.disa=
bled, .btn-navbar[disabled] { background-color: rgb(34, 34, 34); }

.btn-navbar:active, .btn-navbar.active { }

.btn-navbar .icon-bar { display: block; width: 18px; height: 2px; backgroun=
d-color: rgb(245, 245, 245); border-radius: 1px; box-shadow: rgba(0, 0, 0, =
0.247059) 0px 1px 0px; }

.btn-navbar .icon-bar + .icon-bar { margin-top: 3px; }

.nav-collapse.collapse { height: auto; }

.navbar .brand:hover { text-decoration: none; }

.navbar .brand { float: left; display: block; padding: 8px 20px 12px; margi=
n-left: -20px; font-size: 20px; font-weight: 200; line-height: 1; color: rg=
b(255, 255, 255); }

.navbar .navbar-text { margin-bottom: 0px; line-height: 40px; color: rgb(15=
3, 153, 153); }

.navbar .navbar-text a:hover { color: rgb(255, 255, 255); background-color:=
 transparent; }

.navbar .btn, .navbar .btn-group { margin-top: 5px; }

.navbar .btn-group .btn { margin-top: 0px; }

.navbar-form { margin-bottom: 0px; }

.navbar-form::before, .navbar-form::after { display: table; content: ""; }

.navbar-form::after { clear: both; }

.navbar-form input, .navbar-form select { display: inline-block; margin-top=
: 5px; margin-bottom: 0px; }

.navbar-form .radio, .navbar-form .checkbox { margin-top: 5px; }

.navbar-form input[type=3D"image"], .navbar-form input[type=3D"checkbox"], =
.navbar-form input[type=3D"radio"] { margin-top: 3px; }

.navbar-form .input-append, .navbar-form .input-prepend { margin-top: 6px; =
white-space: nowrap; }

.navbar-form .input-append input, .navbar-form .input-prepend input { margi=
n-top: 0px; }

.navbar-search { position: relative; float: left; margin-top: 6px; margin-b=
ottom: 0px; }

.navbar-search .search-query { padding: 4px 9px; font-family: "Helvetica Ne=
ue", Helvetica, Arial, sans-serif; font-size: 13px; font-weight: normal; li=
ne-height: 1; color: rgba(255, 255, 255, 0.74902); background: rgba(255, 25=
5, 255, 0.298039); border: 1px solid rgb(17, 17, 17); box-shadow: rgba(0, 0=
, 0, 0.0980392) 0px 1px 2px inset, rgba(255, 255, 255, 0.14902) 0px 1px 0px=
; transition: none; }

.navbar-search .search-query::-webkit-input-placeholder { color: rgb(238, 2=
38, 238); }

.navbar-search .search-query:hover { color: rgb(255, 255, 255); background-=
color: rgba(255, 255, 255, 0.498039); }

.navbar-search .search-query:focus, .navbar-search .search-query.focused { =
padding: 5px 10px; color: rgb(51, 51, 51); text-shadow: rgb(255, 255, 255) =
0px 1px 0px; background-color: rgb(255, 255, 255); border: 0px; box-shadow:=
 rgba(0, 0, 0, 0.14902) 0px 0px 3px; outline: 0px; }

.navbar-fixed-top { position: fixed; top: 0px; right: 0px; left: 0px; z-ind=
ex: 1030; }

.navbar-fixed-top .navbar-inner { padding-left: 0px; padding-right: 0px; bo=
rder-radius: 0px; }

.navbar .nav { position: relative; left: 0px; display: block; float: left; =
margin: 0px 10px 0px 0px; }

.navbar .nav.pull-right { float: right; }

.navbar .nav > li { display: block; float: left; }

.navbar .nav > li > a { float: none; padding: 10px 10px 11px; line-height: =
19px; color: rgb(153, 153, 153); text-decoration: none; text-shadow: rgba(0=
, 0, 0, 0.247059) 0px -1px 0px; }

.navbar .nav > li > a:hover { background-color: transparent; color: rgb(255=
, 255, 255); text-decoration: none; }

.navbar .nav .active > a, .navbar .nav .active > a:hover { color: rgb(255, =
255, 255); text-decoration: none; background-color: rgb(34, 34, 34); }

.navbar .divider-vertical { height: 40px; width: 1px; margin: 0px 9px; over=
flow: hidden; background-color: rgb(34, 34, 34); border-right: 1px solid rg=
b(51, 51, 51); }

.navbar .nav.pull-right { margin-left: 10px; margin-right: 0px; }

.navbar .dropdown-menu { margin-top: 1px; border-radius: 4px; }

.navbar .dropdown-menu::before { content: ""; display: inline-block; border=
-left: 7px solid transparent; border-right: 7px solid transparent; border-b=
ottom: 7px solid rgba(0, 0, 0, 0.2); position: absolute; top: -7px; left: 9=
px; }

.navbar .dropdown-menu::after { content: ""; display: inline-block; border-=
left: 6px solid transparent; border-right: 6px solid transparent; border-bo=
ttom: 6px solid rgb(255, 255, 255); position: absolute; top: -6px; left: 10=
px; }

.navbar .nav .dropdown-toggle .caret, .navbar .nav .open.dropdown .caret { =
border-top-color: rgb(255, 255, 255); }

.navbar .nav .active .caret { opacity: 1; }

.navbar .nav .open > .dropdown-toggle, .navbar .nav .active > .dropdown-tog=
gle, .navbar .nav .open.active > .dropdown-toggle { background-color: trans=
parent; }

.navbar .nav .active > .dropdown-toggle:hover { color: rgb(255, 255, 255); =
}

.navbar .nav.pull-right .dropdown-menu { left: auto; right: 0px; }

.navbar .nav.pull-right .dropdown-menu::before { left: auto; right: 12px; }

.navbar .nav.pull-right .dropdown-menu::after { left: auto; right: 13px; }

.breadcrumb { padding: 7px 14px; margin: 0px 0px 18px; background-color: rg=
b(251, 251, 251); background-image: -webkit-linear-gradient(top, rgb(255, 2=
55, 255), rgb(245, 245, 245)); background-repeat: repeat-x; border: 1px sol=
id rgb(221, 221, 221); border-radius: 3px; box-shadow: rgb(255, 255, 255) 0=
px 1px 0px inset; }

.breadcrumb li { display: inline-block; text-shadow: rgb(255, 255, 255) 0px=
 1px 0px; }

.breadcrumb .divider { padding: 0px 5px; color: rgb(153, 153, 153); }

.breadcrumb .active a { color: rgb(51, 51, 51); }

.pagination { height: 36px; margin: 18px 0px; }

.pagination ul { display: inline-block; margin-left: 0px; margin-bottom: 0p=
x; border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.0470588) 0px 1px 2px; }

.pagination li { display: inline; }

.pagination a { float: left; padding: 0px 14px; line-height: 34px; text-dec=
oration: none; border-width: 1px 1px 1px 0px; border-style: solid; border-c=
olor: rgb(221, 221, 221); border-image: initial; }

.pagination a:hover, .pagination .active a { background-color: rgb(245, 245=
, 245); }

.pagination .active a { color: rgb(153, 153, 153); cursor: default; }

.pagination .disabled a, .pagination .disabled a:hover { color: rgb(153, 15=
3, 153); background-color: transparent; cursor: default; }

.pagination li:first-child a { border-left-width: 1px; border-radius: 3px 0=
px 0px 3px; }

.pagination li:last-child a { border-radius: 0px 3px 3px 0px; }

.pagination-centered { text-align: center; }

.pagination-right { text-align: right; }

.pager { margin-left: 0px; margin-bottom: 18px; list-style: none; text-alig=
n: center; }

.pager::before, .pager::after { display: table; content: ""; }

.pager::after { clear: both; }

.pager li { display: inline; }

.pager a { display: inline-block; padding: 5px 14px; background-color: rgb(=
255, 255, 255); border: 1px solid rgb(221, 221, 221); border-radius: 15px; =
}

.pager a:hover { text-decoration: none; background-color: rgb(245, 245, 245=
); }

.pager .next a { float: right; }

.pager .previous a { float: left; }

.modal-open .dropdown-menu { z-index: 2050; }

.modal-open .dropdown.open { }

.modal-open .popover { z-index: 2060; }

.modal-open .tooltip { z-index: 2070; }

.modal-backdrop { position: fixed; top: 0px; right: 0px; bottom: 0px; left:=
 0px; z-index: 1040; background-color: rgb(0, 0, 0); }

.modal-backdrop.fade { opacity: 0; }

.modal-backdrop, .modal-backdrop.fade.in { opacity: 0.8; }

.modal { position: fixed; top: 50%; left: 50%; z-index: 1050; max-height: 5=
00px; overflow: auto; width: 560px; margin: -250px 0px 0px -280px; backgrou=
nd-color: rgb(255, 255, 255); border: 1px solid rgba(0, 0, 0, 0.298039); bo=
rder-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039) 0px 3px 7px; -webkit-=
background-clip: padding-box; background-clip: padding-box; }

.modal.fade { transition: opacity 0.3s linear, top 0.3s ease-out; top: -25%=
; }

.modal.fade.in { top: 50%; }

.modal-header { padding: 9px 15px; border-bottom: 1px solid rgb(238, 238, 2=
38); }

.modal-header .close { margin-top: 2px; }

.modal-body { padding: 15px; }

.modal-body .modal-form { margin-bottom: 0px; }

.modal-footer { padding: 14px 15px 15px; margin-bottom: 0px; background-col=
or: rgb(245, 245, 245); border-top: 1px solid rgb(221, 221, 221); border-ra=
dius: 0px 0px 6px 6px; box-shadow: rgb(255, 255, 255) 0px 1px 0px inset; }

.modal-footer::before, .modal-footer::after { display: table; content: ""; =
}

.modal-footer::after { clear: both; }

.modal-footer .btn { float: right; margin-left: 5px; margin-bottom: 0px; }

.tooltip { position: absolute; z-index: 1020; display: block; visibility: v=
isible; padding: 5px; font-size: 11px; opacity: 0; }

.tooltip.in { opacity: 0.8; }

.tooltip.top { margin-top: -2px; }

.tooltip.right { margin-left: 2px; }

.tooltip.bottom { margin-top: 2px; }

.tooltip.left { margin-left: -2px; }

.tooltip.top .tooltip-arrow { bottom: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-top: 5px solid rgb(0, 0, 0); }

.tooltip.left .tooltip-arrow { top: 50%; right: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-left: 5px solid rgb(0, 0, 0); }

.tooltip.bottom .tooltip-arrow { top: 0px; left: 50%; margin-left: -5px; bo=
rder-left: 5px solid transparent; border-right: 5px solid transparent; bord=
er-bottom: 5px solid rgb(0, 0, 0); }

.tooltip.right .tooltip-arrow { top: 50%; left: 0px; margin-top: -5px; bord=
er-top: 5px solid transparent; border-bottom: 5px solid transparent; border=
-right: 5px solid rgb(0, 0, 0); }

.tooltip-inner { max-width: 200px; padding: 3px 8px; color: rgb(255, 255, 2=
55); text-align: center; text-decoration: none; background-color: rgb(0, 0,=
 0); border-radius: 4px; }

.tooltip-arrow { position: absolute; width: 0px; height: 0px; }

.popover { position: absolute; top: 0px; left: 0px; z-index: 1010; display:=
 none; padding: 5px; }

.popover.top { margin-top: -5px; }

.popover.right { margin-left: 5px; }

.popover.bottom { margin-top: 5px; }

.popover.left { margin-left: -5px; }

.popover.top .arrow { bottom: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-top: =
5px solid rgb(0, 0, 0); }

.popover.right .arrow { top: 50%; left: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-right: =
5px solid rgb(0, 0, 0); }

.popover.bottom .arrow { top: 0px; left: 50%; margin-left: -5px; border-lef=
t: 5px solid transparent; border-right: 5px solid transparent; border-botto=
m: 5px solid rgb(0, 0, 0); }

.popover.left .arrow { top: 50%; right: 0px; margin-top: -5px; border-top: =
5px solid transparent; border-bottom: 5px solid transparent; border-left: 5=
px solid rgb(0, 0, 0); }

.popover .arrow { position: absolute; width: 0px; height: 0px; }

.popover-inner { padding: 3px; width: 280px; overflow: hidden; background: =
rgba(0, 0, 0, 0.8); border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.298039)=
 0px 3px 7px; }

.popover-title { padding: 9px 15px; line-height: 1; background-color: rgb(2=
45, 245, 245); border-bottom: 1px solid rgb(238, 238, 238); border-radius: =
3px 3px 0px 0px; }

.popover-content { padding: 14px; background-color: rgb(255, 255, 255); bor=
der-radius: 0px 0px 3px 3px; -webkit-background-clip: padding-box; backgrou=
nd-clip: padding-box; }

.popover-content p, .popover-content ul, .popover-content ol { margin-botto=
m: 0px; }

.thumbnails { margin-left: -20px; list-style: none; }

.thumbnails::before, .thumbnails::after { display: table; content: ""; }

.thumbnails::after { clear: both; }

.thumbnails > li { float: left; margin: 0px 0px 18px 20px; }

.thumbnail { display: block; padding: 4px; line-height: 1; border: 1px soli=
d rgb(221, 221, 221); border-radius: 4px; box-shadow: rgba(0, 0, 0, 0.07450=
98) 0px 1px 1px; }

a.thumbnail:hover { border-color: rgb(0, 136, 204); box-shadow: rgba(0, 105=
, 214, 0.247059) 0px 1px 4px; }

.thumbnail > img { display: block; max-width: 100%; margin-left: auto; marg=
in-right: auto; }

.thumbnail .caption { padding: 9px; }

.label { padding: 2px 4px 3px; font-size: 11.05px; font-weight: bold; color=
: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; ba=
ckground-color: rgb(153, 153, 153); border-radius: 3px; }

.label:hover { color: rgb(255, 255, 255); text-decoration: none; }

.label-important { background-color: rgb(185, 74, 72); }

.label-important:hover { background-color: rgb(149, 59, 57); }

.label-warning { background-color: rgb(248, 148, 6); }

.label-warning:hover { background-color: rgb(198, 118, 5); }

.label-success { background-color: rgb(70, 136, 71); }

.label-success:hover { background-color: rgb(53, 102, 53); }

.label-info { background-color: rgb(58, 135, 173); }

.label-info:hover { background-color: rgb(45, 105, 135); }

@-webkit-keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

@keyframes progress-bar-stripes {=20
  0% { background-position: 0px 0px; }
  100% { background-position: 40px 0px; }
}

.progress { overflow: hidden; height: 18px; margin-bottom: 18px; background=
-color: rgb(247, 247, 247); background-image: -webkit-linear-gradient(top, =
rgb(245, 245, 245), rgb(249, 249, 249)); background-repeat: repeat-x; box-s=
hadow: rgba(0, 0, 0, 0.0980392) 0px 1px 2px inset; border-radius: 4px; }

.progress .bar { width: 0%; height: 18px; color: rgb(255, 255, 255); font-s=
ize: 12px; text-align: center; text-shadow: rgba(0, 0, 0, 0.247059) 0px -1p=
x 0px; background-color: rgb(14, 144, 210); background-image: -webkit-linea=
r-gradient(top, rgb(20, 155, 223), rgb(4, 128, 190)); background-repeat: re=
peat-x; box-shadow: rgba(0, 0, 0, 0.14902) 0px -1px 0px inset; box-sizing: =
border-box; transition: width 0.6s ease; }

.progress-striped .bar { background-color: rgb(98, 196, 98); background-ima=
ge: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 2=
5%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, =
0.14902) 75%, transparent 75%, transparent); background-size: 40px 40px; }

.progress.active .bar { animation: progress-bar-stripes 2s linear infinite;=
 }

.progress-danger .bar { background-color: rgb(221, 81, 76); background-imag=
e: -webkit-linear-gradient(top, rgb(238, 95, 91), rgb(196, 60, 53)); backgr=
ound-repeat: repeat-x; }

.progress-danger.progress-striped .bar { background-color: rgb(238, 95, 91)=
; background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25=
%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba=
(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-success .bar { background-color: rgb(94, 185, 94); background-ima=
ge: -webkit-linear-gradient(top, rgb(98, 196, 98), rgb(87, 169, 87)); backg=
round-repeat: repeat-x; }

.progress-success.progress-striped .bar { background-color: rgb(98, 196, 98=
); background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 2=
5%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgb=
a(255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.progress-info .bar { background-color: rgb(75, 177, 207); background-image=
: -webkit-linear-gradient(top, rgb(91, 192, 222), rgb(51, 155, 185)); backg=
round-repeat: repeat-x; }

.progress-info.progress-striped .bar { background-color: rgb(91, 192, 222);=
 background-image: linear-gradient(-45deg, rgba(255, 255, 255, 0.14902) 25%=
, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(=
255, 255, 255, 0.14902) 75%, transparent 75%, transparent); }

.accordion { margin-bottom: 18px; }

.accordion-group { margin-bottom: 2px; border: 1px solid rgb(229, 229, 229)=
; border-radius: 4px; }

.accordion-heading { border-bottom: 0px; }

.accordion-heading .accordion-toggle { display: block; padding: 8px 15px; }

.accordion-inner { padding: 9px 15px; border-top: 1px solid rgb(229, 229, 2=
29); }

.carousel { position: relative; margin-bottom: 18px; line-height: 1; }

.carousel-inner { overflow: hidden; width: 100%; position: relative; }

.carousel .item { display: none; position: relative; transition: left 0.6s =
ease-in-out; }

.carousel .item > img { display: block; line-height: 1; }

.carousel .active, .carousel .next, .carousel .prev { display: block; }

.carousel .active { left: 0px; }

.carousel .next, .carousel .prev { position: absolute; top: 0px; width: 100=
%; }

.carousel .next { left: 100%; }

.carousel .prev { left: -100%; }

.carousel .next.left, .carousel .prev.right { left: 0px; }

.carousel .active.left { left: -100%; }

.carousel .active.right { left: 100%; }

.carousel-control { position: absolute; top: 40%; left: 15px; width: 40px; =
height: 40px; margin-top: -20px; font-size: 60px; font-weight: 100; line-he=
ight: 30px; color: rgb(255, 255, 255); text-align: center; background: rgb(=
34, 34, 34); border: 3px solid rgb(255, 255, 255); border-radius: 23px; opa=
city: 0.5; }

.carousel-control.right { left: auto; right: 15px; }

.carousel-control:hover { color: rgb(255, 255, 255); text-decoration: none;=
 opacity: 0.9; }

.carousel-caption { position: absolute; left: 0px; right: 0px; bottom: 0px;=
 padding: 10px 15px 5px; background: rgba(0, 0, 0, 0.74902); }

.carousel-caption h4, .carousel-caption p { color: rgb(255, 255, 255); }

.hero-unit { padding: 20px; margin-top: 10px; margin-bottom: 30px; backgrou=
nd-color: rgb(245, 245, 245); border-radius: 6px; }

.hero-unit h1 { margin-bottom: 0px; font-size: 50px; line-height: 1; letter=
-spacing: -1px; }

.hero-unit p { font-size: 18px; font-weight: 200; line-height: 27px; }

.pull-right { float: right; }

.pull-left { float: left; }

.hide { display: none; }

.show { display: block; }

.invisible { visibility: hidden; }
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/bootstrap-responsive.css

@charset "utf-8";

.clearfix { }

.clearfix::before, .clearfix::after { display: table; content: ""; }

.clearfix::after { clear: both; }

.hidden { display: none; visibility: hidden; }

@media (max-width: 480px) {=20
  .nav-collapse { transform: translate3d(0px, 0px, 0px); }
  .page-header h1 small { display: block; line-height: 18px; }
  input[class*=3D"span"], select[class*=3D"span"], textarea[class*=3D"span"=
], .uneditable-input { display: block; width: 100%; min-height: 28px; box-s=
izing: border-box; }
  .input-prepend input[class*=3D"span"], .input-append input[class*=3D"span=
"] { width: auto; }
  input[type=3D"checkbox"], input[type=3D"radio"] { border: 1px solid rgb(2=
04, 204, 204); }
  .form-horizontal .control-group > label { float: none; width: auto; paddi=
ng-top: 0px; text-align: left; }
  .form-horizontal .controls { margin-left: 0px; }
  .form-horizontal .control-list { padding-top: 0px; }
  .form-horizontal .form-actions { padding-left: 10px; padding-right: 10px;=
 }
  .modal { position: absolute; top: 10px; left: 10px; right: 10px; width: a=
uto; margin: 0px; }
  .modal.fade.in { top: auto; }
  .modal-header .close { padding: 10px; margin: -10px; }
  .carousel-caption { position: static; }
}

@media (max-width: 767px) {=20
  .container { width: auto; padding: 0px 20px; }
  .row-fluid { width: 100%; }
  .row { margin-left: 0px; }
  .row > [class*=3D"span"], .row-fluid > [class*=3D"span"] { float: none; d=
isplay: block; width: auto; margin: 0px; }
}

@media (max-width: 979px) and (min-width: 768px) {=20
  .row { margin-left: -20px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 20px; }
  .span1 { width: 42px; }
  .span2 { width: 104px; }
  .span3 { width: 166px; }
  .span4 { width: 228px; }
  .span5 { width: 290px; }
  .span6 { width: 352px; }
  .span7 { width: 414px; }
  .span8 { width: 476px; }
  .span9 { width: 538px; }
  .span10 { width: 600px; }
  .span11 { width: 662px; }
  .span12, .container { width: 724px; }
  .offset1 { margin-left: 82px; }
  .offset2 { margin-left: 144px; }
  .offset3 { margin-left: 206px; }
  .offset4 { margin-left: 268px; }
  .offset5 { margin-left: 330px; }
  .offset6 { margin-left: 392px; }
  .offset7 { margin-left: 454px; }
  .offset8 { margin-left: 516px; }
  .offset9 { margin-left: 578px; }
  .offset10 { margin-left: 640px; }
  .offset11 { margin-left: 702px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.76243%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.8011%; }
  .row-fluid > .span2 { width: 14.3646%; }
  .row-fluid > .span3 { width: 22.9282%; }
  .row-fluid > .span4 { width: 31.4917%; }
  .row-fluid > .span5 { width: 40.0552%; }
  .row-fluid > .span6 { width: 48.6188%; }
  .row-fluid > .span7 { width: 57.1823%; }
  .row-fluid > .span8 { width: 65.7459%; }
  .row-fluid > .span9 { width: 74.3094%; }
  .row-fluid > .span10 { width: 82.8729%; }
  .row-fluid > .span11 { width: 91.4365%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 32px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 94px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 156px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 218px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 280px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 342px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 404px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 466px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 528px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 590px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 652px; }
  input.span12, textarea.span12, .uneditable-input.span12 { width: 714px; }
}

@media (max-width: 979px) {=20
  body { padding-top: 0px; }
  .navbar-fixed-top { position: static; margin-bottom: 18px; }
  .navbar-fixed-top .navbar-inner { padding: 5px; }
  .navbar .container { width: auto; padding: 0px; }
  .navbar .brand { padding-left: 10px; padding-right: 10px; margin: 0px 0px=
 0px -5px; }
  .navbar .nav-collapse { clear: left; }
  .navbar .nav { float: none; margin: 0px 0px 9px; }
  .navbar .nav > li { float: none; }
  .navbar .nav > li > a { margin-bottom: 2px; }
  .navbar .nav > .divider-vertical { display: none; }
  .navbar .nav .nav-header { color: rgb(153, 153, 153); text-shadow: none; =
}
  .navbar .nav > li > a, .navbar .dropdown-menu a { padding: 6px 15px; font=
-weight: bold; color: rgb(153, 153, 153); border-radius: 3px; }
  .navbar .dropdown-menu li + li a { margin-bottom: 2px; }
  .navbar .nav > li > a:hover, .navbar .dropdown-menu a:hover { background-=
color: rgb(34, 34, 34); }
  .navbar .dropdown-menu { position: static; top: auto; left: auto; float: =
none; display: block; max-width: none; margin: 0px 15px; padding: 0px; back=
ground-color: transparent; border: none; border-radius: 0px; box-shadow: no=
ne; }
  .navbar .dropdown-menu::before, .navbar .dropdown-menu::after { display: =
none; }
  .navbar .dropdown-menu .divider { display: none; }
  .navbar-form, .navbar-search { float: none; padding: 9px 15px; margin: 9p=
x 0px; border-top: 1px solid rgb(34, 34, 34); border-bottom: 1px solid rgb(=
34, 34, 34); box-shadow: rgba(255, 255, 255, 0.0980392) 0px 1px 0px inset, =
rgba(255, 255, 255, 0.0980392) 0px 1px 0px; }
  .navbar .nav.pull-right { float: none; margin-left: 0px; }
  .navbar-static .navbar-inner { padding-left: 10px; padding-right: 10px; }
  .btn-navbar { display: block; }
  .nav-collapse { overflow: hidden; height: 0px; }
}

@media (min-width: 980px) {=20
  .nav-collapse.collapse { height: auto !important; }
}

@media (min-width: 1200px) {=20
  .row { margin-left: -30px; }
  .row::before, .row::after { display: table; content: ""; }
  .row::after { clear: both; }
  [class*=3D"span"] { float: left; margin-left: 30px; }
  .span1 { width: 70px; }
  .span2 { width: 170px; }
  .span3 { width: 270px; }
  .span4 { width: 370px; }
  .span5 { width: 470px; }
  .span6 { width: 570px; }
  .span7 { width: 670px; }
  .span8 { width: 770px; }
  .span9 { width: 870px; }
  .span10 { width: 970px; }
  .span11 { width: 1070px; }
  .span12, .container { width: 1170px; }
  .offset1 { margin-left: 130px; }
  .offset2 { margin-left: 230px; }
  .offset3 { margin-left: 330px; }
  .offset4 { margin-left: 430px; }
  .offset5 { margin-left: 530px; }
  .offset6 { margin-left: 630px; }
  .offset7 { margin-left: 730px; }
  .offset8 { margin-left: 830px; }
  .offset9 { margin-left: 930px; }
  .offset10 { margin-left: 1030px; }
  .offset11 { margin-left: 1130px; }
  .row-fluid { width: 100%; }
  .row-fluid::before, .row-fluid::after { display: table; content: ""; }
  .row-fluid::after { clear: both; }
  .row-fluid > [class*=3D"span"] { float: left; margin-left: 2.5641%; }
  .row-fluid > [class*=3D"span"]:first-child { margin-left: 0px; }
  .row-fluid > .span1 { width: 5.98291%; }
  .row-fluid > .span2 { width: 14.5299%; }
  .row-fluid > .span3 { width: 23.0769%; }
  .row-fluid > .span4 { width: 31.6239%; }
  .row-fluid > .span5 { width: 40.1709%; }
  .row-fluid > .span6 { width: 48.7179%; }
  .row-fluid > .span7 { width: 57.265%; }
  .row-fluid > .span8 { width: 65.812%; }
  .row-fluid > .span9 { width: 74.359%; }
  .row-fluid > .span10 { width: 82.906%; }
  .row-fluid > .span11 { width: 91.453%; }
  .row-fluid > .span12 { width: 100%; }
  input.span1, textarea.span1, .uneditable-input.span1 { width: 60px; }
  input.span2, textarea.span2, .uneditable-input.span2 { width: 160px; }
  input.span3, textarea.span3, .uneditable-input.span3 { width: 260px; }
  input.span4, textarea.span4, .uneditable-input.span4 { width: 360px; }
  input.span5, textarea.span5, .uneditable-input.span5 { width: 460px; }
  input.span6, textarea.span6, .uneditable-input.span6 { width: 560px; }
  input.span7, textarea.span7, .uneditable-input.span7 { width: 660px; }
  input.span8, textarea.span8, .uneditable-input.span8 { width: 760px; }
  input.span9, textarea.span9, .uneditable-input.span9 { width: 860px; }
  input.span10, textarea.span10, .uneditable-input.span10 { width: 960px; }
  input.span11, textarea.span11, .uneditable-input.span11 { width: 1060px; =
}
  input.span12, textarea.span12, .uneditable-input.span12 { width: 1160px; =
}
  .thumbnails { margin-left: -30px; }
  .thumbnails > li { margin-left: 30px; }
}
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/code.css

@charset "utf-8";

.sourceCode span.kw { color: rgb(0, 112, 32); font-weight: bold; }

.sourceCode span.dt { color: rgb(144, 32, 0); }

.sourceCode span.dv { color: rgb(64, 160, 112); }

.sourceCode span.bn { color: rgb(64, 160, 112); }

.sourceCode span.fl { color: rgb(64, 160, 112); }

.sourceCode span.ch { color: rgb(64, 112, 160); }

.sourceCode span.st { color: rgb(64, 112, 160); }

.sourceCode span.co { color: rgb(96, 160, 176); font-style: italic; }

.sourceCode span.al { color: red; font-weight: bold; }

.sourceCode span.fu { color: rgb(6, 40, 126); }

.sourceCode span.re { }

.sourceCode span.er { color: red; font-weight: bold; }
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://aosabook.org/en/500L/theme/css/500L.css

@charset "utf-8";

img.cover { display: block; margin-left: auto; margin-right: auto; padding-=
bottom: 2em; }

body.help { margin-left: auto; margin-right: auto; }

div.box { display: block; margin-left: auto; margin-right: auto; outline: g=
ray solid 1px; padding: 1px 10px; }

div.figure { display: block; margin-left: auto; margin-right: auto; padding=
: 1px 10px; text-align: center; }

div.footnotes { border-top: 1px solid gray; }

div.footnotes h2 { font-style: italic; }

div.sect h2 { font-style: italic; }

div.subsect h3 { font-style: italic; }

div.table { display: block; margin-left: auto; margin-right: auto; padding:=
 1px 10px; text-align: center; }

div.table table { font-size: small; margin-left: auto; margin-right: auto; =
outline: gray solid 1px; }

dl.faq dt { font-style: italic; }

dl.faq dd { margin-bottom: 10px; }

h1.chaptertitle { font-style: italic; font-size: xx-large; }

h1.chapterauthor { font-style: italic; font-size: x-large; }

p.boxtitle { text-align: center; font-style: italic; font-weight: bold; }

p.pullquote { font-style: italic; }

table.bibtable td { text-align: center; }

table.tasks th { vertical-align: top; }

td { vertical-align: top; }

td.center { vertical-align: top; text-align: center; }

th { text-align: left; }

th.center { text-align: center; }

.table-striped tbody tr:nth-child(2n+1) td, table.table-striped tbody tr:nt=
h-child(2n+1) th { background-color: rgb(211, 229, 240); }

.hero-unit { background-color: rgb(200, 217, 227); }

.center { text-align: center; }

* + table { border-style: solid; border-width: 1px; border-color: rgb(231, =
227, 231); }

* + table th, * + table td { border-style: dashed; border-width: 1px; borde=
r-color: rgb(231, 227, 231); padding-left: 3px; padding-right: 3px; }

* + table th { border-style: solid; font-weight: bold; background: url("/im=
ages/noise.png?1330434582") left top repeat scroll rgb(247, 243, 247); }

* + table th[align=3D"left"], * + table td[align=3D"left"] { text-align: le=
ft; }

* + table th[align=3D"right"], * + table td[align=3D"right"] { text-align: =
right; }

* + table th[align=3D"center"], * + table td[align=3D"center"] { text-align=
: center; }
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?V=2.7.1

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
AMbULpkAAAAAxvkyTwAAAADR7uVs
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff?V=2.7.1

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
AAAAAQAAAADG1C6ZAAAAAMb5Mk8AAAAA0e7law==
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?V=2.7.1

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
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?V=2.7.1

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
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/flow-shop-images/example1.png

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
ACCs/H93I7ugha2oOQAAAABJRU5ErkJggg==
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://aosabook.org/en/500L/flow-shop-images/example2.png

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
dzYj7wAAAABJRU5ErkJggg==
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o----
Content-Type: text/html
Content-ID: <frame-96-ab1a3e55-3b45-4b31-87db-7597bfaa44b4@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--xjNGlM0ENiHUP7tB9SC141cTP6QyDZFpQh1k8LVa7o------
